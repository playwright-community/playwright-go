diff --git a/.eslintrc.js b/.eslintrc.js
index ddb2ec8561bb956507cfe140617fac64df2d0e03..8c820a71b208a454eb00d8d3b72e34278a5a47dd 100644
--- a/.eslintrc.js
+++ b/.eslintrc.js
@@ -79,9 +79,6 @@ module.exports = {
         // spacing details
         "space-infix-ops": 2,
         "space-in-parens": [2, "never"],
-        "array-bracket-spacing": [2, "never"],
-        "comma-spacing": [2, { "before": false, "after": true }],
-        "keyword-spacing": [2, "always"],
         "space-before-function-paren": [2, {
             "anonymous": "never",
             "named": "never",
diff --git a/.github/ISSUE_TEMPLATE/vscode-extension.md b/.github/ISSUE_TEMPLATE/vscode-extension.md
deleted file mode 100644
index e623fa9de1ca81466fa27ba2ceaa4a0747e0e30d..0000000000000000000000000000000000000000
--- a/.github/ISSUE_TEMPLATE/vscode-extension.md
+++ /dev/null
@@ -1,26 +0,0 @@
----
-name: VSCode extension bug
-about: Something doesn't work like it should inside the Visual Studio Code extension or you have a feature request? Tell us!
-title: "[BUG]"
-labels: ''
-assignees: ''
-
----
-
-**Context:**
-- Playwright Version: [what Playwright version do you use?]
-- Operating System: [e.g. Windows, Linux or Mac]
-- Node.js version: [e.g. 12.22, 14.6]
-- Visual Studio Code version: [e.g. 1.65]
-- Playwright for VSCode extension version: [e.g. 1.2.3]
-- Browser: [e.g. All, Chromium, Firefox, WebKit]
-- Extra: [any specific details about your environment]
-
-**Code Snippet**
-
-Help us help you! Put down a short code snippet that illustrates your bug and
-that we can run and debug locally. For example:
-
-**Describe the bug**
-
-Add any other details about the problem here.
diff --git a/.github/workflows/cherry_pick_into_release_branch.yml b/.github/workflows/cherry_pick_into_release_branch.yml
deleted file mode 100644
index 0d115b606e06c13c2241f3449221d7c73f5d268e..0000000000000000000000000000000000000000
--- a/.github/workflows/cherry_pick_into_release_branch.yml
+++ /dev/null
@@ -1,78 +0,0 @@
-name: Cherry-pick into release branch
-
-on:
-  workflow_dispatch:
-    inputs:
-      version:
-        type: string
-        description: Version number, e.g. 1.25
-        required: true
-      commit_hashes:
-        type: string
-        description: Comma-separated list of commit hashes to cherry-pick
-        required: true
-
-jobs:
-  roll:
-    runs-on: ubuntu-22.04
-    steps:
-    - name: Validate input version number
-      run: |
-        VERSION="${{ github.event.inputs.version }}"
-        if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+$ ]]; then
-          echo "Version is not a two digit semver version"
-          exit 1
-        fi
-    - uses: actions/checkout@v3
-      with:
-        ref: release-${{ github.event.inputs.version }}
-        fetch-depth: 0
-    - name: Cherry-pick commits
-      id: cherry-pick
-      run: |
-        git config --global user.name github-actions
-        git config --global user.email 41898282+github-actions[bot]@users.noreply.github.com
-        for COMMIT_HASH in $(echo "${{ github.event.inputs.commit_hashes }}" | tr "," "\n"); do
-          git cherry-pick --no-commit "$COMMIT_HASH"
-
-          COMMIT_MESSAGE="$(git show -s --format=%B $COMMIT_HASH | head -n 1)"
-          COMMIT_MESSAGE=$(node -e '
-            const match = /^(.*) (\(#\d+\))$/.exec(process.argv[1]);
-            if (!match) {
-              console.log(process.argv[1]);
-              process.exit(0);
-            }
-            console.log(`chery-pick${match[2]}: ${match[1]}`);
-          ' "$COMMIT_MESSAGE")
-
-          git commit -m "$COMMIT_MESSAGE"
-        done
-        LAST_COMMIT_MESSAGE=$(git show -s --format=%B)
-        echo "::set-output name=PR_TITLE::$LAST_COMMIT_MESSAGE"
-    - name: Prepare branch
-      id: prepare-branch
-      run: |
-        BRANCH_NAME="cherry-pick-${{ github.event.inputs.version }}-$(date +%Y-%m-%d-%H-%M-%S)"
-        echo "::set-output name=BRANCH_NAME::$BRANCH_NAME"
-        git checkout -b "$BRANCH_NAME"
-        git push origin $BRANCH_NAME
-    - name: Create Pull Request
-      uses: actions/github-script@v6
-      with:
-        github-token: ${{ secrets.REPOSITORY_DISPATCH_PERSONAL_ACCESS_TOKEN }}
-        script: |
-          const readableCommitHashesList = '${{ github.event.inputs.commit_hashes }}'.split(',').map(hash => `- ${hash}`).join('\n');
-          const response = await github.rest.pulls.create({
-            owner: 'microsoft',
-            repo: 'playwright',
-            head: 'microsoft:${{ steps.prepare-branch.outputs.BRANCH_NAME }}',
-            base: 'release-${{ github.event.inputs.version }}',
-            title: '${{ steps.cherry-pick.outputs.PR_TITLE }}',
-            body: `This PR cherry-picks the following commits:\n\n${readableCommitHashesList}`,
-          });
-          await github.rest.issues.addLabels({
-            owner: 'microsoft',
-            repo: 'playwright',
-            issue_number: response.data.number,
-            labels: ['CQ1'],
-          });
diff --git a/.github/workflows/infra.yml b/.github/workflows/infra.yml
index e4d4357e021d5c3f7275bd8f03930f04a0ddf1b6..29d3c57386f5c109bd4e40f624405baef9ad89fa 100644
--- a/.github/workflows/infra.yml
+++ b/.github/workflows/infra.yml
@@ -15,8 +15,8 @@ jobs:
     name: "docs & lint"
     runs-on: ubuntu-20.04
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
diff --git a/.github/workflows/pr_check_client_side_changes.yml b/.github/workflows/pr_check_client_side_changes.yml
index 57c96a60ad6e5753db38bfbd50ff2dc3bf18960e..fc8e5cbd1614fdf8c8a47430232153b21ec69dfb 100644
--- a/.github/workflows/pr_check_client_side_changes.yml
+++ b/.github/workflows/pr_check_client_side_changes.yml
@@ -13,11 +13,11 @@ jobs:
     if: github.repository == 'microsoft/playwright'
     steps:
       - name: Create GitHub issue
-        uses: actions/github-script@v6
+        uses: actions/github-script@v4
         with:
           github-token: ${{ secrets.REPOSITORY_DISPATCH_PERSONAL_ACCESS_TOKEN }}
           script: |
-            const { data } = await github.rest.git.getCommit({
+            const { data } = await github.git.getCommit({
               owner: context.repo.owner,
               repo: context.repo.repo,
               commit_sha: context.sha,
@@ -26,7 +26,7 @@ jobs:
 
             const title = '[Ports]: Backport client side changes';
             for (const repo of ['playwright-python', 'playwright-java', 'playwright-dotnet']) {
-              const { data: issuesData } = await github.rest.search.issuesAndPullRequests({
+              const { data: issuesData } = await github.search.issuesAndPullRequests({
                 q: `is:issue is:open repo:microsoft/${repo} in:title "${title}"`
               })
               let issueNumber = null;
@@ -35,7 +35,7 @@ jobs:
                 issueNumber = issuesData.items[0].number
                 issueBody = issuesData.items[0].body
               } else {
-                const { data: issueCreateData } = await github.rest.issues.create({
+                const { data: issueCreateData } = await github.issues.create({
                   owner: context.repo.owner,
                   repo: repo,
                   title,
@@ -46,7 +46,7 @@ jobs:
               }
               const newBody = issueBody.trimEnd() + `
               - [Â ] https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${context.sha} (${commitHeader})`;
-              const data = await github.rest.issues.update({
+              const data = await github.issues.update({
                 owner: context.repo.owner,
                 repo: repo,
                 issue_number: issueNumber,
diff --git a/.github/workflows/publish_canary.yml b/.github/workflows/publish_canary.yml
index 744403f78a3d9a5079dd61474e7f2743405a369c..b390b9ea98a9f5a9b71d01f460eae2f5a87a32d1 100644
--- a/.github/workflows/publish_canary.yml
+++ b/.github/workflows/publish_canary.yml
@@ -14,8 +14,8 @@ jobs:
     runs-on: ubuntu-20.04
     if: github.repository == 'microsoft/playwright'
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
         registry-url: 'https://registry.npmjs.org'
@@ -69,8 +69,8 @@ jobs:
     runs-on: ubuntu-20.04
     if: github.repository == 'microsoft/playwright'
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
diff --git a/.github/workflows/publish_release_docker.yml b/.github/workflows/publish_release_docker.yml
index 02c7c8d41e4cf97d8f8e229bf6e5f35934b78aba..6d13fbcd80a5049ac4c925b5162887f0de22a4b5 100644
--- a/.github/workflows/publish_release_docker.yml
+++ b/.github/workflows/publish_release_docker.yml
@@ -17,8 +17,8 @@ jobs:
     runs-on: ubuntu-20.04
     if: github.repository == 'microsoft/playwright'
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
         registry-url: 'https://registry.npmjs.org'
diff --git a/.github/workflows/publish_release_driver.yml b/.github/workflows/publish_release_driver.yml
index efb897c7b8212f4e4c8da07fd75967b6e604d4c6..bbc7fd60c5acba35b035aeb3a9b6ac5154668bc4 100644
--- a/.github/workflows/publish_release_driver.yml
+++ b/.github/workflows/publish_release_driver.yml
@@ -10,8 +10,8 @@ jobs:
     runs-on: ubuntu-20.04
     if: github.repository == 'microsoft/playwright'
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
         registry-url: 'https://registry.npmjs.org'
diff --git a/.github/workflows/publish_release_npm.yml b/.github/workflows/publish_release_npm.yml
index 0ee6903a266007996d800c1bca3cb98b017f2ee8..0f71a5d837629777b1fe352882b5fe07bb63fc56 100644
--- a/.github/workflows/publish_release_npm.yml
+++ b/.github/workflows/publish_release_npm.yml
@@ -10,8 +10,8 @@ jobs:
     runs-on: ubuntu-20.04
     if: github.repository == 'microsoft/playwright'
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
         registry-url: 'https://registry.npmjs.org'
diff --git a/.github/workflows/publish_release_traceviewer.yml b/.github/workflows/publish_release_traceviewer.yml
index e87368115ecd4f9030d7631c7a413335d55c4de5..bb69f98a29da0362703be6031be3838f616b2641 100644
--- a/.github/workflows/publish_release_traceviewer.yml
+++ b/.github/workflows/publish_release_traceviewer.yml
@@ -10,8 +10,8 @@ jobs:
     runs-on: ubuntu-20.04
     if: github.repository == 'microsoft/playwright'
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
diff --git a/.github/workflows/roll_browser_into_playwright.yml b/.github/workflows/roll_browser_into_playwright.yml
index c8f807df4434d145d16bbf6501e814d600156c73..4fb56fc74ee4805d6b4fa29ad3dbb8369706ccd3 100644
--- a/.github/workflows/roll_browser_into_playwright.yml
+++ b/.github/workflows/roll_browser_into_playwright.yml
@@ -8,8 +8,8 @@ jobs:
   roll:
     runs-on: ubuntu-20.04
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -24,6 +24,7 @@ jobs:
     - name: Prepare branch
       id: prepare-branch
       run: |
+        BASE_POSITION="${{ steps.bump-chromium.outputs.BASE_POSITION }}"
         BRANCH_NAME="roll-into-pw-${{ github.event.client_payload.browser }}/${{ github.event.client_payload.revision }}"
         echo "::set-output name=BRANCH_NAME::$BRANCH_NAME"
         git config --global user.name github-actions
@@ -33,18 +34,18 @@ jobs:
         git commit -m "feat(${{ github.event.client_payload.browser }}): roll to r${{ github.event.client_payload.revision }}"
         git push origin $BRANCH_NAME
     - name: Create Pull Request
-      uses: actions/github-script@v6
+      uses: actions/github-script@v4
       with:
         github-token: ${{ secrets.REPOSITORY_DISPATCH_PERSONAL_ACCESS_TOKEN }}
         script: |
-          const response = await github.rest.pulls.create({
+          const response = await github.pulls.create({
             owner: 'microsoft',
             repo: 'playwright',
             head: 'microsoft:${{ steps.prepare-branch.outputs.BRANCH_NAME }}',
             base: 'main',
             title: 'feat(${{ github.event.client_payload.browser }}): roll to r${{ github.event.client_payload.revision }}',
           });
-          await github.rest.issues.addLabels({
+          await github.issues.addLabels({
             owner: 'microsoft',
             repo: 'playwright',
             issue_number: response.data.number,
diff --git a/.github/workflows/roll_chromium_build.yml b/.github/workflows/roll_chromium_build.yml
new file mode 100644
index 0000000000000000000000000000000000000000..9a766e1197b3195260b5a21becf64221263f3c7b
--- /dev/null
+++ b/.github/workflows/roll_chromium_build.yml
@@ -0,0 +1,43 @@
+name: "PR: bump chromium/BUILD_NUMBER"
+on:
+  workflow_dispatch:
+  schedule:
+    # At 10:00am UTC  (3AM PST) every day to build every new Chromium beta
+    - cron: "0 10 * * *"
+jobs:
+  trigger-chromium-build:
+    name: Trigger Build
+    runs-on: ubuntu-20.04
+    steps:
+      - uses: actions/checkout@v2
+      - run: ./browser_patches/chromium/roll_to_current_beta.sh
+      - name: Prepare branch
+        id: prepare-branch
+        run: |
+          if [[ "$(git status --porcelain)" == "" ]]; then
+              echo "there are no changes";
+              exit 0;
+          fi
+          echo "::set-output name=HAS_CHANGES::1"
+          CURRENT_DATE=$(date +%Y-%b-%d)
+          BRANCH_NAME="roll-chromium/${CURRENT_DATE}"
+          echo "::set-output name=BRANCH_NAME::$BRANCH_NAME"
+          echo "::set-output name=CURRENT_DATE::$CURRENT_DATE"
+          git config --global user.name github-actions
+          git config --global user.email 41898282+github-actions[bot]@users.noreply.github.com
+          git checkout -b "$BRANCH_NAME"
+          git add .
+          git commit -m "browser(chromium): roll to $CURRENT_DATE"
+          git push origin $BRANCH_NAME
+      - name: Create Pull Request
+        if: ${{ steps.prepare-branch.outputs.HAS_CHANGES == '1' }}
+        uses: actions/github-script@v4
+        with:
+          script: |
+            await github.pulls.create({
+              owner: 'microsoft',
+              repo: 'playwright',
+              head: 'microsoft:${{ steps.prepare-branch.outputs.BRANCH_NAME }}',
+              base: 'main',
+              title: 'browser(chromium): roll to ${{ steps.prepare-branch.outputs.CURRENT_DATE }}',
+            });
diff --git a/.github/workflows/roll_chromium_tip_of_treebuild.yml b/.github/workflows/roll_chromium_tip_of_treebuild.yml
new file mode 100644
index 0000000000000000000000000000000000000000..a55d64144415c30b65b8bacd2508b3181362b1f8
--- /dev/null
+++ b/.github/workflows/roll_chromium_tip_of_treebuild.yml
@@ -0,0 +1,43 @@
+name: "PR: bump chromium-tip-of-tree/BUILD_NUMBER"
+on:
+  workflow_dispatch:
+  schedule:
+    # At 10:00am UTC  (3AM PST) every tuesday and thursday to build new Chromium Tip-of-tree
+    - cron: "0 10 * * 2,4"
+jobs:
+  trigger-chromium-build:
+    name: Trigger Build
+    runs-on: ubuntu-20.04
+    steps:
+      - uses: actions/checkout@v2
+      - run: ./browser_patches/chromium-tip-of-tree/roll_to_current_tip_of_tree.sh
+      - name: Prepare branch
+        id: prepare-branch
+        run: |
+          if [[ "$(git status --porcelain)" == "" ]]; then
+              echo "there are no changes";
+              exit 0;
+          fi
+          echo "::set-output name=HAS_CHANGES::1"
+          CURRENT_DATE=$(date +%Y-%b-%d)
+          BRANCH_NAME="roll-tip-of-tree-chromium/${CURRENT_DATE}"
+          echo "::set-output name=BRANCH_NAME::$BRANCH_NAME"
+          echo "::set-output name=CURRENT_DATE::$CURRENT_DATE"
+          git config --global user.name github-actions
+          git config --global user.email 41898282+github-actions[bot]@users.noreply.github.com
+          git checkout -b "$BRANCH_NAME"
+          git add .
+          git commit -m "browser(chromium-tip-of-tree): roll to $CURRENT_DATE"
+          git push origin $BRANCH_NAME
+      - name: Create Pull Request
+        if: ${{ steps.prepare-branch.outputs.HAS_CHANGES == '1' }}
+        uses: actions/github-script@v4
+        with:
+          script: |
+            await github.pulls.create({
+              owner: 'microsoft',
+              repo: 'playwright',
+              head: 'microsoft:${{ steps.prepare-branch.outputs.BRANCH_NAME }}',
+              base: 'main',
+              title: 'browser(chromium-tip-of-tree): roll to ${{ steps.prepare-branch.outputs.CURRENT_DATE }}',
+            });
diff --git a/.github/workflows/roll_driver_nodejs.yml b/.github/workflows/roll_driver_nodejs.yml
index 5397f1f26a5e94d11cd191d0d6aee5e05feaf46d..5a2ade5977edbdf1f5e378536d7206026fcfc86f 100644
--- a/.github/workflows/roll_driver_nodejs.yml
+++ b/.github/workflows/roll_driver_nodejs.yml
@@ -8,10 +8,9 @@ jobs:
   trigger-nodejs-roll:
     name: Trigger Roll
     runs-on: ubuntu-22.04
-    if: github.repository == 'microsoft/playwright'
     steps:
-      - uses: actions/checkout@v3
-      - uses: actions/setup-node@v3
+      - uses: actions/checkout@v2
+      - uses: actions/setup-node@v2
         with:
           node-version: 16
       - run: node utils/build/update-playwright-driver-version.mjs
@@ -33,10 +32,10 @@ jobs:
           git push origin $BRANCH_NAME
       - name: Create Pull Request
         if: ${{ steps.prepare-branch.outputs.HAS_CHANGES == '1' }}
-        uses: actions/github-script@v6
+        uses: actions/github-script@v4
         with:
           script: |
-            await github.rest.pulls.create({
+            await github.pulls.create({
               owner: 'microsoft',
               repo: 'playwright',
               head: 'microsoft:${{ steps.prepare-branch.outputs.BRANCH_NAME }}',
diff --git a/.github/workflows/tests_components.yml b/.github/workflows/tests_components.yml
index a6890c50f79d986348f6abc9c2350452667bd7fc..7567b5bebc9964d2f2777fed994319a90f6314fa 100644
--- a/.github/workflows/tests_components.yml
+++ b/.github/workflows/tests_components.yml
@@ -25,8 +25,8 @@ jobs:
         os: [ubuntu-latest, macos-latest, windows-latest]
     runs-on: ${{ matrix.os }}
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         # Component tests require Node.js 16+ (they require ESM via TS)
         node-version: 16
diff --git a/.github/workflows/tests_electron.yml b/.github/workflows/tests_electron.yml
index 62379e9a237bbda8b38bf64ee45ec1c89cb9f9b3..c278439322c20d637f0c9f2b1df02d52cf8e8984 100644
--- a/.github/workflows/tests_electron.yml
+++ b/.github/workflows/tests_electron.yml
@@ -28,8 +28,8 @@ jobs:
         os: [ubuntu-latest, macos-latest, windows-latest]
     runs-on: ${{ matrix.os }}
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -47,7 +47,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: always() && matrix.os == 'ubuntu-latest'
       with:
         name: electron-linux-test-results
diff --git a/.github/workflows/tests_primary.yml b/.github/workflows/tests_primary.yml
index 5ac22dee082288534411318b11cd9b65fbd6e25e..abfb285e3b846465d4a5d29295fb6d55203e42a7 100644
--- a/.github/workflows/tests_primary.yml
+++ b/.github/workflows/tests_primary.yml
@@ -34,6 +34,9 @@ jobs:
         os: [ubuntu-22.04]
         node-version: [14]
         include:
+          - os: ubuntu-22.04
+            node-version: 12
+            browser: chromium
           - os: ubuntu-22.04
             node-version: 16
             browser: chromium
@@ -42,8 +45,8 @@ jobs:
             browser: chromium
     runs-on: ${{ matrix.os }}
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: ${{ matrix.node-version }}
     - run: npm i -g npm@8
@@ -58,7 +61,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: always()
       with:
         name: ${{ matrix.browser }}-${{ matrix.os }}-test-results
@@ -72,8 +75,8 @@ jobs:
         os: [ubuntu-20.04]
     runs-on: ${{ matrix.os }}
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -89,7 +92,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: always()
       with:
         name: ${{ matrix.browser }}-chromium-tip-of-tree-test-results
@@ -103,6 +106,8 @@ jobs:
         os: [ubuntu-latest, windows-latest, macos-latest]
         node-version: [14]
         include:
+          - os: ubuntu-latest
+            node-version: 12
           - os: ubuntu-latest
             node-version: 16
           - os: ubuntu-latest
@@ -111,8 +116,8 @@ jobs:
             node-version: 16
     runs-on: ${{ matrix.os }}
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: ${{matrix.node-version}}
     - run: npm i -g npm@8
@@ -133,8 +138,8 @@ jobs:
     name: Web Components
     runs-on: ubuntu-latest
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         # Component tests require Node.js 16+ (they require ESM via TS)
         node-version: 16
@@ -167,11 +172,11 @@ jobs:
         - "^14.1.0"  # pre 14.1, zip extraction was broken (https://github.com/microsoft/playwright/issues/1988)
     timeout-minutes: 30
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: ${{ matrix.node_version }}
-    - run: npm i -g npm@8
+    - run: npm i -g npm@8.15.1 # This should NOT be pinned beyond major version once https://github.com/microsoft/playwright/issues/16281 is resolved.
     - run: npm ci
       env:
         DEBUG: pw:install
diff --git a/.github/workflows/tests_secondary.yml b/.github/workflows/tests_secondary.yml
index 136d763cfcb947093eb96d5945d9d5b960bccd1a..08f99d75aab36fa9a282da4044b10a0877a35204 100644
--- a/.github/workflows/tests_secondary.yml
+++ b/.github/workflows/tests_secondary.yml
@@ -29,8 +29,8 @@ jobs:
         os: [ubuntu-18.04, ubuntu-20.04]
     runs-on: ${{ matrix.os }}
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -45,7 +45,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: always()
       with:
         name: ${{ matrix.browser }}-${{ matrix.os }}-test-results
@@ -56,12 +56,12 @@ jobs:
     strategy:
       fail-fast: false
       matrix:
-        os: [macos-11, macos-12]
+        os: [macos-10.15, macos-11, macos-12]
         browser: [chromium, firefox, webkit]
     runs-on: ${{ matrix.os }}
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -75,7 +75,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: ${{ always() }}
       with:
         name: ${{ matrix.browser }}-${{ matrix.os }}-test-results
@@ -89,8 +89,8 @@ jobs:
         browser: [chromium, firefox, webkit]
     runs-on: windows-latest
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -105,7 +105,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: ${{ always() }}
       with:
         name: ${{ matrix.browser }}-win-test-results
@@ -124,11 +124,11 @@ jobs:
           node_version: "^16.0.0"
     timeout-minutes: 30
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: ${{ matrix.node_version }}
-    - run: npm i -g npm@8
+    - run: npm i -g npm@8.15.1 # This should NOT be pinned beyond major version once https://github.com/microsoft/playwright/issues/16281 is resolved.
     - run: npm ci
       env:
         DEBUG: pw:install
@@ -151,8 +151,8 @@ jobs:
         os: [ubuntu-20.04, ubuntu-22.04, macos-latest, windows-latest]
     runs-on: ${{ matrix.os }}
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -169,7 +169,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: always() && startsWith(matrix.os, 'ubuntu-')
       with:
         name: headful-${{ matrix.browser }}-linux-test-results
@@ -183,8 +183,8 @@ jobs:
         mode: [driver, service]
     runs-on: ubuntu-20.04
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -205,7 +205,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: ${{ always() }}
       with:
         name: mode-${{ matrix.mode }}-linux-test-results
@@ -224,8 +224,8 @@ jobs:
             channel: chromium-tip-of-tree
     runs-on: ubuntu-20.04
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -247,8 +247,8 @@ jobs:
     name: "Chrome Stable (Linux)"
     runs-on: ubuntu-20.04
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -263,7 +263,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: ${{ always() }}
       with:
         name: chrome-stable-linux-test-results
@@ -273,8 +273,8 @@ jobs:
     name: "Chrome Stable (Win)"
     runs-on: windows-latest
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -290,7 +290,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: ${{ always() }}
       with:
         name: chrome-stable-win-test-results
@@ -300,8 +300,8 @@ jobs:
     name: "Chrome Stable (Mac)"
     runs-on: macos-latest
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -316,7 +316,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: ${{ always() }}
       with:
         name: chrome-stable-mac-test-results
@@ -330,8 +330,8 @@ jobs:
       matrix:
         os: [ubuntu-18.04, macos-12, windows-latest]
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -351,7 +351,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: always()
       with:
         name: chromium-tot-${{ matrix.os }}-test-results
@@ -365,8 +365,8 @@ jobs:
       matrix:
         os: [ubuntu-latest, macos-latest, windows-latest]
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -386,7 +386,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: always()
       with:
         name: chromium-tot-headed-${{ matrix.os }}-test-results
@@ -396,8 +396,8 @@ jobs:
     name: "Firefox Beta (Linux)"
     runs-on: ubuntu-20.04
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -412,7 +412,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: ${{ always() }}
       with:
         name: firefox-beta-linux-test-results
@@ -422,8 +422,8 @@ jobs:
     name: "Firefox Beta (Win)"
     runs-on: windows-latest
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -439,7 +439,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: ${{ always() }}
       with:
         name: firefox-beta-win-test-results
@@ -449,8 +449,8 @@ jobs:
     name: "Firefox Beta (Mac)"
     runs-on: macos-latest
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -465,7 +465,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: ${{ always() }}
       with:
         name: firefox-beta-mac-test-results
@@ -475,8 +475,8 @@ jobs:
     name: "Edge Stable (Mac)"
     runs-on: macos-latest
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -491,7 +491,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: ${{ always() }}
       with:
         name: msedge-stable-mac-test-results
@@ -502,8 +502,8 @@ jobs:
     name: "Edge Stable (Win)"
     runs-on: windows-latest
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -519,7 +519,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: ${{ always() }}
       with:
         name: edge-stable-win-test-results
@@ -529,8 +529,8 @@ jobs:
     name: "Edge Stable (Linux)"
     runs-on: ubuntu-20.04
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -545,7 +545,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: ${{ always() }}
       with:
         name: edge-stable-linux-test-results
@@ -555,8 +555,8 @@ jobs:
     name: "Edge Beta (Mac)"
     runs-on: macos-latest
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -571,7 +571,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: ${{ always() }}
       with:
         name: msedge-beta-mac-test-results
@@ -581,8 +581,8 @@ jobs:
     name: "Edge Beta (Win)"
     runs-on: windows-latest
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -598,7 +598,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: ${{ always() }}
       with:
         name: edge-beta-win-test-results
@@ -608,8 +608,8 @@ jobs:
     name: "Edge Beta (Linux)"
     runs-on: ubuntu-20.04
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -624,7 +624,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: ${{ always() }}
       with:
         name: edge-beta-linux-test-results
@@ -634,8 +634,8 @@ jobs:
     name: "Edge Dev (Mac)"
     runs-on: macos-latest
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -650,7 +650,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: ${{ always() }}
       with:
         name: msedge-dev-mac-test-results
@@ -660,8 +660,8 @@ jobs:
     name: "Edge Dev (Win)"
     runs-on: windows-latest
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -677,7 +677,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: ${{ always() }}
       with:
         name: edge-dev-win-test-results
@@ -687,8 +687,8 @@ jobs:
     name: "Edge Dev (Linux)"
     runs-on: ubuntu-20.04
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -703,7 +703,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: ${{ always() }}
       with:
         name: edge-dev-linux-test-results
@@ -713,8 +713,8 @@ jobs:
     name: "Chrome Beta (Linux)"
     runs-on: ubuntu-20.04
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -729,7 +729,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: ${{ always() }}
       with:
         name: chrome-beta-linux-test-results
@@ -739,8 +739,8 @@ jobs:
     name: "Chrome Beta (Win)"
     runs-on: windows-latest
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -756,7 +756,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: ${{ always() }}
       with:
         name: chrome-beta-win-test-results
@@ -766,8 +766,8 @@ jobs:
     name: "Chrome Beta (Mac)"
     runs-on: macos-latest
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -782,7 +782,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: ${{ always() }}
       with:
         name: chrome-beta-mac-test-results
@@ -792,8 +792,8 @@ jobs:
     name: "build-playwright-driver"
     runs-on: ubuntu-20.04
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
diff --git a/.github/workflows/tests_stress.yml b/.github/workflows/tests_stress.yml
index 327a7bb3858fd47edad0fefbbee1b0673c198fbe..8d1c0b0efa5e31ee44d203b632459bedf86421b4 100644
--- a/.github/workflows/tests_stress.yml
+++ b/.github/workflows/tests_stress.yml
@@ -26,8 +26,8 @@ jobs:
         os: [ubuntu-latest, macos-latest, windows-latest]
     runs-on: ${{ matrix.os }}
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
     - run: npm i -g npm@8
     - run: npm ci
     - run: npm run build
diff --git a/.github/workflows/tests_video.yml b/.github/workflows/tests_video.yml
index 37ec77716b65bae12c0fac8cc45ef7d210d6ba43..a8fbd0d3e338c3c18c9c1aa43b50021f64670577 100644
--- a/.github/workflows/tests_video.yml
+++ b/.github/workflows/tests_video.yml
@@ -21,8 +21,8 @@ jobs:
         os: [ubuntu-20.04, ubuntu-22.04]
     runs-on: ${{ matrix.os }}
     steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
+    - uses: actions/checkout@v2
+    - uses: actions/setup-node@v2
       with:
         node-version: 14
     - run: npm i -g npm@8
@@ -38,7 +38,7 @@ jobs:
     - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
       if: always()
       shell: bash
-    - uses: actions/upload-artifact@v3
+    - uses: actions/upload-artifact@v1
       if: ${{ always() }}
       with:
         name: video-${{ matrix.browser }}-linux-test-results
diff --git a/.github/workflows/tests_webview2.yml b/.github/workflows/tests_webview2.yml
deleted file mode 100644
index 2a1cc04593513d151daccf50db7eee3f1ddd0a64..0000000000000000000000000000000000000000
--- a/.github/workflows/tests_webview2.yml
+++ /dev/null
@@ -1,49 +0,0 @@
-name: "WebView2 Tests"
-
-on:
-  push:
-    branches:
-      - main
-      - release-*
-  pull_request:
-    paths-ignore:
-      - 'browser_patches/**'
-      - 'docs/**'
-    types: [ labeled ]
-    branches:
-      - main
-      - release-*
-
-env:
-  # Force terminal colors. @see https://www.npmjs.com/package/colors
-  FORCE_COLOR: 1
-  FLAKINESS_CONNECTION_STRING: ${{ secrets.FLAKINESS_CONNECTION_STRING }}
-
-jobs:
-  test_webview2:
-    name: WebView2
-    runs-on: windows-2022
-    steps:
-    - uses: actions/checkout@v3
-    - uses: actions/setup-node@v3
-      with:
-        node-version: 18
-    - uses: actions/setup-dotnet@v2
-      with:
-        dotnet-version: '6.0.x'
-    - run: npm i -g npm@8
-    - run: npm ci
-      env:
-        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
-    - run: npm run build
-    - run: dotnet build
-      working-directory: tests/webview2/webview2-app/
-    - run: npm run webview2test
-    - run: ./utils/upload_flakiness_dashboard.sh ./test-results/report.json
-      if: always()
-      shell: bash
-    - uses: actions/upload-artifact@v1
-      if: always()
-      with:
-        name: webview2-test-results
-        path: test-results
diff --git a/.github/workflows/trigger_build_chromium.yml b/.github/workflows/trigger_build_chromium.yml
new file mode 100644
index 0000000000000000000000000000000000000000..e2b2314624402f45f127bd72f78a23e331030fe4
--- /dev/null
+++ b/.github/workflows/trigger_build_chromium.yml
@@ -0,0 +1,31 @@
+name: "Trigger: Chromium Builds"
+
+on:
+  workflow_dispatch:
+    inputs:
+      ref:
+        description: 'Playwright SHA / ref to build Chromium'
+        required: true
+        default: 'main'
+  push:
+    branches:
+      - main
+      - release-*
+    paths:
+      - browser_patches/chromium/BUILD_NUMBER
+      - .github/workflows/trigger_build_chromium.yml
+
+jobs:
+  trigger:
+    name: "trigger"
+    runs-on: ubuntu-20.04
+    steps:
+    - run: |
+        curl -X POST \
+          -H "Accept: application/vnd.github.v3+json" \
+          -H "Authorization: token ${GH_TOKEN}" \
+          --data "{\"event_type\": \"build_chromium\", \"client_payload\": {\"ref\": \"${GHREF}\"}}" \
+          https://api.github.com/repos/microsoft/playwright-internal/dispatches
+      env:
+        GH_TOKEN: ${{ secrets.REPOSITORY_DISPATCH_PERSONAL_ACCESS_TOKEN }}
+        GHREF: ${{ github.event_name == 'workflow_dispatch' &&  github.event.inputs.ref || github.sha  }}
diff --git a/.github/workflows/trigger_build_chromium_tip_of_tree.yml b/.github/workflows/trigger_build_chromium_tip_of_tree.yml
new file mode 100644
index 0000000000000000000000000000000000000000..bdab67cb4de48da9e7f955df0358a66c442ebda5
--- /dev/null
+++ b/.github/workflows/trigger_build_chromium_tip_of_tree.yml
@@ -0,0 +1,31 @@
+name: "Trigger: Chromium Tip Of Tree Builds"
+
+on:
+  workflow_dispatch:
+    inputs:
+      ref:
+        description: 'Playwright SHA / ref to build Chromium Tip Of Tree'
+        required: true
+        default: 'main'
+  push:
+    branches:
+      - main
+      - release-*
+    paths:
+      - browser_patches/chromium-tip-of-tree/BUILD_NUMBER
+      - .github/workflows/trigger_build_chromium_tip_of_tree.yml
+
+jobs:
+  trigger:
+    name: "trigger"
+    runs-on: ubuntu-20.04
+    steps:
+    - run: |
+        curl -X POST \
+          -H "Accept: application/vnd.github.v3+json" \
+          -H "Authorization: token ${GH_TOKEN}" \
+          --data "{\"event_type\": \"build_chromium_tip_of_tree\", \"client_payload\": {\"ref\": \"${GHREF}\"}}" \
+          https://api.github.com/repos/microsoft/playwright-internal/dispatches
+      env:
+        GH_TOKEN: ${{ secrets.REPOSITORY_DISPATCH_PERSONAL_ACCESS_TOKEN }}
+        GHREF: ${{ github.event_name == 'workflow_dispatch' &&  github.event.inputs.ref || github.sha  }}
diff --git a/.github/workflows/trigger_build_chromium_with_symbols.yml b/.github/workflows/trigger_build_chromium_with_symbols.yml
new file mode 100644
index 0000000000000000000000000000000000000000..8fd161a5a7297852582cce00bdfda3c6562f3584
--- /dev/null
+++ b/.github/workflows/trigger_build_chromium_with_symbols.yml
@@ -0,0 +1,33 @@
+name: "Trigger: Chromium with Symbols Builds"
+
+
+on:
+  workflow_dispatch:
+    inputs:
+      ref:
+        description: 'Playwright SHA / ref to build Chromium With Symbols'
+        required: true
+        default: 'main'
+  release:
+    types: [published]
+  push:
+    branches:
+      - release-*
+    paths:
+      - browser_patches/chromium/BUILD_NUMBER
+      - .github/workflows/trigger_build_chromium_with_symbols.yml
+
+jobs:
+  trigger:
+    name: "trigger"
+    runs-on: ubuntu-20.04
+    steps:
+    - run: |
+        curl -X POST \
+          -H "Accept: application/vnd.github.v3+json" \
+          -H "Authorization: token ${GH_TOKEN}" \
+          --data "{\"event_type\": \"build_chromium_with_symbols\", \"client_payload\": {\"ref\": \"${GHREF}\"}}" \
+          https://api.github.com/repos/microsoft/playwright-internal/dispatches
+      env:
+        GH_TOKEN: ${{ secrets.REPOSITORY_DISPATCH_PERSONAL_ACCESS_TOKEN }}
+        GHREF: ${{ github.event_name == 'workflow_dispatch' &&  github.event.inputs.ref || github.sha  }}
diff --git a/.github/workflows/trigger_build_ffmpeg.yml b/.github/workflows/trigger_build_ffmpeg.yml
new file mode 100644
index 0000000000000000000000000000000000000000..6202c68a16abf8ef6f139bb6e919f3bb486cac60
--- /dev/null
+++ b/.github/workflows/trigger_build_ffmpeg.yml
@@ -0,0 +1,24 @@
+name: "FFMPEG Builder"
+
+on:
+  push:
+    branches:
+      - main
+      - release-*
+    paths:
+      - browser_patches/ffmpeg/BUILD_NUMBER
+      - .github/workflows/trigger_build_ffmpeg.yml
+
+jobs:
+  trigger:
+    name: "trigger"
+    runs-on: ubuntu-20.04
+    steps:
+    - run: |
+        curl -X POST \
+          -H "Accept: application/vnd.github.v3+json" \
+          -H "Authorization: token ${GH_TOKEN}" \
+          --data '{"event_type": "build_ffmpeg"}' \
+          https://api.github.com/repos/microsoft/playwright-internal/dispatches
+      env:
+        GH_TOKEN: ${{ secrets.REPOSITORY_DISPATCH_PERSONAL_ACCESS_TOKEN }}
diff --git a/.github/workflows/trigger_build_firefox.yml b/.github/workflows/trigger_build_firefox.yml
new file mode 100644
index 0000000000000000000000000000000000000000..f0dc3b3daf914e5722db3ae220aa878b7de47b5a
--- /dev/null
+++ b/.github/workflows/trigger_build_firefox.yml
@@ -0,0 +1,24 @@
+name: "Firefox Builder"
+
+on:
+  push:
+    branches:
+      - main
+      - release-*
+    paths:
+      - browser_patches/firefox/BUILD_NUMBER
+      - .github/workflows/trigger_build_firefox.yml
+
+jobs:
+  trigger:
+    name: "trigger"
+    runs-on: ubuntu-20.04
+    steps:
+    - run: |
+        curl -X POST \
+          -H "Accept: application/vnd.github.v3+json" \
+          -H "Authorization: token ${GH_TOKEN}" \
+          --data '{"event_type": "build_firefox"}' \
+          https://api.github.com/repos/microsoft/playwright-internal/dispatches
+      env:
+        GH_TOKEN: ${{ secrets.REPOSITORY_DISPATCH_PERSONAL_ACCESS_TOKEN }}
diff --git a/.github/workflows/trigger_build_firefox_beta.yml b/.github/workflows/trigger_build_firefox_beta.yml
new file mode 100644
index 0000000000000000000000000000000000000000..762dd95e184289aa7a73efbc3a5af4395b6d1f64
--- /dev/null
+++ b/.github/workflows/trigger_build_firefox_beta.yml
@@ -0,0 +1,24 @@
+name: "Firefox Beta Builder"
+
+on:
+  push:
+    branches:
+      - main
+      - release-*
+    paths:
+      - browser_patches/firefox-beta/BUILD_NUMBER
+      - .github/workflows/trigger_build_firefox_beta.yml
+
+jobs:
+  trigger:
+    name: "trigger"
+    runs-on: ubuntu-20.04
+    steps:
+    - run: |
+        curl -X POST \
+          -H "Accept: application/vnd.github.v3+json" \
+          -H "Authorization: token ${GH_TOKEN}" \
+          --data '{"event_type": "build_firefox_beta"}' \
+          https://api.github.com/repos/microsoft/playwright-internal/dispatches
+      env:
+        GH_TOKEN: ${{ secrets.REPOSITORY_DISPATCH_PERSONAL_ACCESS_TOKEN }}
diff --git a/.github/workflows/trigger_build_webkit.yml b/.github/workflows/trigger_build_webkit.yml
new file mode 100644
index 0000000000000000000000000000000000000000..3dd79da40ca4a9644c375219e218840f64d29cf5
--- /dev/null
+++ b/.github/workflows/trigger_build_webkit.yml
@@ -0,0 +1,24 @@
+name: "WebKit Builder"
+
+on:
+  push:
+    branches:
+      - main
+      - release-*
+    paths:
+      - browser_patches/webkit/BUILD_NUMBER
+      - .github/workflows/trigger_build_webkit.yml
+
+jobs:
+  trigger:
+    name: "trigger"
+    runs-on: ubuntu-20.04
+    steps:
+    - run: |
+        curl -X POST \
+          -H "Accept: application/vnd.github.v3+json" \
+          -H "Authorization: token ${GH_TOKEN}" \
+          --data '{"event_type": "build_webkit"}' \
+          https://api.github.com/repos/microsoft/playwright-internal/dispatches
+      env:
+        GH_TOKEN: ${{ secrets.REPOSITORY_DISPATCH_PERSONAL_ACCESS_TOKEN }}
diff --git a/.github/workflows/trigger_build_winldd.yml b/.github/workflows/trigger_build_winldd.yml
new file mode 100644
index 0000000000000000000000000000000000000000..dfb2f4bfeb25bfc5d83e5de0dd853201a1e22ec1
--- /dev/null
+++ b/.github/workflows/trigger_build_winldd.yml
@@ -0,0 +1,24 @@
+name: "WinLDD Builder"
+
+on:
+  push:
+    branches:
+      - main
+      - release-*
+    paths:
+      - browser_patches/winldd/BUILD_NUMBER
+      - .github/workflows/trigger_build_winldd.yml
+
+jobs:
+  trigger:
+    name: "trigger"
+    runs-on: ubuntu-20.04
+    steps:
+    - run: |
+        curl -X POST \
+          -H "Accept: application/vnd.github.v3+json" \
+          -H "Authorization: token ${GH_TOKEN}" \
+          --data '{"event_type": "build_winldd"}' \
+          https://api.github.com/repos/microsoft/playwright-internal/dispatches
+      env:
+        GH_TOKEN: ${{ secrets.REPOSITORY_DISPATCH_PERSONAL_ACCESS_TOKEN }}
diff --git a/README.md b/README.md
index 6a6844087a0f2207efaef13cb1e7cfe0a82f9754..bc8bfaeeefd12a328bbc85cfee71b4580003dd63 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,6 @@
 # ð­ Playwright
 
-[![npm version](https://img.shields.io/npm/v/playwright.svg?style=flat)](https://www.npmjs.com/package/playwright) <!-- GEN:chromium-version-badge -->[![Chromium version](https://img.shields.io/badge/chromium-106.0.5249.30-blue.svg?logo=google-chrome)](https://www.chromium.org/Home)<!-- GEN:stop --> <!-- GEN:firefox-version-badge -->[![Firefox version](https://img.shields.io/badge/firefox-104.0-blue.svg?logo=mozilla-firefox)](https://www.mozilla.org/en-US/firefox/new/)<!-- GEN:stop --> <!-- GEN:webkit-version-badge -->[![WebKit version](https://img.shields.io/badge/webkit-16.0-blue.svg?logo=safari)](https://webkit.org/)<!-- GEN:stop -->
+[![npm version](https://img.shields.io/npm/v/playwright.svg?style=flat)](https://www.npmjs.com/package/playwright) <!-- GEN:chromium-version-badge -->[![Chromium version](https://img.shields.io/badge/chromium-105.0.5195.19-blue.svg?logo=google-chrome)](https://www.chromium.org/Home)<!-- GEN:stop --> <!-- GEN:firefox-version-badge -->[![Firefox version](https://img.shields.io/badge/firefox-103.0-blue.svg?logo=mozilla-firefox)](https://www.mozilla.org/en-US/firefox/new/)<!-- GEN:stop --> <!-- GEN:webkit-version-badge -->[![WebKit version](https://img.shields.io/badge/webkit-16.0-blue.svg?logo=safari)](https://webkit.org/)<!-- GEN:stop -->
 
 ## [Documentation](https://playwright.dev) | [API reference](https://playwright.dev/docs/api/class-playwright)
 
@@ -8,9 +8,9 @@ Playwright is a framework for Web Testing and Automation. It allows testing [Chr
 
 |          | Linux | macOS | Windows |
 |   :---   | :---: | :---: | :---:   |
-| Chromium <!-- GEN:chromium-version -->106.0.5249.30<!-- GEN:stop --> | :white_check_mark: | :white_check_mark: | :white_check_mark: |
+| Chromium <!-- GEN:chromium-version -->105.0.5195.19<!-- GEN:stop --> | :white_check_mark: | :white_check_mark: | :white_check_mark: |
 | WebKit <!-- GEN:webkit-version -->16.0<!-- GEN:stop --> | :white_check_mark: | :white_check_mark: | :white_check_mark: |
-| Firefox <!-- GEN:firefox-version -->104.0<!-- GEN:stop --> | :white_check_mark: | :white_check_mark: | :white_check_mark: |
+| Firefox <!-- GEN:firefox-version -->103.0<!-- GEN:stop --> | :white_check_mark: | :white_check_mark: | :white_check_mark: |
 
 Headless execution is supported for all the browsers on all platforms. Check out [system requirements](https://playwright.dev/docs/library#system-requirements) for details.
 
diff --git a/browser_patches/README.md b/browser_patches/README.md
new file mode 100644
index 0000000000000000000000000000000000000000..e56d6eae3bee4ca8e8a7defd03e0ac8434eadd88
--- /dev/null
+++ b/browser_patches/README.md
@@ -0,0 +1,194 @@
+- [Contributing Browser Patches](#Contributing-browser-patches)
+    * [1. Setting up local browser checkout](#1-setting-up-local-browser-checkout)
+    * [2. Developing a new change](#2-developing-a-new-change)
+    * [3. Exporting your change to playwright repo](#3-exporting-your-change-to-playwright-repo)
+    * [4. Rolling Playwright to the new browser build](#4-rolling-playwright-to-the-new-browser-build)
+- [Cheatsheet](#cheatsheet)
+    * [Firefox](#firefox)
+        - [stack trace](#stack-trace)
+        - [logging](#logging)
+    * [WebKit](#webkit)
+        - [Debugging Windows](#degugging-windows)
+        - [Enable core dumps on Linux](#enable-core-dumps-on-linux)
+
+# Contributing Browser Patches
+
+Firefox and WebKit have additional patches atop to expose necessary capabilities.
+
+Ideally, all these changes should be upstreamed.
+For the time being, it is possible to setup a browser checkout
+and develop from there.
+
+[WebKit upstream status](webkit/upstream_status.md)
+
+## 1. Setting up local browser checkout
+
+From the `playwright` repo, run the following command:
+
+```bash
+$ ./browser_patches/prepare_checkout.sh firefox
+```
+(you can optionally pass "webkit" for a webkit checkout)
+
+This will create a firefox checkout at  `$HOME/firefox`
+
+> **NOTE:** this command downloads GBs of data.
+
+
+This command will:
+- create a `browser_upstream` remote in the checkout
+- create a `playwright-build` branch and apply all playwright-required patches to it.
+
+## 2. Developing a new change
+
+### Creating new branch
+
+You want to create a new branch off the `playwright-build` branch.
+
+Assuming that you're under `$HOME/firefox` checkout:
+
+```bash
+$ git checkout -b my-new-feature playwright-build
+$ # develop my feature on the my-new-feature branch ....
+```
+
+### Building
+
+Each browser has corresponding build script. `--full` options normally takes care of also installing required build dependencies on Linux.
+
+```bash
+./browser_patches/firefox/build.sh --full
+```
+
+### Running tests with local browser build
+
+Playwright test suite may run against local browser build without bundling it.
+```bash
+# Run webkit tests with local webkit build
+WKPATH=./browser_patches/webkit/pw_run.sh npm run wtest
+
+# Run firefox tests with local firefox build on macos
+FFPATH=/tmp/repackaged-firefox/firefox/Nightly.app/Contents/MacOS/firefox npm run ftest
+
+# Run chromium tests with local chromium build on linux
+CRPATH=~/chromium/src/out/Release/chrome npm run ctest
+```
+
+### Flakiness dashboard
+
+You can look at the [flakiness dashboard](http://flaky.aslushnikov.com/) to see recent history of any playwright test.
+
+## 3. Exporting your change to playwright repo
+
+Once you're happy with the work you did in the browser-land, you want to export it to the `playwright` repo.
+
+Assuming that you're in the root of the `playwright` repo and that your browser checkout has your feature branch checked out:
+
+```bash
+$ ./browser_patches/export.sh firefox
+```
+
+This script will:
+- create a new patch and put it to the `./browser_patches/firefox/patches/`
+- update the `./browser_patches/firefox/UPSTREAM_CONFIG.sh` if necessary
+- bump the `./browser_patches/firefox/BUILD_NUMBER` number.
+
+The script will assume Firefox checkout is located at `$HOME/firefox`
+
+Send a PR to the Playwright repo to be reviewed.
+
+## 4. Rolling Playwright to the new browser build
+
+Once the patch has been committed, the build bots will kick in, compile and upload a new browser version to all the platforms. Then you can roll the browser:
+
+```bash
+$ node utils/roll_browser.js chromium 123456
+```
+
+# Cheatsheet
+
+## See browser stdout/stderr
+
+Set the `DEBUG=pw:browser` environment variable to see it.
+
+## Firefox
+
+### Debug build
+
+When compiling set the `FF_DEBUG_BUILD=1` environment variable.
+
+#### Stack trace
+
+In `//mozglue/misc/StackWalk.cpp` add
+
+```c++
+#define MOZ_DEMANGLE_SYMBOLS 1
+```
+
+In native code use
+
+```c++
+#include "mozilla/StackWalk.h"
+// ...
+MozWalkTheStack(stderr);
+```
+
+If the stack trace is still mangled `cat` it to `tools/rb/fix_linux_stack.py`
+
+#### Logging
+
+Upstream documentation: https://firefox-source-docs.mozilla.org/xpcom/logging.html
+
+```bash
+MOZ_LOG=nsHttp:5
+```
+
+Module name is a string passed to the `mozilla::LazyLogModule` of the corresponding component, e.g.:
+
+```c++
+LazyLogModule gHttpLog("nsHttp");
+```
+
+Inside Juggler, you can use `dump('foo\n')`.
+
+## WebKit
+
+#### Logging
+
+Inside Objective-C you can use [NSLog](https://developer.apple.com/documentation/foundation/1395275-nslog).
+
+```
+NSLog(@"Foobar value: %@", value);
+```
+
+#### Debugging windows
+
+In `Source\WTF\wtf\win\DbgHelperWin.cpp` replace
+
+```#if !defined(NDEBUG)``` with ```#if 1```
+
+Then regular `WTFReportBacktrace()` works.
+
+#### Debugging linux
+
+`WTFReportBacktrace()` has been broken since [r283707](https://github.com/WebKit/WebKit/commit/de4ba48c8f229bc45042b543a514f6d88b551a64), see [this comment](https://bugs.webkit.org/show_bug.cgi?id=181916#c96). Revert that change locally to make backtraces work again. Otherwise addr2line -f can still be used to map addresses to function names.
+
+#### Enable core dumps on Linux
+
+```bash
+mkdir -p /tmp/coredumps
+sudo bash -c 'echo "/tmp/coredumps/core-pid_%p.dump" > /proc/sys/kernel/core_pattern'
+ulimit -c unlimited
+```
+
+Then to read stack traces run the following command:
+```bash
+# To find out crashing process name
+file core-pid_29652.dump
+# Point gdb to the local binary of the crashed process and the core file
+gdb $HOME/.cache/ms-playwright/webkit-1292/minibrowser-gtk/WebKitWebProcess core-pid_29652
+# Inside gdb update .so library search path to the local one
+set solib-search-path /home/yurys/.cache/ms-playwright/webkit-1292/minibrowser-gtk
+# Finally print backtrace
+bt
+```
diff --git a/browser_patches/build.sh b/browser_patches/build.sh
new file mode 100755
index 0000000000000000000000000000000000000000..509307f9e074a30c149ce268f52e0df9ce14d40d
--- /dev/null
+++ b/browser_patches/build.sh
@@ -0,0 +1,39 @@
+#!/bin/bash
+set -e
+set +x
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname "$0")"
+
+
+if [[ ($1 == '--help') || ($1 == '-h') ]]; then
+  echo "usage: build.sh [firefox|webkit|firefox-beta]"
+  echo
+  exit 0
+fi
+
+if [[ $# == 0 ]]; then
+  echo "missing browser: 'firefox' or 'webkit'"
+  echo "try './build.sh --help' for more information"
+  exit 1
+fi
+
+CMD="$1"
+shift
+if [[ ("$CMD" == "firefox") || ("$CMD" == "firefox/") || ("$CMD" == "ff") ]]; then
+  bash ./firefox/build.sh "$@"
+elif [[ ("$CMD" == "firefox-beta") || ("$CMD" == "ff-beta") ]]; then
+  bash ./firefox-beta/build.sh "$@"
+elif [[ ("$CMD" == "webkit") || ("$CMD" == "webkit/") || ("$CMD" == "wk") ]]; then
+  bash ./webkit/build.sh "$@"
+elif [[ ("$CMD" == "chromium") || ("$CMD" == "chromium/") || ("$CMD" == "cr") ]]; then
+  bash ./chromium/build.sh "$@"
+elif [[ ("$CMD" == "winldd") ]]; then
+  bash ./winldd/build.sh "$@"
+elif [[ ("$CMD" == "ffmpeg") ]]; then
+  bash ./ffmpeg/build.sh "$@"
+else
+  echo ERROR: unknown browser to build - "$CMD"
+  exit 1
+fi
+
diff --git a/browser_patches/checkout_build_archive_upload.sh b/browser_patches/checkout_build_archive_upload.sh
new file mode 100755
index 0000000000000000000000000000000000000000..a9ff2d523f1ea363b4bea839f8e7601396b57a67
--- /dev/null
+++ b/browser_patches/checkout_build_archive_upload.sh
@@ -0,0 +1,555 @@
+#!/bin/bash
+set -e
+set +x
+set -o pipefail
+
+if [[ ($1 == '--help') || ($1 == '-h') ]]; then
+  echo "usage: $(basename "$0") [firefox-linux|firefox-win64|webkit-gtk|webkit-wpe|webkit-gtk-wpe|webkit-win64|webkit-mac-10.15] [-f|--force]"
+  echo
+  echo "Prepares checkout under browser folder, applies patches, builds, archives, and uploads if build is missing."
+  echo "Script will bail out early if the build for the browser version is already present."
+  echo
+  echo "Pass -f to upload anyway."
+  echo
+  echo "NOTE: This script is safe to run in a cronjob - it aquires a lock so that it does not run twice."
+  exit 0
+fi
+
+if [[ $# == 0 ]]; then
+  echo "missing build flavor!"
+  echo "try './$(basename "$0") --help' for more information"
+  exit 1
+fi
+
+CURRENT_ARCH="$(uname -m)"
+CURRENT_HOST_OS="$(uname)"
+CURRENT_HOST_OS_VERSION=""
+if [[ "$CURRENT_HOST_OS" == "Darwin" ]]; then
+  CURRENT_HOST_OS_VERSION=$(sw_vers -productVersion | grep -o '^\d\+.\d\+')
+elif [[ "$CURRENT_HOST_OS" == "Linux" ]]; then
+  CURRENT_HOST_OS="$(bash -c 'source /etc/os-release && echo $NAME')"
+  CURRENT_HOST_OS_VERSION="$(bash -c 'source /etc/os-release && echo $VERSION_ID')"
+fi
+
+BROWSER_NAME=""
+BROWSER_DISPLAY_NAME=""
+EXTRA_BUILD_ARGS=""
+EXTRA_ARCHIVE_ARGS=""
+BUILD_FLAVOR="$1"
+BUILD_BLOB_NAME=""
+EXPECTED_HOST_OS=""
+EXPECTED_HOST_OS_VERSION=""
+EXPECTED_ARCH="x86_64"
+BUILDS_LIST="EXPECTED_BUILDS"
+
+# ===========================
+#    WINLDD COMPILATION
+# ===========================
+if [[ "$BUILD_FLAVOR" == "winldd-win64" ]]; then
+  BROWSER_NAME="winldd"
+  EXPECTED_HOST_OS="MINGW"
+  BUILD_BLOB_NAME="winldd-win64.zip"
+
+
+# ===========================
+#    FFMPEG COMPILATION
+# ===========================
+elif [[ "$BUILD_FLAVOR" == "ffmpeg-mac" ]]; then
+  BROWSER_NAME="ffmpeg"
+  EXTRA_BUILD_ARGS="--mac --full"
+  EXPECTED_HOST_OS="Darwin"
+  EXPECTED_HOST_OS_VERSION="11.6"
+  BUILD_BLOB_NAME="ffmpeg-mac.zip"
+elif [[ "$BUILD_FLAVOR" == "ffmpeg-mac-arm64" ]]; then
+  BROWSER_NAME="ffmpeg"
+  EXTRA_BUILD_ARGS="--mac --full"
+  EXPECTED_HOST_OS="Darwin"
+  EXPECTED_HOST_OS_VERSION="11.6"
+  EXPECTED_ARCH="arm64"
+  BUILD_BLOB_NAME="ffmpeg-mac-arm64.zip"
+elif [[ "$BUILD_FLAVOR" == "ffmpeg-linux" ]]; then
+  BROWSER_NAME="ffmpeg"
+  EXTRA_BUILD_ARGS="--linux"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="20.04"
+  BUILD_BLOB_NAME="ffmpeg-linux.zip"
+elif [[ "$BUILD_FLAVOR" == "ffmpeg-linux-arm64" ]]; then
+  BROWSER_NAME="ffmpeg"
+  EXTRA_BUILD_ARGS="--cross-compile-linux-arm64"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="20.04"
+  BUILD_BLOB_NAME="ffmpeg-linux-arm64.zip"
+elif [[ "$BUILD_FLAVOR" == "ffmpeg-cross-compile-win64" ]]; then
+  BROWSER_NAME="ffmpeg"
+  EXTRA_BUILD_ARGS="--cross-compile-win64"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="20.04"
+  BUILD_BLOB_NAME="ffmpeg-win64.zip"
+
+# ===========================
+#    CHROMIUM COMPILATION
+# ===========================
+elif [[ "$BUILD_FLAVOR" == "chromium-win64" ]]; then
+  BROWSER_NAME="chromium"
+  EXTRA_BUILD_ARGS="--full --goma"
+  EXPECTED_HOST_OS="MINGW"
+  BUILD_BLOB_NAME="chromium-win64.zip"
+elif [[ "$BUILD_FLAVOR" == "chromium-mac" ]]; then
+  BROWSER_NAME="chromium"
+  EXTRA_BUILD_ARGS="--full --goma"
+  EXPECTED_HOST_OS="Darwin"
+  EXPECTED_HOST_OS_VERSION="12.2"
+  BUILD_BLOB_NAME="chromium-mac.zip"
+elif [[ "$BUILD_FLAVOR" == "chromium-mac-arm64" ]]; then
+  BROWSER_NAME="chromium"
+  EXTRA_BUILD_ARGS="--arm64 --full --goma"
+  EXPECTED_HOST_OS="Darwin"
+  EXPECTED_HOST_OS_VERSION="12.2"
+  BUILD_BLOB_NAME="chromium-mac-arm64.zip"
+elif [[ "$BUILD_FLAVOR" == "chromium-linux" ]]; then
+  BROWSER_NAME="chromium"
+  EXTRA_BUILD_ARGS="--full --goma"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="18.04"
+  BUILD_BLOB_NAME="chromium-linux.zip"
+elif [[ "$BUILD_FLAVOR" == "chromium-linux-arm64" ]]; then
+  BROWSER_NAME="chromium"
+  EXTRA_BUILD_ARGS="--arm64 --full --goma"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="20.04"
+  BUILD_BLOB_NAME="chromium-linux-arm64.zip"
+
+# ===========================
+#    CHROMIUM-TIP-OF-TREE COMPILATION
+# ===========================
+elif [[ "$BUILD_FLAVOR" == "chromium-tip-of-tree-win64" ]]; then
+  BROWSER_NAME="chromium-tip-of-tree"
+  EXTRA_BUILD_ARGS="--full --goma"
+  EXPECTED_HOST_OS="MINGW"
+  BUILD_BLOB_NAME="chromium-tip-of-tree-win64.zip"
+elif [[ "$BUILD_FLAVOR" == "chromium-tip-of-tree-mac" ]]; then
+  BROWSER_NAME="chromium-tip-of-tree"
+  EXTRA_BUILD_ARGS="--full --goma"
+  EXPECTED_HOST_OS="Darwin"
+  EXPECTED_HOST_OS_VERSION="12.2"
+  BUILD_BLOB_NAME="chromium-tip-of-tree-mac.zip"
+elif [[ "$BUILD_FLAVOR" == "chromium-tip-of-tree-mac-arm64" ]]; then
+  BROWSER_NAME="chromium-tip-of-tree"
+  EXTRA_BUILD_ARGS="--arm64 --full --goma"
+  EXPECTED_HOST_OS="Darwin"
+  EXPECTED_HOST_OS_VERSION="12.2"
+  BUILD_BLOB_NAME="chromium-tip-of-tree-mac-arm64.zip"
+elif [[ "$BUILD_FLAVOR" == "chromium-tip-of-tree-linux" ]]; then
+  BROWSER_NAME="chromium-tip-of-tree"
+  EXTRA_BUILD_ARGS="--full --goma"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="18.04"
+  BUILD_BLOB_NAME="chromium-tip-of-tree-linux.zip"
+elif [[ "$BUILD_FLAVOR" == "chromium-tip-of-tree-linux-arm64" ]]; then
+  BROWSER_NAME="chromium-tip-of-tree"
+  EXTRA_BUILD_ARGS="--arm64 --full --goma"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="20.04"
+  BUILD_BLOB_NAME="chromium-tip-of-tree-linux-arm64.zip"
+
+# ===========================
+#    CHROMIUM-WITH-SYMBOLS COMPILATION
+# ===========================
+elif [[ "$BUILD_FLAVOR" == "chromium-with-symbols-win64" ]]; then
+  BROWSER_NAME="chromium"
+  BROWSER_DISPLAY_NAME="chromium-with-symbols"
+  EXTRA_BUILD_ARGS="--symbols --full --goma"
+  EXPECTED_HOST_OS="MINGW"
+  BUILD_BLOB_NAME="chromium-with-symbols-win64.zip"
+  BUILDS_LIST="EXPECTED_BUILDS_WITH_SYMBOLS"
+elif [[ "$BUILD_FLAVOR" == "chromium-with-symbols-mac" ]]; then
+  BROWSER_NAME="chromium"
+  BROWSER_DISPLAY_NAME="chromium-with-symbols"
+  EXTRA_BUILD_ARGS="--symbols --full --goma"
+  EXPECTED_HOST_OS="Darwin"
+  EXPECTED_HOST_OS_VERSION="12.2"
+  BUILD_BLOB_NAME="chromium-with-symbols-mac.zip"
+  BUILDS_LIST="EXPECTED_BUILDS_WITH_SYMBOLS"
+elif [[ "$BUILD_FLAVOR" == "chromium-with-symbols-mac-arm64" ]]; then
+  BROWSER_NAME="chromium"
+  BROWSER_DISPLAY_NAME="chromium-with-symbols"
+  EXTRA_BUILD_ARGS="--arm64 --symbols --full --goma"
+  EXPECTED_HOST_OS="Darwin"
+  EXPECTED_HOST_OS_VERSION="12.2"
+  BUILD_BLOB_NAME="chromium-with-symbols-mac-arm64.zip"
+  BUILDS_LIST="EXPECTED_BUILDS_WITH_SYMBOLS"
+elif [[ "$BUILD_FLAVOR" == "chromium-with-symbols-linux" ]]; then
+  BROWSER_NAME="chromium"
+  BROWSER_DISPLAY_NAME="chromium-with-symbols"
+  EXTRA_BUILD_ARGS="--symbols --full --goma"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="18.04"
+  BUILD_BLOB_NAME="chromium-with-symbols-linux.zip"
+  BUILDS_LIST="EXPECTED_BUILDS_WITH_SYMBOLS"
+elif [[ "$BUILD_FLAVOR" == "chromium-with-symbols-linux-arm64" ]]; then
+  BROWSER_NAME="chromium"
+  BROWSER_DISPLAY_NAME="chromium-with-symbols-arm64"
+  EXTRA_BUILD_ARGS="--arm64 --symbols --full --goma"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="20.04"
+  BUILD_BLOB_NAME="chromium-with-symbols-linux-arm64.zip"
+  BUILDS_LIST="EXPECTED_BUILDS_WITH_SYMBOLS"
+
+# ===========================
+#    FIREFOX COMPILATION
+# ===========================
+elif [[ "$BUILD_FLAVOR" == "firefox-ubuntu-18.04" ]]; then
+  BROWSER_NAME="firefox"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="18.04"
+  BUILD_BLOB_NAME="firefox-ubuntu-18.04.zip"
+elif [[ "$BUILD_FLAVOR" == "firefox-ubuntu-20.04" ]]; then
+  BROWSER_NAME="firefox"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="20.04"
+  BUILD_BLOB_NAME="firefox-ubuntu-20.04.zip"
+elif [[ "$BUILD_FLAVOR" == "firefox-ubuntu-20.04-arm64" ]]; then
+  BROWSER_NAME="firefox"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_ARCH="aarch64"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="20.04"
+  BUILD_BLOB_NAME="firefox-ubuntu-20.04-arm64.zip"
+elif [[ "$BUILD_FLAVOR" == "firefox-ubuntu-22.04" ]]; then
+  BROWSER_NAME="firefox"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="22.04"
+  BUILD_BLOB_NAME="firefox-ubuntu-22.04.zip"
+elif [[ "$BUILD_FLAVOR" == "firefox-ubuntu-22.04-arm64" ]]; then
+  BROWSER_NAME="firefox"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_ARCH="aarch64"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="22.04"
+  BUILD_BLOB_NAME="firefox-ubuntu-22.04-arm64.zip"
+elif [[ "$BUILD_FLAVOR" == "firefox-debian-11" ]]; then
+  BROWSER_NAME="firefox"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_HOST_OS="Debian"
+  EXPECTED_HOST_OS_VERSION="11"
+  BUILD_BLOB_NAME="firefox-debian-11.zip"
+elif [[ "$BUILD_FLAVOR" == "firefox-mac-11" ]]; then
+  BROWSER_NAME="firefox"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_HOST_OS="Darwin"
+  EXPECTED_HOST_OS_VERSION="11.6"
+  EXPECTED_ARCH="x86_64"
+  BUILD_BLOB_NAME="firefox-mac-11.zip"
+elif [[ "$BUILD_FLAVOR" == "firefox-mac-11-arm64" ]]; then
+  BROWSER_NAME="firefox"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_HOST_OS="Darwin"
+  EXPECTED_HOST_OS_VERSION="11.6"
+  EXPECTED_ARCH="arm64"
+  BUILD_BLOB_NAME="firefox-mac-11-arm64.zip"
+elif [[ "$BUILD_FLAVOR" == "firefox-win64" ]]; then
+  BROWSER_NAME="firefox"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_HOST_OS="MINGW"
+  BUILD_BLOB_NAME="firefox-win64.zip"
+  # This is the architecture that is set by mozilla-build bash.
+  EXPECTED_ARCH="i686"
+
+
+# ===============================
+#    FIREFOX-BETA COMPILATION
+# ===============================
+elif [[ "$BUILD_FLAVOR" == "firefox-beta-ubuntu-18.04" ]]; then
+  BROWSER_NAME="firefox-beta"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="18.04"
+  BUILD_BLOB_NAME="firefox-beta-ubuntu-18.04.zip"
+elif [[ "$BUILD_FLAVOR" == "firefox-beta-ubuntu-20.04" ]]; then
+  BROWSER_NAME="firefox-beta"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="20.04"
+  BUILD_BLOB_NAME="firefox-beta-ubuntu-20.04.zip"
+elif [[ "$BUILD_FLAVOR" == "firefox-beta-ubuntu-20.04-arm64" ]]; then
+  BROWSER_NAME="firefox-beta"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_ARCH="aarch64"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="20.04"
+  BUILD_BLOB_NAME="firefox-beta-ubuntu-20.04-arm64.zip"
+elif [[ "$BUILD_FLAVOR" == "firefox-beta-ubuntu-22.04" ]]; then
+  BROWSER_NAME="firefox-beta"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="22.04"
+  BUILD_BLOB_NAME="firefox-beta-ubuntu-22.04.zip"
+elif [[ "$BUILD_FLAVOR" == "firefox-beta-ubuntu-22.04-arm64" ]]; then
+  BROWSER_NAME="firefox-beta"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_ARCH="aarch64"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="22.04"
+  BUILD_BLOB_NAME="firefox-beta-ubuntu-22.04-arm64.zip"
+elif [[ "$BUILD_FLAVOR" == "firefox-beta-debian-11" ]]; then
+  BROWSER_NAME="firefox-beta"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_HOST_OS="Debian"
+  EXPECTED_HOST_OS_VERSION="11"
+  BUILD_BLOB_NAME="firefox-beta-debian-11.zip"
+elif [[ "$BUILD_FLAVOR" == "firefox-beta-mac-11" ]]; then
+  BROWSER_NAME="firefox-beta"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_HOST_OS="Darwin"
+  EXPECTED_HOST_OS_VERSION="11.6"
+  EXPECTED_ARCH="x86_64"
+  BUILD_BLOB_NAME="firefox-beta-mac-11.zip"
+elif [[ "$BUILD_FLAVOR" == "firefox-beta-mac-11-arm64" ]]; then
+  BROWSER_NAME="firefox-beta"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_HOST_OS="Darwin"
+  EXPECTED_HOST_OS_VERSION="11.6"
+  EXPECTED_ARCH="arm64"
+  BUILD_BLOB_NAME="firefox-beta-mac-11-arm64.zip"
+elif [[ "$BUILD_FLAVOR" == "firefox-beta-win64" ]]; then
+  BROWSER_NAME="firefox-beta"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_HOST_OS="MINGW"
+  BUILD_BLOB_NAME="firefox-beta-win64.zip"
+  # This is the architecture that is set by mozilla-build bash.
+  EXPECTED_ARCH="i686"
+
+# ===========================
+#    WEBKIT COMPILATION
+# ===========================
+elif [[ "$BUILD_FLAVOR" == "webkit-debian-11" ]]; then
+  BROWSER_NAME="webkit"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_HOST_OS="Debian"
+  EXPECTED_HOST_OS_VERSION="11"
+  BUILD_BLOB_NAME="webkit-debian-11.zip"
+elif [[ "$BUILD_FLAVOR" == "webkit-universal" ]]; then
+  BROWSER_NAME="webkit"
+  EXTRA_BUILD_ARGS="--full --universal"
+  EXTRA_ARCHIVE_ARGS="--universal"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="20.04"
+  BUILD_BLOB_NAME="webkit-linux-universal.zip"
+elif [[ "$BUILD_FLAVOR" == "webkit-ubuntu-18.04" ]]; then
+  BROWSER_NAME="webkit"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="18.04"
+  BUILD_BLOB_NAME="webkit-ubuntu-18.04.zip"
+elif [[ "$BUILD_FLAVOR" == "webkit-ubuntu-20.04" ]]; then
+  BROWSER_NAME="webkit"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="20.04"
+  BUILD_BLOB_NAME="webkit-ubuntu-20.04.zip"
+elif [[ "$BUILD_FLAVOR" == "webkit-ubuntu-20.04-arm64" ]]; then
+  BROWSER_NAME="webkit"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="20.04"
+  EXPECTED_ARCH="aarch64"
+  BUILD_BLOB_NAME="webkit-ubuntu-20.04-arm64.zip"
+elif [[ "$BUILD_FLAVOR" == "webkit-ubuntu-22.04" ]]; then
+  BROWSER_NAME="webkit"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="22.04"
+  BUILD_BLOB_NAME="webkit-ubuntu-22.04.zip"
+elif [[ "$BUILD_FLAVOR" == "webkit-ubuntu-22.04-arm64" ]]; then
+  BROWSER_NAME="webkit"
+  EXTRA_BUILD_ARGS="--full"
+  EXPECTED_HOST_OS="Ubuntu"
+  EXPECTED_HOST_OS_VERSION="22.04"
+  EXPECTED_ARCH="aarch64"
+  BUILD_BLOB_NAME="webkit-ubuntu-22.04-arm64.zip"
+elif [[ "$BUILD_FLAVOR" == "webkit-win64" ]]; then
+  BROWSER_NAME="webkit"
+  EXPECTED_HOST_OS="MINGW"
+  BUILD_BLOB_NAME="webkit-win64.zip"
+elif [[ "$BUILD_FLAVOR" == "webkit-mac-10.15" ]]; then
+  BROWSER_NAME="webkit"
+  EXPECTED_HOST_OS="Darwin"
+  EXPECTED_HOST_OS_VERSION="10.15"
+  BUILD_BLOB_NAME="webkit-mac-10.15.zip"
+elif [[ "$BUILD_FLAVOR" == "webkit-mac-12" ]]; then
+  BROWSER_NAME="webkit"
+  EXPECTED_HOST_OS="Darwin"
+  EXPECTED_HOST_OS_VERSION="12.2"
+  BUILD_BLOB_NAME="webkit-mac-12.zip"
+elif [[ "$BUILD_FLAVOR" == "webkit-mac-12-arm64" ]]; then
+  BROWSER_NAME="webkit"
+  EXPECTED_HOST_OS="Darwin"
+  EXPECTED_HOST_OS_VERSION="12.2"
+  EXPECTED_ARCH="arm64"
+  BUILD_BLOB_NAME="webkit-mac-12-arm64.zip"
+elif [[ "$BUILD_FLAVOR" == "webkit-mac-11" ]]; then
+  BROWSER_NAME="webkit"
+  EXPECTED_HOST_OS="Darwin"
+  EXPECTED_HOST_OS_VERSION="11.6"
+  BUILD_BLOB_NAME="webkit-mac-11.zip"
+elif [[ "$BUILD_FLAVOR" == "webkit-mac-11-arm64" ]]; then
+  BROWSER_NAME="webkit"
+  EXPECTED_HOST_OS="Darwin"
+  EXPECTED_HOST_OS_VERSION="11.6"
+  EXPECTED_ARCH="arm64"
+  BUILD_BLOB_NAME="webkit-mac-11-arm64.zip"
+
+
+# ===========================
+#    Unknown input
+# ===========================
+else
+  echo ERROR: unknown build flavor - "$BUILD_FLAVOR"
+  exit 1
+fi
+
+if [[ -z "$BROWSER_DISPLAY_NAME" ]]; then
+  BROWSER_DISPLAY_NAME="${BROWSER_NAME}"
+fi
+
+if [[ "$CURRENT_ARCH" != "$EXPECTED_ARCH" ]]; then
+  echo "ERROR: cannot build $BUILD_FLAVOR"
+  echo "  -- expected arch: $EXPECTED_ARCH"
+  echo "  --  current arch: $CURRENT_ARCH"
+  exit 1
+fi
+
+if [[ "$CURRENT_HOST_OS" != $EXPECTED_HOST_OS* ]]; then
+  echo "ERROR: cannot build $BUILD_FLAVOR"
+  echo "  -- expected OS: $EXPECTED_HOST_OS"
+  echo "  --  current OS: $CURRENT_HOST_OS"
+  exit 1
+fi
+
+if [[ "$CURRENT_HOST_OS_VERSION" != "$EXPECTED_HOST_OS_VERSION" ]]; then
+  echo "ERROR: cannot build $BUILD_FLAVOR"
+  echo "  -- expected OS Version: $EXPECTED_HOST_OS_VERSION"
+  echo "  --  current OS Version: $CURRENT_HOST_OS_VERSION"
+  exit 1
+fi
+
+if [[ $(uname) == MINGW* || "$(uname)" == MSYS* ]]; then
+  ZIP_PATH="$PWD/archive-$BROWSER_NAME.zip"
+  LOG_PATH="$PWD/log-$BROWSER_NAME.zip"
+else
+  ZIP_PATH="/tmp/archive-$BROWSER_NAME.zip"
+  LOG_PATH="/tmp/log-$BROWSER_NAME.zip"
+fi
+
+if [[ -f "$ZIP_PATH" ]]; then
+  echo "Archive $ZIP_PATH already exists - remove and re-run the script."
+  exit 1
+fi
+trap "rm -rf ${ZIP_PATH}; rm -rf ${LOG_PATH}; cd $(pwd -P);" INT TERM EXIT
+cd "$(dirname "$0")"
+BUILD_NUMBER=$(head -1 ./$BROWSER_NAME/BUILD_NUMBER)
+BUILD_BLOB_PATH="${BROWSER_NAME}/${BUILD_NUMBER}/${BUILD_BLOB_NAME}"
+LOG_BLOB_NAME="${BUILD_BLOB_NAME%.zip}.log.gz"
+LOG_BLOB_PATH="${BROWSER_NAME}/${BUILD_NUMBER}/${LOG_BLOB_NAME}"
+
+# pull from upstream and check if a new build has to be uploaded.
+if ! [[ ($2 == '-f') || ($2 == '--force') ]]; then
+  if ./upload.sh "${BUILD_BLOB_PATH}" --check; then
+    echo "Build is already uploaded - no changes."
+    exit 0
+  fi
+else
+  echo "Force-rebuilding the build."
+fi
+
+function generate_and_upload_browser_build {
+  echo "-- preparing checkout"
+  if ! ./prepare_checkout.sh $BROWSER_NAME; then
+    return 20
+  fi
+
+  echo "-- cleaning"
+  if ! ./$BROWSER_NAME/clean.sh; then
+    return 21
+  fi
+
+  echo "-- building"
+  if ! ./$BROWSER_NAME/build.sh $EXTRA_BUILD_ARGS; then
+    return 22
+  fi
+
+  echo "-- archiving to $ZIP_PATH"
+  if ! ./$BROWSER_NAME/archive.sh "$ZIP_PATH" $EXTRA_ARCHIVE_ARGS; then
+    return 23
+  fi
+
+  echo "-- uploading"
+  if ! ./upload.sh "$BUILD_BLOB_PATH" "$ZIP_PATH"; then
+    return 24
+  fi
+  return 0
+}
+
+function create_roll_into_playwright_pr {
+  curl -X POST \
+  -H "Accept: application/vnd.github.v3+json" \
+  -H "Authorization: token ${GH_TOKEN}" \
+  --data '{"event_type": "roll_into_pw", "client_payload": {"browser": "'"$1"'", "revision": "'"$2"'"}}' \
+  https://api.github.com/repos/microsoft/playwright/dispatches
+}
+
+BUILD_ALIAS="$BUILD_FLAVOR r$BUILD_NUMBER"
+node send_telegram_message.js "$BUILD_ALIAS -- started"
+
+if generate_and_upload_browser_build 2>&1 | ./sanitize_and_compress_log.js $LOG_PATH; then
+  # Report successful build. Note: MINGW might not have `du` command.
+  UPLOAD_SIZE=""
+  if command -v du >/dev/null && command -v awk >/dev/null; then
+    UPLOAD_SIZE="$(du -h "$ZIP_PATH" | awk '{print $1}') "
+  fi
+  node send_telegram_message.js "$BUILD_ALIAS -- ${UPLOAD_SIZE}uploaded"
+
+  # Check if we uploaded the last build.
+  (
+    for i in $(cat "${BROWSER_NAME}/${BUILDS_LIST}"); do
+      URL="https://playwright2.blob.core.windows.net/builds/${BROWSER_NAME}/${BUILD_NUMBER}/$i"
+      if ! [[ $(curl -s -L -I "$URL" | head -1 | cut -f2 -d' ') == 200 ]]; then
+        # Exit subshell
+        echo "Missing build at ${URL}"
+        exit
+      fi
+    done;
+    LAST_COMMIT_MESSAGE=$(git log --format=%s -n 1 HEAD -- "./${BROWSER_NAME}/BUILD_NUMBER")
+    node send_telegram_message.js "<b>${BROWSER_DISPLAY_NAME} r${BUILD_NUMBER} COMPLETE! â</b> ${LAST_COMMIT_MESSAGE}"
+    if [[ "${BROWSER_DISPLAY_NAME}" != "chromium-with-symbols" ]]; then
+      create_roll_into_playwright_pr $BROWSER_NAME $BUILD_NUMBER
+    fi
+  )
+else
+  RESULT_CODE="$?"
+  if (( RESULT_CODE == 10 )); then
+    FAILED_STEP="./download_gtk_and_wpe_and_zip_together.sh"
+  elif (( RESULT_CODE == 11 )); then
+    FAILED_STEP="./upload.sh"
+  elif (( RESULT_CODE == 20 )); then
+    FAILED_STEP="./prepare_checkout.sh"
+  elif (( RESULT_CODE == 21 )); then
+    FAILED_STEP="./clean.sh"
+  elif (( RESULT_CODE == 22 )); then
+    FAILED_STEP="./build.sh"
+  elif (( RESULT_CODE == 23 )); then
+    FAILED_STEP="./archive.sh"
+  elif (( RESULT_CODE == 24 )); then
+    FAILED_STEP="./upload.sh"
+  else
+    FAILED_STEP="<unknown step>"
+  fi
+  # Upload logs only in case of failure and report failure.
+  ./upload.sh "${LOG_BLOB_PATH}" ${LOG_PATH} || true
+  node send_telegram_message.js "$BUILD_ALIAS -- ${FAILED_STEP} failed! â <a href='https://playwright.azureedge.net/builds/${LOG_BLOB_PATH}'>${LOG_BLOB_NAME}</a> -- <a href='$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID'>GitHub Action Logs</a>"
+  exit 1
+fi
+
diff --git a/browser_patches/chromium-tip-of-tree/BUILD_NUMBER b/browser_patches/chromium-tip-of-tree/BUILD_NUMBER
new file mode 100644
index 0000000000000000000000000000000000000000..4ac943d1ce1307fc887a7e9bc3b5e7b7f0078115
--- /dev/null
+++ b/browser_patches/chromium-tip-of-tree/BUILD_NUMBER
@@ -0,0 +1 @@
+1032
diff --git a/browser_patches/chromium-tip-of-tree/EXPECTED_BUILDS b/browser_patches/chromium-tip-of-tree/EXPECTED_BUILDS
new file mode 100644
index 0000000000000000000000000000000000000000..2575021ad4c5c3e9720f80038cbd68e7c2e3af72
--- /dev/null
+++ b/browser_patches/chromium-tip-of-tree/EXPECTED_BUILDS
@@ -0,0 +1,5 @@
+chromium-tip-of-tree-mac.zip
+chromium-tip-of-tree-mac-arm64.zip
+chromium-tip-of-tree-linux.zip
+chromium-tip-of-tree-linux-arm64.zip
+chromium-tip-of-tree-win64.zip
diff --git a/browser_patches/chromium-tip-of-tree/UPSTREAM_CONFIG.sh b/browser_patches/chromium-tip-of-tree/UPSTREAM_CONFIG.sh
new file mode 100644
index 0000000000000000000000000000000000000000..dea3f87f25a5ee682d13591ba80adf3d68a0ca2d
--- /dev/null
+++ b/browser_patches/chromium-tip-of-tree/UPSTREAM_CONFIG.sh
@@ -0,0 +1,3 @@
+#      CURRENT_VERSION: 106.0.5228.0
+# BRANCH_BASE_POSITION: 1032780
+BRANCH_COMMIT="24425f2443dc0f24b5b4e87013ccc6cadc04fcf8"
diff --git a/browser_patches/chromium-tip-of-tree/archive.sh b/browser_patches/chromium-tip-of-tree/archive.sh
new file mode 100755
index 0000000000000000000000000000000000000000..3e260dfb0af71b9176812a6441610b4f73c4ae4f
--- /dev/null
+++ b/browser_patches/chromium-tip-of-tree/archive.sh
@@ -0,0 +1,9 @@
+#!/bin/bash
+set -e
+set +x
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname "$0")"
+SCRIPT_FOLDER=$(pwd -P)
+
+bash "../chromium/archive.sh" "$@"
diff --git a/browser_patches/chromium-tip-of-tree/build.sh b/browser_patches/chromium-tip-of-tree/build.sh
new file mode 100755
index 0000000000000000000000000000000000000000..efc6479c616f7a946448623254628151ddbb11ff
--- /dev/null
+++ b/browser_patches/chromium-tip-of-tree/build.sh
@@ -0,0 +1,9 @@
+#!/bin/bash
+set -e
+set +x
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname "$0")"
+SCRIPT_FOLDER=$(pwd -P)
+
+bash "../chromium/build.sh" "$@"
diff --git a/browser_patches/chromium-tip-of-tree/clean.sh b/browser_patches/chromium-tip-of-tree/clean.sh
new file mode 100755
index 0000000000000000000000000000000000000000..3ea4237e9cf70bfba3c973dfa4942fc8e242de7d
--- /dev/null
+++ b/browser_patches/chromium-tip-of-tree/clean.sh
@@ -0,0 +1,9 @@
+#!/bin/bash
+set -e
+set +x
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname "$0")"
+SCRIPT_FOLDER=$(pwd -P)
+
+bash "../chromium/clean.sh" "$@"
diff --git a/browser_patches/chromium-tip-of-tree/roll_to_current_tip_of_tree.sh b/browser_patches/chromium-tip-of-tree/roll_to_current_tip_of_tree.sh
new file mode 100755
index 0000000000000000000000000000000000000000..4ddf20bf329a3ea82ca64dbdb97176bf0ed6ff1d
--- /dev/null
+++ b/browser_patches/chromium-tip-of-tree/roll_to_current_tip_of_tree.sh
@@ -0,0 +1,32 @@
+#!/bin/bash
+set -e
+set +x
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname "$0")"
+SCRIPT_FOLDER=$(pwd -P)
+
+# 1. get current version
+CURRENT_BETA_VERSION=$(curl https://omahaproxy.appspot.com/all | grep "win64,canary," | cut -d ',' -f 3)
+VERSION_INFO_JSON=$(curl "https://omahaproxy.appspot.com/deps.json?version=$CURRENT_BETA_VERSION")
+
+NODE_SCRIPT=$(cat <<EOF
+const json = JSON.parse(fs.readFileSync(0));
+console.log([
+  '#      CURRENT_VERSION: ' + json.chromium_version,
+  '# BRANCH_BASE_POSITION: ' + json.chromium_base_position,
+  'BRANCH_COMMIT="' + json.chromium_base_commit + '"',
+].join('\n'));
+EOF
+)
+NEW_CONFIG=$(echo "${VERSION_INFO_JSON}" | node -e "${NODE_SCRIPT}")
+CURRENT_CONFIG=$(cat "${SCRIPT_FOLDER}/UPSTREAM_CONFIG.sh")
+
+if [[ "${CURRENT_CONFIG}" == "${NEW_CONFIG}" ]]; then
+  echo "No changes!"
+  exit 0
+fi
+
+echo "${NEW_CONFIG}" > "${SCRIPT_FOLDER}/UPSTREAM_CONFIG.sh"
+BUILD_NUMBER=$(cat "${SCRIPT_FOLDER}/BUILD_NUMBER")
+echo $(( $BUILD_NUMBER + 1 )) > "${SCRIPT_FOLDER}/BUILD_NUMBER"
diff --git a/browser_patches/chromium/.gitignore b/browser_patches/chromium/.gitignore
new file mode 100644
index 0000000000000000000000000000000000000000..2658404cd72839f7eff0157fd43a71b3e4d989d1
--- /dev/null
+++ b/browser_patches/chromium/.gitignore
@@ -0,0 +1,3 @@
+/output
+/depot_tools
+/electron-build-tools
diff --git a/browser_patches/chromium/BUILD_NUMBER b/browser_patches/chromium/BUILD_NUMBER
new file mode 100644
index 0000000000000000000000000000000000000000..1a8c1ea284608f58382416764e09be2a0ad7a3d6
--- /dev/null
+++ b/browser_patches/chromium/BUILD_NUMBER
@@ -0,0 +1 @@
+1019
diff --git a/browser_patches/chromium/EXPECTED_BUILDS b/browser_patches/chromium/EXPECTED_BUILDS
new file mode 100644
index 0000000000000000000000000000000000000000..aa0df7e2ef5aa7d06682d42bcf85639e9225fc41
--- /dev/null
+++ b/browser_patches/chromium/EXPECTED_BUILDS
@@ -0,0 +1,5 @@
+chromium-mac.zip
+chromium-mac-arm64.zip
+chromium-linux.zip
+chromium-linux-arm64.zip
+chromium-win64.zip
diff --git a/browser_patches/chromium/EXPECTED_BUILDS_WITH_SYMBOLS b/browser_patches/chromium/EXPECTED_BUILDS_WITH_SYMBOLS
new file mode 100644
index 0000000000000000000000000000000000000000..36a818ac6f2f7ba7c2b7135cd16028512596fea6
--- /dev/null
+++ b/browser_patches/chromium/EXPECTED_BUILDS_WITH_SYMBOLS
@@ -0,0 +1,5 @@
+chromium-with-symbols-mac.zip
+chromium-with-symbols-mac-arm64.zip
+chromium-with-symbols-linux.zip
+chromium-with-symbols-linux-arm64.zip
+chromium-with-symbols-win64.zip
diff --git a/browser_patches/chromium/UPSTREAM_CONFIG.sh b/browser_patches/chromium/UPSTREAM_CONFIG.sh
new file mode 100644
index 0000000000000000000000000000000000000000..68aa75c5b47b4248a449cce3afa698a221cd9fc7
--- /dev/null
+++ b/browser_patches/chromium/UPSTREAM_CONFIG.sh
@@ -0,0 +1,3 @@
+#      CURRENT_VERSION: 105.0.5195.19
+# BRANCH_BASE_POSITION: 1027018
+BRANCH_COMMIT="8e0cbddc8eeae678fd23a763c1d724f55cf0ed9c"
diff --git a/browser_patches/chromium/archive.sh b/browser_patches/chromium/archive.sh
new file mode 100755
index 0000000000000000000000000000000000000000..c9de58258070c9604d85abcfed3d70c6bcd4e824
--- /dev/null
+++ b/browser_patches/chromium/archive.sh
@@ -0,0 +1,92 @@
+#!/bin/bash
+set -e
+set +x
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname "$0")"
+SCRIPT_PATH=$(pwd -P)
+source "${SCRIPT_PATH}/../utils.sh"
+
+if [[ ("$1" == "-h") || ("$1" == "--help") ]]; then
+  echo "usage: $(basename "$0") [output-absolute-path]"
+  echo
+  echo "Generate distributable .zip archive from ./output folder that was previously downloaded."
+  echo
+  exit 0
+fi
+
+ZIP_PATH=$1
+
+if [[ $ZIP_PATH != /* ]]; then
+  echo "ERROR: path $ZIP_PATH is not absolute"
+  exit 1
+fi
+if [[ $ZIP_PATH != *.zip ]]; then
+  echo "ERROR: path $ZIP_PATH must have .zip extension"
+  exit 1
+fi
+if [[ -f $ZIP_PATH ]]; then
+  echo "ERROR: path $ZIP_PATH exists; can't do anything."
+  exit 1
+fi
+if ! [[ -d $(dirname "$ZIP_PATH") ]]; then
+  echo "ERROR: folder for path $($ZIP_PATH) does not exist."
+  exit 1
+fi
+
+if [[ -z "${CR_CHECKOUT_PATH}" ]]; then
+  CR_CHECKOUT_PATH="$HOME/chromium"
+fi
+if [[ ! -d "${CR_CHECKOUT_PATH}/src" ]]; then
+  echo "ERROR: CR_CHECKOUT_PATH does not have src/ subfolder; is this a chromium checkout?"
+  exit 1
+fi
+
+CHROMIUM_FOLDER_NAME=""
+CHROMIUM_FILES_TO_ARCHIVE=()
+
+if is_mac; then
+  CHROMIUM_FOLDER_NAME="chrome-mac"
+  IFS=$'\n' CHROMIUM_FILES_TO_ARCHIVE=($(node "${SCRIPT_PATH}/compute_files_to_archive.js" "${CR_CHECKOUT_PATH}/src/infra/archive_config/mac-archive-rel.json"))
+  unset IFS
+elif is_linux; then
+  CHROMIUM_FOLDER_NAME="chrome-linux"
+  IFS=$'\n' CHROMIUM_FILES_TO_ARCHIVE=($(node "${SCRIPT_PATH}/compute_files_to_archive.js" "${CR_CHECKOUT_PATH}/src/infra/archive_config/linux-archive-rel.json"))
+  unset IFS
+elif is_win; then
+  CHROMIUM_FOLDER_NAME="chrome-win"
+  IFS=$'\n\r' CHROMIUM_FILES_TO_ARCHIVE=($(node "${SCRIPT_PATH}/compute_files_to_archive.js" "${CR_CHECKOUT_PATH}/src/infra/archive_config/win-archive-rel.json"))
+  unset IFS
+else
+  echo "ERROR: unsupported platform - $(uname)"
+  exit 1
+fi
+
+# Prepare resulting archive.
+cd "$SCRIPT_PATH"
+rm -rf output
+mkdir -p "output/${CHROMIUM_FOLDER_NAME}"
+
+# On Mac, use 'ditto' to copy directories instead of 'cp'.
+COPY_COMMAND="cp -R"
+if is_mac; then
+  COPY_COMMAND="ditto"
+fi
+
+for ((i = 0; i < ${#CHROMIUM_FILES_TO_ARCHIVE[@]}; i++)) do
+  file="${CHROMIUM_FILES_TO_ARCHIVE[$i]}"
+  mkdir -p "output/${CHROMIUM_FOLDER_NAME}/$(dirname "${file}")"
+  $COPY_COMMAND "${CR_CHECKOUT_PATH}/src/out/Default/${file}" "output/${CHROMIUM_FOLDER_NAME}/${file}"
+done
+
+if is_win; then
+  $COPY_COMMAND "${CR_CHECKOUT_PATH}/src/out/Default/"*.manifest "output/${CHROMIUM_FOLDER_NAME}/"
+  mkdir -p "output/${CHROMIUM_FOLDER_NAME}/locales"
+  $COPY_COMMAND "${CR_CHECKOUT_PATH}/src/out/Default/locales/"*.pak "output/${CHROMIUM_FOLDER_NAME}/locales/"
+fi
+
+cd output
+zip --symlinks -r build.zip "${CHROMIUM_FOLDER_NAME}"
+
+cd "${SCRIPT_PATH}"
+cp output/build.zip "$ZIP_PATH"
diff --git a/browser_patches/chromium/build.sh b/browser_patches/chromium/build.sh
new file mode 100755
index 0000000000000000000000000000000000000000..521fb32e702ee99133558c5003f29a6c593c1ab4
--- /dev/null
+++ b/browser_patches/chromium/build.sh
@@ -0,0 +1,130 @@
+#!/bin/bash
+set -e
+set +x
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname "$0")"
+SCRIPT_FOLDER=$(pwd -P)
+source "${SCRIPT_FOLDER}/../utils.sh"
+
+USAGE=$(cat<<EOF
+  usage: $(basename "$0") [--arm64] [--symbols] [--full] [--goma] <custom targets to compile>
+
+  --arm64     cross-compile for arm64
+  --symbols   compile with symbols
+  --full      install build dependencies
+  --goma      use goma when compiling. Make sure to pre-start goma client beforehand with './goma.sh start'.
+
+  On Linux & MacOS, it is possible to specify custom compilation targets:
+
+    ./build.sh --goma blink_tests
+
+EOF
+)
+
+source "${SCRIPT_FOLDER}/../utils.sh"
+
+if [[ $1 == "--help" || $1 == "-h" ]]; then
+  echo "$USAGE"
+  exit 0
+fi
+
+args=("$@")
+IS_ARM64=""
+IS_SYMBOLS_BUILD=""
+IS_FULL=""
+USE_GOMA=""
+for ((i="${#args[@]}"-1; i >= 0; --i)); do
+    case ${args[i]} in
+        --arm64) IS_ARM64="1"; unset args[i]; ;;
+        --symbols) IS_SYMBOLS_BUILD="1"; unset args[i]; ;;
+        --full) IS_FULL="1"; unset args[i]; ;;
+        --goma) USE_GOMA="1"; unset args[i]; ;;
+    esac
+done
+
+compile_chromium() {
+  if [[ -z "${CR_CHECKOUT_PATH}" ]]; then
+    CR_CHECKOUT_PATH="$HOME/chromium"
+  fi
+
+  if [[ ! -d "${CR_CHECKOUT_PATH}/src" ]]; then
+    echo "ERROR: CR_CHECKOUT_PATH does not have src/ subfolder; is this a chromium checkout?"
+    exit 1
+  fi
+
+  source "${SCRIPT_FOLDER}/ensure_depot_tools.sh"
+
+  if is_mac; then
+    selectXcodeVersionOrDie $(node "${SCRIPT_FOLDER}/../get_xcode_version.js" chromium)
+  fi
+
+  cd "${CR_CHECKOUT_PATH}/src"
+
+  # Prepare build folder.
+  mkdir -p "./out/Default"
+  echo "is_debug = false" > ./out/Default/args.gn
+  echo "dcheck_always_on = false" >> ./out/Default/args.gn
+  if [[ -n "${IS_SYMBOLS_BUILD}" ]]; then
+    echo "symbol_level = 1" >> ./out/Default/args.gn
+  else
+    echo "symbol_level = 0" >> ./out/Default/args.gn
+  fi
+
+  if [[ -n "${IS_ARM64}" ]]; then
+    echo 'target_cpu = "arm64"' >> ./out/Default/args.gn
+  fi
+
+  if [[ ! -z "$USE_GOMA" ]]; then
+    "${SCRIPT_FOLDER}/goma.sh" args >> ./out/Default/args.gn
+  fi
+  echo 'enable_nacl = false' >> ./out/Default/args.gn
+
+  echo "===== args.gn ====="
+  cat ./out/Default/args.gn
+  echo "===== ======= ====="
+
+  if [[ -n "$IS_FULL" ]]; then
+    if is_linux; then
+      ./build/install-build-deps.sh
+      if [[ -n "$IS_ARM64" ]]; then
+        # Install sysroot image, see https://chromium.googlesource.com/chromium/src/+/refs/heads/main/docs/linux/chromium_arm.md
+        ./build/linux/sysroot_scripts/install-sysroot.py --arch=arm64
+      fi
+    fi
+  fi
+
+  TARGETS="${args[@]}"
+  if is_win; then
+    if [[ -n "$TARGETS" ]]; then
+      echo "ERROR: cannot compile custom targets on windows yet."
+      echo "Requested to compile chromium targets - ${TARGETS}"
+      exit 1
+    fi
+    if [[ -z "$USE_GOMA" ]]; then
+      /c/Windows/System32/cmd.exe "/c $(cygpath -w "${SCRIPT_FOLDER}"/buildwin.bat)"
+    else
+      /c/Windows/System32/cmd.exe "/c $(cygpath -w "${SCRIPT_FOLDER}"/buildwingoma.bat)"
+    fi
+  else
+    if [[ -z "$TARGETS" ]]; then
+      if is_linux; then
+        TARGETS="chrome chrome_sandbox clear_key_cdm"
+      else
+        TARGETS="chrome"
+      fi
+    fi
+    echo
+    echo ">> Compiling Targets: $TARGETS"
+    echo
+
+    gn gen out/Default
+    if [[ -z "$USE_GOMA" ]]; then
+      autoninja -C out/Default $TARGETS
+    else
+      ninja -j 200 -C out/Default $TARGETS
+    fi
+  fi
+}
+
+compile_chromium "${args[@]}"
diff --git a/browser_patches/chromium/buildwin.bat b/browser_patches/chromium/buildwin.bat
new file mode 100644
index 0000000000000000000000000000000000000000..eec9a5c4129cca6d8ff0c1037bafc12e6e17f856
--- /dev/null
+++ b/browser_patches/chromium/buildwin.bat
@@ -0,0 +1,2 @@
+CALL gn gen out/Default
+CALL autoninja -C out/Default chrome eventlog_provider
diff --git a/browser_patches/chromium/buildwingoma.bat b/browser_patches/chromium/buildwingoma.bat
new file mode 100644
index 0000000000000000000000000000000000000000..d834c5516fa6d7d8231b880bae69731387f77930
--- /dev/null
+++ b/browser_patches/chromium/buildwingoma.bat
@@ -0,0 +1,2 @@
+CALL gn gen out/Default
+CALL ninja -j 200 -C out/Default chrome eventlog_provider
diff --git a/browser_patches/chromium/clean.sh b/browser_patches/chromium/clean.sh
new file mode 100755
index 0000000000000000000000000000000000000000..e03c7df33b76c0e371e9bec4a409eb69954c5178
--- /dev/null
+++ b/browser_patches/chromium/clean.sh
@@ -0,0 +1,15 @@
+#!/bin/bash
+set -e
+set +x
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname "$0")"
+
+rm -rf output
+if [[ -z "${CR_CHECKOUT_PATH}" ]]; then
+  CR_CHECKOUT_PATH="$HOME/chromium"
+fi
+
+if [[ -d "${CR_CHECKOUT_PATH}/src" ]]; then
+  rm -rf "${CR_CHECKOUT_PATH}/src/out"
+fi
diff --git a/browser_patches/chromium/compute_files_to_archive.js b/browser_patches/chromium/compute_files_to_archive.js
new file mode 100644
index 0000000000000000000000000000000000000000..341837bc1c8737154a27066c29e70fadf086f604
--- /dev/null
+++ b/browser_patches/chromium/compute_files_to_archive.js
@@ -0,0 +1,26 @@
+// This script is supposed to be run with a path to either of the following configs from chromium checkout:
+// - infra/archive_config/mac-archive-rel.json
+// - infra/archive_config/linux-archive-rel.json
+// - infra/archive_config/win-archive-rel.json
+
+const fs = require('fs');
+
+const configs = JSON.parse(fs.readFileSync(process.argv[2], 'utf8')).archive_datas;
+const config = configs.find(config => config.gcs_path.includes('chrome-linux.zip') || config.gcs_path.includes('chrome-win.zip') || config.gcs_path.includes('chrome-mac.zip'));
+
+const excludeList = new Set([
+  // We do not need interactive tests in our archive.
+  'interactive_ui_tests.exe',
+  // We no longer compile nacl with Chromium.
+  'nacl_helper_bootstrap',
+  'nacl_helper',
+  'nacl_irt_x86_64.nexe',
+]);
+
+const entries = [
+  ...(config.files || []),
+  ...(config.dirs || []),
+].filter(entry => !excludeList.has(entry));
+
+for (const entry of entries)
+  console.log(entry);
diff --git a/browser_patches/chromium/ensure_depot_tools.sh b/browser_patches/chromium/ensure_depot_tools.sh
new file mode 100644
index 0000000000000000000000000000000000000000..c746fe536247150fcc7f9e8b9922309e0404c1e4
--- /dev/null
+++ b/browser_patches/chromium/ensure_depot_tools.sh
@@ -0,0 +1,32 @@
+# Since this script modifies PATH, it cannot be run in a subshell
+# and must be sourced.
+# Make sure it is sourced.
+sourced=0
+(return 0 2>/dev/null) && sourced=1 || sourced=0
+
+if [[ $sourced == 0 ]]; then
+  echo 'ERROR: cannot run this script in a subshell'
+  echo 'This file modifies $PATH of the current shell, so it must be sourced instead'
+  echo 'Use `source ensure_depot_tool.sh` instead'
+  exit 1
+fi
+
+function ensure_depot_tools() {
+  # Install depot_tools if they are not in system, and modify $PATH
+  # to include depot_tools
+  if ! command -v autoninja >/dev/null; then
+    if [[ $(uname) == "MINGW"* || "$(uname)" == MSYS* ]]; then
+      # NOTE: as of Feb 8, 2021, windows requires manual and separate
+      # installation of depot_tools.
+      echo "ERROR: cannot automatically install depot_tools on windows. Please, install manually"
+      exit 1
+    fi
+    local SCRIPT_PATH=$(cd "$(dirname "$BASH_SOURCE")"; pwd -P)
+    if [[ ! -d "${SCRIPT_PATH}/depot_tools" ]]; then
+      git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git "${SCRIPT_PATH}/depot_tools"
+    fi
+    export PATH="${SCRIPT_PATH}/depot_tools:$PATH"
+  fi
+}
+
+ensure_depot_tools
diff --git a/browser_patches/chromium/goma.sh b/browser_patches/chromium/goma.sh
new file mode 100755
index 0000000000000000000000000000000000000000..8e2ff8649b22643acdbe737cfe8ccde351d95c63
--- /dev/null
+++ b/browser_patches/chromium/goma.sh
@@ -0,0 +1,105 @@
+#!/bin/bash
+set -e
+set +x
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname "$0")"
+SCRIPT_FOLDER=$(pwd -P)
+source "${SCRIPT_FOLDER}/../utils.sh"
+
+ELECTRON_BUILD_TOOLS_REQUIRED_VERSION=2c24fb5c7c938a4e387f355ab64be449604ae5db
+if [[ -d ./electron-build-tools ]]; then
+  cd ./electron-build-tools
+  # Make sure required commit is part of electron-build-tools.
+  if ! git merge-base --is-ancestor "${ELECTRON_BUILD_TOOLS_REQUIRED_VERSION}" HEAD; then
+    cd ..
+    rm -rf ./electron-build-tools
+    echo "Updating electron-build-tools"
+  else
+    cd ..
+  fi
+fi
+
+if [[ ! -d ./electron-build-tools ]]; then
+  git clone --single-branch --branch main https://github.com/electron/build-tools/ electron-build-tools
+  cd electron-build-tools
+  npm install
+  mkdir -p third_party
+  ./src/e update-goma msftGoma
+  cd ..
+fi
+
+if ! is_win; then
+  if command -v python >/dev/null; then
+    PYTHON=python
+  elif command -v python3 >/dev/null; then
+    PYTHON=python3
+  else
+    echo "ERROR: no python or python3 found in PATH"
+    exit 1
+  fi
+fi
+
+cd electron-build-tools/third_party/goma
+
+export GOMA_START_COMPILER_PROXY=true
+
+function print_gn_args() {
+  PLAYWRIGHT_GOMA_PATH="${SCRIPT_FOLDER}/electron-build-tools/third_party/goma"
+  if is_win; then
+    PLAYWRIGHT_GOMA_PATH=$(cygpath -w "${PLAYWRIGHT_GOMA_PATH}")
+  fi
+  echo 'use_goma = true'
+  echo "goma_dir = \"${PLAYWRIGHT_GOMA_PATH}\""
+}
+
+if [[ $1 == "--help" ]]; then
+  echo "$(basename "$0") [login|start|stop|--help]"
+  exit 0
+elif [[ $1 == "args" ]]; then
+  print_gn_args
+elif [[ $1 == "login" ]]; then
+  if is_win; then
+    /c/Windows/System32/cmd.exe "/c $(cygpath -w $(pwd)/goma_auth.bat) login"
+  else
+    $PYTHON ./goma_auth.py login
+  fi
+  echo
+  echo "Congratulation! Goma is logged in!"
+  echo "run '$(basename "$0") start' to launch goma client"
+elif [[ $1 == "start" ]]; then
+  # We have to prefix ENV with `PLAYWRIGHT` since `GOMA_` env variables
+  # have special treatment by goma.
+  if [[ ! -z "$PLAYWRIGHT_GOMA_LOGIN_COOKIE" ]]; then
+    echo "$PLAYWRIGHT_GOMA_LOGIN_COOKIE" > "$HOME/.goma_oauth2_config"
+  fi
+  if [[ ! -f "$HOME/.goma_oauth2_config" ]]; then
+    echo "ERROR: goma is not logged in!"
+    echo "run '$(basename "$0") login'"
+    exit 1
+  fi
+  if is_win; then
+    /c/Windows/System32/cmd.exe "/c $(cygpath -w $(pwd)/goma_ctl.bat) ensure_start"
+  else
+    $PYTHON ./goma_ctl.py ensure_start
+  fi
+  set +x
+  echo
+  echo "Congratulatons! Goma is running!"
+  echo
+  echo "Add the following gn args to use goma:"
+  echo
+  echo "===== args.gn ====="
+  print_gn_args
+  echo "===== ======= ====="
+elif [[ $1 == "stop" ]]; then
+  if is_win; then
+    /c/Windows/System32/cmd.exe "/c $(cygpath -w $(pwd)/goma_ctl.bat) stop"
+  else
+    $PYTHON ./goma_ctl.py stop
+  fi
+else
+  echo "ERROR: unknown command - $1"
+  echo "Use --help to list all available commands"
+  exit 1
+fi
diff --git a/browser_patches/chromium/roll_to_current_beta.sh b/browser_patches/chromium/roll_to_current_beta.sh
new file mode 100755
index 0000000000000000000000000000000000000000..7b1c7d6e04ea42c9643da81479d5cf9b7c93b180
--- /dev/null
+++ b/browser_patches/chromium/roll_to_current_beta.sh
@@ -0,0 +1,32 @@
+#!/bin/bash
+set -e
+set +x
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname "$0")"
+SCRIPT_FOLDER=$(pwd -P)
+
+# 1. get current version
+CURRENT_BETA_VERSION=$(curl https://omahaproxy.appspot.com/all | grep "win64,beta" | cut -d ',' -f 3)
+VERSION_INFO_JSON=$(curl "https://omahaproxy.appspot.com/deps.json?version=$CURRENT_BETA_VERSION")
+
+NODE_SCRIPT=$(cat <<EOF
+const json = JSON.parse(fs.readFileSync(0));
+console.log([
+  '#      CURRENT_VERSION: ' + json.chromium_version,
+  '# BRANCH_BASE_POSITION: ' + json.chromium_base_position,
+  'BRANCH_COMMIT="' + json.chromium_commit + '"',
+].join('\n'));
+EOF
+)
+NEW_CONFIG=$(echo "${VERSION_INFO_JSON}" | node -e "${NODE_SCRIPT}")
+CURRENT_CONFIG=$(cat "${SCRIPT_FOLDER}/UPSTREAM_CONFIG.sh")
+
+if [[ "${CURRENT_CONFIG}" == "${NEW_CONFIG}" ]]; then
+  echo "No changes!"
+  exit 0
+fi
+
+echo "${NEW_CONFIG}" > "${SCRIPT_FOLDER}/UPSTREAM_CONFIG.sh"
+BUILD_NUMBER=$(cat "${SCRIPT_FOLDER}/BUILD_NUMBER")
+echo $(( $BUILD_NUMBER + 1 )) > "${SCRIPT_FOLDER}/BUILD_NUMBER"
diff --git a/browser_patches/clean.sh b/browser_patches/clean.sh
new file mode 100755
index 0000000000000000000000000000000000000000..b6a2cfe1da8d917738d7d3747191b7dbb03e974c
--- /dev/null
+++ b/browser_patches/clean.sh
@@ -0,0 +1,39 @@
+#!/bin/bash
+set -e
+set +x
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname "$0")"
+
+
+if [[ ($1 == '--help') || ($1 == '-h') ]]; then
+  echo "usage: clean.sh [firefox|webkit|firefox-beta]"
+  echo
+  exit 0
+fi
+
+if [[ $# == 0 ]]; then
+  echo "missing browser: 'firefox' or 'webkit'"
+  echo "try './clean.sh --help' for more information"
+  exit 1
+fi
+
+CMD="$1"
+shift
+if [[ ("$CMD" == "firefox") || ("$CMD" == "firefox/") || ("$CMD" == "ff") ]]; then
+  bash ./firefox/clean.sh "$@"
+elif [[ ("$CMD" == "firefox-beta") || ("$CMD" == "ff-beta") ]]; then
+  bash ./firefox-beta/clean.sh "$@"
+elif [[ ("$CMD" == "webkit") || ("$CMD" == "webkit/") || ("$CMD" == "wk") ]]; then
+  bash ./webkit/clean.sh "$@"
+elif [[ ("$CMD" == "chromium") || ("$CMD" == "chromium/") || ("$CMD" == "cr") ]]; then
+  bash ./chromium/clean.sh "$@"
+elif [[ ("$CMD" == "winldd") ]]; then
+  bash ./winldd/clean.sh "$@"
+elif [[ ("$CMD" == "ffmpeg") ]]; then
+  bash ./ffmpeg/clean.sh "$@"
+else
+  echo ERROR: unknown browser to build - "$CMD"
+  exit 1
+fi
+
diff --git a/browser_patches/docker_build.sh b/browser_patches/docker_build.sh
new file mode 100755
index 0000000000000000000000000000000000000000..919dae7d4e9e286b3bf1f4a5b5c0f244158f7a1b
--- /dev/null
+++ b/browser_patches/docker_build.sh
@@ -0,0 +1,237 @@
+#!/bin/bash
+# This script is designed to build Firefox & WebKit on various Linux
+# distributions inside docker containers.
+set -e
+set -x
+set -o pipefail
+
+if [[ ($1 == '--help') || ($1 == '-h') ]]; then
+  echo "usage: $(basename "$0") [webkit-ubuntu-20.04|firefox-debian-11|...] [prepare|compile|enter|kill]"
+  echo
+  echo "Builds Webkit or Firefox browser inside given Linux distribution"
+  echo "NOTE: Run without second argument to enter bash inside the prepared docker container."
+  exit 0
+fi
+
+export BUILD_FLAVOR="${1}"
+
+DOCKER_PLATFORM="linux/amd64"
+DOCKER_IMAGE_NAME=""
+
+############################################################
+###                       FIREFOX                        ###
+############################################################
+
+if [[ "${BUILD_FLAVOR}" == "firefox-ubuntu-18.04" ]]; then
+  DOCKER_PLATFORM="linux/amd64"
+  DOCKER_IMAGE_NAME="ubuntu:18.04"
+elif [[ "${BUILD_FLAVOR}" == "firefox-ubuntu-20.04" ]]; then
+  DOCKER_PLATFORM="linux/amd64"
+  DOCKER_IMAGE_NAME="ubuntu:20.04"
+elif [[ "${BUILD_FLAVOR}" == "firefox-ubuntu-20.04-arm64" ]]; then
+  DOCKER_PLATFORM="linux/arm64"
+  DOCKER_IMAGE_NAME="ubuntu:20.04"
+elif [[ "${BUILD_FLAVOR}" == "firefox-ubuntu-22.04" ]]; then
+  DOCKER_PLATFORM="linux/amd64"
+  DOCKER_IMAGE_NAME="ubuntu:22.04"
+elif [[ "${BUILD_FLAVOR}" == "firefox-ubuntu-22.04-arm64" ]]; then
+  DOCKER_PLATFORM="linux/arm64"
+  DOCKER_IMAGE_NAME="ubuntu:22.04"
+elif [[ "${BUILD_FLAVOR}" == "firefox-debian-11" ]]; then
+  DOCKER_PLATFORM="linux/amd64"
+  DOCKER_IMAGE_NAME="debian:11"
+
+############################################################
+###                   FIREFOX-BETA                       ###
+############################################################
+
+elif [[ "${BUILD_FLAVOR}" == "firefox-beta-ubuntu-18.04" ]]; then
+  DOCKER_PLATFORM="linux/amd64"
+  DOCKER_IMAGE_NAME="ubuntu:18.04"
+elif [[ "${BUILD_FLAVOR}" == "firefox-beta-ubuntu-20.04" ]]; then
+  DOCKER_PLATFORM="linux/amd64"
+  DOCKER_IMAGE_NAME="ubuntu:20.04"
+elif [[ "${BUILD_FLAVOR}" == "firefox-beta-ubuntu-20.04-arm64" ]]; then
+  DOCKER_PLATFORM="linux/arm64"
+  DOCKER_IMAGE_NAME="ubuntu:20.04"
+elif [[ "${BUILD_FLAVOR}" == "firefox-beta-ubuntu-22.04" ]]; then
+  DOCKER_PLATFORM="linux/amd64"
+  DOCKER_IMAGE_NAME="ubuntu:22.04"
+elif [[ "${BUILD_FLAVOR}" == "firefox-beta-ubuntu-22.04-arm64" ]]; then
+  DOCKER_PLATFORM="linux/arm64"
+  DOCKER_IMAGE_NAME="ubuntu:22.04"
+elif [[ "${BUILD_FLAVOR}" == "firefox-beta-debian-11" ]]; then
+  DOCKER_PLATFORM="linux/amd64"
+  DOCKER_IMAGE_NAME="debian:11"
+
+############################################################
+###                        WEBKIT                        ###
+############################################################
+
+elif [[ "${BUILD_FLAVOR}" == "webkit-ubuntu-18.04" ]]; then
+  DOCKER_PLATFORM="linux/amd64"
+  DOCKER_IMAGE_NAME="ubuntu:18.04"
+elif [[ "${BUILD_FLAVOR}" == "webkit-ubuntu-20.04" ]]; then
+  DOCKER_PLATFORM="linux/amd64"
+  DOCKER_IMAGE_NAME="ubuntu:20.04"
+elif [[ "${BUILD_FLAVOR}" == "webkit-ubuntu-20.04-arm64" ]]; then
+  DOCKER_PLATFORM="linux/arm64"
+  DOCKER_IMAGE_NAME="ubuntu:20.04"
+elif [[ "${BUILD_FLAVOR}" == "webkit-ubuntu-22.04" ]]; then
+  DOCKER_PLATFORM="linux/amd64"
+  DOCKER_IMAGE_NAME="ubuntu:22.04"
+elif [[ "${BUILD_FLAVOR}" == "webkit-ubuntu-22.04-arm64" ]]; then
+  DOCKER_PLATFORM="linux/arm64"
+  DOCKER_IMAGE_NAME="ubuntu:22.04"
+elif [[ "${BUILD_FLAVOR}" == "webkit-debian-11" ]]; then
+  DOCKER_PLATFORM="linux/amd64"
+  DOCKER_IMAGE_NAME="debian:11"
+elif [[ "${BUILD_FLAVOR}" == "webkit-universal" ]]; then
+  DOCKER_PLATFORM="linux/amd64"
+  DOCKER_IMAGE_NAME="ubuntu:20.04"
+else
+  echo "ERROR: unknown build flavor - '${BUILD_FLAVOR}'"
+  exit 1
+fi
+
+DOCKER_CONTAINER_NAME="build-${BUILD_FLAVOR}"
+DOCKER_ARGS=$(echo \
+  --env CI \
+  --env BUILD_FLAVOR \
+  --env TELEGRAM_BOT_KEY \
+  --env AZ_ACCOUNT_NAME \
+  --env AZ_ACCOUNT_KEY \
+  --env GITHUB_SERVER_URL \
+  --env GITHUB_REPOSITORY \
+  --env GITHUB_RUN_ID \
+  --env GH_TOKEN \
+  --env DEBIAN_FRONTEND=noninteractive \
+  --env TZ="America/Los_Angeles"
+)
+
+function ensure_docker_container {
+  if docker ps | grep "${DOCKER_CONTAINER_NAME}" 2>&1 1>/dev/null; then
+    return;
+  fi
+  if [[ "${BUILD_FLAVOR}" == "webkit-universal" ]]; then
+    # NOTE: WebKit Linux Universal build is run in PRIVILEGED container due to Flatpak!
+    DOCKER_ARGS="${DOCKER_ARGS} --privileged"
+  fi
+  docker pull --platform "${DOCKER_PLATFORM}" "${DOCKER_IMAGE_NAME}"
+  docker run --rm ${DOCKER_ARGS} --name "${DOCKER_CONTAINER_NAME}" --platform "${DOCKER_PLATFORM}" -d -t "${DOCKER_IMAGE_NAME}" /bin/bash
+  docker exec ${DOCKER_ARGS} "${DOCKER_CONTAINER_NAME}" /bin/bash -c '
+    set -e
+    arch
+    if [[ "${BUILD_FLAVOR}" == webkit-debian-11 ]]; then
+      # Add contrib & non-free to package list
+      echo "deb http://ftp.us.debian.org/debian bullseye main contrib non-free" >> /etc/apt/sources.list.d/pwbuild.list
+    fi
+
+    apt-get update && apt-get install -y wget \
+                                         git-core \
+                                         curl \
+                                         autoconf2.13 \
+                                         tzdata \
+                                         sudo \
+                                         zip \
+                                         gcc \
+                                         unzip
+
+    if [[ "${BUILD_FLAVOR}" == "firefox-ubuntu-22.04-arm64" || "${BUILD_FLAVOR}" == "firefox-beta-ubuntu-22.04-arm64" ]]; then
+      apt-get install -y clang-14
+    elif [[ "${BUILD_FLAVOR}" == *"-arm64" ]]; then
+      apt-get install -y clang-12
+    fi
+
+    # Install Python3.
+    # Firefox build on Ubuntu 18.04 requires Python3.8 to run its build scripts.
+    # WebKit build on Ubuntu 18.04 fails with the Python 3.8 installation but works
+    # with Python 3.6 that is shipped as default python3 on Ubuntu 18.
+    if [[ "${BUILD_FLAVOR}" == "firefox-ubuntu-18.04" || "${BUILD_FLAVOR}" == "firefox-beta-ubuntu-18.04" ]]; then
+      apt-get install -y python3.8 python3.8-dev python3.8-distutils
+      # Point python3 to python3.8
+      update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 2
+      curl -sSL https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \
+          python3 get-pip.py && \
+          rm get-pip.py
+    else
+      apt-get install -y python3 python3-dev python3-pip python3-distutils
+    fi
+
+    # Install AZ CLI with Python since they do not ship
+    # aarch64 to APT: https://github.com/Azure/azure-cli/issues/7368
+    # Pin so future releases dont break us.
+    pip3 install azure-cli==2.38.0
+
+    # Create the pwuser and make it passwordless sudoer.
+    adduser --disabled-password --gecos "" pwuser
+    echo "ALL            ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
+
+    # Install node16
+    curl -sL https://deb.nodesource.com/setup_16.x | bash - && apt-get install -y nodejs
+
+    if [[ "${BUILD_FLAVOR}" == "firefox-"* ]]; then
+      # install rust as a pwuser
+      su -l pwuser -c "curl --proto \"=https\" --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y"
+      echo "PATH=\"${PATH}:/home/pwuser/.cargo/bin\"" > /etc/environment
+    elif [[ "${BUILD_FLAVOR}" == "webkit-ubuntu-18.04" ]]; then
+      # Ubuntu 18.04 specific: update CMake. Default CMake on Ubuntu 18.04 is 3.10, whereas WebKit requires 3.12+.
+      apt purge --auto-remove cmake
+      apt-get install -y wget software-properties-common
+      wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
+      apt-add-repository "deb https://apt.kitware.com/ubuntu/ bionic main"
+      apt-get update && apt-get install -y cmake
+
+      # Ubuntu 18.04 specific: install GCC-8. WebKit requires gcc 8.3+ to compile.
+      apt-get install -y gcc-8 g++-8
+    fi
+
+    git config --system user.email "you@example.com"
+    git config --system user.name "Your Name"
+
+    # mitigate git clone issues on CI.
+    # See https://stdworkflow.com/877/error-rpc-failed-curl-56-gnutls-recv-error-54-error-in-the-pull-function
+    git config --system http.postBuffer 524288000
+    git config --system http.lowSpeedLimit 0
+    git config --system http.lowSpeedTime 999999
+
+    cd /home/pwuser
+    su -l pwuser -c "git clone --depth=1 https://github.com/microsoft/playwright"
+  '
+}
+
+if [[ "$2" == "prepare" || "$2" == "start" ]]; then
+  ensure_docker_container
+elif [[ "$2" == "compile" ]]; then
+  ensure_docker_container
+  echo "BUILD FLAVOR: ${BUILD_FLAVOR}"
+  docker exec --user pwuser --workdir "/home/pwuser/playwright" ${DOCKER_ARGS} "${DOCKER_CONTAINER_NAME}" /bin/bash -c '
+    if [[ "${BUILD_FLAVOR}" == "webkit-ubuntu-18.04" ]]; then
+      export CC=/usr/bin/gcc-8
+      export CXX=/usr/bin/g++-8
+    elif [[ "${BUILD_FLAVOR}" == "firefox-ubuntu-22.04-arm64" || "${BUILD_FLAVOR}" == "firefox-beta-ubuntu-22.04-arm64" ]]; then
+      export CC=/usr/bin/clang-14
+      export CXX=/usr/bin/clang++-14
+    elif [[ "${BUILD_FLAVOR}" == *"-arm64" ]]; then
+      export CC=/usr/bin/clang-12
+      export CXX=/usr/bin/clang++-12
+    fi
+    # For non-login non-interactive shells, we have to source
+    # cargo env explicitly since /env/environment is not read.
+    if [[ -f "$HOME/.cargo/env" ]]; then
+      source "$HOME/.cargo/env"
+    fi
+    ./browser_patches/checkout_build_archive_upload.sh "${BUILD_FLAVOR}"
+  '
+elif [[ "$2" == "enter" || -z "$2" ]]; then
+  ensure_docker_container
+  docker exec --user pwuser --workdir "/home/pwuser/playwright" ${DOCKER_ARGS} -it "${DOCKER_CONTAINER_NAME}" /bin/bash
+elif [[ "$2" == "kill" || "$2" == "stop" ]]; then
+  docker kill "${DOCKER_CONTAINER_NAME}"
+  # Wait for container to stop
+  docker wait "${DOCKER_CONTAINER_NAME}" || true
+else
+  echo "ERROR: unknown command - $2"
+  exit 1
+fi
+
diff --git a/browser_patches/export.sh b/browser_patches/export.sh
new file mode 100755
index 0000000000000000000000000000000000000000..01139737f0537278e2b66d6f8669f4583f602398
--- /dev/null
+++ b/browser_patches/export.sh
@@ -0,0 +1,177 @@
+#!/bin/bash
+set -e
+set +x
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname "$0")"
+
+REMOTE_BROWSER_UPSTREAM="browser_upstream"
+BUILD_BRANCH="playwright-build"
+
+# COLORS
+RED=$'\e[1;31m'
+GRN=$'\e[1;32m'
+YEL=$'\e[1;33m'
+END=$'\e[0m'
+
+if [[ ($1 == '--help') || ($1 == '-h') ]]; then
+  echo "usage: export.sh [firefox|webkit] [custom_checkout_path]"
+  echo
+  echo "Exports patch from the current branch of the checkout to browser folder."
+  echo "The checkout has to be 'prepared', meaning that 'prepare_checkout.sh' should be"
+  echo "run against it first."
+  echo
+  echo "You can optionally specify custom_checkout_path if you have browser checkout somewhere else"
+  echo "and wish to export patches from it."
+  echo
+  exit 0
+fi
+
+if [[ $# == 0 ]]; then
+  echo "missing browser: 'firefox' or 'webkit'"
+  echo "try './export.sh --help' for more information"
+  exit 1
+fi
+
+# FRIENDLY_CHECKOUT_PATH is used only for logging.
+FRIENDLY_CHECKOUT_PATH="";
+BUILD_NUMBER_UPSTREAM_URL=""
+CHECKOUT_PATH=""
+EXPORT_PATH=""
+EXTRA_FOLDER_PW_PATH=""
+EXTRA_FOLDER_CHECKOUT_RELPATH=""
+if [[ ("$1" == "firefox") || ("$1" == "firefox/") || ("$1" == "ff") ]]; then
+  if [[ -z "${FF_CHECKOUT_PATH}" ]]; then
+    FRIENDLY_CHECKOUT_PATH='$HOME/firefox';
+    CHECKOUT_PATH="$HOME/firefox"
+  else
+    echo "WARNING: using checkout path from FF_CHECKOUT_PATH env: ${FF_CHECKOUT_PATH}"
+    CHECKOUT_PATH="${FF_CHECKOUT_PATH}"
+    FRIENDLY_CHECKOUT_PATH="<FF_CHECKOUT_PATH>"
+  fi
+
+  EXTRA_FOLDER_PW_PATH="$PWD/firefox/juggler"
+  EXTRA_FOLDER_CHECKOUT_RELPATH="juggler"
+  EXPORT_PATH="$PWD/firefox"
+  BUILD_NUMBER_UPSTREAM_URL="https://raw.githubusercontent.com/microsoft/playwright/main/browser_patches/firefox/BUILD_NUMBER"
+  source "./firefox/UPSTREAM_CONFIG.sh"
+elif [[ ("$1" == "firefox-beta") || ("$1" == "ff-beta") ]]; then
+  if [[ -z "${FF_CHECKOUT_PATH}" ]]; then
+    FRIENDLY_CHECKOUT_PATH='$HOME/firefox';
+    CHECKOUT_PATH="$HOME/firefox"
+  else
+    echo "WARNING: using checkout path from FF_CHECKOUT_PATH env: ${FF_CHECKOUT_PATH}"
+    CHECKOUT_PATH="${FF_CHECKOUT_PATH}"
+    FRIENDLY_CHECKOUT_PATH="<FF_CHECKOUT_PATH>"
+  fi
+
+  EXTRA_FOLDER_PW_PATH="$PWD/firefox-beta/juggler"
+  EXTRA_FOLDER_CHECKOUT_RELPATH="juggler"
+  EXPORT_PATH="$PWD/firefox-beta"
+  BUILD_NUMBER_UPSTREAM_URL="https://raw.githubusercontent.com/microsoft/playwright/main/browser_patches/firefox-beta/BUILD_NUMBER"
+  source "./firefox-beta/UPSTREAM_CONFIG.sh"
+elif [[ ("$1" == "webkit") || ("$1" == "webkit/") || ("$1" == "wk") ]]; then
+  if [[ -z "${WK_CHECKOUT_PATH}" ]]; then
+    FRIENDLY_CHECKOUT_PATH='$HOME/webkit';
+    CHECKOUT_PATH="$HOME/webkit"
+  else
+    echo "WARNING: using checkout path from WK_CHECKOUT_PATH env: ${WK_CHECKOUT_PATH}"
+    CHECKOUT_PATH="${WK_CHECKOUT_PATH}"
+    FRIENDLY_CHECKOUT_PATH="<WK_CHECKOUT_PATH>"
+  fi
+
+  EXTRA_FOLDER_PW_PATH="$PWD/webkit/embedder/Playwright"
+  EXTRA_FOLDER_CHECKOUT_RELPATH="Tools/Playwright"
+  EXPORT_PATH="$PWD/webkit"
+  BUILD_NUMBER_UPSTREAM_URL="https://raw.githubusercontent.com/microsoft/playwright/main/browser_patches/webkit/BUILD_NUMBER"
+  source "./webkit/UPSTREAM_CONFIG.sh"
+else
+  echo ERROR: unknown browser to export - "$1"
+  exit 1
+fi
+
+# we will use this just for beauty.
+if [[ $# == 2 ]]; then
+  echo "WARNING: using custom checkout path $2"
+  CHECKOUT_PATH=$2
+  FRIENDLY_CHECKOUT_PATH="<custom_checkout ( $2 )>"
+fi
+
+# if there's no checkout folder - bail out.
+if ! [[ -d $CHECKOUT_PATH ]]; then
+  echo "ERROR: $FRIENDLY_CHECKOUT_PATH is missing - nothing to export."
+  exit 1;
+else
+  echo "-- checking $FRIENDLY_CHECKOUT_PATH exists - OK"
+fi
+
+# if folder exists but not a git repository - bail out.
+if ! [[ -d $CHECKOUT_PATH/.git ]]; then
+  echo "ERROR: $FRIENDLY_CHECKOUT_PATH is not a git repository! Nothing to export."
+  exit 1
+else
+  echo "-- checking $FRIENDLY_CHECKOUT_PATH is a git repo - OK"
+fi
+
+# Switch to git repository.
+cd "$CHECKOUT_PATH"
+
+# Setting up |$REMOTE_BROWSER_UPSTREAM| remote and fetch the $BASE_BRANCH
+if git remote get-url $REMOTE_BROWSER_UPSTREAM >/dev/null; then
+  if ! [[ $(git config --get remote.$REMOTE_BROWSER_UPSTREAM.url || echo "") == "$REMOTE_URL" ]]; then
+    echo "ERROR: remote $REMOTE_BROWSER_UPSTREAM is not pointing to '$REMOTE_URL'! run 'prepare_checkout.sh' first"
+    exit 1
+  fi
+else
+  echo "ERROR: checkout does not have $REMOTE_BROWSER_UPSTREAM; run 'prepare_checkout.sh' first"
+  exit 1
+fi
+
+# Check if git repo is dirty.
+if [[ -n $(git status -s --untracked-files=no) ]]; then
+  echo "ERROR: $FRIENDLY_CHECKOUT_PATH has dirty GIT state - aborting export."
+  exit 1
+else
+  echo "-- checking $FRIENDLY_CHECKOUT_PATH is clean - OK"
+fi
+
+PATCH_NAME=$(ls -1 "$EXPORT_PATH"/patches)
+if [[ -z "$PATCH_NAME" ]]; then
+  PATCH_NAME="bootstrap.diff"
+  OLD_DIFF=""
+else
+  OLD_DIFF=$(cat "$EXPORT_PATH"/patches/$PATCH_NAME)
+fi
+
+CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
+NEW_BASE_REVISION=$(git merge-base $REMOTE_BROWSER_UPSTREAM/"$BASE_BRANCH" "$CURRENT_BRANCH")
+NEW_DIFF=$(git diff --diff-algorithm=myers --full-index "$NEW_BASE_REVISION" "$CURRENT_BRANCH" -- . ":!${EXTRA_FOLDER_CHECKOUT_RELPATH}")
+
+# Increment BUILD_NUMBER
+BUILD_NUMBER=$(curl ${BUILD_NUMBER_UPSTREAM_URL} | head -1)
+BUILD_NUMBER=$((BUILD_NUMBER+1))
+
+echo "REMOTE_URL=\"$REMOTE_URL\"
+BASE_BRANCH=\"$BASE_BRANCH\"
+BASE_REVISION=\"$NEW_BASE_REVISION\"" > "$EXPORT_PATH"/UPSTREAM_CONFIG.sh
+echo "$NEW_DIFF" > "$EXPORT_PATH"/patches/$PATCH_NAME
+echo $BUILD_NUMBER > "$EXPORT_PATH"/BUILD_NUMBER
+echo "Changed: $(git config user.email) $(date)" >> "$EXPORT_PATH"/BUILD_NUMBER
+
+echo "-- exporting standalone folder"
+rm -rf "${EXTRA_FOLDER_PW_PATH}"
+mkdir -p $(dirname "${EXTRA_FOLDER_PW_PATH}")
+cp -r "${EXTRA_FOLDER_CHECKOUT_RELPATH}" "${EXTRA_FOLDER_PW_PATH}"
+
+NEW_BASE_REVISION_TEXT="$NEW_BASE_REVISION (not changed)"
+if [[ "$NEW_BASE_REVISION" != "$BASE_REVISION" ]]; then
+  NEW_BASE_REVISION_TEXT="$YEL$NEW_BASE_REVISION (changed)$END"
+fi
+
+echo "=============================================================="
+echo "    Repository:                $FRIENDLY_CHECKOUT_PATH"
+echo "    Changes between branches:  $REMOTE_BROWSER_UPSTREAM/$BASE_BRANCH..$CURRENT_BRANCH"
+echo "    BASE_REVISION:             $NEW_BASE_REVISION_TEXT"
+echo "    BUILD_NUMBER:              $YEL$BUILD_NUMBER (changed)$END"
+echo "=============================================================="
+echo
diff --git a/browser_patches/ffmpeg/.gitignore b/browser_patches/ffmpeg/.gitignore
new file mode 100644
index 0000000000000000000000000000000000000000..b97a986fa15ea717099639a114332d618336ff46
--- /dev/null
+++ b/browser_patches/ffmpeg/.gitignore
@@ -0,0 +1,2 @@
+build/
+output/
diff --git a/browser_patches/ffmpeg/BUILD_NUMBER b/browser_patches/ffmpeg/BUILD_NUMBER
new file mode 100644
index 0000000000000000000000000000000000000000..fb35a14c0271683ad34c62504c4e24680b7a4e34
--- /dev/null
+++ b/browser_patches/ffmpeg/BUILD_NUMBER
@@ -0,0 +1 @@
+1007
diff --git a/browser_patches/ffmpeg/CONFIG.sh b/browser_patches/ffmpeg/CONFIG.sh
new file mode 100644
index 0000000000000000000000000000000000000000..2cb8e6f83642ac400faf24525ef9a47042c08172
--- /dev/null
+++ b/browser_patches/ffmpeg/CONFIG.sh
@@ -0,0 +1,53 @@
+# Copyright (c) Microsoft Corporation.
+#
+# Licensed under the Apache License, Version 2.0 (the 'License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+ZLIB_VERSION="v1.2.11"
+ZLIB_CONFIG="--static"
+
+LIBVPX_VERSION="v1.9.0"
+LIBVPX_CONFIG="--enable-static \
+               --disable-shared \
+               --disable-docs \
+               --disable-tools \
+               --disable-unit-tests \
+               --disable-examples"
+
+FFMPEG_VERSION="n4.3.1"
+FFMPEG_CONFIG="--extra-version=playwright-build-$(cat ./BUILD_NUMBER | head -1) \
+               --disable-debug \
+               --disable-autodetect \
+               --disable-everything \
+               --enable-ffmpeg \
+               --enable-protocol=pipe \
+               --enable-protocol=file \
+               --enable-parser=mjpeg \
+               --enable-decoder=mjpeg \
+               --enable-demuxer=image2pipe \
+               --enable-filter=pad \
+               --enable-filter=crop \
+               --enable-filter=scale \
+               --enable-muxer=webm \
+               --enable-libvpx \
+               --enable-static \
+               --enable-encoder=libvpx_vp8 \
+               --enable-decoder=libvpx_vp8 \
+               --enable-demuxer=matroska \
+               --enable-encoder=png \
+               --enable-zlib \
+               --enable-muxer=image2 \
+               --disable-pthreads \
+               --disable-iconv \
+               --disable-w32threads \
+               --disable-bzlib"
+
diff --git a/browser_patches/ffmpeg/EXPECTED_BUILDS b/browser_patches/ffmpeg/EXPECTED_BUILDS
new file mode 100644
index 0000000000000000000000000000000000000000..ec5ce4f2e01618ba4172b4c33b0e26afd6ac0e90
--- /dev/null
+++ b/browser_patches/ffmpeg/EXPECTED_BUILDS
@@ -0,0 +1,6 @@
+ffmpeg-mac.zip
+ffmpeg-mac-arm64.zip
+ffmpeg-linux.zip
+ffmpeg-linux-arm64.zip
+ffmpeg-win64.zip
+
diff --git a/browser_patches/ffmpeg/README.md b/browser_patches/ffmpeg/README.md
new file mode 100644
index 0000000000000000000000000000000000000000..89ed18d6dc2b9c7ec1f8ada5cbc6a529ab22c413
--- /dev/null
+++ b/browser_patches/ffmpeg/README.md
@@ -0,0 +1,57 @@
+# Playwright and FFMPEG
+
+Playwright requires FFMPEG to produce screncast and bundles FFMPEG binaries for Mac , Linux and Windows.
+
+## Configuration
+
+We compile `libvpx` and `ffmpeg` only. Their source versions and build
+configurations are defined in [`//browser_patches/ffmpeg/CONFIG.sh`](./CONFIG.sh).
+
+## Building `ffmpeg-linux`
+
+Compilation scripts are based on:
+- https://trac.ffmpeg.org/wiki/CompilationGuide/Generic
+
+Prerequisites:
+- Mac or Linux
+- Docker
+
+Building:
+
+```
+~/playwright$ ./browser_patches/ffmpeg/build.sh --linux
+```
+
+## Building `ffmpeg-mac`
+
+Compilation scripts are based on:
+- https://trac.ffmpeg.org/wiki/CompilationGuide/Generic
+- https://trac.ffmpeg.org/wiki/CompilationGuide/macOS
+
+Prerequisites:
+- Mac
+- xcode command line tools: `xcode-select --install`
+- [homebrew](https://brew.sh/)
+
+Building:
+
+```
+~/playwright$ ./browser_patches/ffmpeg/build.sh --mac
+```
+
+## Building `ffmpeg-win*`
+
+Cross-compilation scripts are based on:
+- https://trac.ffmpeg.org/wiki/CompilationGuide/Generic
+- https://trac.ffmpeg.org/wiki/CompilationGuide/CrossCompilingForWindows
+
+Prerequisites:
+- Mac or Linux
+- [Docker](https://www.docker.com/)
+
+Building:
+
+```
+~/playwright$ ./browser_patches/ffmpeg/build.sh --cross-compile-win64
+```
+
diff --git a/browser_patches/ffmpeg/archive.sh b/browser_patches/ffmpeg/archive.sh
new file mode 100755
index 0000000000000000000000000000000000000000..ffdf2aba9e0cc0ed45cf2ead2dcc068937c32110
--- /dev/null
+++ b/browser_patches/ffmpeg/archive.sh
@@ -0,0 +1,34 @@
+#!/bin/bash
+set -e
+set +x
+
+if [[ ("$1" == "-h") || ("$1" == "--help") ]]; then
+  echo "usage: $(basename $0) [output-absolute-path]"
+  echo
+  echo "Generate distributable .zip archive from ./output folder that was previously built."
+  echo
+  exit 0
+fi
+
+ZIP_PATH=$1
+if [[ $ZIP_PATH != /* ]]; then
+  echo "ERROR: path $ZIP_PATH is not absolute"
+  exit 1
+fi
+if [[ $ZIP_PATH != *.zip ]]; then
+  echo "ERROR: path $ZIP_PATH must have .zip extension"
+  exit 1
+fi
+if [[ -f $ZIP_PATH ]]; then
+  echo "ERROR: path $ZIP_PATH exists; can't do anything."
+  exit 1
+fi
+if ! [[ -d $(dirname $ZIP_PATH) ]]; then
+  echo "ERROR: folder for path $($ZIP_PATH) does not exist."
+  exit 1
+fi
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname $0)"
+
+cp output/ffmpeg.zip $ZIP_PATH
diff --git a/browser_patches/ffmpeg/build-linux.sh b/browser_patches/ffmpeg/build-linux.sh
new file mode 100644
index 0000000000000000000000000000000000000000..5514a07e7c7162290aff553d78a72ffe9356f4cf
--- /dev/null
+++ b/browser_patches/ffmpeg/build-linux.sh
@@ -0,0 +1,93 @@
+#!/bin/bash
+
+# Copyright (c) Microsoft Corporation.
+#
+# Licensed under the Apache License, Version 2.0 (the 'License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+set -ex
+
+function die() { echo "$@"; exit 1; }
+
+
+PREFIX="${HOME}/prefix"
+
+
+if [[ "$(uname)" != "Linux" ]]; then
+  echo "ERROR: this script is designed to be run on Linux. Can't run on $(uname)"
+  exit 1
+fi
+
+output_path="$1"
+if [[ -z "${output_path}" ]]; then
+  die "ERROR: output path is not specified"
+elif [[ "${output_path}" != /* ]]; then
+  die "ERROR: output path ${output_path} is not absolute"
+elif ! [[ -d $(dirname "${output_path}") ]]; then
+  die "ERROR: folder for output path ${output_path} does not exist."
+fi
+
+function build_zlib {
+  cd "${HOME}"
+  git clone https://github.com/madler/zlib
+  cd zlib
+  git checkout "${ZLIB_VERSION}"
+  ./configure --prefix="${PREFIX}" ${ZLIB_CONFIG}
+  make && make install
+}
+
+function build_libvpx {
+  cd "${HOME}"
+  git clone https://chromium.googlesource.com/webm/libvpx
+  cd libvpx
+  git checkout "${LIBVPX_VERSION}"
+  # Cross-compiling libvpx according to the docs:
+  # - https://chromium.googlesource.com/webm/libvpx/+/main/README
+  ./configure --prefix="${PREFIX}" ${LIBVPX_CONFIG}
+  make && make install
+}
+
+function build_ffmpeg {
+  cd "${HOME}"
+  git clone git://source.ffmpeg.org/ffmpeg.git
+  cd ffmpeg
+  git checkout "${FFMPEG_VERSION}"
+  export PKG_CONFIG_PATH="${PREFIX}/lib/pkgconfig"
+  # Prohibit pkg-config from using linux system installed libs.
+  export PKG_CONFIG_LIBDIR=
+
+  ./configure --pkg-config=pkg-config \
+              --pkg-config-flags="--static" \
+              --extra-cflags="-I/${PREFIX}/include" \
+              --extra-ldflags="-L/${PREFIX}/lib -static" \
+              --prefix="${PREFIX}" \
+              --bindir="${PWD}/bin" \
+              ${FFMPEG_CONFIG}
+  make && make install
+}
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname $0)"
+
+source ./CONFIG.sh
+
+apt-get update
+apt-get install -y git make yasm pkg-config
+
+build_zlib
+build_libvpx
+build_ffmpeg
+
+# put resulting executable where we were asked to
+cp "${HOME}/ffmpeg/bin/ffmpeg" "${output_path}"
+strip "${output_path}"
+
diff --git a/browser_patches/ffmpeg/build-mac.sh b/browser_patches/ffmpeg/build-mac.sh
new file mode 100755
index 0000000000000000000000000000000000000000..91ac05f633bb90bdf5288ab22f52329288ae004b
--- /dev/null
+++ b/browser_patches/ffmpeg/build-mac.sh
@@ -0,0 +1,106 @@
+#!/bin/bash
+
+# Copyright (c) Microsoft Corporation.
+#
+# Licensed under the Apache License, Version 2.0 (the 'License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+set -e
+
+function die() { echo "$@"; exit 1; }
+
+if [[ "$(uname)" != "Darwin" ]]; then
+  die "ERROR: this script is designed to be run on OSX. Can't run on $(uname)"
+fi
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname $0)"
+SCRIPT_FOLDER="$(pwd -P)"
+source "${SCRIPT_FOLDER}/../utils.sh"
+
+selectXcodeVersionOrDie $(node "${SCRIPT_FOLDER}/../get_xcode_version.js" ffmpeg)
+
+source ./CONFIG.sh
+
+BUILDDIR="${PWD}/build"
+PREFIX="${BUILDDIR}/osx_prefix"
+OUTPUT_PATH="${PWD}/output/ffmpeg-mac"
+
+function build_zlib {
+  cd "${BUILDDIR}"
+  git clone https://github.com/madler/zlib
+  cd zlib
+  git checkout "${ZLIB_VERSION}"
+  ./configure --prefix="${PREFIX}" ${ZLIB_CONFIG}
+  make && make install
+}
+
+function build_libvpx {
+  cd "${BUILDDIR}"
+  git clone https://chromium.googlesource.com/webm/libvpx
+  cd libvpx
+  git checkout "${LIBVPX_VERSION}"
+  # Compile libvpx according to the docs:
+  # - https://chromium.googlesource.com/webm/libvpx/+/main/README
+  ./configure --prefix="${PREFIX}" ${LIBVPX_CONFIG}
+  make && make install
+}
+
+function build_ffmpeg {
+  cd "${BUILDDIR}"
+  git clone git://source.ffmpeg.org/ffmpeg.git
+  cd ffmpeg
+  git checkout "${FFMPEG_VERSION}"
+  export PKG_CONFIG_PATH="${PREFIX}/lib/pkgconfig"
+  # Prohibit pkg-config from using system installed libs.
+  export PKG_CONFIG_LIBDIR=
+
+  ./configure --pkg-config=pkg-config \
+              --pkg-config-flags="--static" \
+              --extra-cflags="-I/${PREFIX}/include" \
+              --extra-ldflags="-L/${PREFIX}/lib" \
+              --prefix="${PREFIX}" \
+              --bindir="${PWD}/bin" \
+              ${FFMPEG_CONFIG}
+  make && make install
+}
+
+REQUIERED_BUILD_TOOLS=("git" "make" "yasm" "pkg-config")
+missing_build_tools=()
+
+for dependency in ${REQUIERED_BUILD_TOOLS[@]}; do
+  if ! command -v "${dependency}" >/dev/null; then
+    missing_build_tools+=("${dependency}")
+  fi
+done
+
+if [[ ${#missing_build_tools[@]} != 0 ]]; then
+  if [[ "$1" == "--full" ]]; then
+    brew install ${missing_build_tools[@]}
+  else
+    die "ERROR: missing dependencies! Please run:    brew install ${missing_build_tools[@]}"
+  fi
+fi
+
+# Cleanup
+set -x
+rm -rf "${BUILDDIR}"
+mkdir -p "${BUILDDIR}"
+
+build_zlib
+build_libvpx
+build_ffmpeg
+
+# put resulting executable where we were asked to
+mkdir -p $(dirname "${OUTPUT_PATH}")
+cp "${BUILDDIR}/ffmpeg/bin/ffmpeg" "${OUTPUT_PATH}"
+strip "${OUTPUT_PATH}"
diff --git a/browser_patches/ffmpeg/build.sh b/browser_patches/ffmpeg/build.sh
new file mode 100755
index 0000000000000000000000000000000000000000..929f78823481f8638bc6731114161f00c408d9cd
--- /dev/null
+++ b/browser_patches/ffmpeg/build.sh
@@ -0,0 +1,78 @@
+#!/bin/bash
+
+# Copyright (c) Microsoft Corporation.
+#
+# Licensed under the Apache License, Version 2.0 (the 'License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+set -e
+set +x
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname $0)"
+
+if [[ ("$1" == "-h") || ("$1" == "--help") ]]; then
+  echo "usage: $(basename $0) [--mac|--linux|--cross-compile-win64] [--full]"
+  echo
+  echo "Build ffmpeg for the given platform"
+  echo
+  exit 0
+fi
+
+if [[ -z "$1" ]]; then
+  echo "ERROR: expected build target. Run with --help for more info"
+  exit 1
+fi
+
+LICENSE_FILE="COPYING.LGPLv2.1"
+
+rm -rf ./output
+mkdir -p output
+cp ffmpeg-license/"${LICENSE_FILE}" output
+
+dockerflags="";
+# Use |-it| to run docker to support Ctrl-C if we run the script inside interactive terminal.
+# Otherwise (e.g. cronjob) - do nothing.
+if [[ -t 0 ]]; then
+  dockerflags="-it"
+fi
+
+function ensure_docker_or_die() {
+  if ! command -v docker >/dev/null; then
+    echo "ERROR: docker is required for the script"
+    exit 1
+  fi
+}
+
+if [[ "$1" == "--mac" ]]; then
+  bash ./build-mac.sh $2
+  cd output && zip ffmpeg.zip ffmpeg-mac "${LICENSE_FILE}"
+elif [[ "$1" == "--linux" ]]; then
+  ensure_docker_or_die
+
+  time docker run --init --rm -v"${PWD}":/host ${dockerflags} ubuntu:18.04 bash /host/build-linux.sh /host/output/ffmpeg-linux
+  cd output && zip ffmpeg.zip ffmpeg-linux "${LICENSE_FILE}"
+elif [[ "$1" == --cross-compile-win64 ]]; then
+  ensure_docker_or_die
+
+  time docker run --init --rm -v"${PWD}":/host ${dockerflags} ubuntu:18.04 bash /host/crosscompile-from-linux.sh --win64 /host/output/ffmpeg-win64.exe
+  cd output && zip ffmpeg.zip ffmpeg-win64.exe "${LICENSE_FILE}"
+elif [[ "$1" == "--cross-compile-linux-arm64" ]]; then
+  ensure_docker_or_die
+
+  time docker run --init --rm -v"${PWD}":/host ${dockerflags} ubuntu:18.04 bash /host/crosscompile-from-linux.sh --linux-arm64 /host/output/ffmpeg-linux
+  cd output && zip ffmpeg.zip ffmpeg-linux "${LICENSE_FILE}"
+else
+  echo "ERROR: unsupported platform - $1"
+  exit 1
+fi
+
diff --git a/browser_patches/ffmpeg/clean.sh b/browser_patches/ffmpeg/clean.sh
new file mode 100755
index 0000000000000000000000000000000000000000..db4d36c08e7bb5aede32063439ee6f8d98d1796c
--- /dev/null
+++ b/browser_patches/ffmpeg/clean.sh
@@ -0,0 +1,9 @@
+#!/bin/bash
+set -e
+set +x
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname $0)"
+
+rm -rf output
+
diff --git a/browser_patches/ffmpeg/crosscompile-from-linux.sh b/browser_patches/ffmpeg/crosscompile-from-linux.sh
new file mode 100644
index 0000000000000000000000000000000000000000..caa9484394656146c37af95b89d6e9a8e3ac2b51
--- /dev/null
+++ b/browser_patches/ffmpeg/crosscompile-from-linux.sh
@@ -0,0 +1,147 @@
+#!/bin/bash
+
+# Copyright (c) Microsoft Corporation.
+#
+# Licensed under the Apache License, Version 2.0 (the 'License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+set -ex
+
+function die() { echo "$@"; exit 1; }
+
+
+PREFIX="${HOME}/prefix"
+TOOLCHAIN_PREFIX_64="/usr/bin/x86_64-w64-mingw32-"
+TOOLCHAIN_PREFIX_ARM64="/usr/bin/aarch64-linux-gnu-"
+
+arch=""
+toolchain_prefix=""
+binary=""
+
+if [[ "$(uname)" != "Linux" ]]; then
+  echo "ERROR: this script is designed to be run on Linux. Can't run on $(uname)"
+  exit 1
+fi
+
+if [[ "$1" == "--win64" ]]; then
+  arch="win64";
+  toolchain_prefix="${TOOLCHAIN_PREFIX_64}"
+  binary="ffmpeg.exe"
+elif [[ "$1" == "--linux-arm64" ]]; then
+  arch="linux-arm64";
+  toolchain_prefix="${TOOLCHAIN_PREFIX_ARM64}"
+  binary="ffmpeg"
+elif [[ -z "$1" ]]; then
+  die "ERROR: expect --win64 or --linux-arm64 as the first argument"
+else
+  die "ERROR: unknown arch '$1' - expected --win64 or --linux-arm64"
+fi
+
+output_path="$2"
+if [[ -z "${output_path}" ]]; then
+  die "ERROR: output path is not specified"
+elif [[ "${output_path}" != /* ]]; then
+  die "ERROR: output path ${output_path} is not absolute"
+elif ! [[ -d $(dirname "${output_path}") ]]; then
+  die "ERROR: folder for output path ${output_path} does not exist."
+fi
+
+function build_zlib {
+  cd "${HOME}"
+  git clone https://github.com/madler/zlib
+  cd zlib
+  git checkout "${ZLIB_VERSION}"
+  ./configure --prefix="${PREFIX}" ${ZLIB_CONFIG}
+  make \
+    CC="${toolchain_prefix}gcc" \
+    CXX="${toolchain_prefix}g++" \
+    AR="${toolchain_prefix}ar" \
+    PREFIX="$PREFIX" \
+    RANLIB="${toolchain_prefix}ranlib" \
+    LD="${toolchain_prefix}ld" \
+    STRIP="${toolchain_prefix}strip"
+  make install
+}
+
+function build_libvpx {
+  cd "${HOME}"
+  git clone https://chromium.googlesource.com/webm/libvpx
+  cd libvpx
+  git checkout "${LIBVPX_VERSION}"
+  # Cross-compiling libvpx according to the docs:
+  # - https://chromium.googlesource.com/webm/libvpx/+/main/README
+  local target=""
+  if [[ $arch == "win64" ]]; then
+    target="x86_64-win64-gcc";
+  elif [[ $arch == "linux-arm64" ]]; then
+    target="arm64-linux-gcc";
+  else
+    die "ERROR: unsupported arch to compile libvpx - $arch"
+  fi
+  CROSS="${toolchain_prefix}" ./configure --prefix="${PREFIX}" --target="${target}" ${LIBVPX_CONFIG}
+  CROSS="${toolchain_prefix}" make && make install
+}
+
+function build_ffmpeg {
+  cd "${HOME}"
+  git clone git://source.ffmpeg.org/ffmpeg.git
+  cd ffmpeg
+  git checkout "${FFMPEG_VERSION}"
+  export PKG_CONFIG_PATH="${PREFIX}/lib/pkgconfig"
+  # Prohibit pkg-config from using linux system installed libs.
+  export PKG_CONFIG_LIBDIR=
+
+  local ffmpeg_arch=""
+  local ffmpeg_target_os=""
+  if [[ $arch == "win64" ]]; then
+    ffmpeg_arch="x86_64";
+    ffmpeg_target_os="mingw32"
+  elif [[ $arch == "linux-arm64" ]]; then
+    ffmpeg_arch="arm64";
+    ffmpeg_target_os="linux"
+  else
+    die "ERROR: unsupported arch to compile ffmpeg - $arch"
+  fi
+  ./configure --arch="${ffmpeg_arch}" \
+            --target-os="${ffmpeg_target_os}" \
+            --cross-prefix="${toolchain_prefix}" \
+            --disable-doc \
+            --pkg-config=pkg-config \
+            --pkg-config-flags="--static" \
+            --extra-cflags="-I/${PREFIX}/include" \
+            --extra-ldflags="-L/${PREFIX}/lib -static" \
+            --prefix="${PREFIX}" \
+            --bindir="${PWD}/bin" \
+            ${FFMPEG_CONFIG}
+  make && make install
+}
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname $0)"
+
+source ./CONFIG.sh
+
+apt-get update
+apt-get install -y git make yasm pkg-config
+if [[ "${arch}" == "linux-arm64" ]]; then
+  apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
+else
+  apt-get install -y mingw-w64
+fi
+
+build_zlib
+build_libvpx
+build_ffmpeg
+
+# put resulting executable where we were asked to
+cp "${HOME}/ffmpeg/bin/${binary}" "${output_path}"
+${toolchain_prefix}strip "${output_path}"
diff --git a/browser_patches/ffmpeg/ffmpeg-license/COPYING.LGPLv2.1 b/browser_patches/ffmpeg/ffmpeg-license/COPYING.LGPLv2.1
new file mode 100644
index 0000000000000000000000000000000000000000..58af0d3787aec7d6f8d833535d64879156e7ec23
--- /dev/null
+++ b/browser_patches/ffmpeg/ffmpeg-license/COPYING.LGPLv2.1
@@ -0,0 +1,502 @@
+                  GNU LESSER GENERAL PUBLIC LICENSE
+                       Version 2.1, February 1999
+
+ Copyright (C) 1991, 1999 Free Software Foundation, Inc.
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+[This is the first released version of the Lesser GPL.  It also counts
+ as the successor of the GNU Library Public License, version 2, hence
+ the version number 2.1.]
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+Licenses are intended to guarantee your freedom to share and change
+free software--to make sure the software is free for all its users.
+
+  This license, the Lesser General Public License, applies to some
+specially designated software packages--typically libraries--of the
+Free Software Foundation and other authors who decide to use it.  You
+can use it too, but we suggest you first think carefully about whether
+this license or the ordinary General Public License is the better
+strategy to use in any particular case, based on the explanations below.
+
+  When we speak of free software, we are referring to freedom of use,
+not price.  Our General Public Licenses are designed to make sure that
+you have the freedom to distribute copies of free software (and charge
+for this service if you wish); that you receive source code or can get
+it if you want it; that you can change the software and use pieces of
+it in new free programs; and that you are informed that you can do
+these things.
+
+  To protect your rights, we need to make restrictions that forbid
+distributors to deny you these rights or to ask you to surrender these
+rights.  These restrictions translate to certain responsibilities for
+you if you distribute copies of the library or if you modify it.
+
+  For example, if you distribute copies of the library, whether gratis
+or for a fee, you must give the recipients all the rights that we gave
+you.  You must make sure that they, too, receive or can get the source
+code.  If you link other code with the library, you must provide
+complete object files to the recipients, so that they can relink them
+with the library after making changes to the library and recompiling
+it.  And you must show them these terms so they know their rights.
+
+  We protect your rights with a two-step method: (1) we copyright the
+library, and (2) we offer you this license, which gives you legal
+permission to copy, distribute and/or modify the library.
+
+  To protect each distributor, we want to make it very clear that
+there is no warranty for the free library.  Also, if the library is
+modified by someone else and passed on, the recipients should know
+that what they have is not the original version, so that the original
+author's reputation will not be affected by problems that might be
+introduced by others.
+
+  Finally, software patents pose a constant threat to the existence of
+any free program.  We wish to make sure that a company cannot
+effectively restrict the users of a free program by obtaining a
+restrictive license from a patent holder.  Therefore, we insist that
+any patent license obtained for a version of the library must be
+consistent with the full freedom of use specified in this license.
+
+  Most GNU software, including some libraries, is covered by the
+ordinary GNU General Public License.  This license, the GNU Lesser
+General Public License, applies to certain designated libraries, and
+is quite different from the ordinary General Public License.  We use
+this license for certain libraries in order to permit linking those
+libraries into non-free programs.
+
+  When a program is linked with a library, whether statically or using
+a shared library, the combination of the two is legally speaking a
+combined work, a derivative of the original library.  The ordinary
+General Public License therefore permits such linking only if the
+entire combination fits its criteria of freedom.  The Lesser General
+Public License permits more lax criteria for linking other code with
+the library.
+
+  We call this license the "Lesser" General Public License because it
+does Less to protect the user's freedom than the ordinary General
+Public License.  It also provides other free software developers Less
+of an advantage over competing non-free programs.  These disadvantages
+are the reason we use the ordinary General Public License for many
+libraries.  However, the Lesser license provides advantages in certain
+special circumstances.
+
+  For example, on rare occasions, there may be a special need to
+encourage the widest possible use of a certain library, so that it becomes
+a de-facto standard.  To achieve this, non-free programs must be
+allowed to use the library.  A more frequent case is that a free
+library does the same job as widely used non-free libraries.  In this
+case, there is little to gain by limiting the free library to free
+software only, so we use the Lesser General Public License.
+
+  In other cases, permission to use a particular library in non-free
+programs enables a greater number of people to use a large body of
+free software.  For example, permission to use the GNU C Library in
+non-free programs enables many more people to use the whole GNU
+operating system, as well as its variant, the GNU/Linux operating
+system.
+
+  Although the Lesser General Public License is Less protective of the
+users' freedom, it does ensure that the user of a program that is
+linked with the Library has the freedom and the wherewithal to run
+that program using a modified version of the Library.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.  Pay close attention to the difference between a
+"work based on the library" and a "work that uses the library".  The
+former contains code derived from the library, whereas the latter must
+be combined with the library in order to run.
+
+                  GNU LESSER GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License Agreement applies to any software library or other
+program which contains a notice placed by the copyright holder or
+other authorized party saying it may be distributed under the terms of
+this Lesser General Public License (also called "this License").
+Each licensee is addressed as "you".
+
+  A "library" means a collection of software functions and/or data
+prepared so as to be conveniently linked with application programs
+(which use some of those functions and data) to form executables.
+
+  The "Library", below, refers to any such software library or work
+which has been distributed under these terms.  A "work based on the
+Library" means either the Library or any derivative work under
+copyright law: that is to say, a work containing the Library or a
+portion of it, either verbatim or with modifications and/or translated
+straightforwardly into another language.  (Hereinafter, translation is
+included without limitation in the term "modification".)
+
+  "Source code" for a work means the preferred form of the work for
+making modifications to it.  For a library, complete source code means
+all the source code for all modules it contains, plus any associated
+interface definition files, plus the scripts used to control compilation
+and installation of the library.
+
+  Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running a program using the Library is not restricted, and output from
+such a program is covered only if its contents constitute a work based
+on the Library (independent of the use of the Library in a tool for
+writing it).  Whether that is true depends on what the Library does
+and what the program that uses the Library does.
+
+  1. You may copy and distribute verbatim copies of the Library's
+complete source code as you receive it, in any medium, provided that
+you conspicuously and appropriately publish on each copy an
+appropriate copyright notice and disclaimer of warranty; keep intact
+all the notices that refer to this License and to the absence of any
+warranty; and distribute a copy of this License along with the
+Library.
+
+  You may charge a fee for the physical act of transferring a copy,
+and you may at your option offer warranty protection in exchange for a
+fee.
+
+  2. You may modify your copy or copies of the Library or any portion
+of it, thus forming a work based on the Library, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) The modified work must itself be a software library.
+
+    b) You must cause the files modified to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    c) You must cause the whole of the work to be licensed at no
+    charge to all third parties under the terms of this License.
+
+    d) If a facility in the modified Library refers to a function or a
+    table of data to be supplied by an application program that uses
+    the facility, other than as an argument passed when the facility
+    is invoked, then you must make a good faith effort to ensure that,
+    in the event an application does not supply such function or
+    table, the facility still operates, and performs whatever part of
+    its purpose remains meaningful.
+
+    (For example, a function in a library to compute square roots has
+    a purpose that is entirely well-defined independent of the
+    application.  Therefore, Subsection 2d requires that any
+    application-supplied function or table used by this function must
+    be optional: if the application does not supply it, the square
+    root function must still compute square roots.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Library,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Library, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote
+it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Library.
+
+In addition, mere aggregation of another work not based on the Library
+with the Library (or with a work based on the Library) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may opt to apply the terms of the ordinary GNU General Public
+License instead of this License to a given copy of the Library.  To do
+this, you must alter all the notices that refer to this License, so
+that they refer to the ordinary GNU General Public License, version 2,
+instead of to this License.  (If a newer version than version 2 of the
+ordinary GNU General Public License has appeared, then you can specify
+that version instead if you wish.)  Do not make any other change in
+these notices.
+
+  Once this change is made in a given copy, it is irreversible for
+that copy, so the ordinary GNU General Public License applies to all
+subsequent copies and derivative works made from that copy.
+
+  This option is useful when you wish to copy part of the code of
+the Library into a program that is not a library.
+
+  4. You may copy and distribute the Library (or a portion or
+derivative of it, under Section 2) in object code or executable form
+under the terms of Sections 1 and 2 above provided that you accompany
+it with the complete corresponding machine-readable source code, which
+must be distributed under the terms of Sections 1 and 2 above on a
+medium customarily used for software interchange.
+
+  If distribution of object code is made by offering access to copy
+from a designated place, then offering equivalent access to copy the
+source code from the same place satisfies the requirement to
+distribute the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  5. A program that contains no derivative of any portion of the
+Library, but is designed to work with the Library by being compiled or
+linked with it, is called a "work that uses the Library".  Such a
+work, in isolation, is not a derivative work of the Library, and
+therefore falls outside the scope of this License.
+
+  However, linking a "work that uses the Library" with the Library
+creates an executable that is a derivative of the Library (because it
+contains portions of the Library), rather than a "work that uses the
+library".  The executable is therefore covered by this License.
+Section 6 states terms for distribution of such executables.
+
+  When a "work that uses the Library" uses material from a header file
+that is part of the Library, the object code for the work may be a
+derivative work of the Library even though the source code is not.
+Whether this is true is especially significant if the work can be
+linked without the Library, or if the work is itself a library.  The
+threshold for this to be true is not precisely defined by law.
+
+  If such an object file uses only numerical parameters, data
+structure layouts and accessors, and small macros and small inline
+functions (ten lines or less in length), then the use of the object
+file is unrestricted, regardless of whether it is legally a derivative
+work.  (Executables containing this object code plus portions of the
+Library will still fall under Section 6.)
+
+  Otherwise, if the work is a derivative of the Library, you may
+distribute the object code for the work under the terms of Section 6.
+Any executables containing that work also fall under Section 6,
+whether or not they are linked directly with the Library itself.
+
+  6. As an exception to the Sections above, you may also combine or
+link a "work that uses the Library" with the Library to produce a
+work containing portions of the Library, and distribute that work
+under terms of your choice, provided that the terms permit
+modification of the work for the customer's own use and reverse
+engineering for debugging such modifications.
+
+  You must give prominent notice with each copy of the work that the
+Library is used in it and that the Library and its use are covered by
+this License.  You must supply a copy of this License.  If the work
+during execution displays copyright notices, you must include the
+copyright notice for the Library among them, as well as a reference
+directing the user to the copy of this License.  Also, you must do one
+of these things:
+
+    a) Accompany the work with the complete corresponding
+    machine-readable source code for the Library including whatever
+    changes were used in the work (which must be distributed under
+    Sections 1 and 2 above); and, if the work is an executable linked
+    with the Library, with the complete machine-readable "work that
+    uses the Library", as object code and/or source code, so that the
+    user can modify the Library and then relink to produce a modified
+    executable containing the modified Library.  (It is understood
+    that the user who changes the contents of definitions files in the
+    Library will not necessarily be able to recompile the application
+    to use the modified definitions.)
+
+    b) Use a suitable shared library mechanism for linking with the
+    Library.  A suitable mechanism is one that (1) uses at run time a
+    copy of the library already present on the user's computer system,
+    rather than copying library functions into the executable, and (2)
+    will operate properly with a modified version of the library, if
+    the user installs one, as long as the modified version is
+    interface-compatible with the version that the work was made with.
+
+    c) Accompany the work with a written offer, valid for at
+    least three years, to give the same user the materials
+    specified in Subsection 6a, above, for a charge no more
+    than the cost of performing this distribution.
+
+    d) If distribution of the work is made by offering access to copy
+    from a designated place, offer equivalent access to copy the above
+    specified materials from the same place.
+
+    e) Verify that the user has already received a copy of these
+    materials or that you have already sent this user a copy.
+
+  For an executable, the required form of the "work that uses the
+Library" must include any data and utility programs needed for
+reproducing the executable from it.  However, as a special exception,
+the materials to be distributed need not include anything that is
+normally distributed (in either source or binary form) with the major
+components (compiler, kernel, and so on) of the operating system on
+which the executable runs, unless that component itself accompanies
+the executable.
+
+  It may happen that this requirement contradicts the license
+restrictions of other proprietary libraries that do not normally
+accompany the operating system.  Such a contradiction means you cannot
+use both them and the Library together in an executable that you
+distribute.
+
+  7. You may place library facilities that are a work based on the
+Library side-by-side in a single library together with other library
+facilities not covered by this License, and distribute such a combined
+library, provided that the separate distribution of the work based on
+the Library and of the other library facilities is otherwise
+permitted, and provided that you do these two things:
+
+    a) Accompany the combined library with a copy of the same work
+    based on the Library, uncombined with any other library
+    facilities.  This must be distributed under the terms of the
+    Sections above.
+
+    b) Give prominent notice with the combined library of the fact
+    that part of it is a work based on the Library, and explaining
+    where to find the accompanying uncombined form of the same work.
+
+  8. You may not copy, modify, sublicense, link with, or distribute
+the Library except as expressly provided under this License.  Any
+attempt otherwise to copy, modify, sublicense, link with, or
+distribute the Library is void, and will automatically terminate your
+rights under this License.  However, parties who have received copies,
+or rights, from you under this License will not have their licenses
+terminated so long as such parties remain in full compliance.
+
+  9. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Library or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Library (or any work based on the
+Library), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Library or works based on it.
+
+  10. Each time you redistribute the Library (or any work based on the
+Library), the recipient automatically receives a license from the
+original licensor to copy, distribute, link with or modify the Library
+subject to these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties with
+this License.
+
+  11. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Library at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Library by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Library.
+
+If any portion of this section is held invalid or unenforceable under any
+particular circumstance, the balance of the section is intended to apply,
+and the section as a whole is intended to apply in other circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  12. If the distribution and/or use of the Library is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Library under this License may add
+an explicit geographical distribution limitation excluding those countries,
+so that distribution is permitted only in or among countries not thus
+excluded.  In such case, this License incorporates the limitation as if
+written in the body of this License.
+
+  13. The Free Software Foundation may publish revised and/or new
+versions of the Lesser General Public License from time to time.
+Such new versions will be similar in spirit to the present version,
+but may differ in detail to address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Library
+specifies a version number of this License which applies to it and
+"any later version", you have the option of following the terms and
+conditions either of that version or of any later version published by
+the Free Software Foundation.  If the Library does not specify a
+license version number, you may choose any version ever published by
+the Free Software Foundation.
+
+  14. If you wish to incorporate parts of the Library into other free
+programs whose distribution conditions are incompatible with these,
+write to the author to ask for permission.  For software which is
+copyrighted by the Free Software Foundation, write to the Free
+Software Foundation; we sometimes make exceptions for this.  Our
+decision will be guided by the two goals of preserving the free status
+of all derivatives of our free software and of promoting the sharing
+and reuse of software generally.
+
+                            NO WARRANTY
+
+  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
+WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
+EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
+OTHER PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT WARRANTY OF ANY
+KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
+LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME
+THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
+
+  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
+WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY
+AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU
+FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
+CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
+LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
+RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
+FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
+SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
+DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+           How to Apply These Terms to Your New Libraries
+
+  If you develop a new library, and you want it to be of the greatest
+possible use to the public, we recommend making it free software that
+everyone can redistribute and change.  You can do so by permitting
+redistribution under these terms (or, alternatively, under the terms of the
+ordinary General Public License).
+
+  To apply these terms, attach the following notices to the library.  It is
+safest to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least the
+"copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the library's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Lesser General Public
+    License as published by the Free Software Foundation; either
+    version 2.1 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Lesser General Public License for more details.
+
+    You should have received a copy of the GNU Lesser General Public
+    License along with this library; if not, write to the Free Software
+    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+
+Also add information on how to contact you by electronic and paper mail.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the library, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the
+  library `Frob' (a library for tweaking knobs) written by James Random Hacker.
+
+  <signature of Ty Coon>, 1 April 1990
+  Ty Coon, President of Vice
+
+That's all there is to it!
diff --git a/browser_patches/firefox-beta/.gitignore b/browser_patches/firefox-beta/.gitignore
new file mode 100644
index 0000000000000000000000000000000000000000..5e660dc18ee09de767206f11ad044e132867bf21
--- /dev/null
+++ b/browser_patches/firefox-beta/.gitignore
@@ -0,0 +1 @@
+/checkout
diff --git a/browser_patches/firefox-beta/BUILD_NUMBER b/browser_patches/firefox-beta/BUILD_NUMBER
new file mode 100644
index 0000000000000000000000000000000000000000..2486d7d893305990b0b69a69105936cc45393045
--- /dev/null
+++ b/browser_patches/firefox-beta/BUILD_NUMBER
@@ -0,0 +1,2 @@
+1343
+Changed: yurys@chromium.org Fri Aug  5 15:17:14 PDT 2022
diff --git a/browser_patches/firefox-beta/EXPECTED_BUILDS b/browser_patches/firefox-beta/EXPECTED_BUILDS
new file mode 100644
index 0000000000000000000000000000000000000000..1ef87929ac3838e42c94273ff7561315342922a2
--- /dev/null
+++ b/browser_patches/firefox-beta/EXPECTED_BUILDS
@@ -0,0 +1,9 @@
+firefox-beta-mac-11.zip
+firefox-beta-mac-11-arm64.zip
+firefox-beta-ubuntu-18.04.zip
+firefox-beta-ubuntu-20.04.zip
+firefox-beta-ubuntu-20.04-arm64.zip
+firefox-beta-ubuntu-22.04.zip
+firefox-beta-ubuntu-22.04-arm64.zip
+firefox-beta-debian-11.zip
+firefox-beta-win64.zip
diff --git a/browser_patches/firefox-beta/UPSTREAM_CONFIG.sh b/browser_patches/firefox-beta/UPSTREAM_CONFIG.sh
new file mode 100644
index 0000000000000000000000000000000000000000..750e3b3fcbf644f3b8d82db008599276e244f3c5
--- /dev/null
+++ b/browser_patches/firefox-beta/UPSTREAM_CONFIG.sh
@@ -0,0 +1,3 @@
+REMOTE_URL="https://github.com/mozilla/gecko-dev"
+BASE_BRANCH="beta"
+BASE_REVISION="30c461e82b48bd2e4f69c9cba7f6a0e86dbf7040"
diff --git a/browser_patches/firefox-beta/archive.sh b/browser_patches/firefox-beta/archive.sh
new file mode 100755
index 0000000000000000000000000000000000000000..99dd2c31cb21fbfff41cb5ac41d5c08b58a970dc
--- /dev/null
+++ b/browser_patches/firefox-beta/archive.sh
@@ -0,0 +1,61 @@
+#!/bin/bash
+set -e
+set +x
+
+if [[ ("$1" == "-h") || ("$1" == "--help") ]]; then
+  echo "usage: $(basename "$0") [output-absolute-path]"
+  echo
+  echo "Generate distributable .zip archive from Firefox checkout folder that was previously built."
+  echo
+  exit 0
+fi
+
+ZIP_PATH=$1
+if [[ $ZIP_PATH != /* ]]; then
+  echo "ERROR: path $ZIP_PATH is not absolute"
+  exit 1
+fi
+if [[ $ZIP_PATH != *.zip ]]; then
+  echo "ERROR: path $ZIP_PATH must have .zip extension"
+  exit 1
+fi
+if [[ -f $ZIP_PATH ]]; then
+  echo "ERROR: path $ZIP_PATH exists; can't do anything."
+  exit 1
+fi
+if ! [[ -d $(dirname "$ZIP_PATH") ]]; then
+  echo "ERROR: folder for path $($ZIP_PATH) does not exist."
+  exit 1
+fi
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname "$0")"
+SCRIPT_FOLDER="$(pwd -P)"
+source "${SCRIPT_FOLDER}/../utils.sh"
+
+if [[ -z "${FF_CHECKOUT_PATH}" ]]; then
+  FF_CHECKOUT_PATH="$HOME/firefox"
+fi
+OBJ_FOLDER="${FF_CHECKOUT_PATH}/obj-build-playwright"
+
+cd "${FF_CHECKOUT_PATH}"
+
+export MH_BRANCH=mozilla-beta
+export MOZ_BUILD_DATE=$(date +%Y%m%d%H%M%S)
+./mach package
+node "${SCRIPT_FOLDER}/install-preferences.js" "${OBJ_FOLDER}/dist/firefox"
+
+if ! [[ -d "$OBJ_FOLDER/dist/firefox" ]]; then
+  echo "ERROR: cannot find $OBJ_FOLDER/dist/firefox folder in the firefox checkout. Did you build?"
+  exit 1;
+fi
+
+if is_win; then
+  # Bundle vcruntime14_1.dll - see https://github.com/microsoft/playwright/issues/9974
+  cd "$(printMSVCRedistDir)"
+  cp -t "${OBJ_FOLDER}/dist/firefox" vcruntime140_1.dll
+fi
+
+# tar resulting directory and cleanup TMP.
+cd "${OBJ_FOLDER}/dist"
+zip -r "$ZIP_PATH" firefox
diff --git a/browser_patches/firefox-beta/build.sh b/browser_patches/firefox-beta/build.sh
new file mode 100755
index 0000000000000000000000000000000000000000..4f2e8c1b54917c2ef61bdd329bf8a1840c36035a
--- /dev/null
+++ b/browser_patches/firefox-beta/build.sh
@@ -0,0 +1,153 @@
+#!/bin/bash
+set -e
+set +x
+
+RUST_VERSION="1.59.0"
+CBINDGEN_VERSION="0.24.3"
+
+trap "cd $(pwd -P)" EXIT
+
+cd "$(dirname "$0")"
+SCRIPT_FOLDER="$(pwd -P)"
+source "${SCRIPT_FOLDER}/../utils.sh"
+
+if [[ ! -z "${FF_CHECKOUT_PATH}" ]]; then
+  cd "${FF_CHECKOUT_PATH}"
+  echo "WARNING: checkout path from FF_CHECKOUT_PATH env: ${FF_CHECKOUT_PATH}"
+else
+  cd "$HOME/firefox"
+fi
+
+args=("$@")
+IS_FULL=""
+IS_JUGGLER=""
+IS_DEBUG=""
+for ((i="${#args[@]}"-1; i >= 0; --i)); do
+    case ${args[i]} in
+        --full) IS_FULL="1"; unset args[i]; ;;
+        --juggler) IS_JUGGLER="1"; unset args[i]; ;;
+        --debug) IS_DEBUG="1"; unset args[i]; ;;
+    esac
+done
+
+if [[ -n "${IS_JUGGLER}" && -n "${IS_FULL}" ]]; then
+  echo "ERROR: either --full or --juggler is allowed"
+  exit 1
+fi
+
+echo "== BUILD CONFIGURATION =="
+if [[ -n "${IS_FULL}" ]]; then
+  echo "- build type: FULL"
+elif [[ -n "${IS_JUGGLER}" ]]; then
+  echo "- build type: JUGGLER"
+else
+  echo "- build type: INCREMENTAL"
+fi
+
+if [[ -n "${IS_DEBUG}" ]]; then
+  echo "- debug: YES"
+else
+  echo "- debug: NO"
+fi
+
+echo "========================="
+
+rm -rf .mozconfig
+
+if is_mac; then
+  selectXcodeVersionOrDie $(node "${SCRIPT_FOLDER}/../get_xcode_version.js" firefox)
+  echo "-- building on Mac"
+elif is_linux; then
+  echo "-- building on Linux"
+elif is_win; then
+  echo "ac_add_options --disable-update-agent" >> .mozconfig
+  echo "ac_add_options --disable-default-browser-agent" >> .mozconfig
+  echo "ac_add_options --disable-maintenance-service" >> .mozconfig
+
+  echo "-- building win64 build on MINGW"
+  echo "ac_add_options --target=x86_64-pc-mingw32" >> .mozconfig
+  echo "ac_add_options --host=x86_64-pc-mingw32" >> .mozconfig
+  DLL_FILE=$("C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -find '**\Redist\MSVC\*\x64\**\vcruntime140.dll')
+  WIN32_REDIST_DIR=$(dirname "$DLL_FILE" | tail -n 1)
+  if ! [[ -d $WIN32_REDIST_DIR ]]; then
+    echo "ERROR: cannot find MS VS C++ redistributable $WIN32_REDIST_DIR"
+    exit 1;
+  fi
+else
+  echo "ERROR: cannot upload on this platform!" 1>&2
+  exit 1;
+fi
+
+# There's no pre-built wasi sysroot on certain platforms.
+echo "ac_add_options --without-wasm-sandboxed-libraries" >> .mozconfig
+
+OBJ_FOLDER="obj-build-playwright"
+echo "mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/${OBJ_FOLDER}" >> .mozconfig
+echo "ac_add_options --disable-crashreporter" >> .mozconfig
+echo "ac_add_options --disable-backgroundtasks" >> .mozconfig
+
+if [[ -n "${IS_DEBUG}" ]]; then
+  echo "ac_add_options --enable-debug" >> .mozconfig
+  echo "ac_add_options --enable-debug-symbols" >> .mozconfig
+else
+  echo "ac_add_options --enable-release" >> .mozconfig
+fi
+
+if is_mac || is_win; then
+  # This options is only available on win and mac.
+  echo "ac_add_options --disable-update-agent" >> .mozconfig
+fi
+
+if [[ -z "${IS_JUGGLER}" ]]; then
+  # TODO: rustup is not in the PATH on Windows
+  if command -v rustup >/dev/null; then
+    # We manage Rust version ourselves.
+    echo "-- Using rust v${RUST_VERSION}"
+    rustup install "${RUST_VERSION}"
+    rustup default "${RUST_VERSION}"
+  fi
+  # Firefox on Linux arm64 host does not ship
+  # cbindgen in their default toolchains - install manually.
+  if command -v cargo >/dev/null; then
+    echo "-- Using cbindgen v${CBINDGEN_VERSION}"
+    cargo install cbindgen --version "${CBINDGEN_VERSION}"
+  fi
+fi
+
+if [[ -n "${IS_FULL}" ]]; then
+  # This is a slow but sure way to get all the necessary toolchains.
+  # However, it will not work if tree is dirty.
+  # Bail out if git repo is dirty.
+  if [[ -n $(git status -s --untracked-files=no) ]]; then
+    echo "ERROR: dirty GIT state - commit everything and re-run the script."
+    exit 1
+  fi
+
+  # 1. We have a --single-branch checkout, so we have to add a "master" branch and fetch it
+  git remote set-branches --add browser_upstream master
+  git fetch --depth 1 browser_upstream master
+  # 2. Checkout the master branch and run bootstrap from it.
+  git checkout browser_upstream/master
+  echo "ac_add_options --enable-bootstrap" >> .mozconfig
+  SHELL=/bin/sh ./mach --no-interactive bootstrap --application-choice=browser
+  git checkout -
+  rm -rf "${OBJ_FOLDER}"
+
+  if [[ -n "${WIN32_REDIST_DIR}" ]]; then
+    # Having this option in .mozconfig kills incremental compilation.
+    echo "export WIN32_REDIST_DIR=\"$WIN32_REDIST_DIR\"" >> .mozconfig
+  fi
+fi
+
+if [[ -n "${IS_JUGGLER}" ]]; then
+  ./mach build faster
+else
+  ./mach build
+  if is_mac; then
+    FF_DEBUG_BUILD="${IS_DEBUG}" node "${SCRIPT_FOLDER}"/install-preferences.js "$PWD"/${OBJ_FOLDER}/dist
+  else
+    FF_DEBUG_BUILD="${IS_DEBUG}" node "${SCRIPT_FOLDER}"/install-preferences.js "$PWD"/${OBJ_FOLDER}/dist/bin
+  fi
+fi
+
+
diff --git a/browser_patches/firefox-beta/clean.sh b/browser_patches/firefox-beta/clean.sh
new file mode 100755
index 0000000000000000000000000000000000000000..d94baf33a30d9d33610c78277c576c7672aa2cb5
--- /dev/null
+++ b/browser_patches/firefox-beta/clean.sh
@@ -0,0 +1,20 @@
+#!/bin/bash
+set -e
+set +x
+
+trap "cd $(pwd -P)" EXIT
+if [[ ! -z "${FF_CHECKOUT_PATH}" ]]; then
+  cd "${FF_CHECKOUT_PATH}"
+  echo "WARNING: checkout path from FF_CHECKOUT_PATH env: ${FF_CHECKOUT_PATH}"
+else
+  cd "$HOME/firefox"
+fi
+
+OBJ_FOLDER="obj-build-playwright"
+if [[ -d $OBJ_FOLDER ]]; then
+  rm -rf $OBJ_FOLDER
+fi
+
+if [[ -f "mach" ]]; then
+  ./mach clobber || true
+fi
diff --git a/browser_patches/firefox-beta/install-preferences.js b/browser_patches/firefox-beta/install-preferences.js
new file mode 100644
index 0000000000000000000000000000000000000000..f82f791d54c0535ac4256b406edfea31cc2dc701
--- /dev/null
+++ b/browser_patches/firefox-beta/install-preferences.js
@@ -0,0 +1,100 @@
+/**
+ * Copyright 2018 Google Inc. All rights reserved.
+ * Modifications copyright (c) Microsoft Corporation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+const os = require('os');
+const fs = require('fs');
+const path = require('path');
+const util = require('util');
+
+const writeFileAsync = util.promisify(fs.writeFile.bind(fs));
+const mkdirAsync = util.promisify(fs.mkdir.bind(fs));
+
+// Install browser preferences after downloading and unpacking
+// firefox instances.
+// Based on:   https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Enterprise_deployment_before_60#Configuration
+async function installFirefoxPreferences(distpath) {
+  let executablePath = '';
+  if (os.platform() === 'linux')
+    executablePath = path.join(distpath, 'firefox');
+  else if (os.platform() === 'darwin')
+    executablePath = path.join(distpath, (process.env.FF_DEBUG_BUILD ? 'NightlyDebug.app' : 'Nightly.app'), 'Contents', 'MacOS', 'firefox');
+  else if (os.platform() === 'win32')
+    executablePath = path.join(distpath, 'firefox.exe');
+
+  const firefoxFolder = path.dirname(executablePath);
+
+  let prefPath = '';
+  let configPath = '';
+  if (os.platform() === 'darwin') {
+    prefPath = path.join(firefoxFolder, '..', 'Resources', 'defaults', 'pref');
+    configPath = path.join(firefoxFolder, '..', 'Resources');
+  } else if (os.platform() === 'linux') {
+    if (!fs.existsSync(path.join(firefoxFolder, 'browser', 'defaults')))
+      await mkdirAsync(path.join(firefoxFolder, 'browser', 'defaults'));
+    if (!fs.existsSync(path.join(firefoxFolder, 'browser', 'defaults', 'preferences')))
+      await mkdirAsync(path.join(firefoxFolder, 'browser', 'defaults', 'preferences'));
+    prefPath = path.join(firefoxFolder, 'browser', 'defaults', 'preferences');
+    configPath = firefoxFolder;
+  } else if (os.platform() === 'win32') {
+    prefPath = path.join(firefoxFolder, 'defaults', 'pref');
+    configPath = firefoxFolder;
+  } else {
+    throw new Error('Unsupported platform: ' + os.platform());
+  }
+
+  await Promise.all([
+    copyFile({
+      from: path.join(__dirname, 'preferences', '00-playwright-prefs.js'),
+      to: path.join(prefPath, '00-playwright-prefs.js'),
+    }),
+    copyFile({
+      from: path.join(__dirname, 'preferences', 'playwright.cfg'),
+      to: path.join(configPath, 'playwright.cfg'),
+    }),
+  ]);
+}
+
+function copyFile({from, to}) {
+  const rd = fs.createReadStream(from);
+  const wr = fs.createWriteStream(to);
+  return new Promise(function(resolve, reject) {
+    rd.on('error', reject);
+    wr.on('error', reject);
+    wr.on('finish', resolve);
+    rd.pipe(wr);
+  }).catch(function(error) {
+    rd.destroy();
+    wr.end();
+    throw error;
+  });
+}
+
+module.exports = { installFirefoxPreferences };
+
+if (require.main === module) {
+  if (process.argv.length !== 3) {
+    console.log('ERROR: expected a path to the directory with browser build');
+    process.exit(1);
+    return;
+  }
+
+  installFirefoxPreferences(process.argv[2]).catch(error => {
+    console.error('ERROR: failed to put preferences!');
+    console.error(error);
+    process.exit(1);
+  });
+}
diff --git a/browser_patches/firefox-beta/juggler/Helper.js b/browser_patches/firefox-beta/juggler/Helper.js
new file mode 100644
index 0000000000000000000000000000000000000000..70d8aef0d37c43303b376bfe5692836204160442
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/Helper.js
@@ -0,0 +1,135 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const uuidGen = Cc["@mozilla.org/uuid-generator;1"].getService(Ci.nsIUUIDGenerator);
+const {Services} = ChromeUtils.import("resource://gre/modules/Services.jsm");
+
+class Helper {
+
+  addObserver(handler, topic) {
+    Services.obs.addObserver(handler, topic);
+    return () => Services.obs.removeObserver(handler, topic);
+  }
+
+  addMessageListener(receiver, eventName, handler) {
+    receiver.addMessageListener(eventName, handler);
+    return () => receiver.removeMessageListener(eventName, handler);
+  }
+
+  addEventListener(receiver, eventName, handler) {
+    receiver.addEventListener(eventName, handler);
+    return () => receiver.removeEventListener(eventName, handler);
+  }
+
+  awaitEvent(receiver, eventName) {
+    return new Promise(resolve => {
+      receiver.addEventListener(eventName, function listener() {
+        receiver.removeEventListener(eventName, listener);
+        resolve();
+      });
+    });
+  }
+
+  on(receiver, eventName, handler) {
+    // The toolkit/modules/EventEmitter.jsm dispatches event name as a first argument.
+    // Fire event listeners without it for convenience.
+    const handlerWrapper = (_, ...args) => handler(...args);
+    receiver.on(eventName, handlerWrapper);
+    return () => receiver.off(eventName, handlerWrapper);
+  }
+
+  addProgressListener(progress, listener, flags) {
+    progress.addProgressListener(listener, flags);
+    return () => progress.removeProgressListener(listener);
+  }
+
+  removeListeners(listeners) {
+    for (const tearDown of listeners)
+      tearDown.call(null);
+    listeners.splice(0, listeners.length);
+  }
+
+  generateId() {
+    const string = uuidGen.generateUUID().toString();
+    return string.substring(1, string.length - 1);
+  }
+
+  getLoadContext(channel) {
+    let loadContext = null;
+    try {
+      if (channel.notificationCallbacks)
+        loadContext = channel.notificationCallbacks.getInterface(Ci.nsILoadContext);
+    } catch (e) {}
+    try {
+      if (!loadContext && channel.loadGroup)
+        loadContext = channel.loadGroup.notificationCallbacks.getInterface(Ci.nsILoadContext);
+    } catch (e) { }
+    return loadContext;
+  }
+
+  getNetworkErrorStatusText(status) {
+    if (!status)
+      return null;
+    for (const key of Object.keys(Cr)) {
+      if (Cr[key] === status)
+        return key;
+    }
+    // Security module. The following is taken from
+    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/How_to_check_the_secruity_state_of_an_XMLHTTPRequest_over_SSL
+    if ((status & 0xff0000) === 0x5a0000) {
+      // NSS_SEC errors (happen below the base value because of negative vals)
+      if ((status & 0xffff) < Math.abs(Ci.nsINSSErrorsService.NSS_SEC_ERROR_BASE)) {
+        // The bases are actually negative, so in our positive numeric space, we
+        // need to subtract the base off our value.
+        const nssErr = Math.abs(Ci.nsINSSErrorsService.NSS_SEC_ERROR_BASE) - (status & 0xffff);
+        switch (nssErr) {
+          case 11:
+            return 'SEC_ERROR_EXPIRED_CERTIFICATE';
+          case 12:
+            return 'SEC_ERROR_REVOKED_CERTIFICATE';
+          case 13:
+            return 'SEC_ERROR_UNKNOWN_ISSUER';
+          case 20:
+            return 'SEC_ERROR_UNTRUSTED_ISSUER';
+          case 21:
+            return 'SEC_ERROR_UNTRUSTED_CERT';
+          case 36:
+            return 'SEC_ERROR_CA_CERT_INVALID';
+          case 90:
+            return 'SEC_ERROR_INADEQUATE_KEY_USAGE';
+          case 176:
+            return 'SEC_ERROR_CERT_SIGNATURE_ALGORITHM_DISABLED';
+          default:
+            return 'SEC_ERROR_UNKNOWN';
+        }
+      }
+      const sslErr = Math.abs(Ci.nsINSSErrorsService.NSS_SSL_ERROR_BASE) - (status & 0xffff);
+      switch (sslErr) {
+        case 3:
+          return 'SSL_ERROR_NO_CERTIFICATE';
+        case 4:
+          return 'SSL_ERROR_BAD_CERTIFICATE';
+        case 8:
+          return 'SSL_ERROR_UNSUPPORTED_CERTIFICATE_TYPE';
+        case 9:
+          return 'SSL_ERROR_UNSUPPORTED_VERSION';
+        case 12:
+          return 'SSL_ERROR_BAD_CERT_DOMAIN';
+        default:
+          return 'SSL_ERROR_UNKNOWN';
+      }
+    }
+    return '<unknown error>';
+  }
+
+  browsingContextToFrameId(browsingContext) {
+    if (!browsingContext)
+      return undefined;
+    return 'frame-' + browsingContext.id;
+  }
+}
+
+var EXPORTED_SYMBOLS = [ "Helper" ];
+this.Helper = Helper;
+
diff --git a/browser_patches/firefox-beta/juggler/NetworkObserver.js b/browser_patches/firefox-beta/juggler/NetworkObserver.js
new file mode 100644
index 0000000000000000000000000000000000000000..340f756f6cfef0dce4e3067c1da4d6743f304a36
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/NetworkObserver.js
@@ -0,0 +1,947 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const {EventEmitter} = ChromeUtils.import('resource://gre/modules/EventEmitter.jsm');
+const {Helper} = ChromeUtils.import('chrome://juggler/content/Helper.js');
+const {Services} = ChromeUtils.import("resource://gre/modules/Services.jsm");
+const {NetUtil} = ChromeUtils.import('resource://gre/modules/NetUtil.jsm');
+const { ChannelEventSinkFactory } = ChromeUtils.import("chrome://remote/content/cdp/observers/ChannelEventSink.jsm");
+
+
+const Cc = Components.classes;
+const Ci = Components.interfaces;
+const Cu = Components.utils;
+const Cr = Components.results;
+const Cm = Components.manager;
+const CC = Components.Constructor;
+const helper = new Helper();
+
+const UINT32_MAX = Math.pow(2, 32)-1;
+
+const BinaryInputStream = CC('@mozilla.org/binaryinputstream;1', 'nsIBinaryInputStream', 'setInputStream');
+const BinaryOutputStream = CC('@mozilla.org/binaryoutputstream;1', 'nsIBinaryOutputStream', 'setOutputStream');
+const StorageStream = CC('@mozilla.org/storagestream;1', 'nsIStorageStream', 'init');
+
+// Cap response storage with 100Mb per tracked tab.
+const MAX_RESPONSE_STORAGE_SIZE = 100 * 1024 * 1024;
+
+const pageNetworkSymbol = Symbol('PageNetwork');
+
+class PageNetwork {
+  static forPageTarget(target) {
+    let result = target[pageNetworkSymbol];
+    if (!result) {
+      result = new PageNetwork(target);
+      target[pageNetworkSymbol] = result;
+    }
+    return result;
+  }
+
+  constructor(target) {
+    EventEmitter.decorate(this);
+    this._target = target;
+    this._extraHTTPHeaders = null;
+    this._responseStorage = new ResponseStorage(MAX_RESPONSE_STORAGE_SIZE, MAX_RESPONSE_STORAGE_SIZE / 10);
+    this._requestInterceptionEnabled = false;
+    // This is requestId => NetworkRequest map, only contains requests that are
+    // awaiting interception action (abort, resume, fulfill) over the protocol.
+    this._interceptedRequests = new Map();
+  }
+
+  setExtraHTTPHeaders(headers) {
+    this._extraHTTPHeaders = headers;
+  }
+
+  combinedExtraHTTPHeaders() {
+    return [
+      ...(this._target.browserContext().extraHTTPHeaders || []),
+      ...(this._extraHTTPHeaders || []),
+    ];
+  }
+
+  enableRequestInterception() {
+    this._requestInterceptionEnabled = true;
+  }
+
+  disableRequestInterception() {
+    this._requestInterceptionEnabled = false;
+    for (const intercepted of this._interceptedRequests.values())
+      intercepted.resume();
+    this._interceptedRequests.clear();
+  }
+
+  resumeInterceptedRequest(requestId, url, method, headers, postData) {
+    this._takeIntercepted(requestId).resume(url, method, headers, postData);
+  }
+
+  fulfillInterceptedRequest(requestId, status, statusText, headers, base64body) {
+    this._takeIntercepted(requestId).fulfill(status, statusText, headers, base64body);
+  }
+
+  abortInterceptedRequest(requestId, errorCode) {
+    this._takeIntercepted(requestId).abort(errorCode);
+  }
+
+  getResponseBody(requestId) {
+    if (!this._responseStorage)
+      throw new Error('Responses are not tracked for the given browser');
+    return this._responseStorage.getBase64EncodedResponse(requestId);
+  }
+
+  _takeIntercepted(requestId) {
+    const intercepted = this._interceptedRequests.get(requestId);
+    if (!intercepted)
+      throw new Error(`Cannot find request "${requestId}"`);
+    this._interceptedRequests.delete(requestId);
+    return intercepted;
+  }
+}
+
+class NetworkRequest {
+  constructor(networkObserver, httpChannel, redirectedFrom) {
+    this._networkObserver = networkObserver;
+    this.httpChannel = httpChannel;
+
+    const loadInfo = this.httpChannel.loadInfo;
+    let browsingContext = loadInfo?.frameBrowsingContext || loadInfo?.browsingContext;
+    // TODO: Unfortunately, requests from web workers don't have frameBrowsingContext or
+    // browsingContext.
+    //
+    // We fail to attribute them to the original frames on the browser side, but we
+    // can use load context top frame to attribute them to the top frame at least.
+    if (!browsingContext) {
+      const loadContext = helper.getLoadContext(this.httpChannel);
+      browsingContext = loadContext?.topFrameElement?.browsingContext;
+    }
+
+    this._frameId = helper.browsingContextToFrameId(browsingContext);
+
+    this.requestId = httpChannel.channelId + '';
+    this.navigationId = httpChannel.isMainDocumentChannel ? this.requestId : undefined;
+
+    this._redirectedIndex = 0;
+    if (redirectedFrom) {
+      this.redirectedFromId = redirectedFrom.requestId;
+      this._redirectedIndex = redirectedFrom._redirectedIndex + 1;
+      this.requestId = this.requestId + '-redirect' + this._redirectedIndex;
+      this.navigationId = redirectedFrom.navigationId;
+      // Finish previous request now. Since we inherit the listener, we could in theory
+      // use onStopRequest, but that will only happen after the last redirect has finished.
+      redirectedFrom._sendOnRequestFinished();
+    }
+    // In case of proxy auth, we get two requests with the same channel:
+    // - one is pre-auth
+    // - second is with auth header.
+    //
+    // In this case, we create this NetworkRequest object with a `redirectedFrom`
+    // object, and they both share the same httpChannel.
+    //
+    // Since we want to maintain _channelToRequest map without clashes,
+    // we must call `_sendOnRequestFinished` **before** we update it with a new object
+    // here.
+    if (this._networkObserver._channelToRequest.has(this.httpChannel))
+      throw new Error(`Internal Error: invariant is broken for _channelToRequest map`);
+    this._networkObserver._channelToRequest.set(this.httpChannel, this);
+
+    this._pageNetwork = redirectedFrom ? redirectedFrom._pageNetwork : networkObserver._findPageNetwork(httpChannel);
+    this._expectingInterception = false;
+    this._expectingResumedRequest = undefined;  // { method, headers, postData }
+    this._sentOnResponse = false;
+
+    if (this._pageNetwork)
+      appendExtraHTTPHeaders(httpChannel, this._pageNetwork.combinedExtraHTTPHeaders());
+
+    this._responseBodyChunks = [];
+
+    httpChannel.QueryInterface(Ci.nsITraceableChannel);
+    this._originalListener = httpChannel.setNewListener(this);
+    if (redirectedFrom) {
+      // Listener is inherited for regular redirects, so we'd like to avoid
+      // calling into previous NetworkRequest.
+      this._originalListener = redirectedFrom._originalListener;
+    }
+
+    this._previousCallbacks = httpChannel.notificationCallbacks;
+    httpChannel.notificationCallbacks = this;
+
+    this.QueryInterface = ChromeUtils.generateQI([
+      Ci.nsIAuthPrompt2,
+      Ci.nsIAuthPromptProvider,
+      Ci.nsIInterfaceRequestor,
+      Ci.nsINetworkInterceptController,
+      Ci.nsIStreamListener,
+    ]);
+
+    if (this.redirectedFromId) {
+      // Redirects are not interceptable.
+      this._sendOnRequest(false);
+    }
+  }
+
+  // Public interception API.
+  resume(url, method, headers, postData) {
+    this._expectingResumedRequest = { method, headers, postData };
+    const newUri = url ? Services.io.newURI(url) : null;
+    this._interceptedChannel.resetInterceptionWithURI(newUri);
+    this._interceptedChannel = undefined;
+  }
+
+  // Public interception API.
+  abort(errorCode) {
+    const error = errorMap[errorCode] || Cr.NS_ERROR_FAILURE;
+    this._interceptedChannel.cancelInterception(error);
+    this._interceptedChannel = undefined;
+  }
+
+  // Public interception API.
+  fulfill(status, statusText, headers, base64body) {
+    this._interceptedChannel.synthesizeStatus(status, statusText);
+    for (const header of headers) {
+      this._interceptedChannel.synthesizeHeader(header.name, header.value);
+      if (header.name.toLowerCase() === 'set-cookie') {
+        Services.cookies.QueryInterface(Ci.nsICookieService);
+        Services.cookies.setCookieStringFromHttp(this.httpChannel.URI, header.value, this.httpChannel);
+      }
+    }
+    const synthesized = Cc["@mozilla.org/io/string-input-stream;1"].createInstance(Ci.nsIStringInputStream);
+    synthesized.data = base64body ? atob(base64body) : '';
+    this._interceptedChannel.startSynthesizedResponse(synthesized, null, null, '', false);
+    this._interceptedChannel.finishSynthesizedResponse();
+    this._interceptedChannel = undefined;
+  }
+
+  // Instrumentation called by NetworkObserver.
+  _onInternalRedirect(newChannel) {
+    // Intercepted requests produce "internal redirects" - this is both for our own
+    // interception and service workers.
+    // An internal redirect has the same channelId, inherits notificationCallbacks and
+    // listener, and should be used instead of an old channel.
+    this._networkObserver._channelToRequest.delete(this.httpChannel);
+    this.httpChannel = newChannel;
+    this._networkObserver._channelToRequest.set(this.httpChannel, this);
+  }
+
+  // Instrumentation called by NetworkObserver.
+  _onInternalRedirectReady() {
+    // Resumed request is first internally redirected to a new request,
+    // and then the new request is ready to be updated.
+    if (!this._expectingResumedRequest)
+      return;
+    const { method, headers, postData } = this._expectingResumedRequest;
+    this._expectingResumedRequest = undefined;
+
+    if (headers) {
+      for (const header of requestHeaders(this.httpChannel))
+        this.httpChannel.setRequestHeader(header.name, '', false /* merge */);
+      for (const header of headers)
+        this.httpChannel.setRequestHeader(header.name, header.value, false /* merge */);
+    } else if (this._pageNetwork) {
+      appendExtraHTTPHeaders(this.httpChannel, this._pageNetwork.combinedExtraHTTPHeaders());
+    }
+    if (method)
+      this.httpChannel.requestMethod = method;
+    if (postData !== undefined)
+      setPostData(this.httpChannel, postData, headers);
+  }
+
+  // nsIInterfaceRequestor
+  getInterface(iid) {
+    if (iid.equals(Ci.nsIAuthPrompt2) || iid.equals(Ci.nsIAuthPromptProvider) || iid.equals(Ci.nsINetworkInterceptController))
+      return this;
+    if (iid.equals(Ci.nsIAuthPrompt))  // Block nsIAuthPrompt - we want nsIAuthPrompt2 to be used instead.
+      throw Cr.NS_ERROR_NO_INTERFACE;
+    if (this._previousCallbacks)
+      return this._previousCallbacks.getInterface(iid);
+    throw Cr.NS_ERROR_NO_INTERFACE;
+  }
+
+  // nsIAuthPromptProvider
+  getAuthPrompt(aPromptReason, iid) {
+    return this;
+  }
+
+  // nsIAuthPrompt2
+  asyncPromptAuth(aChannel, aCallback, aContext, level, authInfo) {
+    let canceled = false;
+    Promise.resolve().then(() => {
+      if (canceled)
+        return;
+      const hasAuth = this.promptAuth(aChannel, level, authInfo);
+      if (hasAuth)
+        aCallback.onAuthAvailable(aContext, authInfo);
+      else
+        aCallback.onAuthCancelled(aContext, true);
+    });
+    return {
+      QueryInterface: ChromeUtils.generateQI([Ci.nsICancelable]),
+      cancel: () => {
+        aCallback.onAuthCancelled(aContext, false);
+        canceled = true;
+      }
+    };
+  }
+
+  // nsIAuthPrompt2
+  promptAuth(aChannel, level, authInfo) {
+    if (authInfo.flags & Ci.nsIAuthInformation.PREVIOUS_FAILED)
+      return false;
+    const pageNetwork = this._pageNetwork;
+    if (!pageNetwork)
+      return false;
+    let credentials = null;
+    if (authInfo.flags & Ci.nsIAuthInformation.AUTH_PROXY) {
+      const proxy = this._networkObserver._targetRegistry.getProxyInfo(aChannel);
+      credentials = proxy ? {username: proxy.username, password: proxy.password} : null;
+    } else {
+      credentials = pageNetwork._target.browserContext().httpCredentials;
+    }
+    if (!credentials)
+      return false;
+    authInfo.username = credentials.username;
+    authInfo.password = credentials.password;
+    // This will produce a new request with respective auth header set.
+    // It will have the same id as ours. We expect it to arrive as new request and
+    // will treat it as our own redirect.
+    this._networkObserver._expectRedirect(this.httpChannel.channelId + '', this);
+    return true;
+  }
+
+  // nsINetworkInterceptController
+  shouldPrepareForIntercept(aURI, channel) {
+    const interceptController = this._fallThroughInterceptController();
+    if (interceptController && interceptController.shouldPrepareForIntercept(aURI, channel)) {
+      // We assume that interceptController is a service worker if there is one,
+      // and yield interception to it. We are not going to intercept ourselves,
+      // so we send onRequest now.
+      this._sendOnRequest(false);
+      return true;
+    }
+
+    if (channel !== this.httpChannel) {
+      // Not our channel? Just in case this happens, don't do anything.
+      return false;
+    }
+
+    // We do not want to intercept any redirects, because we are not able
+    // to intercept subresource redirects, and it's unreliable for main requests.
+    // We do not sendOnRequest here, because redirects do that in constructor.
+    if (this.redirectedFromId)
+      return false;
+
+    const shouldIntercept = this._shouldIntercept();
+    if (!shouldIntercept) {
+      // We are not intercepting - ready to issue onRequest.
+      this._sendOnRequest(false);
+      return false;
+    }
+
+    this._expectingInterception = true;
+    return true;
+  }
+
+  // nsINetworkInterceptController
+  channelIntercepted(intercepted) {
+    if (!this._expectingInterception) {
+      // We are not intercepting, fall-through.
+      const interceptController = this._fallThroughInterceptController();
+      if (interceptController)
+        interceptController.channelIntercepted(intercepted);
+      return;
+    }
+
+    this._expectingInterception = false;
+    this._interceptedChannel = intercepted.QueryInterface(Ci.nsIInterceptedChannel);
+
+    const pageNetwork = this._pageNetwork;
+    if (!pageNetwork) {
+      // Just in case we disabled instrumentation while intercepting, resume and forget.
+      this.resume();
+      return;
+    }
+
+    const browserContext = pageNetwork._target.browserContext();
+    if (browserContext.settings.onlineOverride === 'offline') {
+      // Implement offline.
+      this.abort(Cr.NS_ERROR_OFFLINE);
+      return;
+    }
+
+    // Ok, so now we have intercepted the request, let's issue onRequest.
+    // If interception has been disabled while we were intercepting, resume and forget.
+    const interceptionEnabled = this._shouldIntercept();
+    this._sendOnRequest(!!interceptionEnabled);
+    if (interceptionEnabled)
+      pageNetwork._interceptedRequests.set(this.requestId, this);
+    else
+      this.resume();
+  }
+
+  // nsIStreamListener
+  onDataAvailable(aRequest, aInputStream, aOffset, aCount) {
+    // Turns out webcompat shims might redirect to
+    // SimpleChannel, so we get requests from a different channel.
+    // See https://github.com/microsoft/playwright/issues/9418#issuecomment-944836244
+    if (aRequest !== this.httpChannel)
+      return;
+    // For requests with internal redirect (e.g. intercepted by Service Worker),
+    // we do not get onResponse normally, but we do get nsIStreamListener notifications.
+    this._sendOnResponse(false);
+
+    const iStream = new BinaryInputStream(aInputStream);
+    const sStream = new StorageStream(8192, aCount, null);
+    const oStream = new BinaryOutputStream(sStream.getOutputStream(0));
+
+    // Copy received data as they come.
+    const data = iStream.readBytes(aCount);
+    this._responseBodyChunks.push(data);
+
+    oStream.writeBytes(data, aCount);
+    try {
+      this._originalListener.onDataAvailable(aRequest, sStream.newInputStream(0), aOffset, aCount);
+    } catch (e) {
+      // Be ready to original listener exceptions.
+    }
+  }
+
+  // nsIStreamListener
+  onStartRequest(aRequest) {
+    // Turns out webcompat shims might redirect to
+    // SimpleChannel, so we get requests from a different channel.
+    // See https://github.com/microsoft/playwright/issues/9418#issuecomment-944836244
+    if (aRequest !== this.httpChannel)
+      return;
+    try {
+      this._originalListener.onStartRequest(aRequest);
+    } catch (e) {
+      // Be ready to original listener exceptions.
+    }
+  }
+
+  // nsIStreamListener
+  onStopRequest(aRequest, aStatusCode) {
+    // Turns out webcompat shims might redirect to
+    // SimpleChannel, so we get requests from a different channel.
+    // See https://github.com/microsoft/playwright/issues/9418#issuecomment-944836244
+    if (aRequest !== this.httpChannel)
+      return;
+    try {
+      this._originalListener.onStopRequest(aRequest, aStatusCode);
+    } catch (e) {
+      // Be ready to original listener exceptions.
+    }
+
+    if (aStatusCode === 0) {
+      // For requests with internal redirect (e.g. intercepted by Service Worker),
+      // we do not get onResponse normally, but we do get nsIRequestObserver notifications.
+      this._sendOnResponse(false);
+      const body = this._responseBodyChunks.join('');
+      const pageNetwork = this._pageNetwork;
+      if (pageNetwork)
+        pageNetwork._responseStorage.addResponseBody(this, body);
+      this._sendOnRequestFinished();
+    } else {
+      this._sendOnRequestFailed(aStatusCode);
+    }
+
+    delete this._responseBodyChunks;
+  }
+
+  _shouldIntercept() {
+    const pageNetwork = this._pageNetwork;
+    if (!pageNetwork)
+      return false;
+    if (pageNetwork._requestInterceptionEnabled)
+      return true;
+    const browserContext = pageNetwork._target.browserContext();
+    if (browserContext.requestInterceptionEnabled)
+      return true;
+    if (browserContext.settings.onlineOverride === 'offline')
+      return true;
+    return false;
+  }
+
+  _fallThroughInterceptController() {
+    if (!this._previousCallbacks || !(this._previousCallbacks instanceof Ci.nsINetworkInterceptController))
+      return undefined;
+    return this._previousCallbacks.getInterface(Ci.nsINetworkInterceptController);
+  }
+
+  _sendOnRequest(isIntercepted) {
+    // Note: we call _sendOnRequest either after we intercepted the request,
+    // or at the first moment we know that we are not going to intercept.
+    const pageNetwork = this._pageNetwork;
+    if (!pageNetwork)
+      return;
+    const loadInfo = this.httpChannel.loadInfo;
+    const causeType = loadInfo?.externalContentPolicyType || Ci.nsIContentPolicy.TYPE_OTHER;
+    const internalCauseType = loadInfo?.internalContentPolicyType || Ci.nsIContentPolicy.TYPE_OTHER;
+    pageNetwork.emit(PageNetwork.Events.Request, {
+      url: this.httpChannel.URI.spec,
+      frameId: this._frameId,
+      isIntercepted,
+      requestId: this.requestId,
+      redirectedFrom: this.redirectedFromId,
+      postData: readRequestPostData(this.httpChannel),
+      headers: requestHeaders(this.httpChannel),
+      method: this.httpChannel.requestMethod,
+      navigationId: this.navigationId,
+      cause: causeTypeToString(causeType),
+      internalCause: causeTypeToString(internalCauseType),
+    }, this._frameId);
+  }
+
+  _sendOnResponse(fromCache, opt_statusCode, opt_statusText) {
+    if (this._sentOnResponse) {
+      // We can come here twice because of internal redirects, e.g. service workers.
+      return;
+    }
+    this._sentOnResponse = true;
+    const pageNetwork = this._pageNetwork;
+    if (!pageNetwork)
+      return;
+
+    this.httpChannel.QueryInterface(Ci.nsIHttpChannelInternal);
+    this.httpChannel.QueryInterface(Ci.nsITimedChannel);
+    const timing = {
+      startTime: this.httpChannel.channelCreationTime,
+      domainLookupStart: this.httpChannel.domainLookupStartTime,
+      domainLookupEnd: this.httpChannel.domainLookupEndTime,
+      connectStart: this.httpChannel.connectStartTime,
+      secureConnectionStart: this.httpChannel.secureConnectionStartTime,
+      connectEnd: this.httpChannel.connectEndTime,
+      requestStart: this.httpChannel.requestStartTime,
+      responseStart: this.httpChannel.responseStartTime,
+    };
+
+    const { status, statusText, headers } = responseHead(this.httpChannel, opt_statusCode, opt_statusText);
+    let remoteIPAddress = undefined;
+    let remotePort = undefined;
+    try {
+      remoteIPAddress = this.httpChannel.remoteAddress;
+      remotePort = this.httpChannel.remotePort;
+    } catch (e) {
+      // remoteAddress is not defined for cached requests.
+    }
+
+    const fromServiceWorker = this._networkObserver._channelIdsFulfilledByServiceWorker.has(this.requestId);
+    this._networkObserver._channelIdsFulfilledByServiceWorker.delete(this.requestId);
+
+    pageNetwork.emit(PageNetwork.Events.Response, {
+      requestId: this.requestId,
+      securityDetails: getSecurityDetails(this.httpChannel),
+      fromCache,
+      headers,
+      remoteIPAddress,
+      remotePort,
+      status,
+      statusText,
+      timing,
+      fromServiceWorker,
+    }, this._frameId);
+  }
+
+  _sendOnRequestFailed(error) {
+    const pageNetwork = this._pageNetwork;
+    if (pageNetwork) {
+      pageNetwork.emit(PageNetwork.Events.RequestFailed, {
+        requestId: this.requestId,
+        errorCode: helper.getNetworkErrorStatusText(error),
+      }, this._frameId);
+    }
+    this._networkObserver._channelToRequest.delete(this.httpChannel);
+  }
+
+  _sendOnRequestFinished() {
+    const pageNetwork = this._pageNetwork;
+    if (pageNetwork) {
+      let protocolVersion = undefined;
+      try {
+        protocolVersion = this.httpChannel.protocolVersion;
+      } catch (e) {
+        // protocolVersion is unavailable in certain cases.
+      };
+      pageNetwork.emit(PageNetwork.Events.RequestFinished, {
+        requestId: this.requestId,
+        responseEndTime: this.httpChannel.responseEndTime,
+        transferSize: this.httpChannel.transferSize,
+        encodedBodySize: this.httpChannel.encodedBodySize,
+        protocolVersion,
+      }, this._frameId);
+    }
+    this._networkObserver._channelToRequest.delete(this.httpChannel);
+  }
+}
+
+class NetworkObserver {
+  static instance() {
+    return NetworkObserver._instance || null;
+  }
+
+  constructor(targetRegistry) {
+    EventEmitter.decorate(this);
+    NetworkObserver._instance = this;
+
+    this._targetRegistry = targetRegistry;
+
+    this._channelToRequest = new Map();  // http channel -> network request
+    this._expectedRedirect = new Map();  // expected redirect channel id (string) -> network request
+    this._channelIdsFulfilledByServiceWorker = new Set();  // http channel ids that were fulfilled by service worker
+
+    const protocolProxyService = Cc['@mozilla.org/network/protocol-proxy-service;1'].getService();
+    this._channelProxyFilter = {
+      QueryInterface: ChromeUtils.generateQI([Ci.nsIProtocolProxyChannelFilter]),
+      applyFilter: (channel, defaultProxyInfo, proxyFilter) => {
+        const proxy = this._targetRegistry.getProxyInfo(channel);
+        if (!proxy) {
+          proxyFilter.onProxyFilterResult(defaultProxyInfo);
+          return;
+        }
+        proxyFilter.onProxyFilterResult(protocolProxyService.newProxyInfo(
+            proxy.type,
+            proxy.host,
+            proxy.port,
+            '', /* aProxyAuthorizationHeader */
+            '', /* aConnectionIsolationKey */
+            Ci.nsIProxyInfo.TRANSPARENT_PROXY_RESOLVES_HOST, /* aFlags */
+            UINT32_MAX, /* aFailoverTimeout */
+            null, /* failover proxy */
+        ));
+      },
+    };
+    protocolProxyService.registerChannelFilter(this._channelProxyFilter, 0 /* position */);
+
+    // Register self as ChannelEventSink to track redirects.
+    ChannelEventSinkFactory.getService().registerCollector({
+      _onChannelRedirect: this._onRedirect.bind(this),
+    });
+
+    this._eventListeners = [
+      helper.addObserver(this._onRequest.bind(this), 'http-on-modify-request'),
+      helper.addObserver(this._onResponse.bind(this, false /* fromCache */), 'http-on-examine-response'),
+      helper.addObserver(this._onResponse.bind(this, true /* fromCache */), 'http-on-examine-cached-response'),
+      helper.addObserver(this._onResponse.bind(this, true /* fromCache */), 'http-on-examine-merged-response'),
+      helper.addObserver(this._onServiceWorkerResponse.bind(this), 'service-worker-synthesized-response'),
+    ];
+  }
+
+  _expectRedirect(channelId, previous) {
+    this._expectedRedirect.set(channelId, previous);
+  }
+
+  _onRedirect(oldChannel, newChannel, flags) {
+    if (!(oldChannel instanceof Ci.nsIHttpChannel) || !(newChannel instanceof Ci.nsIHttpChannel))
+      return;
+    const oldHttpChannel = oldChannel.QueryInterface(Ci.nsIHttpChannel);
+    const newHttpChannel = newChannel.QueryInterface(Ci.nsIHttpChannel);
+    const request = this._channelToRequest.get(oldHttpChannel);
+    if (flags & Ci.nsIChannelEventSink.REDIRECT_INTERNAL) {
+      if (request)
+        request._onInternalRedirect(newHttpChannel);
+    } else if (flags & Ci.nsIChannelEventSink.REDIRECT_STS_UPGRADE) {
+      if (request) {
+        // This is an internal HSTS upgrade. The original http request is canceled, and a new
+        // equivalent https request is sent. We forge 307 redirect to follow Chromium here:
+        // https://source.chromium.org/chromium/chromium/src/+/main:net/url_request/url_request_http_job.cc;l=211
+        request._sendOnResponse(false, 307, 'Temporary Redirect');
+        this._expectRedirect(newHttpChannel.channelId + '', request);
+      }
+    } else {
+      if (request)
+        this._expectRedirect(newHttpChannel.channelId + '', request);
+    }
+  }
+
+  _findPageNetwork(httpChannel) {
+    let loadContext = helper.getLoadContext(httpChannel);
+    if (!loadContext)
+      return;
+    const target = this._targetRegistry.targetForBrowser(loadContext.topFrameElement);
+    if (!target)
+      return;
+    return PageNetwork.forPageTarget(target);
+  }
+
+  _onRequest(channel, topic) {
+    if (!(channel instanceof Ci.nsIHttpChannel))
+      return;
+    const httpChannel = channel.QueryInterface(Ci.nsIHttpChannel);
+    const channelId = httpChannel.channelId + '';
+    const redirectedFrom = this._expectedRedirect.get(channelId);
+    if (redirectedFrom) {
+      this._expectedRedirect.delete(channelId);
+      new NetworkRequest(this, httpChannel, redirectedFrom);
+    } else {
+      const redirectedRequest = this._channelToRequest.get(httpChannel);
+      if (redirectedRequest)
+        redirectedRequest._onInternalRedirectReady();
+      else
+        new NetworkRequest(this, httpChannel);
+    }
+  }
+
+  _onResponse(fromCache, httpChannel, topic) {
+    const request = this._channelToRequest.get(httpChannel);
+    if (request)
+      request._sendOnResponse(fromCache);
+  }
+
+  _onServiceWorkerResponse(channel, topic) {
+    if (!(channel instanceof Ci.nsIHttpChannel))
+      return;
+    const httpChannel = channel.QueryInterface(Ci.nsIHttpChannel);
+    const channelId = httpChannel.channelId + '';
+    this._channelIdsFulfilledByServiceWorker.add(channelId);
+  }
+
+  dispose() {
+    this._activityDistributor.removeObserver(this);
+    ChannelEventSinkFactory.unregister();
+    helper.removeListeners(this._eventListeners);
+  }
+}
+
+const protocolVersionNames = {
+  [Ci.nsITransportSecurityInfo.TLS_VERSION_1]: 'TLS 1',
+  [Ci.nsITransportSecurityInfo.TLS_VERSION_1_1]: 'TLS 1.1',
+  [Ci.nsITransportSecurityInfo.TLS_VERSION_1_2]: 'TLS 1.2',
+  [Ci.nsITransportSecurityInfo.TLS_VERSION_1_3]: 'TLS 1.3',
+};
+
+function getSecurityDetails(httpChannel) {
+  const securityInfo = httpChannel.securityInfo;
+  if (!securityInfo)
+    return null;
+  securityInfo.QueryInterface(Ci.nsITransportSecurityInfo);
+  if (!securityInfo.serverCert)
+    return null;
+  return {
+    protocol: protocolVersionNames[securityInfo.protocolVersion] || '<unknown>',
+    subjectName: securityInfo.serverCert.commonName,
+    issuer: securityInfo.serverCert.issuerCommonName,
+    // Convert to seconds.
+    validFrom: securityInfo.serverCert.validity.notBefore / 1000 / 1000,
+    validTo: securityInfo.serverCert.validity.notAfter / 1000 / 1000,
+  };
+}
+
+function readRequestPostData(httpChannel) {
+  if (!(httpChannel instanceof Ci.nsIUploadChannel))
+    return undefined;
+  let iStream = httpChannel.uploadStream;
+  if (!iStream)
+    return undefined;
+  const isSeekableStream = iStream instanceof Ci.nsISeekableStream;
+
+  // For some reason, we cannot rewind back big streams,
+  // so instead we should clone them.
+  const isCloneable = iStream instanceof Ci.nsICloneableInputStream;
+  if (isCloneable)
+    iStream = iStream.clone();
+
+  let prevOffset;
+  if (isSeekableStream) {
+    prevOffset = iStream.tell();
+    iStream.seek(Ci.nsISeekableStream.NS_SEEK_SET, 0);
+  }
+
+  // Read data from the stream.
+  let result = undefined;
+  try {
+    const maxLen = iStream.available();
+    // Cap at 10Mb.
+    if (maxLen <= 10 * 1024 * 1024) {
+      const buffer = NetUtil.readInputStreamToString(iStream, maxLen);
+      result = btoa(buffer);
+    }
+  } catch (err) {
+  }
+
+  // Seek locks the file, so seek to the beginning only if necko hasn't
+  // read it yet, since necko doesn't seek to 0 before reading (at lest
+  // not till 459384 is fixed).
+  if (isSeekableStream && prevOffset == 0 && !isCloneable)
+    iStream.seek(Ci.nsISeekableStream.NS_SEEK_SET, 0);
+  return result;
+}
+
+function requestHeaders(httpChannel) {
+  const headers = [];
+  httpChannel.visitRequestHeaders({
+    visitHeader: (name, value) => headers.push({name, value}),
+  });
+  return headers;
+}
+
+function causeTypeToString(causeType) {
+  for (let key in Ci.nsIContentPolicy) {
+    if (Ci.nsIContentPolicy[key] === causeType)
+      return key;
+  }
+  return 'TYPE_OTHER';
+}
+
+function appendExtraHTTPHeaders(httpChannel, headers) {
+  if (!headers)
+    return;
+  for (const header of headers)
+    httpChannel.setRequestHeader(header.name, header.value, false /* merge */);
+}
+
+class ResponseStorage {
+  constructor(maxTotalSize, maxResponseSize) {
+    this._totalSize = 0;
+    this._maxResponseSize = maxResponseSize;
+    this._maxTotalSize = maxTotalSize;
+    this._responses = new Map();
+  }
+
+  addResponseBody(request, body) {
+    if (body.length > this._maxResponseSize) {
+      this._responses.set(request.requestId, {
+        evicted: true,
+        body: '',
+      });
+      return;
+    }
+    let encodings = [];
+    if ((request.httpChannel instanceof Ci.nsIEncodedChannel) && request.httpChannel.contentEncodings && !request.httpChannel.applyConversion) {
+      const encodingHeader = request.httpChannel.getResponseHeader("Content-Encoding");
+      encodings = encodingHeader.split(/\s*\t*,\s*\t*/);
+    }
+    this._responses.set(request.requestId, {body, encodings});
+    this._totalSize += body.length;
+    if (this._totalSize > this._maxTotalSize) {
+      for (let [requestId, response] of this._responses) {
+        this._totalSize -= response.body.length;
+        response.body = '';
+        response.evicted = true;
+        if (this._totalSize < this._maxTotalSize)
+          break;
+      }
+    }
+  }
+
+  getBase64EncodedResponse(requestId) {
+    const response = this._responses.get(requestId);
+    if (!response)
+      throw new Error(`Request "${requestId}" is not found`);
+    if (response.evicted)
+      return {base64body: '', evicted: true};
+    let result = response.body;
+    if (response.encodings && response.encodings.length) {
+      for (const encoding of response.encodings)
+        result = convertString(result, encoding, 'uncompressed');
+    }
+    return {base64body: btoa(result)};
+  }
+}
+
+function responseHead(httpChannel, opt_statusCode, opt_statusText) {
+  const headers = [];
+  let status = opt_statusCode || 0;
+  let statusText = opt_statusText || '';
+  try {
+    status = httpChannel.responseStatus;
+    statusText = httpChannel.responseStatusText;
+    httpChannel.visitResponseHeaders({
+      visitHeader: (name, value) => headers.push({name, value}),
+    });
+  } catch (e) {
+    // Response headers, status and/or statusText are not available
+    // when redirect did not actually hit the network.
+  }
+  return { status, statusText, headers };
+}
+
+function setPostData(httpChannel, postData, headers) {
+  if (!(httpChannel instanceof Ci.nsIUploadChannel2))
+    return;
+  const synthesized = Cc["@mozilla.org/io/string-input-stream;1"].createInstance(Ci.nsIStringInputStream);
+  const body = atob(postData);
+  synthesized.setData(body, body.length);
+
+  const overriddenHeader = (lowerCaseName, defaultValue) => {
+    if (headers) {
+      for (const header of headers) {
+        if (header.name.toLowerCase() === lowerCaseName) {
+          return header.value;
+        }
+      }
+    }
+    return defaultValue;
+  }
+  // Clear content-length, so that upload stream resets it.
+  httpChannel.setRequestHeader('content-length', '', false /* merge */);
+  httpChannel.explicitSetUploadStream(synthesized, overriddenHeader('content-type', 'application/octet-stream'), -1, httpChannel.requestMethod, false);
+}
+
+function convertString(s, source, dest) {
+  const is = Cc["@mozilla.org/io/string-input-stream;1"].createInstance(
+    Ci.nsIStringInputStream
+  );
+  is.setData(s, s.length);
+  const listener = Cc["@mozilla.org/network/stream-loader;1"].createInstance(
+    Ci.nsIStreamLoader
+  );
+  let result = [];
+  listener.init({
+    onStreamComplete: function onStreamComplete(
+      loader,
+      context,
+      status,
+      length,
+      data
+    ) {
+      const array = Array.from(data);
+      const kChunk = 100000;
+      for (let i = 0; i < length; i += kChunk) {
+        const len = Math.min(kChunk, length - i);
+        const chunk = String.fromCharCode.apply(this, array.slice(i, i + len));
+        result.push(chunk);
+      }
+    },
+  });
+  const converter = Cc["@mozilla.org/streamConverters;1"].getService(
+    Ci.nsIStreamConverterService
+  ).asyncConvertData(
+    source,
+    dest,
+    listener,
+    null
+  );
+  converter.onStartRequest(null, null);
+  converter.onDataAvailable(null, is, 0, s.length);
+  converter.onStopRequest(null, null, null);
+  return result.join('');
+}
+
+const errorMap = {
+  'aborted': Cr.NS_ERROR_ABORT,
+  'accessdenied': Cr.NS_ERROR_PORT_ACCESS_NOT_ALLOWED,
+  'addressunreachable': Cr.NS_ERROR_UNKNOWN_HOST,
+  'blockedbyclient': Cr.NS_ERROR_FAILURE,
+  'blockedbyresponse': Cr.NS_ERROR_FAILURE,
+  'connectionaborted': Cr.NS_ERROR_NET_INTERRUPT,
+  'connectionclosed': Cr.NS_ERROR_FAILURE,
+  'connectionfailed': Cr.NS_ERROR_FAILURE,
+  'connectionrefused': Cr.NS_ERROR_CONNECTION_REFUSED,
+  'connectionreset': Cr.NS_ERROR_NET_RESET,
+  'internetdisconnected': Cr.NS_ERROR_OFFLINE,
+  'namenotresolved': Cr.NS_ERROR_UNKNOWN_HOST,
+  'timedout': Cr.NS_ERROR_NET_TIMEOUT,
+  'failed': Cr.NS_ERROR_FAILURE,
+};
+
+PageNetwork.Events = {
+  Request: Symbol('PageNetwork.Events.Request'),
+  Response: Symbol('PageNetwork.Events.Response'),
+  RequestFinished: Symbol('PageNetwork.Events.RequestFinished'),
+  RequestFailed: Symbol('PageNetwork.Events.RequestFailed'),
+};
+
+var EXPORTED_SYMBOLS = ['NetworkObserver', 'PageNetwork'];
+this.NetworkObserver = NetworkObserver;
+this.PageNetwork = PageNetwork;
diff --git a/browser_patches/firefox-beta/juggler/SimpleChannel.js b/browser_patches/firefox-beta/juggler/SimpleChannel.js
new file mode 100644
index 0000000000000000000000000000000000000000..59b29532ab1fd2931d1baad8b9b51eb7104f0eb8
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/SimpleChannel.js
@@ -0,0 +1,180 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+// Note: this file should be loadabale with eval() into worker environment.
+// Avoid Components.*, ChromeUtils and global const variables.
+
+const SIMPLE_CHANNEL_MESSAGE_NAME = 'juggler:simplechannel';
+
+class SimpleChannel {
+  static createForMessageManager(name, mm) {
+    const channel = new SimpleChannel(name);
+
+    const messageListener = {
+      receiveMessage: message => channel._onMessage(message.data)
+    };
+    mm.addMessageListener(SIMPLE_CHANNEL_MESSAGE_NAME, messageListener);
+
+    channel.setTransport({
+      sendMessage: obj => mm.sendAsyncMessage(SIMPLE_CHANNEL_MESSAGE_NAME, obj),
+      dispose: () => mm.removeMessageListener(SIMPLE_CHANNEL_MESSAGE_NAME, messageListener),
+    });
+
+    return channel;
+  }
+
+  constructor(name) {
+    this._name = name;
+    this._messageId = 0;
+    this._connectorId = 0;
+    this._pendingMessages = new Map();
+    this._handlers = new Map();
+    this._bufferedIncomingMessages = [];
+    this._bufferedOutgoingMessages = [];
+    this.transport = {
+      sendMessage: null,
+      dispose: null,
+    };
+    this._ready = false;
+    this._disposed = false;
+  }
+
+  setTransport(transport) {
+    this.transport = transport;
+    // connection handshake:
+    // 1. There are two channel ends in different processes.
+    // 2. Both ends start in the `ready = false` state, meaning that they will
+    //    not send any messages over transport.
+    // 3. Once channel end is created, it sends `READY` message to the other end.
+    // 4. Eventually, at least one of the ends receives `READY` message and responds with
+    //    `READY_ACK`. We assume at least one of the ends will receive "READY" event from the other, since
+    //    channel ends have a "parent-child" relation, i.e. one end is always created before the other one.
+    // 5. Once channel end receives either `READY` or `READY_ACK`, it transitions to `ready` state.
+    this.transport.sendMessage('READY');
+  }
+
+  _markAsReady() {
+    if (this._ready)
+      return;
+    this._ready = true;
+    for (const msg of this._bufferedOutgoingMessages)
+      this.transport.sendMessage(msg);
+    this._bufferedOutgoingMessages = [];
+  }
+
+  dispose() {
+    if (this._disposed)
+      return;
+    this._disposed = true;
+    for (const {resolve, reject, methodName} of this._pendingMessages.values())
+      reject(new Error(`Failed "${methodName}": ${this._name} is disposed.`));
+    this._pendingMessages.clear();
+    this._handlers.clear();
+    this.transport.dispose();
+  }
+
+  _rejectCallbacksFromConnector(connectorId) {
+    for (const [messageId, callback] of this._pendingMessages) {
+      if (callback.connectorId === connectorId) {
+        callback.reject(new Error(`Failed "${callback.methodName}": connector for namespace "${callback.namespace}" in channel "${this._name}" is disposed.`));
+        this._pendingMessages.delete(messageId);
+      }
+    }
+  }
+
+  connect(namespace) {
+    const connectorId = ++this._connectorId;
+    return {
+      send: (...args) => this._send(namespace, connectorId, ...args),
+      emit: (...args) => void this._send(namespace, connectorId, ...args).catch(e => {}),
+      dispose: () => this._rejectCallbacksFromConnector(connectorId),
+    };
+  }
+
+  register(namespace, handler) {
+    if (this._handlers.has(namespace))
+      throw new Error('ERROR: double-register for namespace ' + namespace);
+    this._handlers.set(namespace, handler);
+    // Try to re-deliver all pending messages.
+    const bufferedRequests = this._bufferedIncomingMessages;
+    this._bufferedIncomingMessages = [];
+    for (const data of bufferedRequests) {
+      this._onMessage(data);
+    }
+    return () => this.unregister(namespace);
+  }
+
+  unregister(namespace) {
+    this._handlers.delete(namespace);
+  }
+
+  /**
+   * @param {string} namespace
+   * @param {number} connectorId
+   * @param {string} methodName
+   * @param {...*} params
+   * @return {!Promise<*>}
+   */
+  async _send(namespace, connectorId, methodName, ...params) {
+    if (this._disposed)
+      throw new Error(`ERROR: channel ${this._name} is already disposed! Cannot send "${methodName}" to "${namespace}"`);
+    const id = ++this._messageId;
+    const promise = new Promise((resolve, reject) => {
+      this._pendingMessages.set(id, {connectorId, resolve, reject, methodName, namespace});
+    });
+    const message = {requestId: id, methodName, params, namespace};
+    if (this._ready)
+      this.transport.sendMessage(message);
+    else
+      this._bufferedOutgoingMessages.push(message);
+    return promise;
+  }
+
+  async _onMessage(data) {
+    if (data === 'READY') {
+      this.transport.sendMessage('READY_ACK');
+      this._markAsReady();
+      return;
+    }
+    if (data === 'READY_ACK') {
+      this._markAsReady();
+      return;
+    }
+    if (data.responseId) {
+      const {resolve, reject} = this._pendingMessages.get(data.responseId);
+      this._pendingMessages.delete(data.responseId);
+      if (data.error)
+        reject(new Error(data.error));
+      else
+        resolve(data.result);
+    } else if (data.requestId) {
+      const namespace = data.namespace;
+      const handler = this._handlers.get(namespace);
+      if (!handler) {
+        this._bufferedIncomingMessages.push(data);
+        return;
+      }
+      const method = handler[data.methodName];
+      if (!method) {
+        this.transport.sendMessage({responseId: data.requestId, error: `error in channel "${this._name}": No method "${data.methodName}" in namespace "${namespace}"`});
+        return;
+      }
+      try {
+        const result = await method.call(handler, ...data.params);
+        this.transport.sendMessage({responseId: data.requestId, result});
+      } catch (error) {
+        this.transport.sendMessage({responseId: data.requestId, error: `error in channel "${this._name}": exception while running method "${data.methodName}" in namespace "${namespace}": ${error.message} ${error.stack}`});
+        return;
+      }
+    } else {
+      dump(`
+        ERROR: unknown message in channel "${this._name}": ${JSON.stringify(data)}
+      `);
+    }
+  }
+}
+
+var EXPORTED_SYMBOLS = ['SimpleChannel'];
+this.SimpleChannel = SimpleChannel;
diff --git a/browser_patches/firefox-beta/juggler/TargetRegistry.js b/browser_patches/firefox-beta/juggler/TargetRegistry.js
new file mode 100644
index 0000000000000000000000000000000000000000..b222ba98bba8473b9a9023b36d34c1e628f42173
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/TargetRegistry.js
@@ -0,0 +1,1065 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const {EventEmitter} = ChromeUtils.import('resource://gre/modules/EventEmitter.jsm');
+const {Helper} = ChromeUtils.import('chrome://juggler/content/Helper.js');
+const {SimpleChannel} = ChromeUtils.import('chrome://juggler/content/SimpleChannel.js');
+const {Services} = ChromeUtils.import("resource://gre/modules/Services.jsm");
+const {Preferences} = ChromeUtils.import("resource://gre/modules/Preferences.jsm");
+const {ContextualIdentityService} = ChromeUtils.import("resource://gre/modules/ContextualIdentityService.jsm");
+const {NetUtil} = ChromeUtils.import('resource://gre/modules/NetUtil.jsm');
+const {AppConstants} = ChromeUtils.import("resource://gre/modules/AppConstants.jsm");
+const {OS} = ChromeUtils.import("resource://gre/modules/osfile.jsm");
+
+const Cr = Components.results;
+
+const helper = new Helper();
+
+const IDENTITY_NAME = 'JUGGLER ';
+const HUNDRED_YEARS = 60 * 60 * 24 * 365 * 100;
+
+const ALL_PERMISSIONS = [
+  'geo',
+  'desktop-notification',
+];
+
+class DownloadInterceptor {
+  constructor(registry) {
+    this._registry = registry
+    this._handlerToUuid = new Map();
+    this._uuidToHandler = new Map();
+  }
+
+  //
+  // nsIDownloadInterceptor implementation.
+  //
+  interceptDownloadRequest(externalAppHandler, request, browsingContext, outFile) {
+    if (!(request instanceof Ci.nsIChannel))
+      return false;
+    const channel = request.QueryInterface(Ci.nsIChannel);
+    let pageTarget = this._registry._browserBrowsingContextToTarget.get(channel.loadInfo.browsingContext.top);
+    if (!pageTarget)
+      return false;
+
+    const browserContext = pageTarget.browserContext();
+    const options = browserContext.downloadOptions;
+    if (!options)
+      return false;
+
+    const uuid = helper.generateId();
+    let file = null;
+    if (options.behavior === 'saveToDisk') {
+      file = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsIFile);
+      file.initWithPath(options.downloadsDir);
+      file.append(uuid);
+
+      try {
+        file.create(Ci.nsIFile.NORMAL_FILE_TYPE, 0o600);
+      } catch (e) {
+        dump(`interceptDownloadRequest failed to create file: ${e}\n`);
+        return false;
+      }
+    }
+    outFile.value = file;
+    this._handlerToUuid.set(externalAppHandler, uuid);
+    this._uuidToHandler.set(uuid, externalAppHandler);
+    const downloadInfo = {
+      uuid,
+      browserContextId: browserContext.browserContextId,
+      pageTargetId: pageTarget.id(),
+      url: request.name,
+      suggestedFileName: externalAppHandler.suggestedFileName,
+    };
+    this._registry.emit(TargetRegistry.Events.DownloadCreated, downloadInfo);
+    return true;
+  }
+
+  onDownloadComplete(externalAppHandler, canceled, errorName) {
+    const uuid = this._handlerToUuid.get(externalAppHandler);
+    if (!uuid)
+      return;
+    this._handlerToUuid.delete(externalAppHandler);
+    this._uuidToHandler.delete(uuid);
+    const downloadInfo = {
+      uuid,
+      error: errorName,
+    };
+    if (canceled === 'NS_BINDING_ABORTED') {
+      downloadInfo.canceled = true;
+    }
+    this._registry.emit(TargetRegistry.Events.DownloadFinished, downloadInfo);
+  }
+
+  async cancelDownload(uuid) {
+    const externalAppHandler = this._uuidToHandler.get(uuid);
+    if (!externalAppHandler) {
+      return;
+    }
+    await externalAppHandler.cancel(Cr.NS_BINDING_ABORTED);
+  }
+}
+
+const screencastService = Cc['@mozilla.org/juggler/screencast;1'].getService(Ci.nsIScreencastService);
+
+class TargetRegistry {
+  constructor() {
+    EventEmitter.decorate(this);
+
+    this._browserContextIdToBrowserContext = new Map();
+    this._userContextIdToBrowserContext = new Map();
+    this._browserToTarget = new Map();
+    this._browserBrowsingContextToTarget = new Map();
+
+    this._browserProxy = null;
+
+    // Cleanup containers from previous runs (if any)
+    for (const identity of ContextualIdentityService.getPublicIdentities()) {
+      if (identity.name && identity.name.startsWith(IDENTITY_NAME)) {
+        ContextualIdentityService.remove(identity.userContextId);
+        ContextualIdentityService.closeContainerTabs(identity.userContextId);
+      }
+    }
+
+    this._defaultContext = new BrowserContext(this, undefined, undefined);
+
+    Services.obs.addObserver({
+      observe: (subject, topic, data) => {
+        const browser = subject.ownerElement;
+        if (!browser)
+          return;
+        const target = this._browserToTarget.get(browser);
+        if (!target)
+          return;
+        target.emit(PageTarget.Events.Crashed);
+        target.dispose();
+      }
+    }, 'oop-frameloader-crashed');
+
+    Services.mm.addMessageListener('juggler:content-ready', {
+      receiveMessage: message => {
+        const linkedBrowser = message.target;
+        const target = this._browserToTarget.get(linkedBrowser);
+        if (!target)
+          return;
+
+        return {
+          initScripts: target.browserContext().initScripts,
+          bindings: target.browserContext().bindings,
+          settings: target.browserContext().settings,
+        };
+      },
+    });
+
+    const onTabOpenListener = (appWindow, window, event) => {
+      const tab = event.target;
+      const userContextId = tab.userContextId;
+      const browserContext = this._userContextIdToBrowserContext.get(userContextId);
+      const hasExplicitSize = appWindow && (appWindow.chromeFlags & Ci.nsIWebBrowserChrome.JUGGLER_WINDOW_EXPLICIT_SIZE) !== 0;
+      const openerContext = tab.linkedBrowser.browsingContext.opener;
+      let openerTarget;
+      if (openerContext) {
+        // Popups usually have opener context. Get top context for the case when opener is
+        // an iframe.
+        openerTarget = this._browserBrowsingContextToTarget.get(openerContext.top);
+      } else if (tab.openerTab) {
+        // Noopener popups from the same window have opener tab instead.
+        openerTarget = this._browserToTarget.get(tab.openerTab.linkedBrowser);
+      }
+      if (!browserContext)
+        throw new Error(`Internal error: cannot find context for userContextId=${userContextId}`);
+      const target = new PageTarget(this, window, tab, browserContext, openerTarget);
+      target.updateUserAgent();
+      target.updatePlatform();
+      target.updateJavaScriptDisabled();
+      target.updateTouchOverride();
+      target.updateColorSchemeOverride();
+      target.updateReducedMotionOverride();
+      target.updateForcedColorsOverride();
+      if (!hasExplicitSize)
+        target.updateViewportSize();
+      if (browserContext.videoRecordingOptions)
+        target._startVideoRecording(browserContext.videoRecordingOptions);
+    };
+
+    const onTabCloseListener = event => {
+      const tab = event.target;
+      const linkedBrowser = tab.linkedBrowser;
+      const target = this._browserToTarget.get(linkedBrowser);
+      if (target)
+          target.dispose();
+    };
+
+    const domWindowTabListeners = new Map();
+
+    const onOpenWindow = async (appWindow) => {
+
+      let domWindow;
+      if (appWindow instanceof Ci.nsIAppWindow) {
+        domWindow = appWindow.QueryInterface(Ci.nsIInterfaceRequestor).getInterface(Ci.nsIDOMWindowInternal || Ci.nsIDOMWindow);
+      } else {
+        domWindow = appWindow;
+        appWindow = null;
+      }
+      if (!(domWindow instanceof Ci.nsIDOMChromeWindow))
+        return;
+      // In persistent mode, window might be opened long ago and might be
+      // already initialized.
+      //
+      // In this case, we want to keep this callback synchronous so that we will call
+      // `onTabOpenListener` synchronously and before the sync IPc message `juggler:content-ready`.
+      if (domWindow.document.readyState === 'uninitialized' || domWindow.document.readyState === 'loading') {
+        // For non-initialized windows, DOMContentLoaded initializes gBrowser
+        // and starts tab loading (see //browser/base/content/browser.js), so we
+        // are guaranteed to call `onTabOpenListener` before the sync IPC message
+        // `juggler:content-ready`.
+        await helper.awaitEvent(domWindow, 'DOMContentLoaded');
+      }
+
+      if (!domWindow.gBrowser)
+        return;
+      const tabContainer = domWindow.gBrowser.tabContainer;
+      domWindowTabListeners.set(domWindow, [
+        helper.addEventListener(tabContainer, 'TabOpen', event => onTabOpenListener(appWindow, domWindow, event)),
+        helper.addEventListener(tabContainer, 'TabClose', onTabCloseListener),
+      ]);
+      for (const tab of domWindow.gBrowser.tabs)
+        onTabOpenListener(appWindow, domWindow, { target: tab });
+    };
+
+    const onCloseWindow = window => {
+      const domWindow = window.QueryInterface(Ci.nsIInterfaceRequestor).getInterface(Ci.nsIDOMWindowInternal || Ci.nsIDOMWindow);
+      if (!(domWindow instanceof Ci.nsIDOMChromeWindow))
+        return;
+      if (!domWindow.gBrowser)
+        return;
+
+      const listeners = domWindowTabListeners.get(domWindow) || [];
+      domWindowTabListeners.delete(domWindow);
+      helper.removeListeners(listeners);
+      for (const tab of domWindow.gBrowser.tabs)
+        onTabCloseListener({ target: tab });
+    };
+
+    const extHelperAppSvc = Cc["@mozilla.org/uriloader/external-helper-app-service;1"].getService(Ci.nsIExternalHelperAppService);
+    this._downloadInterceptor = new DownloadInterceptor(this);
+    extHelperAppSvc.setDownloadInterceptor(this._downloadInterceptor);
+
+    Services.wm.addListener({ onOpenWindow, onCloseWindow });
+    for (const win of Services.wm.getEnumerator(null))
+      onOpenWindow(win);
+  }
+
+  async cancelDownload(options) {
+    this._downloadInterceptor.cancelDownload(options.uuid);
+  }
+
+  setBrowserProxy(proxy) {
+    this._browserProxy = proxy;
+  }
+
+  getProxyInfo(channel) {
+    const originAttributes = channel.loadInfo && channel.loadInfo.originAttributes;
+    const browserContext = originAttributes ? this.browserContextForUserContextId(originAttributes.userContextId) : null;
+    // Prefer context proxy and fallback to browser-level proxy.
+    const proxyInfo = (browserContext && browserContext._proxy) || this._browserProxy;
+    if (!proxyInfo || proxyInfo.bypass.some(domainSuffix => channel.URI.host.endsWith(domainSuffix)))
+      return null;
+    return proxyInfo;
+  }
+
+  defaultContext() {
+    return this._defaultContext;
+  }
+
+  createBrowserContext(removeOnDetach) {
+    return new BrowserContext(this, helper.generateId(), removeOnDetach);
+  }
+
+  browserContextForId(browserContextId) {
+    return this._browserContextIdToBrowserContext.get(browserContextId);
+  }
+
+  browserContextForUserContextId(userContextId) {
+    return this._userContextIdToBrowserContext.get(userContextId);
+  }
+
+  async newPage({browserContextId}) {
+    const browserContext = this.browserContextForId(browserContextId);
+    const features = "chrome,dialog=no,all";
+    // See _callWithURIToLoad in browser.js for the structure of window.arguments
+    // window.arguments[1]: unused (bug 871161)
+    //                 [2]: referrerInfo (nsIReferrerInfo)
+    //                 [3]: postData (nsIInputStream)
+    //                 [4]: allowThirdPartyFixup (bool)
+    //                 [5]: userContextId (int)
+    //                 [6]: originPrincipal (nsIPrincipal)
+    //                 [7]: originStoragePrincipal (nsIPrincipal)
+    //                 [8]: triggeringPrincipal (nsIPrincipal)
+    //                 [9]: allowInheritPrincipal (bool)
+    //                 [10]: csp (nsIContentSecurityPolicy)
+    //                 [11]: nsOpenWindowInfo
+    const args = Cc["@mozilla.org/array;1"].createInstance(Ci.nsIMutableArray);
+    const urlSupports = Cc["@mozilla.org/supports-string;1"].createInstance(
+      Ci.nsISupportsString
+    );
+    urlSupports.data = 'about:blank';
+    args.appendElement(urlSupports); // 0
+    args.appendElement(undefined); // 1
+    args.appendElement(undefined); // 2
+    args.appendElement(undefined); // 3
+    args.appendElement(undefined); // 4
+    const userContextIdSupports = Cc[
+      "@mozilla.org/supports-PRUint32;1"
+    ].createInstance(Ci.nsISupportsPRUint32);
+    userContextIdSupports.data = browserContext.userContextId;
+    args.appendElement(userContextIdSupports); // 5
+    args.appendElement(undefined); // 6
+    args.appendElement(undefined); // 7
+    args.appendElement(Services.scriptSecurityManager.getSystemPrincipal()); // 8
+
+    const window = Services.ww.openWindow(null, AppConstants.BROWSER_CHROME_URL, '_blank', features, args);
+    await waitForWindowReady(window);
+    if (window.gBrowser.browsers.length !== 1)
+      throw new Error(`Unexpected number of tabs in the new window: ${window.gBrowser.browsers.length}`);
+    const browser = window.gBrowser.browsers[0];
+    let target = this._browserToTarget.get(browser);
+    while (!target) {
+      await helper.awaitEvent(this, TargetRegistry.Events.TargetCreated);
+      target = this._browserToTarget.get(browser);
+    }
+    browser.focus();
+    if (browserContext.settings.timezoneId) {
+      if (await target.hasFailedToOverrideTimezone())
+        throw new Error('Failed to override timezone');
+    }
+    return target.id();
+  }
+
+  targets() {
+    return Array.from(this._browserToTarget.values());
+  }
+
+  targetForBrowser(browser) {
+    return this._browserToTarget.get(browser);
+  }
+}
+
+class PageTarget {
+  constructor(registry, win, tab, browserContext, opener) {
+    EventEmitter.decorate(this);
+
+    this._targetId = helper.generateId();
+    this._registry = registry;
+    this._window = win;
+    this._gBrowser = win.gBrowser;
+    this._tab = tab;
+    this._linkedBrowser = tab.linkedBrowser;
+    this._browserContext = browserContext;
+    this._viewportSize = undefined;
+    this._initialDPPX = this._linkedBrowser.browsingContext.overrideDPPX;
+    this._url = 'about:blank';
+    this._openerId = opener ? opener.id() : undefined;
+    this._channel = SimpleChannel.createForMessageManager(`browser::page[${this._targetId}]`, this._linkedBrowser.messageManager);
+    this._videoRecordingInfo = undefined;
+    this._screencastRecordingInfo = undefined;
+    this._dialogs = new Map();
+    this.forcedColors = 'no-override';
+    this._pageInitScripts = [];
+
+    const navigationListener = {
+      QueryInterface: ChromeUtils.generateQI([Ci.nsIWebProgressListener, Ci.nsISupportsWeakReference]),
+      onLocationChange: (aWebProgress, aRequest, aLocation) => this._onNavigated(aLocation),
+    };
+    this._eventListeners = [
+      helper.addObserver(this._updateModalDialogs.bind(this), 'tabmodal-dialog-loaded'),
+      helper.addProgressListener(tab.linkedBrowser, navigationListener, Ci.nsIWebProgress.NOTIFY_LOCATION),
+      helper.addEventListener(this._linkedBrowser, 'DOMModalDialogClosed', event => this._updateModalDialogs()),
+    ];
+
+    this._disposed = false;
+    browserContext.pages.add(this);
+    this._registry._browserToTarget.set(this._linkedBrowser, this);
+    this._registry._browserBrowsingContextToTarget.set(this._linkedBrowser.browsingContext, this);
+
+    this._registry.emit(TargetRegistry.Events.TargetCreated, this);
+  }
+
+  dialog(dialogId) {
+    return this._dialogs.get(dialogId);
+  }
+
+  dialogs() {
+    return [...this._dialogs.values()];
+  }
+
+  async windowReady() {
+    await waitForWindowReady(this._window);
+  }
+
+  linkedBrowser() {
+    return this._linkedBrowser;
+  }
+
+  browserContext() {
+    return this._browserContext;
+  }
+
+  updateTouchOverride() {
+    this._linkedBrowser.browsingContext.touchEventsOverride = this._browserContext.touchOverride ? 'enabled' : 'none';
+  }
+
+  updateUserAgent() {
+    this._linkedBrowser.browsingContext.customUserAgent = this._browserContext.defaultUserAgent;
+  }
+
+  updatePlatform() {
+    this._linkedBrowser.browsingContext.customPlatform = this._browserContext.defaultPlatform;
+  }
+
+  updateJavaScriptDisabled() {
+    this._linkedBrowser.browsingContext.allowJavascript = !this._browserContext.javaScriptDisabled;
+  }
+
+  _updateModalDialogs() {
+    const prompts = new Set(this._linkedBrowser.tabModalPromptBox ? this._linkedBrowser.tabModalPromptBox.listPrompts() : []);
+    for (const dialog of this._dialogs.values()) {
+      if (!prompts.has(dialog.prompt())) {
+        this._dialogs.delete(dialog.id());
+        this.emit(PageTarget.Events.DialogClosed, dialog);
+      } else {
+        prompts.delete(dialog.prompt());
+      }
+    }
+    for (const prompt of prompts) {
+      const dialog = Dialog.createIfSupported(prompt);
+      if (!dialog)
+        continue;
+      this._dialogs.set(dialog.id(), dialog);
+      this.emit(PageTarget.Events.DialogOpened, dialog);
+    }
+  }
+
+  async updateViewportSize() {
+    // Viewport size is defined by three arguments:
+    // 1. default size. Could be explicit if set as part of `window.open` call, e.g.
+    //   `window.open(url, title, 'width=400,height=400')`
+    // 2. page viewport size
+    // 3. browserContext viewport size
+    //
+    // The "default size" (1) is only respected when the page is opened.
+    // Otherwise, explicitly set page viewport prevales over browser context
+    // default viewport.
+    const viewportSize = this._viewportSize || this._browserContext.defaultViewportSize;
+    const actualSize = await setViewportSizeForBrowser(viewportSize, this._linkedBrowser, this._window);
+    this._linkedBrowser.browsingContext.overrideDPPX = this._browserContext.deviceScaleFactor || this._initialDPPX;
+    await this._channel.connect('').send('awaitViewportDimensions', {
+      width: actualSize.width,
+      height: actualSize.height,
+      deviceSizeIsPageSize: !!this._browserContext.deviceScaleFactor,
+    });
+  }
+
+  setEmulatedMedia(mediumOverride) {
+    this._linkedBrowser.browsingContext.mediumOverride = mediumOverride || '';
+  }
+
+  setColorScheme(colorScheme) {
+    this.colorScheme = fromProtocolColorScheme(colorScheme);
+    this.updateColorSchemeOverride();
+  }
+
+  updateColorSchemeOverride() {
+    this._linkedBrowser.browsingContext.prefersColorSchemeOverride = this.colorScheme || this._browserContext.colorScheme || 'none';
+  }
+
+  setReducedMotion(reducedMotion) {
+    this.reducedMotion = fromProtocolReducedMotion(reducedMotion);
+    this.updateReducedMotionOverride();
+  }
+
+  updateReducedMotionOverride() {
+    this._linkedBrowser.browsingContext.prefersReducedMotionOverride = this.reducedMotion || this._browserContext.reducedMotion || 'none';
+  }
+
+  setForcedColors(forcedColors) {
+    this.forcedColors = fromProtocolForcedColors(forcedColors);
+    this.updateForcedColorsOverride();
+  }
+
+  updateForcedColorsOverride() {
+    this._linkedBrowser.browsingContext.forcedColorsOverride = (this.forcedColors !== 'no-override' ? this.forcedColors : this._browserContext.forcedColors) || 'no-override';
+  }
+
+  async setViewportSize(viewportSize) {
+    this._viewportSize = viewportSize;
+    await this.updateViewportSize();
+  }
+
+  close(runBeforeUnload = false) {
+    this._gBrowser.removeTab(this._tab, {
+      skipPermitUnload: !runBeforeUnload,
+    });
+  }
+
+  channel() {
+    return this._channel;
+  }
+
+  id() {
+    return this._targetId;
+  }
+
+  info() {
+    return {
+      targetId: this.id(),
+      type: 'page',
+      browserContextId: this._browserContext.browserContextId,
+      openerId: this._openerId,
+    };
+  }
+
+  _onNavigated(aLocation) {
+    this._url = aLocation.spec;
+    this._browserContext.grantPermissionsToOrigin(this._url);
+  }
+
+  async ensurePermissions() {
+    await this._channel.connect('').send('ensurePermissions', {}).catch(e => void e);
+  }
+
+  async setInitScripts(scripts) {
+    this._pageInitScripts = scripts;
+    await this.pushInitScripts();
+  }
+
+  async pushInitScripts() {
+    await this._channel.connect('').send('setInitScripts', [...this._browserContext.initScripts, ...this._pageInitScripts]).catch(e => void e);
+  }
+
+  async addBinding(worldName, name, script) {
+    await this._channel.connect('').send('addBinding', { worldName, name, script }).catch(e => void e);
+  }
+
+  async applyContextSetting(name, value) {
+    await this._channel.connect('').send('applyContextSetting', { name, value }).catch(e => void e);
+  }
+
+  async hasFailedToOverrideTimezone() {
+    return await this._channel.connect('').send('hasFailedToOverrideTimezone').catch(e => true);
+  }
+
+  async _startVideoRecording({width, height, dir}) {
+    // On Mac the window may not yet be visible when TargetCreated and its
+    // NSWindow.windowNumber may be -1, so we wait until the window is known
+    // to be initialized and visible.
+    await this.windowReady();
+    const file = OS.Path.join(dir, helper.generateId() + '.webm');
+    if (width < 10 || width > 10000 || height < 10 || height > 10000)
+      throw new Error("Invalid size");
+
+    const docShell = this._gBrowser.ownerGlobal.docShell;
+    // Exclude address bar and navigation control from the video.
+    const rect = this.linkedBrowser().getBoundingClientRect();
+    const devicePixelRatio = this._window.devicePixelRatio;
+    let sessionId;
+    const registry = this._registry;
+    const screencastClient = {
+      QueryInterface: ChromeUtils.generateQI([Ci.nsIScreencastServiceClient]),
+      screencastFrame(data, deviceWidth, deviceHeight) {
+      },
+      screencastStopped() {
+        registry.emit(TargetRegistry.Events.ScreencastStopped, sessionId);
+      },
+    };
+    const viewport = this._viewportSize || this._browserContext.defaultViewportSize || { width: 0, height: 0 };
+    sessionId = screencastService.startVideoRecording(screencastClient, docShell, true, file, width, height, 0, viewport.width, viewport.height, devicePixelRatio * rect.top);
+    this._videoRecordingInfo = { sessionId, file };
+    this.emit(PageTarget.Events.ScreencastStarted);
+  }
+
+  _stopVideoRecording() {
+    if (!this._videoRecordingInfo)
+      throw new Error('No video recording in progress');
+    const videoRecordingInfo = this._videoRecordingInfo;
+    this._videoRecordingInfo = undefined;
+    screencastService.stopVideoRecording(videoRecordingInfo.sessionId);
+  }
+
+  videoRecordingInfo() {
+    return this._videoRecordingInfo;
+  }
+
+  async startScreencast({ width, height, quality }) {
+    // On Mac the window may not yet be visible when TargetCreated and its
+    // NSWindow.windowNumber may be -1, so we wait until the window is known
+    // to be initialized and visible.
+    await this.windowReady();
+    if (width < 10 || width > 10000 || height < 10 || height > 10000)
+      throw new Error("Invalid size");
+
+    const docShell = this._gBrowser.ownerGlobal.docShell;
+    // Exclude address bar and navigation control from the video.
+    const rect = this.linkedBrowser().getBoundingClientRect();
+    const devicePixelRatio = this._window.devicePixelRatio;
+
+    const self = this;
+    const screencastClient = {
+      QueryInterface: ChromeUtils.generateQI([Ci.nsIScreencastServiceClient]),
+      screencastFrame(data, deviceWidth, deviceHeight) {
+        if (self._screencastRecordingInfo)
+          self.emit(PageTarget.Events.ScreencastFrame, { data, deviceWidth, deviceHeight });
+      },
+      screencastStopped() {
+      },
+    };
+    const viewport = this._viewportSize || this._browserContext.defaultViewportSize || { width: 0, height: 0 };
+    const screencastId = screencastService.startVideoRecording(screencastClient, docShell, false, '', width, height, quality || 90, viewport.width, viewport.height, devicePixelRatio * rect.top);
+    this._screencastRecordingInfo = { screencastId };
+    return { screencastId };
+  }
+
+  screencastFrameAck({ screencastId }) {
+    if (!this._screencastRecordingInfo || this._screencastRecordingInfo.screencastId !== screencastId)
+      return;
+    screencastService.screencastFrameAck(screencastId);
+  }
+
+  stopScreencast() {
+    if (!this._screencastRecordingInfo)
+      throw new Error('No screencast in progress');
+    const { screencastId } = this._screencastRecordingInfo;
+    this._screencastRecordingInfo = undefined;
+    screencastService.stopVideoRecording(screencastId);
+  }
+
+  dispose() {
+    this._disposed = true;
+    if (this._videoRecordingInfo)
+      this._stopVideoRecording();
+    if (this._screencastRecordingInfo)
+      this.stopScreencast();
+    this._browserContext.pages.delete(this);
+    this._registry._browserToTarget.delete(this._linkedBrowser);
+    this._registry._browserBrowsingContextToTarget.delete(this._linkedBrowser.browsingContext);
+    try {
+      helper.removeListeners(this._eventListeners);
+    } catch (e) {
+      // In some cases, removing listeners from this._linkedBrowser fails
+      // because it is already half-destroyed.
+      if (e)
+        dump(e.message + '\n' + e.stack + '\n');
+    }
+    this._registry.emit(TargetRegistry.Events.TargetDestroyed, this);
+  }
+}
+
+PageTarget.Events = {
+  ScreencastStarted: Symbol('PageTarget.ScreencastStarted'),
+  ScreencastFrame: Symbol('PageTarget.ScreencastFrame'),
+  Crashed: Symbol('PageTarget.Crashed'),
+  DialogOpened: Symbol('PageTarget.DialogOpened'),
+  DialogClosed: Symbol('PageTarget.DialogClosed'),
+};
+
+function fromProtocolColorScheme(colorScheme) {
+  if (colorScheme === 'light' || colorScheme === 'dark')
+    return colorScheme;
+  if (colorScheme === null || colorScheme === 'no-preference')
+    return undefined;
+  throw new Error('Unknown color scheme: ' + colorScheme);
+}
+
+function fromProtocolReducedMotion(reducedMotion) {
+  if (reducedMotion === 'reduce' || reducedMotion === 'no-preference')
+    return reducedMotion;
+  if (reducedMotion === null)
+    return undefined;
+  throw new Error('Unknown reduced motion: ' + reducedMotion);
+}
+
+function fromProtocolForcedColors(forcedColors) {
+  if (forcedColors === 'active' || forcedColors === 'none')
+    return forcedColors;
+  if (forcedColors === null)
+    return undefined;
+  throw new Error('Unknown forced colors: ' + forcedColors);
+}
+
+class BrowserContext {
+  constructor(registry, browserContextId, removeOnDetach) {
+    this._registry = registry;
+    this.browserContextId = browserContextId;
+    // Default context has userContextId === 0, but we pass undefined to many APIs just in case.
+    this.userContextId = 0;
+    if (browserContextId !== undefined) {
+      const identity = ContextualIdentityService.create(IDENTITY_NAME + browserContextId);
+      this.userContextId = identity.userContextId;
+    }
+    this._principals = [];
+    // Maps origins to the permission lists.
+    this._permissions = new Map();
+    this._registry._browserContextIdToBrowserContext.set(this.browserContextId, this);
+    this._registry._userContextIdToBrowserContext.set(this.userContextId, this);
+    this._proxy = null;
+    this.removeOnDetach = removeOnDetach;
+    this.extraHTTPHeaders = undefined;
+    this.httpCredentials = undefined;
+    this.requestInterceptionEnabled = undefined;
+    this.ignoreHTTPSErrors = undefined;
+    this.downloadOptions = undefined;
+    this.defaultViewportSize = undefined;
+    this.deviceScaleFactor = undefined;
+    this.defaultUserAgent = null;
+    this.defaultPlatform = null;
+    this.javaScriptDisabled = false;
+    this.touchOverride = false;
+    this.colorScheme = 'none';
+    this.forcedColors = 'no-override';
+    this.reducedMotion = 'none';
+    this.videoRecordingOptions = undefined;
+    this.initScripts = [];
+    this.bindings = [];
+    this.settings = {};
+    this.pages = new Set();
+  }
+
+  setColorScheme(colorScheme) {
+    this.colorScheme = fromProtocolColorScheme(colorScheme);
+    for (const page of this.pages)
+      page.updateColorSchemeOverride();
+  }
+
+  setReducedMotion(reducedMotion) {
+    this.reducedMotion = fromProtocolReducedMotion(reducedMotion);
+    for (const page of this.pages)
+      page.updateReducedMotionOverride();
+  }
+
+  setForcedColors(forcedColors) {
+    this.forcedColors = fromProtocolForcedColors(forcedColors);
+    for (const page of this.pages)
+      page.updateForcedColorsOverride();
+  }
+
+  async destroy() {
+    if (this.userContextId !== 0) {
+      ContextualIdentityService.remove(this.userContextId);
+      for (const page of this.pages)
+        page.close();
+      if (this.pages.size) {
+        await new Promise(f => {
+          const listener = helper.on(this._registry, TargetRegistry.Events.TargetDestroyed, () => {
+            if (!this.pages.size) {
+              helper.removeListeners([listener]);
+              f();
+            }
+          });
+        });
+      }
+    }
+    this._registry._browserContextIdToBrowserContext.delete(this.browserContextId);
+    this._registry._userContextIdToBrowserContext.delete(this.userContextId);
+  }
+
+  setProxy(proxy) {
+    // Clear AuthCache.
+    Services.obs.notifyObservers(null, "net:clear-active-logins");
+    this._proxy = proxy;
+  }
+
+  setIgnoreHTTPSErrors(ignoreHTTPSErrors) {
+    if (this.ignoreHTTPSErrors === ignoreHTTPSErrors)
+      return;
+    this.ignoreHTTPSErrors = ignoreHTTPSErrors;
+    const certOverrideService = Cc[
+      "@mozilla.org/security/certoverride;1"
+    ].getService(Ci.nsICertOverrideService);
+    if (ignoreHTTPSErrors) {
+      Preferences.set("network.stricttransportsecurity.preloadlist", false);
+      Preferences.set("security.cert_pinning.enforcement_level", 0);
+      certOverrideService.setDisableAllSecurityChecksAndLetAttackersInterceptMyData(true, this.userContextId);
+    } else {
+      certOverrideService.setDisableAllSecurityChecksAndLetAttackersInterceptMyData(false, this.userContextId);
+    }
+  }
+
+  setDefaultUserAgent(userAgent) {
+    this.defaultUserAgent = userAgent;
+    for (const page of this.pages)
+      page.updateUserAgent();
+  }
+
+  setDefaultPlatform(platform) {
+    this.defaultPlatform = platform;
+    for (const page of this.pages)
+      page.updatePlatform();
+  }
+
+  setJavaScriptDisabled(javaScriptDisabled) {
+    this.javaScriptDisabled = javaScriptDisabled;
+    for (const page of this.pages)
+      page.updateJavaScriptDisabled();
+  }
+
+  setTouchOverride(touchOverride) {
+    this.touchOverride = touchOverride;
+    for (const page of this.pages)
+      page.updateTouchOverride();
+  }
+
+  async setDefaultViewport(viewport) {
+    this.defaultViewportSize = viewport ? viewport.viewportSize : undefined;
+    this.deviceScaleFactor = viewport ? viewport.deviceScaleFactor : undefined;
+    await Promise.all(Array.from(this.pages).map(page => page.updateViewportSize()));
+  }
+
+  async setInitScripts(scripts) {
+    this.initScripts = scripts;
+    await Promise.all(Array.from(this.pages).map(page => page.pushInitScripts()));
+  }
+
+  async addBinding(worldName, name, script) {
+    this.bindings.push({ worldName, name, script });
+    await Promise.all(Array.from(this.pages).map(page => page.addBinding(worldName, name, script)));
+  }
+
+  async applySetting(name, value) {
+    this.settings[name] = value;
+    await Promise.all(Array.from(this.pages).map(page => page.applyContextSetting(name, value)));
+  }
+
+  async grantPermissions(origin, permissions) {
+    this._permissions.set(origin, permissions);
+    const promises = [];
+    for (const page of this.pages) {
+      if (origin === '*' || page._url.startsWith(origin)) {
+        this.grantPermissionsToOrigin(page._url);
+        promises.push(page.ensurePermissions());
+      }
+    }
+    await Promise.all(promises);
+  }
+
+  resetPermissions() {
+    for (const principal of this._principals) {
+      for (const permission of ALL_PERMISSIONS)
+        Services.perms.removeFromPrincipal(principal, permission);
+    }
+    this._principals = [];
+    this._permissions.clear();
+  }
+
+  grantPermissionsToOrigin(url) {
+    let origin = Array.from(this._permissions.keys()).find(key => url.startsWith(key));
+    if (!origin)
+      origin = '*';
+
+    const permissions = this._permissions.get(origin);
+    if (!permissions)
+      return;
+
+    const attrs = { userContextId: this.userContextId || undefined };
+    const principal = Services.scriptSecurityManager.createContentPrincipal(NetUtil.newURI(url), attrs);
+    this._principals.push(principal);
+    for (const permission of ALL_PERMISSIONS) {
+      const action = permissions.includes(permission) ? Ci.nsIPermissionManager.ALLOW_ACTION : Ci.nsIPermissionManager.DENY_ACTION;
+      Services.perms.addFromPrincipal(principal, permission, action, Ci.nsIPermissionManager.EXPIRE_NEVER, 0 /* expireTime */);
+    }
+  }
+
+  setCookies(cookies) {
+    const protocolToSameSite = {
+      [undefined]: Ci.nsICookie.SAMESITE_NONE,
+      'Lax': Ci.nsICookie.SAMESITE_LAX,
+      'Strict': Ci.nsICookie.SAMESITE_STRICT,
+    };
+    for (const cookie of cookies) {
+      const uri = cookie.url ? NetUtil.newURI(cookie.url) : null;
+      let domain = cookie.domain;
+      if (!domain) {
+        if (!uri)
+          throw new Error('At least one of the url and domain needs to be specified');
+        domain = uri.host;
+      }
+      let path = cookie.path;
+      if (!path)
+        path = uri ? dirPath(uri.filePath) : '/';
+      let secure = false;
+      if (cookie.secure !== undefined)
+        secure = cookie.secure;
+      else if (uri && uri.scheme === 'https')
+        secure = true;
+      Services.cookies.add(
+        domain,
+        path,
+        cookie.name,
+        cookie.value,
+        secure,
+        cookie.httpOnly || false,
+        cookie.expires === undefined || cookie.expires === -1 /* isSession */,
+        cookie.expires === undefined ? Date.now() + HUNDRED_YEARS : cookie.expires,
+        { userContextId: this.userContextId || undefined } /* originAttributes */,
+        protocolToSameSite[cookie.sameSite],
+        Ci.nsICookie.SCHEME_UNSET
+      );
+    }
+  }
+
+  clearCookies() {
+    Services.cookies.removeCookiesWithOriginAttributes(JSON.stringify({ userContextId: this.userContextId || undefined }));
+  }
+
+  getCookies() {
+    const result = [];
+    const sameSiteToProtocol = {
+      [Ci.nsICookie.SAMESITE_NONE]: 'None',
+      [Ci.nsICookie.SAMESITE_LAX]: 'Lax',
+      [Ci.nsICookie.SAMESITE_STRICT]: 'Strict',
+    };
+    for (let cookie of Services.cookies.cookies) {
+      if (cookie.originAttributes.userContextId !== this.userContextId)
+        continue;
+      if (cookie.host === 'addons.mozilla.org')
+        continue;
+      result.push({
+        name: cookie.name,
+        value: cookie.value,
+        domain: cookie.host,
+        path: cookie.path,
+        expires: cookie.isSession ? -1 : cookie.expiry,
+        size: cookie.name.length + cookie.value.length,
+        httpOnly: cookie.isHttpOnly,
+        secure: cookie.isSecure,
+        session: cookie.isSession,
+        sameSite: sameSiteToProtocol[cookie.sameSite],
+      });
+    }
+    return result;
+  }
+
+  async setVideoRecordingOptions(options) {
+    this.videoRecordingOptions = options;
+    const promises = [];
+    for (const page of this.pages) {
+      if (options)
+        promises.push(page._startVideoRecording(options));
+      else if (page._videoRecordingInfo)
+        promises.push(page._stopVideoRecording());
+    }
+    await Promise.all(promises);
+  }
+}
+
+class Dialog {
+  static createIfSupported(prompt) {
+    const type = prompt.args.promptType;
+    switch (type) {
+      case 'alert':
+      case 'alertCheck':
+        return new Dialog(prompt, 'alert');
+      case 'prompt':
+        return new Dialog(prompt, 'prompt');
+      case 'confirm':
+      case 'confirmCheck':
+        return new Dialog(prompt, 'confirm');
+      case 'confirmEx':
+        return new Dialog(prompt, 'beforeunload');
+      default:
+        return null;
+    };
+  }
+
+  constructor(prompt, type) {
+    this._id = helper.generateId();
+    this._type = type;
+    this._prompt = prompt;
+  }
+
+  id() {
+    return this._id;
+  }
+
+  message() {
+    return this._prompt.ui.infoBody.textContent;
+  }
+
+  type() {
+    return this._type;
+  }
+
+  prompt() {
+    return this._prompt;
+  }
+
+  dismiss() {
+    if (this._prompt.ui.button1)
+      this._prompt.ui.button1.click();
+    else
+      this._prompt.ui.button0.click();
+  }
+
+  defaultValue() {
+    return this._prompt.ui.loginTextbox.value;
+  }
+
+  accept(promptValue) {
+    if (typeof promptValue === 'string' && this._type === 'prompt')
+      this._prompt.ui.loginTextbox.value = promptValue;
+    this._prompt.ui.button0.click();
+  }
+}
+
+
+function dirPath(path) {
+  return path.substring(0, path.lastIndexOf('/') + 1);
+}
+
+async function waitForWindowReady(window) {
+  if (window.delayedStartupPromise) {
+    await window.delayedStartupPromise;
+  } else {
+    await new Promise((resolve => {
+      Services.obs.addObserver(function observer(aSubject, aTopic) {
+        if (window == aSubject) {
+          Services.obs.removeObserver(observer, aTopic);
+          resolve();
+        }
+      }, "browser-delayed-startup-finished");
+    }));
+  }
+  if (window.document.readyState !== 'complete')
+    await helper.awaitEvent(window, 'load');
+}
+
+async function setViewportSizeForBrowser(viewportSize, browser, window) {
+  await waitForWindowReady(window);
+  if (viewportSize) {
+    const {width, height} = viewportSize;
+    const rect = browser.getBoundingClientRect();
+    window.resizeBy(width - rect.width, height - rect.height);
+    browser.style.setProperty('min-width', width + 'px');
+    browser.style.setProperty('min-height', height + 'px');
+    browser.style.setProperty('max-width', width + 'px');
+    browser.style.setProperty('max-height', height + 'px');
+  } else {
+    browser.style.removeProperty('min-width');
+    browser.style.removeProperty('min-height');
+    browser.style.removeProperty('max-width');
+    browser.style.removeProperty('max-height');
+  }
+  const rect = browser.getBoundingClientRect();
+  return { width: rect.width, height: rect.height };
+}
+
+TargetRegistry.Events = {
+  TargetCreated: Symbol('TargetRegistry.Events.TargetCreated'),
+  TargetDestroyed: Symbol('TargetRegistry.Events.TargetDestroyed'),
+  DownloadCreated: Symbol('TargetRegistry.Events.DownloadCreated'),
+  DownloadFinished: Symbol('TargetRegistry.Events.DownloadFinished'),
+  ScreencastStopped: Symbol('TargetRegistry.ScreencastStopped'),
+};
+
+var EXPORTED_SYMBOLS = ['TargetRegistry', 'PageTarget'];
+this.TargetRegistry = TargetRegistry;
+this.PageTarget = PageTarget;
diff --git a/browser_patches/firefox-beta/juggler/components/juggler.js b/browser_patches/firefox-beta/juggler/components/juggler.js
new file mode 100644
index 0000000000000000000000000000000000000000..7fd1ca3ad6e5948d9facb91acb34dfffe7cb2c57
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/components/juggler.js
@@ -0,0 +1,131 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const {XPCOMUtils} = ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");
+const {ComponentUtils} = ChromeUtils.import("resource://gre/modules/ComponentUtils.jsm");
+const {Services} = ChromeUtils.import("resource://gre/modules/Services.jsm");
+const {Dispatcher} = ChromeUtils.import("chrome://juggler/content/protocol/Dispatcher.js");
+const {BrowserHandler} = ChromeUtils.import("chrome://juggler/content/protocol/BrowserHandler.js");
+const {NetworkObserver} = ChromeUtils.import("chrome://juggler/content/NetworkObserver.js");
+const {TargetRegistry} = ChromeUtils.import("chrome://juggler/content/TargetRegistry.js");
+const {Helper} = ChromeUtils.import('chrome://juggler/content/Helper.js');
+const helper = new Helper();
+
+const Cc = Components.classes;
+const Ci = Components.interfaces;
+
+const FRAME_SCRIPT = "chrome://juggler/content/content/main.js";
+
+// Command Line Handler
+function CommandLineHandler() {
+};
+
+CommandLineHandler.prototype = {
+  classDescription: "Sample command-line handler",
+  classID: Components.ID('{f7a74a33-e2ab-422d-b022-4fb213dd2639}'),
+  contractID: "@mozilla.org/remote/juggler;1",
+  _xpcom_categories: [{
+    category: "command-line-handler",
+    entry: "m-juggler"
+  }],
+
+  /* nsICommandLineHandler */
+  handle: async function(cmdLine) {
+    const jugglerFlag = cmdLine.handleFlagWithParam("juggler", false);
+    const jugglerPipeFlag = cmdLine.handleFlag("juggler-pipe", false);
+    if (!jugglerPipeFlag && (!jugglerFlag || isNaN(jugglerFlag)))
+      return;
+    const silent = cmdLine.preventDefault;
+    if (silent)
+      Services.startup.enterLastWindowClosingSurvivalArea();
+
+    const targetRegistry = new TargetRegistry();
+    new NetworkObserver(targetRegistry);
+
+    const loadFrameScript = () => {
+      Services.mm.loadFrameScript(FRAME_SCRIPT, true /* aAllowDelayedLoad */);
+      if (Cc["@mozilla.org/gfx/info;1"].getService(Ci.nsIGfxInfo).isHeadless) {
+        const styleSheetService = Cc["@mozilla.org/content/style-sheet-service;1"].getService(Components.interfaces.nsIStyleSheetService);
+        const ioService = Cc["@mozilla.org/network/io-service;1"].getService(Components.interfaces.nsIIOService);
+        const uri = ioService.newURI('chrome://juggler/content/content/hidden-scrollbars.css', null, null);
+        styleSheetService.loadAndRegisterSheet(uri, styleSheetService.AGENT_SHEET);
+      }
+    };
+
+    // Force create hidden window here, otherwise its creation later closes the web socket!
+    Services.appShell.hiddenDOMWindow;
+
+    if (jugglerFlag) {
+      const port = parseInt(jugglerFlag, 10);
+      const { require } = ChromeUtils.import("resource://devtools/shared/Loader.jsm");
+      const WebSocketServer = require('devtools/server/socket/websocket-server');
+      this._server = Cc["@mozilla.org/network/server-socket;1"].createInstance(Ci.nsIServerSocket);
+      this._server.initSpecialConnection(port, Ci.nsIServerSocket.KeepWhenOffline | Ci.nsIServerSocket.LoopbackOnly, 4);
+      const token = helper.generateId();
+      this._server.asyncListen({
+        onSocketAccepted: async(socket, transport) => {
+          const input = transport.openInputStream(0, 0, 0);
+          const output = transport.openOutputStream(0, 0, 0);
+          const webSocket = await WebSocketServer.accept(transport, input, output, "/" + token);
+          const dispatcher = new Dispatcher(webSocket);
+          const browserHandler = new BrowserHandler(dispatcher.rootSession(), dispatcher, targetRegistry, () => {
+            if (silent)
+              Services.startup.exitLastWindowClosingSurvivalArea();
+          });
+          dispatcher.rootSession().setHandler(browserHandler);
+        }
+      });
+      loadFrameScript();
+      dump(`Juggler listening on ws://127.0.0.1:${this._server.port}/${token}\n`);
+    } else if (jugglerPipeFlag) {
+      let browserHandler;
+      let pipeStopped = false;
+      const pipe = Cc['@mozilla.org/juggler/remotedebuggingpipe;1'].getService(Ci.nsIRemoteDebuggingPipe);
+      const connection = {
+        QueryInterface: ChromeUtils.generateQI([Ci.nsIRemoteDebuggingPipeClient]),
+        receiveMessage(message) {
+          if (this.onmessage)
+            this.onmessage({ data: message });
+        },
+        disconnected() {
+          if (browserHandler)
+            browserHandler['Browser.close']();
+        },
+        send(message) {
+          if (pipeStopped) {
+            // We are missing the response to Browser.close,
+            // but everything works fine. Once we actually need it,
+            // we have to stop the pipe after the response is sent.
+            return;
+          }
+          pipe.sendMessage(message);
+        },
+      };
+      pipe.init(connection);
+      const dispatcher = new Dispatcher(connection);
+      browserHandler = new BrowserHandler(dispatcher.rootSession(), dispatcher, targetRegistry, () => {
+        if (silent)
+          Services.startup.exitLastWindowClosingSurvivalArea();
+        connection.onclose();
+        pipe.stop();
+        pipeStopped = true;
+      });
+      dispatcher.rootSession().setHandler(browserHandler);
+      loadFrameScript();
+      dump(`\nJuggler listening to the pipe\n`);
+    }
+  },
+
+  QueryInterface: ChromeUtils.generateQI([ Ci.nsICommandLineHandler ]),
+
+  // CHANGEME: change the help info as appropriate, but
+  // follow the guidelines in nsICommandLineHandler.idl
+  // specifically, flag descriptions should start at
+  // character 24, and lines should be wrapped at
+  // 72 characters with embedded newlines,
+  // and finally, the string should end with a newline
+  helpInfo : "  --juggler            Enable Juggler automation\n"
+};
+
+var NSGetFactory = ComponentUtils.generateNSGetFactory([CommandLineHandler]);
diff --git a/browser_patches/firefox-beta/juggler/components/juggler.manifest b/browser_patches/firefox-beta/juggler/components/juggler.manifest
new file mode 100644
index 0000000000000000000000000000000000000000..50f8930207563e0d6b8a7878fc602dbca54d77fc
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/components/juggler.manifest
@@ -0,0 +1,3 @@
+component {f7a74a33-e2ab-422d-b022-4fb213dd2639} juggler.js
+contract @mozilla.org/remote/juggler;1 {f7a74a33-e2ab-422d-b022-4fb213dd2639}
+category command-line-handler m-juggler @mozilla.org/remote/juggler;1
diff --git a/browser_patches/firefox-beta/juggler/components/moz.build b/browser_patches/firefox-beta/juggler/components/moz.build
new file mode 100644
index 0000000000000000000000000000000000000000..268fbc361d8053182bb6c27f626e853dd7aeb254
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/components/moz.build
@@ -0,0 +1,9 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+EXTRA_COMPONENTS += [
+    "juggler.js",
+    "juggler.manifest",
+]
+
diff --git a/browser_patches/firefox-beta/juggler/content/FrameTree.js b/browser_patches/firefox-beta/juggler/content/FrameTree.js
new file mode 100644
index 0000000000000000000000000000000000000000..61ff889e755fb9bcae11f656a658639aacbdcc82
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/content/FrameTree.js
@@ -0,0 +1,634 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+const Ci = Components.interfaces;
+const Cr = Components.results;
+const Cu = Components.utils;
+
+const {Helper} = ChromeUtils.import('chrome://juggler/content/Helper.js');
+const {SimpleChannel} = ChromeUtils.import('chrome://juggler/content/SimpleChannel.js');
+const {EventEmitter} = ChromeUtils.import('resource://gre/modules/EventEmitter.jsm');
+const {Runtime} = ChromeUtils.import('chrome://juggler/content/content/Runtime.js');
+
+const helper = new Helper();
+
+class FrameTree {
+  constructor(rootDocShell) {
+    EventEmitter.decorate(this);
+
+    this._browsingContextGroup = rootDocShell.browsingContext.group;
+    if (!this._browsingContextGroup.__jugglerFrameTrees)
+      this._browsingContextGroup.__jugglerFrameTrees = new Set();
+    this._browsingContextGroup.__jugglerFrameTrees.add(this);
+    this._isolatedWorlds = new Map();
+
+    this._webSocketEventService = Cc[
+      "@mozilla.org/websocketevent/service;1"
+    ].getService(Ci.nsIWebSocketEventService);
+
+    this._runtime = new Runtime(false /* isWorker */);
+    this._workers = new Map();
+    this._docShellToFrame = new Map();
+    this._frameIdToFrame = new Map();
+    this._pageReady = false;
+    this._mainFrame = this._createFrame(rootDocShell);
+    const webProgress = rootDocShell.QueryInterface(Ci.nsIInterfaceRequestor)
+                                .getInterface(Ci.nsIWebProgress);
+    this.QueryInterface = ChromeUtils.generateQI([
+      Ci.nsIWebProgressListener,
+      Ci.nsIWebProgressListener2,
+      Ci.nsISupportsWeakReference,
+    ]);
+
+    this._addedScrollbarsStylesheetSymbol = Symbol('_addedScrollbarsStylesheetSymbol');
+
+    this._wdm = Cc["@mozilla.org/dom/workers/workerdebuggermanager;1"].createInstance(Ci.nsIWorkerDebuggerManager);
+    this._wdmListener = {
+      QueryInterface: ChromeUtils.generateQI([Ci.nsIWorkerDebuggerManagerListener]),
+      onRegister: this._onWorkerCreated.bind(this),
+      onUnregister: this._onWorkerDestroyed.bind(this),
+    };
+    this._wdm.addListener(this._wdmListener);
+    for (const workerDebugger of this._wdm.getWorkerDebuggerEnumerator())
+      this._onWorkerCreated(workerDebugger);
+
+    const flags = Ci.nsIWebProgress.NOTIFY_STATE_DOCUMENT |
+                  Ci.nsIWebProgress.NOTIFY_LOCATION;
+    this._eventListeners = [
+      helper.addObserver(this._onDOMWindowCreated.bind(this), 'content-document-global-created'),
+      helper.addObserver(this._onDOMWindowCreated.bind(this), 'juggler-dom-window-reused'),
+      helper.addObserver(subject => this._onDocShellCreated(subject.QueryInterface(Ci.nsIDocShell)), 'webnavigation-create'),
+      helper.addObserver(subject => this._onDocShellDestroyed(subject.QueryInterface(Ci.nsIDocShell)), 'webnavigation-destroy'),
+      helper.addProgressListener(webProgress, this, flags),
+    ];
+  }
+
+  workers() {
+    return [...this._workers.values()];
+  }
+
+  runtime() {
+    return this._runtime;
+  }
+
+  setInitScripts(scripts) {
+    for (const world of this._isolatedWorlds.values())
+      world._scriptsToEvaluateOnNewDocument = [];
+
+    for (let { worldName, script } of scripts) {
+      worldName = worldName || '';
+      const existing = this._isolatedWorlds.has(worldName);
+      const world = this._ensureWorld(worldName);
+      world._scriptsToEvaluateOnNewDocument.push(script);
+      // FIXME: 'should inherit http credentials from browser context' fails without this
+      if (worldName && !existing) {
+        for (const frame of this.frames())
+          frame._createIsolatedContext(worldName);
+      }
+    }
+  }
+
+  _ensureWorld(worldName) {
+    worldName = worldName || '';
+    let world = this._isolatedWorlds.get(worldName);
+    if (!world) {
+      world = new IsolatedWorld(worldName);
+      this._isolatedWorlds.set(worldName, world);
+    }
+    return world;
+  }
+
+  _frameForWorker(workerDebugger) {
+    if (workerDebugger.type !== Ci.nsIWorkerDebugger.TYPE_DEDICATED)
+      return null;
+    if (!workerDebugger.window)
+      return null;
+    const docShell = workerDebugger.window.docShell;
+    return this._docShellToFrame.get(docShell) || null;
+  }
+
+  _onDOMWindowCreated(window) {
+    if (!window[this._addedScrollbarsStylesheetSymbol] && this.scrollbarsHidden) {
+      const styleSheetService = Cc["@mozilla.org/content/style-sheet-service;1"].getService(Components.interfaces.nsIStyleSheetService);
+      const ioService = Cc["@mozilla.org/network/io-service;1"].getService(Components.interfaces.nsIIOService);
+      const uri = ioService.newURI('chrome://juggler/content/content/hidden-scrollbars.css', null, null);
+      const sheet = styleSheetService.preloadSheet(uri, styleSheetService.AGENT_SHEET);
+      window.windowUtils.addSheet(sheet, styleSheetService.AGENT_SHEET);
+      window[this._addedScrollbarsStylesheetSymbol] = true;
+    }
+    const frame = this._docShellToFrame.get(window.docShell) || null;
+    if (!frame)
+      return;
+    frame._onGlobalObjectCleared();
+  }
+
+  setScrollbarsHidden(hidden) {
+    this.scrollbarsHidden = hidden;
+  }
+
+  _onWorkerCreated(workerDebugger) {
+    // Note: we do not interoperate with firefox devtools.
+    if (workerDebugger.isInitialized)
+      return;
+    const frame = this._frameForWorker(workerDebugger);
+    if (!frame)
+      return;
+    const worker = new Worker(frame, workerDebugger);
+    this._workers.set(workerDebugger, worker);
+    this.emit(FrameTree.Events.WorkerCreated, worker);
+  }
+
+  _onWorkerDestroyed(workerDebugger) {
+    const worker = this._workers.get(workerDebugger);
+    if (!worker)
+      return;
+    worker.dispose();
+    this._workers.delete(workerDebugger);
+    this.emit(FrameTree.Events.WorkerDestroyed, worker);
+  }
+
+  allFramesInBrowsingContextGroup(group) {
+    const frames = [];
+    for (const frameTree of (group.__jugglerFrameTrees || []))
+      frames.push(...frameTree.frames());
+    return frames;
+  }
+
+  isPageReady() {
+    return this._pageReady;
+  }
+
+  forcePageReady() {
+    if (this._pageReady)
+      return false;
+    this._pageReady = true;
+    this.emit(FrameTree.Events.PageReady);
+    return true;
+  }
+
+  addBinding(worldName, name, script) {
+    worldName = worldName || '';
+    const world = this._ensureWorld(worldName);
+    world._bindings.set(name, script);
+    for (const frame of this.frames())
+      frame._addBinding(worldName, name, script);
+  }
+
+  frameForDocShell(docShell) {
+    return this._docShellToFrame.get(docShell) || null;
+  }
+
+  frame(frameId) {
+    return this._frameIdToFrame.get(frameId) || null;
+  }
+
+  frames() {
+    let result = [];
+    collect(this._mainFrame);
+    return result;
+
+    function collect(frame) {
+      result.push(frame);
+      for (const subframe of frame._children)
+        collect(subframe);
+    }
+  }
+
+  mainFrame() {
+    return this._mainFrame;
+  }
+
+  dispose() {
+    this._browsingContextGroup.__jugglerFrameTrees.delete(this);
+    this._wdm.removeListener(this._wdmListener);
+    this._runtime.dispose();
+    helper.removeListeners(this._eventListeners);
+  }
+
+  onStateChange(progress, request, flag, status) {
+    if (!(request instanceof Ci.nsIChannel))
+      return;
+    const channel = request.QueryInterface(Ci.nsIChannel);
+    const docShell = progress.DOMWindow.docShell;
+    const frame = this._docShellToFrame.get(docShell);
+    if (!frame) {
+      dump(`ERROR: got a state changed event for un-tracked docshell!\n`);
+      return;
+    }
+
+    if (!channel.isDocument) {
+      // Somehow, we can get worker requests here,
+      // while we are only interested in frame documents.
+      return;
+    }
+
+    const isStart = flag & Ci.nsIWebProgressListener.STATE_START;
+    const isTransferring = flag & Ci.nsIWebProgressListener.STATE_TRANSFERRING;
+    const isStop = flag & Ci.nsIWebProgressListener.STATE_STOP;
+    const isDocument = flag & Ci.nsIWebProgressListener.STATE_IS_DOCUMENT;
+
+    if (isStart) {
+      // Starting a new navigation.
+      frame._pendingNavigationId = channelId(channel);
+      frame._pendingNavigationURL = channel.URI.spec;
+      this.emit(FrameTree.Events.NavigationStarted, frame);
+    } else if (isTransferring || (isStop && frame._pendingNavigationId && !status)) {
+      // Navigation is committed.
+      for (const subframe of frame._children)
+        this._detachFrame(subframe);
+      const navigationId = frame._pendingNavigationId;
+      frame._pendingNavigationId = null;
+      frame._pendingNavigationURL = null;
+      frame._lastCommittedNavigationId = navigationId;
+      frame._url = channel.URI.spec;
+      this.emit(FrameTree.Events.NavigationCommitted, frame);
+      if (frame === this._mainFrame)
+        this.forcePageReady();
+    } else if (isStop && frame._pendingNavigationId && status) {
+      // Navigation is aborted.
+      const navigationId = frame._pendingNavigationId;
+      frame._pendingNavigationId = null;
+      frame._pendingNavigationURL = null;
+      // Always report download navigation as failure to match other browsers.
+      const errorText = helper.getNetworkErrorStatusText(status);
+      this.emit(FrameTree.Events.NavigationAborted, frame, navigationId, errorText);
+      if (frame === this._mainFrame && status !== Cr.NS_BINDING_ABORTED)
+        this.forcePageReady();
+    }
+
+    if (isStop && isDocument)
+      this.emit(FrameTree.Events.Load, frame);
+  }
+
+  onLocationChange(progress, request, location, flags) {
+    const docShell = progress.DOMWindow.docShell;
+    const frame = this._docShellToFrame.get(docShell);
+    const sameDocumentNavigation = !!(flags & Ci.nsIWebProgressListener.LOCATION_CHANGE_SAME_DOCUMENT);
+    if (frame && sameDocumentNavigation) {
+      frame._url = location.spec;
+      this.emit(FrameTree.Events.SameDocumentNavigation, frame);
+    }
+  }
+
+  _onDocShellCreated(docShell) {
+    // Bug 1142752: sometimes, the docshell appears to be immediately
+    // destroyed, bailout early to prevent random exceptions.
+    if (docShell.isBeingDestroyed())
+      return;
+    // If this docShell doesn't belong to our frame tree - do nothing.
+    let root = docShell;
+    while (root.parent)
+      root = root.parent;
+    if (root === this._mainFrame._docShell)
+      this._createFrame(docShell);
+  }
+
+  _createFrame(docShell) {
+    const parentFrame = this._docShellToFrame.get(docShell.parent) || null;
+    const frame = new Frame(this, this._runtime, docShell, parentFrame);
+    this._docShellToFrame.set(docShell, frame);
+    this._frameIdToFrame.set(frame.id(), frame);
+    this.emit(FrameTree.Events.FrameAttached, frame);
+    // Create execution context **after** reporting frame.
+    // This is our protocol contract.
+    if (frame.domWindow())
+      frame._onGlobalObjectCleared();
+    return frame;
+  }
+
+  _onDocShellDestroyed(docShell) {
+    const frame = this._docShellToFrame.get(docShell);
+    if (frame)
+      this._detachFrame(frame);
+  }
+
+  _detachFrame(frame) {
+    // Detach all children first
+    for (const subframe of frame._children)
+      this._detachFrame(subframe);
+    this._docShellToFrame.delete(frame._docShell);
+    this._frameIdToFrame.delete(frame.id());
+    if (frame._parentFrame)
+      frame._parentFrame._children.delete(frame);
+    frame._parentFrame = null;
+    frame.dispose();
+    this.emit(FrameTree.Events.FrameDetached, frame);
+  }
+}
+
+FrameTree.Events = {
+  FrameAttached: 'frameattached',
+  FrameDetached: 'framedetached',
+  WorkerCreated: 'workercreated',
+  WorkerDestroyed: 'workerdestroyed',
+  WebSocketCreated: 'websocketcreated',
+  WebSocketOpened: 'websocketopened',
+  WebSocketClosed: 'websocketclosed',
+  WebSocketFrameReceived: 'websocketframereceived',
+  WebSocketFrameSent: 'websocketframesent',
+  NavigationStarted: 'navigationstarted',
+  NavigationCommitted: 'navigationcommitted',
+  NavigationAborted: 'navigationaborted',
+  SameDocumentNavigation: 'samedocumentnavigation',
+  PageReady: 'pageready',
+  Load: 'load',
+};
+
+class IsolatedWorld {
+  constructor(name) {
+    this._name = name;
+    this._scriptsToEvaluateOnNewDocument = [];
+    this._bindings = new Map();
+  }
+}
+
+class Frame {
+  constructor(frameTree, runtime, docShell, parentFrame) {
+    this._frameTree = frameTree;
+    this._runtime = runtime;
+    this._docShell = docShell;
+    this._children = new Set();
+    this._frameId = helper.browsingContextToFrameId(this._docShell.browsingContext);
+    this._parentFrame = null;
+    this._url = '';
+    if (docShell.domWindow && docShell.domWindow.location)
+      this._url = docShell.domWindow.location.href;
+    if (parentFrame) {
+      this._parentFrame = parentFrame;
+      parentFrame._children.add(this);
+    }
+
+    this._lastCommittedNavigationId = null;
+    this._pendingNavigationId = null;
+    this._pendingNavigationURL = null;
+
+    this._textInputProcessor = null;
+
+    this._worldNameToContext = new Map();
+    this._initialNavigationDone = false;
+
+    this._webSocketListenerInnerWindowId = 0;
+    // WebSocketListener calls frameReceived event before webSocketOpened.
+    // To avoid this, serialize event reporting.
+    this._webSocketInfos = new Map();
+
+    const dispatchWebSocketFrameReceived = (webSocketSerialID, frame) => this._frameTree.emit(FrameTree.Events.WebSocketFrameReceived, {
+      frameId: this._frameId,
+      wsid: webSocketSerialID + '',
+      opcode: frame.opCode,
+      data: frame.opCode !== 1 ? btoa(frame.payload) : frame.payload,
+    });
+    this._webSocketListener = {
+      QueryInterface: ChromeUtils.generateQI([Ci.nsIWebSocketEventListener, ]),
+
+      webSocketCreated: (webSocketSerialID, uri, protocols) => {
+        this._frameTree.emit(FrameTree.Events.WebSocketCreated, {
+          frameId: this._frameId,
+          wsid: webSocketSerialID + '',
+          requestURL: uri,
+        });
+        this._webSocketInfos.set(webSocketSerialID, {
+          opened: false,
+          pendingIncomingFrames: [],
+        });
+      },
+
+      webSocketOpened: (webSocketSerialID, effectiveURI, protocols, extensions, httpChannelId) => {
+        this._frameTree.emit(FrameTree.Events.WebSocketOpened, {
+          frameId: this._frameId,
+          requestId: httpChannelId + '',
+          wsid: webSocketSerialID + '',
+          effectiveURL: effectiveURI,
+        });
+        const info = this._webSocketInfos.get(webSocketSerialID);
+        info.opened = true;
+        for (const frame of info.pendingIncomingFrames)
+          dispatchWebSocketFrameReceived(webSocketSerialID, frame);
+      },
+
+      webSocketMessageAvailable: (webSocketSerialID, data, messageType) => {
+        // We don't use this event.
+      },
+
+      webSocketClosed: (webSocketSerialID, wasClean, code, reason) => {
+        this._webSocketInfos.delete(webSocketSerialID);
+        let error = '';
+        if (!wasClean) {
+          const keys = Object.keys(Ci.nsIWebSocketChannel);
+          for (const key of keys) {
+            if (Ci.nsIWebSocketChannel[key] === code)
+              error = key;
+          }
+        }
+        this._frameTree.emit(FrameTree.Events.WebSocketClosed, {
+          frameId: this._frameId,
+          wsid: webSocketSerialID + '',
+          error,
+        });
+      },
+
+      frameReceived: (webSocketSerialID, frame) => {
+        // Report only text and binary frames.
+        if (frame.opCode !== 1 && frame.opCode !== 2)
+          return;
+        const info = this._webSocketInfos.get(webSocketSerialID);
+        if (info.opened)
+          dispatchWebSocketFrameReceived(webSocketSerialID, frame);
+        else
+          info.pendingIncomingFrames.push(frame);
+      },
+
+      frameSent: (webSocketSerialID, frame) => {
+        // Report only text and binary frames.
+        if (frame.opCode !== 1 && frame.opCode !== 2)
+          return;
+        this._frameTree.emit(FrameTree.Events.WebSocketFrameSent, {
+          frameId: this._frameId,
+          wsid: webSocketSerialID + '',
+          opcode: frame.opCode,
+          data: frame.opCode !== 1 ? btoa(frame.payload) : frame.payload,
+        });
+      },
+    };
+  }
+
+  _createIsolatedContext(name) {
+    const principal = [this.domWindow()]; // extended principal
+    const sandbox = Cu.Sandbox(principal, {
+      sandboxPrototype: this.domWindow(),
+      wantComponents: false,
+      wantExportHelpers: false,
+      wantXrays: true,
+    });
+    const world = this._runtime.createExecutionContext(this.domWindow(), sandbox, {
+      frameId: this.id(),
+      name,
+    });
+    this._worldNameToContext.set(name, world);
+    return world;
+  }
+
+  unsafeObject(objectId) {
+    for (const context of this._worldNameToContext.values()) {
+      const result = context.unsafeObject(objectId);
+      if (result)
+        return result.object;
+    }
+    throw new Error('Cannot find object with id = ' + objectId);
+  }
+
+  dispose() {
+    for (const context of this._worldNameToContext.values())
+      this._runtime.destroyExecutionContext(context);
+    this._worldNameToContext.clear();
+  }
+
+  _addBinding(worldName, name, script) {
+    let executionContext = this._worldNameToContext.get(worldName);
+    if (worldName && !executionContext)
+      executionContext = this._createIsolatedContext(worldName);
+    if (executionContext)
+      executionContext.addBinding(name, script);
+  }
+
+  _onGlobalObjectCleared() {
+    const webSocketService = this._frameTree._webSocketEventService;
+    if (this._webSocketListenerInnerWindowId)
+      webSocketService.removeListener(this._webSocketListenerInnerWindowId, this._webSocketListener);
+    this._webSocketListenerInnerWindowId = this.domWindow().windowGlobalChild.innerWindowId;
+    webSocketService.addListener(this._webSocketListenerInnerWindowId, this._webSocketListener);
+
+    for (const context of this._worldNameToContext.values())
+      this._runtime.destroyExecutionContext(context);
+    this._worldNameToContext.clear();
+
+    this._worldNameToContext.set('', this._runtime.createExecutionContext(this.domWindow(), this.domWindow(), {
+      frameId: this._frameId,
+      name: '',
+    }));
+    for (const [name, world] of this._frameTree._isolatedWorlds) {
+      if (name)
+        this._createIsolatedContext(name);
+      const executionContext = this._worldNameToContext.get(name);
+      // Add bindings before evaluating scripts.
+      for (const [name, script] of world._bindings)
+        executionContext.addBinding(name, script);
+      for (const script of world._scriptsToEvaluateOnNewDocument)
+        executionContext.evaluateScriptSafely(script);
+    }
+  }
+
+  mainExecutionContext() {
+    return this._worldNameToContext.get('');
+  }
+
+  textInputProcessor() {
+    if (!this._textInputProcessor) {
+      this._textInputProcessor = Cc["@mozilla.org/text-input-processor;1"].createInstance(Ci.nsITextInputProcessor);
+    }
+    this._textInputProcessor.beginInputTransactionForTests(this._docShell.DOMWindow);
+    return this._textInputProcessor;
+  }
+
+  pendingNavigationId() {
+    return this._pendingNavigationId;
+  }
+
+  pendingNavigationURL() {
+    return this._pendingNavigationURL;
+  }
+
+  lastCommittedNavigationId() {
+    return this._lastCommittedNavigationId;
+  }
+
+  docShell() {
+    return this._docShell;
+  }
+
+  domWindow() {
+    return this._docShell.domWindow;
+  }
+
+  name() {
+    const frameElement = this._docShell.domWindow.frameElement;
+    let name = '';
+    if (frameElement)
+      name = frameElement.getAttribute('name') || frameElement.getAttribute('id') || '';
+    return name;
+  }
+
+  parentFrame() {
+    return this._parentFrame;
+  }
+
+  id() {
+    return this._frameId;
+  }
+
+  url() {
+    return this._url;
+  }
+
+}
+
+class Worker {
+  constructor(frame, workerDebugger) {
+    this._frame = frame;
+    this._workerId = helper.generateId();
+    this._workerDebugger = workerDebugger;
+
+    workerDebugger.initialize('chrome://juggler/content/content/WorkerMain.js');
+
+    this._channel = new SimpleChannel(`content::worker[${this._workerId}]`);
+    this._channel.setTransport({
+      sendMessage: obj => workerDebugger.postMessage(JSON.stringify(obj)),
+      dispose: () => {},
+    });
+    this._workerDebuggerListener = {
+      QueryInterface: ChromeUtils.generateQI([Ci.nsIWorkerDebuggerListener]),
+      onMessage: msg => void this._channel._onMessage(JSON.parse(msg)),
+      onClose: () => void this._channel.dispose(),
+      onError: (filename, lineno, message) => {
+        dump(`Error in worker: ${message} @${filename}:${lineno}\n`);
+      },
+    };
+    workerDebugger.addListener(this._workerDebuggerListener);
+  }
+
+  channel() {
+    return this._channel;
+  }
+
+  frame() {
+    return this._frame;
+  }
+
+  id() {
+    return this._workerId;
+  }
+
+  url() {
+    return this._workerDebugger.url;
+  }
+
+  dispose() {
+    this._channel.dispose();
+    this._workerDebugger.removeListener(this._workerDebuggerListener);
+  }
+}
+
+function channelId(channel) {
+  if (channel instanceof Ci.nsIIdentChannel) {
+    const identChannel = channel.QueryInterface(Ci.nsIIdentChannel);
+    return String(identChannel.channelId);
+  }
+  return helper.generateId();
+}
+
+
+var EXPORTED_SYMBOLS = ['FrameTree'];
+this.FrameTree = FrameTree;
+
diff --git a/browser_patches/firefox-beta/juggler/content/PageAgent.js b/browser_patches/firefox-beta/juggler/content/PageAgent.js
new file mode 100644
index 0000000000000000000000000000000000000000..934739648290798395c7e25eee5430efc3567db5
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/content/PageAgent.js
@@ -0,0 +1,894 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+const {Services} = ChromeUtils.import("resource://gre/modules/Services.jsm");
+const Ci = Components.interfaces;
+const Cr = Components.results;
+const Cu = Components.utils;
+
+const {Helper} = ChromeUtils.import('chrome://juggler/content/Helper.js');
+const {NetUtil} = ChromeUtils.import('resource://gre/modules/NetUtil.jsm');
+const dragService = Cc["@mozilla.org/widget/dragservice;1"].getService(
+  Ci.nsIDragService
+);
+const obs = Cc["@mozilla.org/observer-service;1"].getService(
+  Ci.nsIObserverService
+);
+
+const helper = new Helper();
+
+class WorkerData {
+  constructor(pageAgent, browserChannel, worker) {
+    this._workerRuntime = worker.channel().connect('runtime');
+    this._browserWorker = browserChannel.connect(worker.id());
+    this._worker = worker;
+    const emit = name => {
+      return (...args) => this._browserWorker.emit(name, ...args);
+    };
+    this._eventListeners = [
+      worker.channel().register('runtime', {
+        runtimeConsole: emit('runtimeConsole'),
+        runtimeExecutionContextCreated: emit('runtimeExecutionContextCreated'),
+        runtimeExecutionContextDestroyed: emit('runtimeExecutionContextDestroyed'),
+      }),
+      browserChannel.register(worker.id(), {
+        evaluate: (options) => this._workerRuntime.send('evaluate', options),
+        callFunction: (options) => this._workerRuntime.send('callFunction', options),
+        getObjectProperties: (options) => this._workerRuntime.send('getObjectProperties', options),
+        disposeObject: (options) => this._workerRuntime.send('disposeObject', options),
+      }),
+    ];
+  }
+
+  dispose() {
+    this._workerRuntime.dispose();
+    this._browserWorker.dispose();
+    helper.removeListeners(this._eventListeners);
+  }
+}
+
+class PageAgent {
+  constructor(messageManager, browserChannel, frameTree) {
+    this._messageManager = messageManager;
+    this._browserChannel = browserChannel;
+    this._browserPage = browserChannel.connect('page');
+    this._frameTree = frameTree;
+    this._runtime = frameTree.runtime();
+
+    this._workerData = new Map();
+
+    const docShell = frameTree.mainFrame().docShell();
+    this._docShell = docShell;
+    this._initialDPPX = docShell.contentViewer.overrideDPPX;
+    this._dragging = false;
+
+    // Dispatch frameAttached events for all initial frames
+    for (const frame of this._frameTree.frames()) {
+      this._onFrameAttached(frame);
+      if (frame.url())
+        this._onNavigationCommitted(frame);
+      if (frame.pendingNavigationId())
+        this._onNavigationStarted(frame);
+    }
+
+    // Report created workers.
+    for (const worker of this._frameTree.workers())
+      this._onWorkerCreated(worker);
+
+    // Report execution contexts.
+    for (const context of this._runtime.executionContexts())
+      this._onExecutionContextCreated(context);
+
+    if (this._frameTree.isPageReady()) {
+      this._browserPage.emit('pageReady', {});
+      const mainFrame = this._frameTree.mainFrame();
+      const domWindow = mainFrame.domWindow();
+      const document = domWindow ? domWindow.document : null;
+      const readyState = document ? document.readyState : null;
+      // Sometimes we initialize later than the first about:blank page is opened.
+      // In this case, the page might've been loaded already, and we need to issue
+      // the `DOMContentLoaded` and `load` events.
+      if (mainFrame.url() === 'about:blank' && readyState === 'complete')
+        this._emitAllEvents(this._frameTree.mainFrame());
+    }
+
+    this._eventListeners = [
+      helper.addObserver(this._linkClicked.bind(this, false), 'juggler-link-click'),
+      helper.addObserver(this._linkClicked.bind(this, true), 'juggler-link-click-sync'),
+      helper.addObserver(this._onWindowOpenInNewContext.bind(this), 'juggler-window-open-in-new-context'),
+      helper.addObserver(this._filePickerShown.bind(this), 'juggler-file-picker-shown'),
+      helper.addEventListener(this._messageManager, 'DOMContentLoaded', this._onDOMContentLoaded.bind(this)),
+      helper.addObserver(this._onDocumentOpenLoad.bind(this), 'juggler-document-open-loaded'),
+      helper.on(this._frameTree, 'load', this._onLoad.bind(this)),
+      helper.on(this._frameTree, 'frameattached', this._onFrameAttached.bind(this)),
+      helper.on(this._frameTree, 'framedetached', this._onFrameDetached.bind(this)),
+      helper.on(this._frameTree, 'navigationstarted', this._onNavigationStarted.bind(this)),
+      helper.on(this._frameTree, 'navigationcommitted', this._onNavigationCommitted.bind(this)),
+      helper.on(this._frameTree, 'navigationaborted', this._onNavigationAborted.bind(this)),
+      helper.on(this._frameTree, 'samedocumentnavigation', this._onSameDocumentNavigation.bind(this)),
+      helper.on(this._frameTree, 'pageready', () => this._browserPage.emit('pageReady', {})),
+      helper.on(this._frameTree, 'workercreated', this._onWorkerCreated.bind(this)),
+      helper.on(this._frameTree, 'workerdestroyed', this._onWorkerDestroyed.bind(this)),
+      helper.on(this._frameTree, 'websocketcreated', event => this._browserPage.emit('webSocketCreated', event)),
+      helper.on(this._frameTree, 'websocketopened', event => this._browserPage.emit('webSocketOpened', event)),
+      helper.on(this._frameTree, 'websocketframesent', event => this._browserPage.emit('webSocketFrameSent', event)),
+      helper.on(this._frameTree, 'websocketframereceived', event => this._browserPage.emit('webSocketFrameReceived', event)),
+      helper.on(this._frameTree, 'websocketclosed', event => this._browserPage.emit('webSocketClosed', event)),
+      helper.addObserver(this._onWindowOpen.bind(this), 'webNavigation-createdNavigationTarget-from-js'),
+      this._runtime.events.onErrorFromWorker((domWindow, message, stack) => {
+        const frame = this._frameTree.frameForDocShell(domWindow.docShell);
+        if (!frame)
+          return;
+        this._browserPage.emit('pageUncaughtError', {
+          frameId: frame.id(),
+          message,
+          stack,
+        });
+      }),
+      this._runtime.events.onConsoleMessage(msg => this._browserPage.emit('runtimeConsole', msg)),
+      this._runtime.events.onRuntimeError(this._onRuntimeError.bind(this)),
+      this._runtime.events.onExecutionContextCreated(this._onExecutionContextCreated.bind(this)),
+      this._runtime.events.onExecutionContextDestroyed(this._onExecutionContextDestroyed.bind(this)),
+      this._runtime.events.onBindingCalled(this._onBindingCalled.bind(this)),
+      browserChannel.register('page', {
+        addBinding: ({ worldName, name, script }) => this._frameTree.addBinding(worldName, name, script),
+        adoptNode: this._adoptNode.bind(this),
+        crash: this._crash.bind(this),
+        describeNode: this._describeNode.bind(this),
+        dispatchKeyEvent: this._dispatchKeyEvent.bind(this),
+        dispatchMouseEvent: this._dispatchMouseEvent.bind(this),
+        dispatchTouchEvent: this._dispatchTouchEvent.bind(this),
+        dispatchTapEvent: this._dispatchTapEvent.bind(this),
+        getContentQuads: this._getContentQuads.bind(this),
+        getFullAXTree: this._getFullAXTree.bind(this),
+        goBack: this._goBack.bind(this),
+        goForward: this._goForward.bind(this),
+        insertText: this._insertText.bind(this),
+        navigate: this._navigate.bind(this),
+        reload: this._reload.bind(this),
+        scrollIntoViewIfNeeded: this._scrollIntoViewIfNeeded.bind(this),
+        setCacheDisabled: this._setCacheDisabled.bind(this),
+        setFileInputFiles: this._setFileInputFiles.bind(this),
+        setInterceptFileChooserDialog: this._setInterceptFileChooserDialog.bind(this),
+        evaluate: this._runtime.evaluate.bind(this._runtime),
+        callFunction: this._runtime.callFunction.bind(this._runtime),
+        getObjectProperties: this._runtime.getObjectProperties.bind(this._runtime),
+        disposeObject: this._runtime.disposeObject.bind(this._runtime),
+      }),
+    ];
+  }
+
+  _setCacheDisabled({cacheDisabled}) {
+    const enable = Ci.nsIRequest.LOAD_NORMAL;
+    const disable = Ci.nsIRequest.LOAD_BYPASS_CACHE |
+                  Ci.nsIRequest.INHIBIT_CACHING;
+
+    const docShell = this._frameTree.mainFrame().docShell();
+    docShell.defaultLoadFlags = cacheDisabled ? disable : enable;
+  }
+
+  _emitAllEvents(frame) {
+    this._browserPage.emit('pageEventFired', {
+      frameId: frame.id(),
+      name: 'DOMContentLoaded',
+    });
+    this._browserPage.emit('pageEventFired', {
+      frameId: frame.id(),
+      name: 'load',
+    });
+  }
+
+  _onExecutionContextCreated(executionContext) {
+    this._browserPage.emit('runtimeExecutionContextCreated', {
+      executionContextId: executionContext.id(),
+      auxData: executionContext.auxData(),
+    });
+  }
+
+  _onExecutionContextDestroyed(executionContext) {
+    this._browserPage.emit('runtimeExecutionContextDestroyed', {
+      executionContextId: executionContext.id(),
+    });
+  }
+
+  _onWorkerCreated(worker) {
+    const workerData = new WorkerData(this, this._browserChannel, worker);
+    this._workerData.set(worker.id(), workerData);
+    this._browserPage.emit('pageWorkerCreated', {
+      workerId: worker.id(),
+      frameId: worker.frame().id(),
+      url: worker.url(),
+    });
+  }
+
+  _onWorkerDestroyed(worker) {
+    const workerData = this._workerData.get(worker.id());
+    if (!workerData)
+      return;
+    this._workerData.delete(worker.id());
+    workerData.dispose();
+    this._browserPage.emit('pageWorkerDestroyed', {
+      workerId: worker.id(),
+    });
+  }
+
+  _onWindowOpen(subject) {
+    if (!(subject instanceof Ci.nsIPropertyBag2))
+      return;
+    const props = subject.QueryInterface(Ci.nsIPropertyBag2);
+    const hasUrl = props.hasKey('url');
+    const createdDocShell = props.getPropertyAsInterface('createdTabDocShell', Ci.nsIDocShell);
+    if (!hasUrl && createdDocShell === this._docShell && this._frameTree.forcePageReady())
+      this._emitAllEvents(this._frameTree.mainFrame());
+  }
+
+  _setInterceptFileChooserDialog({enabled}) {
+    this._docShell.fileInputInterceptionEnabled = !!enabled;
+  }
+
+  _linkClicked(sync, anchorElement) {
+    if (anchorElement.ownerGlobal.docShell !== this._docShell)
+      return;
+    this._browserPage.emit('pageLinkClicked', { phase: sync ? 'after' : 'before' });
+  }
+
+  _onWindowOpenInNewContext(docShell) {
+    // TODO: unify this with _onWindowOpen if possible.
+    const frame = this._frameTree.frameForDocShell(docShell);
+    if (!frame)
+      return;
+    this._browserPage.emit('pageWillOpenNewWindowAsynchronously');
+  }
+
+  _filePickerShown(inputElement) {
+    const frame = this._findFrameForNode(inputElement);
+    if (!frame)
+      return;
+    this._browserPage.emit('pageFileChooserOpened', {
+      executionContextId: frame.mainExecutionContext().id(),
+      element: frame.mainExecutionContext().rawValueToRemoteObject(inputElement)
+    });
+  }
+
+  _findFrameForNode(node) {
+    return this._frameTree.frames().find(frame => {
+      const doc = frame.domWindow().document;
+      return node === doc || node.ownerDocument === doc;
+    });
+  }
+
+  _onDOMContentLoaded(event) {
+    if (!event.target.ownerGlobal)
+      return;
+    const docShell = event.target.ownerGlobal.docShell;
+    const frame = this._frameTree.frameForDocShell(docShell);
+    if (!frame)
+      return;
+    this._browserPage.emit('pageEventFired', {
+      frameId: frame.id(),
+      name: 'DOMContentLoaded',
+    });
+  }
+
+  _onRuntimeError({ executionContext, message, stack }) {
+    this._browserPage.emit('pageUncaughtError', {
+      frameId: executionContext.auxData().frameId,
+      message: message.toString(),
+      stack: stack.toString(),
+    });
+  }
+
+  _onDocumentOpenLoad(document) {
+    const docShell = document.ownerGlobal.docShell;
+    const frame = this._frameTree.frameForDocShell(docShell);
+    if (!frame)
+      return;
+    this._browserPage.emit('pageEventFired', {
+      frameId: frame.id(),
+      name: 'load'
+    });
+  }
+
+  _onLoad(frame) {
+    this._browserPage.emit('pageEventFired', {
+      frameId: frame.id(),
+      name: 'load'
+    });
+  }
+
+  _onNavigationStarted(frame) {
+    this._browserPage.emit('pageNavigationStarted', {
+      frameId: frame.id(),
+      navigationId: frame.pendingNavigationId(),
+      url: frame.pendingNavigationURL(),
+    });
+  }
+
+  _onNavigationAborted(frame, navigationId, errorText) {
+    this._browserPage.emit('pageNavigationAborted', {
+      frameId: frame.id(),
+      navigationId,
+      errorText,
+    });
+    if (!frame._initialNavigationDone && frame !== this._frameTree.mainFrame())
+      this._emitAllEvents(frame);
+    frame._initialNavigationDone = true;
+  }
+
+  _onSameDocumentNavigation(frame) {
+    this._browserPage.emit('pageSameDocumentNavigation', {
+      frameId: frame.id(),
+      url: frame.url(),
+    });
+  }
+
+  _onNavigationCommitted(frame) {
+    this._browserPage.emit('pageNavigationCommitted', {
+      frameId: frame.id(),
+      navigationId: frame.lastCommittedNavigationId() || undefined,
+      url: frame.url(),
+      name: frame.name(),
+    });
+    frame._initialNavigationDone = true;
+  }
+
+  _onFrameAttached(frame) {
+    this._browserPage.emit('pageFrameAttached', {
+      frameId: frame.id(),
+      parentFrameId: frame.parentFrame() ? frame.parentFrame().id() : undefined,
+    });
+  }
+
+  _onFrameDetached(frame) {
+    this._browserPage.emit('pageFrameDetached', {
+      frameId: frame.id(),
+    });
+  }
+
+  _onBindingCalled({executionContextId, name, payload}) {
+    this._browserPage.emit('pageBindingCalled', {
+      executionContextId,
+      name,
+      payload
+    });
+  }
+
+  dispose() {
+    for (const workerData of this._workerData.values())
+      workerData.dispose();
+    this._workerData.clear();
+    helper.removeListeners(this._eventListeners);
+  }
+
+  async _navigate({frameId, url, referer}) {
+    try {
+      const uri = NetUtil.newURI(url);
+    } catch (e) {
+      throw new Error(`Invalid url: "${url}"`);
+    }
+    let referrerURI = null;
+    let referrerInfo = null;
+    if (referer) {
+      try {
+        referrerURI = NetUtil.newURI(referer);
+        const ReferrerInfo = Components.Constructor(
+          '@mozilla.org/referrer-info;1',
+          'nsIReferrerInfo',
+          'init'
+        );
+        referrerInfo = new ReferrerInfo(Ci.nsIHttpChannel.REFERRER_POLICY_UNSET, true, referrerURI);
+      } catch (e) {
+        throw new Error(`Invalid referer: "${referer}"`);
+      }
+    }
+    const frame = this._frameTree.frame(frameId);
+    const docShell = frame.docShell().QueryInterface(Ci.nsIWebNavigation);
+    docShell.loadURI(url, {
+      triggeringPrincipal: Services.scriptSecurityManager.getSystemPrincipal(),
+      flags: Ci.nsIWebNavigation.LOAD_FLAGS_NONE,
+      referrerInfo,
+      postData: null,
+      headers: null,
+    });
+    return {navigationId: frame.pendingNavigationId(), navigationURL: frame.pendingNavigationURL()};
+  }
+
+  async _reload({frameId, url}) {
+    const frame = this._frameTree.frame(frameId);
+    const docShell = frame.docShell().QueryInterface(Ci.nsIWebNavigation);
+    docShell.reload(Ci.nsIWebNavigation.LOAD_FLAGS_NONE);
+  }
+
+  async _goBack({frameId, url}) {
+    const frame = this._frameTree.frame(frameId);
+    const docShell = frame.docShell();
+    if (!docShell.canGoBack)
+      return {success: false};
+    docShell.goBack();
+    return {success: true};
+  }
+
+  async _goForward({frameId, url}) {
+    const frame = this._frameTree.frame(frameId);
+    const docShell = frame.docShell();
+    if (!docShell.canGoForward)
+      return {success: false};
+    docShell.goForward();
+    return {success: true};
+  }
+
+  async _adoptNode({frameId, objectId, executionContextId}) {
+    const frame = this._frameTree.frame(frameId);
+    if (!frame)
+      throw new Error('Failed to find frame with id = ' + frameId);
+    const unsafeObject = frame.unsafeObject(objectId);
+    const context = this._runtime.findExecutionContext(executionContextId);
+    const fromPrincipal = unsafeObject.nodePrincipal;
+    const toFrame = this._frameTree.frame(context.auxData().frameId);
+    const toPrincipal = toFrame.domWindow().document.nodePrincipal;
+    if (!toPrincipal.subsumes(fromPrincipal))
+      return { remoteObject: null };
+    return { remoteObject: context.rawValueToRemoteObject(unsafeObject) };
+  }
+
+  async _setFileInputFiles({objectId, frameId, files}) {
+    const frame = this._frameTree.frame(frameId);
+    if (!frame)
+      throw new Error('Failed to find frame with id = ' + frameId);
+    const unsafeObject = frame.unsafeObject(objectId);
+    if (!unsafeObject)
+      throw new Error('Object is not input!');
+    const nsFiles = await Promise.all(files.map(filePath => File.createFromFileName(filePath)));
+    unsafeObject.mozSetFileArray(nsFiles);
+  }
+
+  _getContentQuads({objectId, frameId}) {
+    const frame = this._frameTree.frame(frameId);
+    if (!frame)
+      throw new Error('Failed to find frame with id = ' + frameId);
+    const unsafeObject = frame.unsafeObject(objectId);
+    if (!unsafeObject.getBoxQuads)
+      throw new Error('RemoteObject is not a node');
+    const quads = unsafeObject.getBoxQuads({relativeTo: this._frameTree.mainFrame().domWindow().document, recurseWhenNoFrame: true}).map(quad => {
+      return {
+        p1: {x: quad.p1.x, y: quad.p1.y},
+        p2: {x: quad.p2.x, y: quad.p2.y},
+        p3: {x: quad.p3.x, y: quad.p3.y},
+        p4: {x: quad.p4.x, y: quad.p4.y},
+      };
+    });
+    return {quads};
+  }
+
+  _describeNode({objectId, frameId}) {
+    const frame = this._frameTree.frame(frameId);
+    if (!frame)
+      throw new Error('Failed to find frame with id = ' + frameId);
+    const unsafeObject = frame.unsafeObject(objectId);
+    const browsingContextGroup = frame.docShell().browsingContext.group;
+    const frames = this._frameTree.allFramesInBrowsingContextGroup(browsingContextGroup);
+    let contentFrame;
+    let ownerFrame;
+    for (const frame of frames) {
+      if (unsafeObject.contentWindow && frame.docShell() === unsafeObject.contentWindow.docShell)
+        contentFrame = frame;
+      const document = frame.domWindow().document;
+      if (unsafeObject === document || unsafeObject.ownerDocument === document)
+        ownerFrame = frame;
+    }
+    return {
+      contentFrameId: contentFrame ? contentFrame.id() : undefined,
+      ownerFrameId: ownerFrame ? ownerFrame.id() : undefined,
+    };
+  }
+
+  async _scrollIntoViewIfNeeded({objectId, frameId, rect}) {
+    const frame = this._frameTree.frame(frameId);
+    if (!frame)
+      throw new Error('Failed to find frame with id = ' + frameId);
+    const unsafeObject = frame.unsafeObject(objectId);
+    if (!unsafeObject.isConnected)
+      throw new Error('Node is detached from document');
+    if (!rect)
+      rect = { x: -1, y: -1, width: -1, height: -1};
+    if (unsafeObject.scrollRectIntoViewIfNeeded)
+      unsafeObject.scrollRectIntoViewIfNeeded(rect.x, rect.y, rect.width, rect.height);
+    else
+      throw new Error('Node does not have a layout object');
+  }
+
+  _getNodeBoundingBox(unsafeObject) {
+    if (!unsafeObject.getBoxQuads)
+      throw new Error('RemoteObject is not a node');
+    const quads = unsafeObject.getBoxQuads({relativeTo: this._frameTree.mainFrame().domWindow().document});
+    if (!quads.length)
+      return;
+    let x1 = Infinity;
+    let y1 = Infinity;
+    let x2 = -Infinity;
+    let y2 = -Infinity;
+    for (const quad of quads) {
+      const boundingBox = quad.getBounds();
+      x1 = Math.min(boundingBox.x, x1);
+      y1 = Math.min(boundingBox.y, y1);
+      x2 = Math.max(boundingBox.x + boundingBox.width, x2);
+      y2 = Math.max(boundingBox.y + boundingBox.height, y2);
+    }
+    return {x: x1, y: y1, width: x2 - x1, height: y2 - y1};
+  }
+
+  async _dispatchKeyEvent({type, keyCode, code, key, repeat, location, text}) {
+    // key events don't fire if we are dragging.
+    if (this._dragging) {
+      if (type === 'keydown' && key === 'Escape')
+        this._cancelDragIfNeeded();
+      return;
+    }
+    const frame = this._frameTree.mainFrame();
+    const tip = frame.textInputProcessor();
+    if (key === 'Meta' && Services.appinfo.OS !== 'Darwin')
+      key = 'OS';
+    else if (key === 'OS' && Services.appinfo.OS === 'Darwin')
+      key = 'Meta';
+    let keyEvent = new (frame.domWindow().KeyboardEvent)("", {
+      key,
+      code,
+      location,
+      repeat,
+      keyCode
+    });
+    if (type === 'keydown') {
+      if (text && text !== key) {
+        tip.commitCompositionWith(text, keyEvent);
+      } else {
+        const flags = 0;
+        tip.keydown(keyEvent, flags);
+      }
+    } else if (type === 'keyup') {
+      if (text)
+        throw new Error(`keyup does not support text option`);
+      const flags = 0;
+      tip.keyup(keyEvent, flags);
+    } else {
+      throw new Error(`Unknown type ${type}`);
+    }
+  }
+
+  async _dispatchTouchEvent({type, touchPoints, modifiers}) {
+    const frame = this._frameTree.mainFrame();
+    const defaultPrevented = frame.domWindow().windowUtils.sendTouchEvent(
+      type.toLowerCase(),
+      touchPoints.map((point, id) => id),
+      touchPoints.map(point => point.x),
+      touchPoints.map(point => point.y),
+      touchPoints.map(point => point.radiusX === undefined ? 1.0 : point.radiusX),
+      touchPoints.map(point => point.radiusY === undefined ? 1.0 : point.radiusY),
+      touchPoints.map(point => point.rotationAngle === undefined ? 0.0 : point.rotationAngle),
+      touchPoints.map(point => point.force === undefined ? 1.0 : point.force),
+      touchPoints.length,
+      modifiers);
+    return {defaultPrevented};
+  }
+
+  async _dispatchTapEvent({x, y, modifiers}) {
+    // Force a layout at the point in question, because touch events
+    // do not seem to trigger one like mouse events.
+    this._frameTree.mainFrame().domWindow().windowUtils.elementFromPoint(
+      x,
+      y,
+      false /* aIgnoreRootScrollFrame */,
+      true /* aFlushLayout */);
+
+    const {defaultPrevented: startPrevented} = await this._dispatchTouchEvent({
+      type: 'touchstart',
+      modifiers,
+      touchPoints: [{x, y}]
+    });
+    const {defaultPrevented: endPrevented} = await this._dispatchTouchEvent({
+      type: 'touchend',
+      modifiers,
+      touchPoints: [{x, y}]
+    });
+    if (startPrevented || endPrevented)
+      return;
+
+    const frame = this._frameTree.mainFrame();
+    frame.domWindow().windowUtils.sendMouseEvent(
+      'mousemove',
+      x,
+      y,
+      0 /*button*/,
+      0 /*clickCount*/,
+      modifiers,
+      false /*aIgnoreRootScrollFrame*/,
+      undefined /*pressure*/,
+      5 /*inputSource*/,
+      undefined /*isDOMEventSynthesized*/,
+      false /*isWidgetEventSynthesized*/,
+      0 /*buttons*/,
+      undefined /*pointerIdentifier*/,
+      true /*disablePointerEvent*/);
+
+    frame.domWindow().windowUtils.sendMouseEvent(
+      'mousedown',
+      x,
+      y,
+      0 /*button*/,
+      1 /*clickCount*/,
+      modifiers,
+      false /*aIgnoreRootScrollFrame*/,
+      undefined /*pressure*/,
+      5 /*inputSource*/,
+      undefined /*isDOMEventSynthesized*/,
+      false /*isWidgetEventSynthesized*/,
+      1 /*buttons*/,
+      undefined /*pointerIdentifier*/,
+      true /*disablePointerEvent*/);
+
+    frame.domWindow().windowUtils.sendMouseEvent(
+      'mouseup',
+      x,
+      y,
+      0 /*button*/,
+      1 /*clickCount*/,
+      modifiers,
+      false /*aIgnoreRootScrollFrame*/,
+      undefined /*pressure*/,
+      5 /*inputSource*/,
+      undefined /*isDOMEventSynthesized*/,
+      false /*isWidgetEventSynthesized*/,
+      0 /*buttons*/,
+      undefined /*pointerIdentifier*/,
+      true /*disablePointerEvent*/);
+  }
+
+  _startDragSessionIfNeeded() {
+    const sess = dragService.getCurrentSession();
+    if (sess) return;
+    dragService.startDragSessionForTests(
+      Ci.nsIDragService.DRAGDROP_ACTION_MOVE |
+        Ci.nsIDragService.DRAGDROP_ACTION_COPY |
+        Ci.nsIDragService.DRAGDROP_ACTION_LINK
+    );
+  }
+
+  _simulateDragEvent(type, x, y, modifiers) {
+    const window = this._frameTree.mainFrame().domWindow();
+    const element = window.windowUtils.elementFromPoint(x, y, false, false);
+    const event = window.document.createEvent('DragEvent');
+
+    event.initDragEvent(
+      type,
+      true /* bubble */,
+      true /* cancelable */,
+      window,
+      0 /* clickCount */,
+      window.mozInnerScreenX + x,
+      window.mozInnerScreenY + y,
+      x,
+      y,
+      modifiers & 2 /* ctrlkey */,
+      modifiers & 1 /* altKey */,
+      modifiers & 4 /* shiftKey */,
+      modifiers & 8 /* metaKey */,
+      0 /* button */, // firefox always has the button as 0 on drops, regardless of which was pressed
+      null /* relatedTarget */,
+      null,
+    );
+    if (type !== 'drop' || dragService.dragAction)
+      window.windowUtils.dispatchDOMEventViaPresShellForTesting(element, event);
+    if (type === 'drop')
+      this._cancelDragIfNeeded();
+  }
+
+  _cancelDragIfNeeded() {
+    this._dragging = false;
+    const sess = dragService.getCurrentSession();
+    if (sess)
+      dragService.endDragSession(true);
+  }
+
+  async _dispatchMouseEvent({type, x, y, button, clickCount, modifiers, buttons}) {
+    this._startDragSessionIfNeeded();
+    const trapDrag = subject => {
+      this._dragging = true;
+    }
+
+    // Don't send mouse events if there is an active drag
+    if (!this._dragging) {
+      const frame = this._frameTree.mainFrame();
+
+      obs.addObserver(trapDrag, 'on-datatransfer-available');
+      frame.domWindow().windowUtils.sendMouseEvent(
+        type,
+        x,
+        y,
+        button,
+        clickCount,
+        modifiers,
+        false /*aIgnoreRootScrollFrame*/,
+        undefined /*pressure*/,
+        undefined /*inputSource*/,
+        undefined /*isDOMEventSynthesized*/,
+        undefined /*isWidgetEventSynthesized*/,
+        buttons);
+      obs.removeObserver(trapDrag, 'on-datatransfer-available');
+
+      if (type === 'mousedown' && button === 2) {
+        frame.domWindow().windowUtils.sendMouseEvent(
+          'contextmenu',
+          x,
+          y,
+          button,
+          clickCount,
+          modifiers,
+          false /*aIgnoreRootScrollFrame*/,
+          undefined /*pressure*/,
+          undefined /*inputSource*/,
+          undefined /*isDOMEventSynthesized*/,
+          undefined /*isWidgetEventSynthesized*/,
+          buttons);
+      }
+    }
+
+    // update drag state
+    if (this._dragging) {
+      if (type === 'mousemove')
+        this._simulateDragEvent('dragover', x, y, modifiers);
+      else if (type === 'mouseup') // firefox will do drops when any mouse button is released
+        this._simulateDragEvent('drop', x, y, modifiers);
+    } else {
+      this._cancelDragIfNeeded();
+    }
+  }
+
+  async _insertText({text}) {
+    const frame = this._frameTree.mainFrame();
+    frame.textInputProcessor().commitCompositionWith(text);
+  }
+
+  async _crash() {
+    dump(`Crashing intentionally\n`);
+    // This is to intentionally crash the frame.
+    // We crash by using js-ctypes and dereferencing
+    // a bad pointer. The crash should happen immediately
+    // upon loading this frame script.
+    const { ctypes } = ChromeUtils.import('resource://gre/modules/ctypes.jsm');
+    ChromeUtils.privateNoteIntentionalCrash();
+    const zero = new ctypes.intptr_t(8);
+    const badptr = ctypes.cast(zero, ctypes.PointerType(ctypes.int32_t));
+    badptr.contents;
+  }
+
+  async _getFullAXTree({objectId}) {
+    let unsafeObject = null;
+    if (objectId) {
+      unsafeObject = this._frameTree.mainFrame().unsafeObject(objectId);
+      if (!unsafeObject)
+        throw new Error(`No object found for id "${objectId}"`);
+    }
+
+    const service = Cc["@mozilla.org/accessibilityService;1"]
+      .getService(Ci.nsIAccessibilityService);
+    const document = this._frameTree.mainFrame().domWindow().document;
+    const docAcc = service.getAccessibleFor(document);
+
+    while (docAcc.document.isUpdatePendingForJugglerAccessibility)
+      await new Promise(x => this._frameTree.mainFrame().domWindow().requestAnimationFrame(x));
+
+    async function waitForQuiet() {
+      let state = {};
+      docAcc.getState(state, {});
+      if ((state.value & Ci.nsIAccessibleStates.STATE_BUSY) == 0)
+        return;
+      let resolve, reject;
+      const promise = new Promise((x, y) => {resolve = x, reject = y});
+      let eventObserver = {
+        observe(subject, topic) {
+          if (topic !== "accessible-event") {
+            return;
+          }
+
+          // If event type does not match expected type, skip the event.
+          let event = subject.QueryInterface(Ci.nsIAccessibleEvent);
+          if (event.eventType !== Ci.nsIAccessibleEvent.EVENT_STATE_CHANGE) {
+            return;
+          }
+
+          // If event's accessible does not match expected accessible,
+          // skip the event.
+          if (event.accessible !== docAcc) {
+            return;
+          }
+
+          Services.obs.removeObserver(this, "accessible-event");
+          resolve();
+        },
+      };
+      Services.obs.addObserver(eventObserver, "accessible-event");
+      return promise;
+    }
+    function buildNode(accElement) {
+      let a = {}, b = {};
+      accElement.getState(a, b);
+      const tree = {
+        role: service.getStringRole(accElement.role),
+        name: accElement.name || '',
+      };
+      if (unsafeObject && unsafeObject === accElement.DOMNode)
+        tree.foundObject = true;
+      for (const userStringProperty of [
+        'value',
+        'description'
+      ]) {
+        tree[userStringProperty] = accElement[userStringProperty] || undefined;
+      }
+
+      const states = {};
+      for (const name of service.getStringStates(a.value, b.value))
+        states[name] = true;
+      for (const name of ['selected',
+        'focused',
+        'pressed',
+        'focusable',
+        'required',
+        'invalid',
+        'modal',
+        'editable',
+        'busy',
+        'checked',
+        'multiselectable']) {
+        if (states[name])
+          tree[name] = true;
+      }
+
+      if (states['multi line'])
+        tree['multiline'] = true;
+      if (states['editable'] && states['readonly'])
+        tree['readonly'] = true;
+      if (states['checked'])
+        tree['checked'] = true;
+      if (states['mixed'])
+        tree['checked'] = 'mixed';
+      if (states['expanded'])
+        tree['expanded'] = true;
+      else if (states['collapsed'])
+        tree['expanded'] = false;
+      if (!states['enabled'])
+        tree['disabled'] = true;
+
+      const attributes = {};
+      if (accElement.attributes) {
+        for (const { key, value } of accElement.attributes.enumerate()) {
+          attributes[key] = value;
+        }
+      }
+      for (const numericalProperty of ['level']) {
+        if (numericalProperty in attributes)
+          tree[numericalProperty] = parseFloat(attributes[numericalProperty]);
+      }
+      for (const stringProperty of ['tag', 'roledescription', 'valuetext', 'orientation', 'autocomplete', 'keyshortcuts', 'haspopup']) {
+        if (stringProperty in attributes)
+          tree[stringProperty] = attributes[stringProperty];
+      }
+      const children = [];
+
+      for (let child = accElement.firstChild; child; child = child.nextSibling) {
+        children.push(buildNode(child));
+      }
+      if (children.length)
+        tree.children = children;
+      return tree;
+    }
+    await waitForQuiet();
+    return {
+      tree: buildNode(docAcc)
+    };
+  }
+}
+
+var EXPORTED_SYMBOLS = ['PageAgent'];
+this.PageAgent = PageAgent;
+
diff --git a/browser_patches/firefox-beta/juggler/content/Runtime.js b/browser_patches/firefox-beta/juggler/content/Runtime.js
new file mode 100644
index 0000000000000000000000000000000000000000..20c046a1dbd36c46f00387bc9233c67b8ca72d23
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/content/Runtime.js
@@ -0,0 +1,596 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+// Note: this file should be loadabale with eval() into worker environment.
+// Avoid Components.*, ChromeUtils and global const variables.
+
+if (!this.Debugger) {
+  // Worker has a Debugger defined already.
+  const {addDebuggerToGlobal} = ChromeUtils.import("resource://gre/modules/jsdebugger.jsm", {});
+  addDebuggerToGlobal(Components.utils.getGlobalForObject(this));
+}
+
+let lastId = 0;
+function generateId() {
+  return 'id-' + (++lastId);
+}
+
+const consoleLevelToProtocolType = {
+  'dir': 'dir',
+  'log': 'log',
+  'debug': 'debug',
+  'info': 'info',
+  'error': 'error',
+  'warn': 'warning',
+  'dirxml': 'dirxml',
+  'table': 'table',
+  'trace': 'trace',
+  'clear': 'clear',
+  'group': 'startGroup',
+  'groupCollapsed': 'startGroupCollapsed',
+  'groupEnd': 'endGroup',
+  'assert': 'assert',
+  'profile': 'profile',
+  'profileEnd': 'profileEnd',
+  'count': 'count',
+  'countReset': 'countReset',
+  'time': null,
+  'timeLog': 'timeLog',
+  'timeEnd': 'timeEnd',
+  'timeStamp': 'timeStamp',
+};
+
+const disallowedMessageCategories = new Set([
+  'XPConnect JavaScript',
+  'component javascript',
+  'chrome javascript',
+  'chrome registration',
+  'XBL',
+  'XBL Prototype Handler',
+  'XBL Content Sink',
+  'xbl javascript',
+]);
+
+class Runtime {
+  constructor(isWorker = false) {
+    this._debugger = new Debugger();
+    this._pendingPromises = new Map();
+    this._executionContexts = new Map();
+    this._windowToExecutionContext = new Map();
+    this._eventListeners = [];
+    if (isWorker) {
+      this._registerWorkerConsoleHandler();
+    } else {
+      const {Services} = ChromeUtils.import("resource://gre/modules/Services.jsm");
+      this._registerConsoleServiceListener(Services);
+      this._registerConsoleAPIListener(Services);
+    }
+    // We can't use event listener here to be compatible with Worker Global Context.
+    // Use plain callbacks instead.
+    this.events = {
+      onConsoleMessage: createEvent(),
+      onRuntimeError: createEvent(),
+      onErrorFromWorker: createEvent(),
+      onExecutionContextCreated: createEvent(),
+      onExecutionContextDestroyed: createEvent(),
+      onBindingCalled: createEvent(),
+    };
+  }
+
+  executionContexts() {
+    return [...this._executionContexts.values()];
+  }
+
+  async evaluate({executionContextId, expression, returnByValue}) {
+    const executionContext = this.findExecutionContext(executionContextId);
+    if (!executionContext)
+      throw new Error('Failed to find execution context with id = ' + executionContextId);
+    const exceptionDetails = {};
+    let result = await executionContext.evaluateScript(expression, exceptionDetails);
+    if (!result)
+      return {exceptionDetails};
+    if (returnByValue)
+      result = executionContext.ensureSerializedToValue(result);
+    return {result};
+  }
+
+  async callFunction({executionContextId, functionDeclaration, args, returnByValue}) {
+    const executionContext = this.findExecutionContext(executionContextId);
+    if (!executionContext)
+      throw new Error('Failed to find execution context with id = ' + executionContextId);
+    const exceptionDetails = {};
+    let result = await executionContext.evaluateFunction(functionDeclaration, args, exceptionDetails);
+    if (!result)
+      return {exceptionDetails};
+    if (returnByValue)
+      result = executionContext.ensureSerializedToValue(result);
+    return {result};
+  }
+
+  async getObjectProperties({executionContextId, objectId}) {
+    const executionContext = this.findExecutionContext(executionContextId);
+    if (!executionContext)
+      throw new Error('Failed to find execution context with id = ' + executionContextId);
+    return {properties: executionContext.getObjectProperties(objectId)};
+  }
+
+  async disposeObject({executionContextId, objectId}) {
+    const executionContext = this.findExecutionContext(executionContextId);
+    if (!executionContext)
+      throw new Error('Failed to find execution context with id = ' + executionContextId);
+    return executionContext.disposeObject(objectId);
+  }
+
+  _registerConsoleServiceListener(Services) {
+    const Ci = Components.interfaces;
+    const consoleServiceListener = {
+      QueryInterface: ChromeUtils.generateQI([Ci.nsIConsoleListener]),
+
+      observe: message => {
+        if (!(message instanceof Ci.nsIScriptError) || !message.outerWindowID ||
+            !message.category || disallowedMessageCategories.has(message.category)) {
+          return;
+        }
+        const errorWindow = Services.wm.getOuterWindowWithId(message.outerWindowID);
+        if (message.category === 'Web Worker' && message.logLevel === Ci.nsIConsoleMessage.error) {
+          emitEvent(this.events.onErrorFromWorker, errorWindow, message.message, '' + message.stack);
+          return;
+        }
+        const executionContext = this._windowToExecutionContext.get(errorWindow);
+        if (!executionContext) {
+          return;
+        }
+        const typeNames = {
+          [Ci.nsIConsoleMessage.debug]: 'debug',
+          [Ci.nsIConsoleMessage.info]: 'info',
+          [Ci.nsIConsoleMessage.warn]: 'warn',
+          [Ci.nsIConsoleMessage.error]: 'error',
+        };
+        if (!message.hasException) {
+          emitEvent(this.events.onConsoleMessage, {
+            args: [{
+              value: message.message,
+            }],
+            type: typeNames[message.logLevel],
+            executionContextId: executionContext.id(),
+            location: {
+              lineNumber: message.lineNumber,
+              columnNumber: message.columnNumber,
+              url: message.sourceName,
+            },
+          });
+        } else {
+          emitEvent(this.events.onRuntimeError, {
+            executionContext,
+            message: message.errorMessage,
+            stack: message.stack.toString(),
+          });
+        }
+      },
+    };
+    Services.console.registerListener(consoleServiceListener);
+    this._eventListeners.push(() => Services.console.unregisterListener(consoleServiceListener));
+  }
+
+  _registerConsoleAPIListener(Services) {
+    const Ci = Components.interfaces;
+    const Cc = Components.classes;
+    const ConsoleAPIStorage = Cc["@mozilla.org/consoleAPI-storage;1"].getService(Ci.nsIConsoleAPIStorage);
+    const onMessage = ({ wrappedJSObject }) => {
+      const executionContext = Array.from(this._executionContexts.values()).find(context => {
+        // There is no easy way to determine isolated world context and we normally don't write
+        // objects to console from utility worlds so we always return main world context here.
+        if (context._isIsolatedWorldContext())
+          return false;
+        const domWindow = context._domWindow;
+        return domWindow && domWindow.windowGlobalChild.innerWindowId === wrappedJSObject.innerID;
+      });
+      if (!executionContext)
+        return;
+      this._onConsoleMessage(executionContext, wrappedJSObject);
+    }
+    ConsoleAPIStorage.addLogEventListener(
+      onMessage,
+      Cc["@mozilla.org/systemprincipal;1"].createInstance(Ci.nsIPrincipal)
+    );
+    this._eventListeners.push(() => ConsoleAPIStorage.removeLogEventListener(onMessage));
+  }
+
+  _registerWorkerConsoleHandler() {
+    setConsoleEventHandler(message => {
+      const executionContext = Array.from(this._executionContexts.values())[0];
+      this._onConsoleMessage(executionContext, message);
+    });
+    this._eventListeners.push(() => setConsoleEventHandler(null));
+  }
+
+  _onConsoleMessage(executionContext, message) {
+    const type = consoleLevelToProtocolType[message.level];
+    if (!type)
+      return;
+    const args = message.arguments.map(arg => executionContext.rawValueToRemoteObject(arg));
+    emitEvent(this.events.onConsoleMessage, {
+      args,
+      type,
+      executionContextId: executionContext.id(),
+      location: {
+        lineNumber: message.lineNumber - 1,
+        columnNumber: message.columnNumber - 1,
+        url: message.filename,
+      },
+    });
+  }
+
+  dispose() {
+    for (const tearDown of this._eventListeners)
+      tearDown.call(null);
+    this._eventListeners = [];
+  }
+
+  async _awaitPromise(executionContext, obj, exceptionDetails = {}) {
+    if (obj.promiseState === 'fulfilled')
+      return {success: true, obj: obj.promiseValue};
+    if (obj.promiseState === 'rejected') {
+      const debuggee = executionContext._debuggee;
+      exceptionDetails.text = debuggee.executeInGlobalWithBindings('e.message', {e: obj.promiseReason}).return;
+      exceptionDetails.stack = debuggee.executeInGlobalWithBindings('e.stack', {e: obj.promiseReason}).return;
+      return {success: false, obj: null};
+    }
+    let resolve, reject;
+    const promise = new Promise((a, b) => {
+      resolve = a;
+      reject = b;
+    });
+    this._pendingPromises.set(obj.promiseID, {resolve, reject, executionContext, exceptionDetails});
+    if (this._pendingPromises.size === 1)
+      this._debugger.onPromiseSettled = this._onPromiseSettled.bind(this);
+    return await promise;
+  }
+
+  _onPromiseSettled(obj) {
+    const pendingPromise = this._pendingPromises.get(obj.promiseID);
+    if (!pendingPromise)
+      return;
+    this._pendingPromises.delete(obj.promiseID);
+    if (!this._pendingPromises.size)
+      this._debugger.onPromiseSettled = undefined;
+
+    if (obj.promiseState === 'fulfilled') {
+      pendingPromise.resolve({success: true, obj: obj.promiseValue});
+      return;
+    };
+    const debuggee = pendingPromise.executionContext._debuggee;
+    pendingPromise.exceptionDetails.text = debuggee.executeInGlobalWithBindings('e.message', {e: obj.promiseReason}).return;
+    pendingPromise.exceptionDetails.stack = debuggee.executeInGlobalWithBindings('e.stack', {e: obj.promiseReason}).return;
+    pendingPromise.resolve({success: false, obj: null});
+  }
+
+  createExecutionContext(domWindow, contextGlobal, auxData) {
+    // Note: domWindow is null for workers.
+    const context = new ExecutionContext(this, domWindow, contextGlobal, auxData);
+    this._executionContexts.set(context._id, context);
+    if (domWindow)
+      this._windowToExecutionContext.set(domWindow, context);
+    emitEvent(this.events.onExecutionContextCreated, context);
+    return context;
+  }
+
+  findExecutionContext(executionContextId) {
+    const executionContext = this._executionContexts.get(executionContextId);
+    if (!executionContext)
+      throw new Error('Failed to find execution context with id = ' + executionContextId);
+    return executionContext;
+  }
+
+  destroyExecutionContext(destroyedContext) {
+    for (const [promiseID, {reject, executionContext}] of this._pendingPromises) {
+      if (executionContext === destroyedContext) {
+        reject(new Error('Execution context was destroyed!'));
+        this._pendingPromises.delete(promiseID);
+      }
+    }
+    if (!this._pendingPromises.size)
+      this._debugger.onPromiseSettled = undefined;
+    this._debugger.removeDebuggee(destroyedContext._contextGlobal);
+    this._executionContexts.delete(destroyedContext._id);
+    if (destroyedContext._domWindow)
+      this._windowToExecutionContext.delete(destroyedContext._domWindow);
+    emitEvent(this.events.onExecutionContextDestroyed, destroyedContext);
+  }
+}
+
+class ExecutionContext {
+  constructor(runtime, domWindow, contextGlobal, auxData) {
+    this._runtime = runtime;
+    this._domWindow = domWindow;
+    this._contextGlobal = contextGlobal;
+    this._debuggee = runtime._debugger.addDebuggee(contextGlobal);
+    this._remoteObjects = new Map();
+    this._id = generateId();
+    this._auxData = auxData;
+    this._jsonStringifyObject = this._debuggee.executeInGlobal(`((stringify, object) => {
+      const oldToJSON = Date.prototype.toJSON;
+      Date.prototype.toJSON = undefined;
+      const oldArrayToJSON = Array.prototype.toJSON;
+      const oldArrayHadToJSON = Array.prototype.hasOwnProperty('toJSON');
+      if (oldArrayHadToJSON)
+        Array.prototype.toJSON = undefined;
+
+      let hasSymbol = false;
+      const result = stringify(object, (key, value) => {
+        if (typeof value === 'symbol')
+          hasSymbol = true;
+        return value;
+      });
+
+      Date.prototype.toJSON = oldToJSON;
+      if (oldArrayHadToJSON)
+        Array.prototype.toJSON = oldArrayToJSON;
+
+      return hasSymbol ? undefined : result;
+    }).bind(null, JSON.stringify.bind(JSON))`).return;
+  }
+
+  id() {
+    return this._id;
+  }
+
+  auxData() {
+    return this._auxData;
+  }
+
+  _isIsolatedWorldContext() {
+    return !!this._auxData.name;
+  }
+
+  async evaluateScript(script, exceptionDetails = {}) {
+    const userInputHelper = this._domWindow ? this._domWindow.windowUtils.setHandlingUserInput(true) : null;
+    if (this._domWindow && this._domWindow.document)
+      this._domWindow.document.notifyUserGestureActivation();
+
+    let {success, obj} = this._getResult(this._debuggee.executeInGlobal(script), exceptionDetails);
+    userInputHelper && userInputHelper.destruct();
+    if (!success)
+      return null;
+    if (obj && obj.isPromise) {
+      const awaitResult = await this._runtime._awaitPromise(this, obj, exceptionDetails);
+      if (!awaitResult.success)
+        return null;
+      obj = awaitResult.obj;
+    }
+    return this._createRemoteObject(obj);
+  }
+
+  evaluateScriptSafely(script) {
+    try {
+      this._debuggee.executeInGlobal(script);
+    } catch (e) {
+      dump(`ERROR: ${e.message}\n${e.stack}\n`);
+    }
+  }
+
+  async evaluateFunction(functionText, args, exceptionDetails = {}) {
+    const funEvaluation = this._getResult(this._debuggee.executeInGlobal('(' + functionText + ')'), exceptionDetails);
+    if (!funEvaluation.success)
+      return null;
+    if (!funEvaluation.obj.callable)
+      throw new Error('functionText does not evaluate to a function!');
+    args = args.map(arg => {
+      if (arg.objectId) {
+        if (!this._remoteObjects.has(arg.objectId))
+          throw new Error('Cannot find object with id = ' + arg.objectId);
+        return this._remoteObjects.get(arg.objectId);
+      }
+      switch (arg.unserializableValue) {
+        case 'Infinity': return Infinity;
+        case '-Infinity': return -Infinity;
+        case '-0': return -0;
+        case 'NaN': return NaN;
+        default: return this._toDebugger(arg.value);
+      }
+    });
+    const userInputHelper = this._domWindow ? this._domWindow.windowUtils.setHandlingUserInput(true) : null;
+    if (this._domWindow && this._domWindow.document)
+      this._domWindow.document.notifyUserGestureActivation();
+    let {success, obj} = this._getResult(funEvaluation.obj.apply(null, args), exceptionDetails);
+    userInputHelper && userInputHelper.destruct();
+    if (!success)
+      return null;
+    if (obj && obj.isPromise) {
+      const awaitResult = await this._runtime._awaitPromise(this, obj, exceptionDetails);
+      if (!awaitResult.success)
+        return null;
+      obj = awaitResult.obj;
+    }
+    return this._createRemoteObject(obj);
+  }
+
+  addBinding(name, script) {
+    Cu.exportFunction((...args) => {
+      emitEvent(this._runtime.events.onBindingCalled, {
+        executionContextId: this._id,
+        name,
+        payload: args[0],
+      });
+    }, this._contextGlobal, {
+      defineAs: name,
+    });
+    this.evaluateScriptSafely(script);
+  }
+
+  unsafeObject(objectId) {
+    if (!this._remoteObjects.has(objectId))
+      return;
+    return { object: this._remoteObjects.get(objectId).unsafeDereference() };
+  }
+
+  rawValueToRemoteObject(rawValue) {
+    const debuggerObj = this._debuggee.makeDebuggeeValue(rawValue);
+    return this._createRemoteObject(debuggerObj);
+  }
+
+  _instanceOf(debuggerObj, rawObj, className) {
+    if (this._domWindow)
+      return rawObj instanceof this._domWindow[className];
+    return this._debuggee.executeInGlobalWithBindings('o instanceof this[className]', {o: debuggerObj, className: this._debuggee.makeDebuggeeValue(className)}).return;
+  }
+
+  _createRemoteObject(debuggerObj) {
+    if (debuggerObj instanceof Debugger.Object) {
+      const objectId = generateId();
+      this._remoteObjects.set(objectId, debuggerObj);
+      const rawObj = debuggerObj.unsafeDereference();
+      const type = typeof rawObj;
+      let subtype = undefined;
+      if (debuggerObj.isProxy)
+        subtype = 'proxy';
+      else if (Array.isArray(rawObj))
+        subtype = 'array';
+      else if (Object.is(rawObj, null))
+        subtype = 'null';
+      else if (this._instanceOf(debuggerObj, rawObj, 'Node'))
+        subtype = 'node';
+      else if (this._instanceOf(debuggerObj, rawObj, 'RegExp'))
+        subtype = 'regexp';
+      else if (this._instanceOf(debuggerObj, rawObj, 'Date'))
+        subtype = 'date';
+      else if (this._instanceOf(debuggerObj, rawObj, 'Map'))
+        subtype = 'map';
+      else if (this._instanceOf(debuggerObj, rawObj, 'Set'))
+        subtype = 'set';
+      else if (this._instanceOf(debuggerObj, rawObj, 'WeakMap'))
+        subtype = 'weakmap';
+      else if (this._instanceOf(debuggerObj, rawObj, 'WeakSet'))
+        subtype = 'weakset';
+      else if (this._instanceOf(debuggerObj, rawObj, 'Error'))
+        subtype = 'error';
+      else if (this._instanceOf(debuggerObj, rawObj, 'Promise'))
+        subtype = 'promise';
+      else if ((this._instanceOf(debuggerObj, rawObj, 'Int8Array')) || (this._instanceOf(debuggerObj, rawObj, 'Uint8Array')) ||
+               (this._instanceOf(debuggerObj, rawObj, 'Uint8ClampedArray')) || (this._instanceOf(debuggerObj, rawObj, 'Int16Array')) ||
+               (this._instanceOf(debuggerObj, rawObj, 'Uint16Array')) || (this._instanceOf(debuggerObj, rawObj, 'Int32Array')) ||
+               (this._instanceOf(debuggerObj, rawObj, 'Uint32Array')) || (this._instanceOf(debuggerObj, rawObj, 'Float32Array')) ||
+               (this._instanceOf(debuggerObj, rawObj, 'Float64Array'))) {
+        subtype = 'typedarray';
+      }
+      return {objectId, type, subtype};
+    }
+    if (typeof debuggerObj === 'symbol') {
+      const objectId = generateId();
+      this._remoteObjects.set(objectId, debuggerObj);
+      return {objectId, type: 'symbol'};
+    }
+
+    let unserializableValue = undefined;
+    if (Object.is(debuggerObj, NaN))
+      unserializableValue = 'NaN';
+    else if (Object.is(debuggerObj, -0))
+      unserializableValue = '-0';
+    else if (Object.is(debuggerObj, Infinity))
+      unserializableValue = 'Infinity';
+    else if (Object.is(debuggerObj, -Infinity))
+      unserializableValue = '-Infinity';
+    return unserializableValue ? {unserializableValue} : {value: debuggerObj};
+  }
+
+  ensureSerializedToValue(protocolObject) {
+    if (!protocolObject.objectId)
+      return protocolObject;
+    const obj = this._remoteObjects.get(protocolObject.objectId);
+    this._remoteObjects.delete(protocolObject.objectId);
+    return {value: this._serialize(obj)};
+  }
+
+  _toDebugger(obj) {
+    if (typeof obj !== 'object')
+      return obj;
+    if (obj === null)
+      return obj;
+    const properties = {};
+    for (let [key, value] of Object.entries(obj)) {
+      properties[key] = {
+        configurable: true,
+        writable: true,
+        enumerable: true,
+        value: this._toDebugger(value),
+      };
+    }
+    const baseObject = Array.isArray(obj) ? '([])' : '({})';
+    const debuggerObj = this._debuggee.executeInGlobal(baseObject).return;
+    debuggerObj.defineProperties(properties);
+    return debuggerObj;
+  }
+
+  _serialize(obj) {
+    const result = this._debuggee.executeInGlobalWithBindings('stringify(e)', {e: obj, stringify: this._jsonStringifyObject});
+    if (result.throw)
+      throw new Error('Object is not serializable');
+    return result.return === undefined ? undefined : JSON.parse(result.return);
+  }
+
+  disposeObject(objectId) {
+    this._remoteObjects.delete(objectId);
+  }
+
+  getObjectProperties(objectId) {
+    if (!this._remoteObjects.has(objectId))
+      throw new Error('Cannot find object with id = ' + arg.objectId);
+    const result = [];
+    for (let obj = this._remoteObjects.get(objectId); obj; obj = obj.proto) {
+      for (const propertyName of obj.getOwnPropertyNames()) {
+        const descriptor = obj.getOwnPropertyDescriptor(propertyName);
+        if (!descriptor.enumerable)
+          continue;
+        result.push({
+          name: propertyName,
+          value: this._createRemoteObject(descriptor.value),
+        });
+      }
+    }
+    return result;
+  }
+
+  _getResult(completionValue, exceptionDetails = {}) {
+    if (!completionValue) {
+      exceptionDetails.text = 'Evaluation terminated!';
+      exceptionDetails.stack = '';
+      return {success: false, obj: null};
+    }
+    if (completionValue.throw) {
+      if (this._debuggee.executeInGlobalWithBindings('e instanceof Error', {e: completionValue.throw}).return) {
+        exceptionDetails.text = this._debuggee.executeInGlobalWithBindings('e.message', {e: completionValue.throw}).return;
+        exceptionDetails.stack = this._debuggee.executeInGlobalWithBindings('e.stack', {e: completionValue.throw}).return;
+      } else {
+        exceptionDetails.value = this._serialize(completionValue.throw);
+      }
+      return {success: false, obj: null};
+    }
+    return {success: true, obj: completionValue.return};
+  }
+}
+
+const listenersSymbol = Symbol('listeners');
+
+function createEvent() {
+  const listeners = new Set();
+  const subscribeFunction = listener => {
+    listeners.add(listener);
+    return () => listeners.delete(listener);
+  }
+  subscribeFunction[listenersSymbol] = listeners;
+  return subscribeFunction;
+}
+
+function emitEvent(event, ...args) {
+  let listeners = event[listenersSymbol];
+  if (!listeners || !listeners.size)
+    return;
+  listeners = new Set(listeners);
+  for (const listener of listeners)
+    listener.call(null, ...args);
+}
+
+var EXPORTED_SYMBOLS = ['Runtime'];
+this.Runtime = Runtime;
diff --git a/browser_patches/firefox-beta/juggler/content/WorkerMain.js b/browser_patches/firefox-beta/juggler/content/WorkerMain.js
new file mode 100644
index 0000000000000000000000000000000000000000..3d0c1168cb8915855805fc8338829b1d65f33b02
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/content/WorkerMain.js
@@ -0,0 +1,76 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+loadSubScript('chrome://juggler/content/content/Runtime.js');
+loadSubScript('chrome://juggler/content/SimpleChannel.js');
+
+const channel = new SimpleChannel('worker::worker');
+const eventListener = event => channel._onMessage(JSON.parse(event.data));
+this.addEventListener('message', eventListener);
+channel.setTransport({
+  sendMessage: msg => postMessage(JSON.stringify(msg)),
+  dispose: () => this.removeEventListener('message', eventListener),
+});
+
+const runtime = new Runtime(true /* isWorker */);
+
+(() => {
+  // Create execution context in the runtime only when the script
+  // source was actually evaluated in it.
+  const dbg = new Debugger(global);
+  if (dbg.findScripts({global}).length) {
+    runtime.createExecutionContext(null /* domWindow */, global, {});
+  } else {
+    dbg.onNewScript = function(s) {
+      dbg.onNewScript = undefined;
+      dbg.removeAllDebuggees();
+      runtime.createExecutionContext(null /* domWindow */, global, {});
+    };
+  }
+})();
+
+class RuntimeAgent {
+  constructor(runtime, channel) {
+    this._runtime = runtime;
+    this._browserRuntime = channel.connect('runtime');
+
+    for (const context of this._runtime.executionContexts())
+      this._onExecutionContextCreated(context);
+
+    this._eventListeners = [
+      this._runtime.events.onConsoleMessage(msg => this._browserRuntime.emit('runtimeConsole', msg)),
+      this._runtime.events.onExecutionContextCreated(this._onExecutionContextCreated.bind(this)),
+      this._runtime.events.onExecutionContextDestroyed(this._onExecutionContextDestroyed.bind(this)),
+      channel.register('runtime', {
+        evaluate: this._runtime.evaluate.bind(this._runtime),
+        callFunction: this._runtime.callFunction.bind(this._runtime),
+        getObjectProperties: this._runtime.getObjectProperties.bind(this._runtime),
+        disposeObject: this._runtime.disposeObject.bind(this._runtime),
+      }),
+    ];
+  }
+
+  _onExecutionContextCreated(executionContext) {
+    this._browserRuntime.emit('runtimeExecutionContextCreated', {
+      executionContextId: executionContext.id(),
+      auxData: executionContext.auxData(),
+    });
+  }
+
+  _onExecutionContextDestroyed(executionContext) {
+    this._browserRuntime.emit('runtimeExecutionContextDestroyed', {
+      executionContextId: executionContext.id(),
+    });
+  }
+
+  dispose() {
+    for (const disposer of this._eventListeners)
+      disposer();
+    this._eventListeners = [];
+  }
+}
+
+new RuntimeAgent(runtime, channel);
+
diff --git a/browser_patches/firefox-beta/juggler/content/hidden-scrollbars.css b/browser_patches/firefox-beta/juggler/content/hidden-scrollbars.css
new file mode 100644
index 0000000000000000000000000000000000000000..26fc0db7680db49e18267f268e122a148df118e1
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/content/hidden-scrollbars.css
@@ -0,0 +1,7 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+* {
+  scrollbar-width: none !important;
+}
diff --git a/browser_patches/firefox-beta/juggler/content/main.js b/browser_patches/firefox-beta/juggler/content/main.js
new file mode 100644
index 0000000000000000000000000000000000000000..d471ab955327d3cd839475a150006c924220ebd4
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/content/main.js
@@ -0,0 +1,155 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const {Services} = ChromeUtils.import("resource://gre/modules/Services.jsm");
+const {Helper} = ChromeUtils.import('chrome://juggler/content/Helper.js');
+const {FrameTree} = ChromeUtils.import('chrome://juggler/content/content/FrameTree.js');
+const {SimpleChannel} = ChromeUtils.import('chrome://juggler/content/SimpleChannel.js');
+const {PageAgent} = ChromeUtils.import('chrome://juggler/content/content/PageAgent.js');
+
+let frameTree;
+const helper = new Helper();
+const messageManager = this;
+
+let pageAgent;
+
+let failedToOverrideTimezone = false;
+
+const applySetting = {
+  geolocation: (geolocation) => {
+    if (geolocation) {
+      docShell.setGeolocationOverride({
+        coords: {
+          latitude: geolocation.latitude,
+          longitude: geolocation.longitude,
+          accuracy: geolocation.accuracy,
+          altitude: NaN,
+          altitudeAccuracy: NaN,
+          heading: NaN,
+          speed: NaN,
+        },
+        address: null,
+        timestamp: Date.now()
+      });
+    } else {
+      docShell.setGeolocationOverride(null);
+    }
+  },
+
+  onlineOverride: (onlineOverride) => {
+    if (!onlineOverride) {
+      docShell.onlineOverride = Ci.nsIDocShell.ONLINE_OVERRIDE_NONE;
+      return;
+    }
+    docShell.onlineOverride = onlineOverride === 'online' ?
+        Ci.nsIDocShell.ONLINE_OVERRIDE_ONLINE : Ci.nsIDocShell.ONLINE_OVERRIDE_OFFLINE;
+  },
+
+  bypassCSP: (bypassCSP) => {
+    docShell.bypassCSPEnabled = bypassCSP;
+  },
+
+  timezoneId: (timezoneId) => {
+    failedToOverrideTimezone = !docShell.overrideTimezone(timezoneId);
+  },
+
+  locale: (locale) => {
+    docShell.languageOverride = locale;
+  },
+
+  scrollbarsHidden: (hidden) => {
+    frameTree.setScrollbarsHidden(hidden);
+  },
+
+  colorScheme: (colorScheme) => {
+    frameTree.setColorScheme(colorScheme);
+  },
+
+  reducedMotion: (reducedMotion) => {
+    frameTree.setReducedMotion(reducedMotion);
+  },
+
+  forcedColors: (forcedColors) => {
+    frameTree.setForcedColors(forcedColors);
+  },
+};
+
+const channel = SimpleChannel.createForMessageManager('content::page', messageManager);
+
+function initialize() {
+  const response = sendSyncMessage('juggler:content-ready')[0];
+  // If we didn't get a response, then we don't want to do anything
+  // as a part of this frame script.
+  if (!response)
+    return;
+  const {
+    initScripts = [],
+    bindings = [],
+    settings = {}
+  } = response || {};
+  // Enforce focused state for all top level documents.
+  docShell.overrideHasFocus = true;
+  docShell.forceActiveState = true;
+  frameTree = new FrameTree(docShell);
+  for (const [name, value] of Object.entries(settings)) {
+    if (value !== undefined)
+      applySetting[name](value);
+  }
+  for (const { worldName, name, script } of bindings)
+    frameTree.addBinding(worldName, name, script);
+  frameTree.setInitScripts(initScripts);
+
+  pageAgent = new PageAgent(messageManager, channel, frameTree);
+
+  channel.register('', {
+    setInitScripts(scripts) {
+      frameTree.setInitScripts(scripts);
+    },
+
+    addBinding({worldName, name, script}) {
+      frameTree.addBinding(worldName, name, script);
+    },
+
+    applyContextSetting({name, value}) {
+      applySetting[name](value);
+    },
+
+    ensurePermissions() {
+      // noop, just a rountrip.
+    },
+
+    hasFailedToOverrideTimezone() {
+      return failedToOverrideTimezone;
+    },
+
+    async awaitViewportDimensions({width, height, deviceSizeIsPageSize}) {
+      docShell.deviceSizeIsPageSize = deviceSizeIsPageSize;
+      const win = docShell.domWindow;
+      if (win.innerWidth === width && win.innerHeight === height)
+        return;
+      await new Promise(resolve => {
+        const listener = helper.addEventListener(win, 'resize', () => {
+          if (win.innerWidth === width && win.innerHeight === height) {
+            helper.removeListeners([listener]);
+            resolve();
+          }
+        });
+      });
+    },
+
+    dispose() {
+    },
+  });
+
+  const gListeners = [
+    helper.addEventListener(messageManager, 'unload', msg => {
+      helper.removeListeners(gListeners);
+      pageAgent.dispose();
+      frameTree.dispose();
+      channel.dispose();
+    }),
+  ];
+}
+
+initialize();
diff --git a/browser_patches/firefox-beta/juggler/jar.mn b/browser_patches/firefox-beta/juggler/jar.mn
new file mode 100644
index 0000000000000000000000000000000000000000..adc90edd79e69e4933fb9c2055d1f2e0ab4c4c3d
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/jar.mn
@@ -0,0 +1,22 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+juggler.jar:
+% content juggler %content/
+  content/Helper.js (Helper.js)
+  content/NetworkObserver.js (NetworkObserver.js)
+  content/TargetRegistry.js (TargetRegistry.js)
+  content/SimpleChannel.js (SimpleChannel.js)
+  content/protocol/PrimitiveTypes.js (protocol/PrimitiveTypes.js)
+  content/protocol/Protocol.js (protocol/Protocol.js)
+  content/protocol/Dispatcher.js (protocol/Dispatcher.js)
+  content/protocol/PageHandler.js (protocol/PageHandler.js)
+  content/protocol/BrowserHandler.js (protocol/BrowserHandler.js)
+  content/content/main.js (content/main.js)
+  content/content/FrameTree.js (content/FrameTree.js)
+  content/content/PageAgent.js (content/PageAgent.js)
+  content/content/Runtime.js (content/Runtime.js)
+  content/content/WorkerMain.js (content/WorkerMain.js)
+  content/content/hidden-scrollbars.css (content/hidden-scrollbars.css)
+
diff --git a/browser_patches/firefox-beta/juggler/moz.build b/browser_patches/firefox-beta/juggler/moz.build
new file mode 100644
index 0000000000000000000000000000000000000000..905c20cc3139ef616a9c4ab6143e01971597269a
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/moz.build
@@ -0,0 +1,10 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DIRS += ["components", "screencast", "pipe"]
+
+JAR_MANIFESTS += ["jar.mn"]
+with Files("**"):
+    BUG_COMPONENT = ("Testing", "Juggler")
+
diff --git a/browser_patches/firefox-beta/juggler/pipe/components.conf b/browser_patches/firefox-beta/juggler/pipe/components.conf
new file mode 100644
index 0000000000000000000000000000000000000000..db13a00ba7c9793a75669476288721be5f55d7be
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/pipe/components.conf
@@ -0,0 +1,15 @@
+# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+Classes = [
+    {
+        'cid': '{d69ecefe-3df7-4d11-9dc7-f604edb96da2}',
+        'contract_ids': ['@mozilla.org/juggler/remotedebuggingpipe;1'],
+        'type': 'nsIRemoteDebuggingPipe',
+        'constructor': 'mozilla::nsRemoteDebuggingPipe::GetSingleton',
+        'headers': ['/juggler/pipe/nsRemoteDebuggingPipe.h'],
+    },
+]
diff --git a/browser_patches/firefox-beta/juggler/pipe/moz.build b/browser_patches/firefox-beta/juggler/pipe/moz.build
new file mode 100644
index 0000000000000000000000000000000000000000..b56c697881173f2a196da41d55e8d773fc40f05b
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/pipe/moz.build
@@ -0,0 +1,24 @@
+# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+XPIDL_SOURCES += [
+    'nsIRemoteDebuggingPipe.idl',
+]
+
+XPIDL_MODULE = 'jugglerpipe'
+
+SOURCES += [
+    'nsRemoteDebuggingPipe.cpp',
+]
+
+XPCOM_MANIFESTS += [
+    'components.conf',
+]
+
+LOCAL_INCLUDES += [
+]
+
+FINAL_LIBRARY = 'xul'
diff --git a/browser_patches/firefox-beta/juggler/pipe/nsIRemoteDebuggingPipe.idl b/browser_patches/firefox-beta/juggler/pipe/nsIRemoteDebuggingPipe.idl
new file mode 100644
index 0000000000000000000000000000000000000000..ac91b636155a3e0090fa09319412af30f01175ef
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/pipe/nsIRemoteDebuggingPipe.idl
@@ -0,0 +1,20 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "nsISupports.idl"
+
+[scriptable, uuid(7910c231-971a-4653-abdc-a8599a986c4c)]
+interface nsIRemoteDebuggingPipeClient : nsISupports
+{
+  void receiveMessage(in AString message);
+  void disconnected();
+};
+
+[scriptable, uuid(b7bfb66b-fd46-4aa2-b4ad-396177186d94)]
+interface nsIRemoteDebuggingPipe : nsISupports
+{
+  void init(in nsIRemoteDebuggingPipeClient client);
+  void sendMessage(in AString message);
+  void stop();
+};
diff --git a/browser_patches/firefox-beta/juggler/pipe/nsRemoteDebuggingPipe.cpp b/browser_patches/firefox-beta/juggler/pipe/nsRemoteDebuggingPipe.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..abcb0a758fac13bde592970bedea338fbc94ec3b
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/pipe/nsRemoteDebuggingPipe.cpp
@@ -0,0 +1,223 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "nsRemoteDebuggingPipe.h"
+
+#include <cstring>
+#if defined(_WIN32)
+#include <io.h>
+#include <windows.h>
+#else
+#include <stdio.h>
+#include <unistd.h>
+#include <sys/socket.h>
+#endif
+
+#include "mozilla/StaticPtr.h"
+#include "nsISupportsPrimitives.h"
+#include "nsThreadUtils.h"
+
+namespace mozilla {
+
+NS_IMPL_ISUPPORTS(nsRemoteDebuggingPipe, nsIRemoteDebuggingPipe)
+
+namespace {
+
+StaticRefPtr<nsRemoteDebuggingPipe> gPipe;
+
+const size_t kWritePacketSize = 1 << 16;
+
+#if defined(_WIN32)
+HANDLE readHandle;
+HANDLE writeHandle;
+#else
+const int readFD = 3;
+const int writeFD = 4;
+#endif
+
+size_t ReadBytes(void* buffer, size_t size, bool exact_size)
+{
+    size_t bytesRead = 0;
+    while (bytesRead < size) {
+#if defined(_WIN32)
+        DWORD sizeRead = 0;
+        bool hadError = !ReadFile(readHandle, static_cast<char*>(buffer) + bytesRead,
+            size - bytesRead, &sizeRead, nullptr);
+#else
+        int sizeRead = read(readFD, static_cast<char*>(buffer) + bytesRead,
+            size - bytesRead);
+        if (sizeRead < 0 && errno == EINTR)
+            continue;
+        bool hadError = sizeRead <= 0;
+#endif
+        if (hadError) {
+            return 0;
+        }
+        bytesRead += sizeRead;
+        if (!exact_size)
+            break;
+    }
+    return bytesRead;
+}
+
+void WriteBytes(const char* bytes, size_t size)
+{
+    size_t totalWritten = 0;
+    while (totalWritten < size) {
+        size_t length = size - totalWritten;
+        if (length > kWritePacketSize)
+            length = kWritePacketSize;
+#if defined(_WIN32)
+        DWORD bytesWritten = 0;
+        bool hadError = !WriteFile(writeHandle, bytes + totalWritten, static_cast<DWORD>(length), &bytesWritten, nullptr);
+#else
+        int bytesWritten = write(writeFD, bytes + totalWritten, length);
+        if (bytesWritten < 0 && errno == EINTR)
+            continue;
+        bool hadError = bytesWritten <= 0;
+#endif
+        if (hadError)
+            return;
+        totalWritten += bytesWritten;
+    }
+}
+
+}  // namespace
+
+// static
+already_AddRefed<nsIRemoteDebuggingPipe> nsRemoteDebuggingPipe::GetSingleton() {
+  if (!gPipe) {
+    gPipe = new nsRemoteDebuggingPipe();
+  }
+  return do_AddRef(gPipe);
+}
+
+nsRemoteDebuggingPipe::nsRemoteDebuggingPipe() = default;
+
+nsRemoteDebuggingPipe::~nsRemoteDebuggingPipe() = default;
+
+nsresult nsRemoteDebuggingPipe::Init(nsIRemoteDebuggingPipeClient* aClient) {
+  MOZ_RELEASE_ASSERT(NS_IsMainThread(), "Remote debugging pipe must be used on the Main thread.");
+  if (mClient) {
+    return NS_ERROR_FAILURE;
+  }
+  mClient = aClient;
+
+  MOZ_ALWAYS_SUCCEEDS(NS_NewNamedThread("Pipe Reader", getter_AddRefs(mReaderThread)));
+  MOZ_ALWAYS_SUCCEEDS(NS_NewNamedThread("Pipe Writer", getter_AddRefs(mWriterThread)));
+
+#if defined(_WIN32)
+  CHAR pipeReadStr[20];
+  CHAR pipeWriteStr[20];
+  GetEnvironmentVariableA("PW_PIPE_READ", pipeReadStr, 20);
+  GetEnvironmentVariableA("PW_PIPE_WRITE", pipeWriteStr, 20);
+  readHandle = reinterpret_cast<HANDLE>(atoi(pipeReadStr));
+  writeHandle = reinterpret_cast<HANDLE>(atoi(pipeWriteStr));
+#endif
+
+  MOZ_ALWAYS_SUCCEEDS(mReaderThread->Dispatch(NewRunnableMethod(
+      "nsRemoteDebuggingPipe::ReaderLoop",
+      this, &nsRemoteDebuggingPipe::ReaderLoop), nsIThread::DISPATCH_NORMAL));
+  return NS_OK;
+}
+
+nsresult nsRemoteDebuggingPipe::Stop() {
+  MOZ_RELEASE_ASSERT(NS_IsMainThread(), "Remote debugging pipe must be used on the Main thread.");
+  if (!mClient) {
+    return NS_ERROR_FAILURE;
+  }
+  m_terminated = true;
+  mClient = nullptr;
+  // Cancel pending synchronous read.
+#if defined(_WIN32)
+  CancelIoEx(readHandle, nullptr);
+  CloseHandle(readHandle);
+  CloseHandle(writeHandle);
+#else
+  shutdown(readFD, SHUT_RDWR);
+  shutdown(writeFD, SHUT_RDWR);
+#endif
+  mReaderThread->Shutdown();
+  mReaderThread = nullptr;
+  mWriterThread->Shutdown();
+  mWriterThread = nullptr;
+  return NS_OK;
+}
+
+void nsRemoteDebuggingPipe::ReaderLoop() {
+  const size_t bufSize = 256 * 1024;
+  std::vector<char> buffer;
+  buffer.resize(bufSize);
+  std::vector<char> line;
+  while (!m_terminated) {
+    size_t size = ReadBytes(buffer.data(), bufSize, false);
+    if (!size) {
+      nsCOMPtr<nsIRunnable> runnable = NewRunnableMethod<>(
+          "nsRemoteDebuggingPipe::Disconnected",
+          this, &nsRemoteDebuggingPipe::Disconnected);
+      NS_DispatchToMainThread(runnable.forget());
+      break;
+    }
+    size_t start = 0;
+    size_t end = line.size();
+    line.insert(line.end(), buffer.begin(), buffer.begin() + size);
+    while (true) {
+      for (; end < line.size(); ++end) {
+        if (line[end] == '\0') {
+          break;
+        }
+      }
+      if (end == line.size()) {
+        break;
+      }
+      if (end > start) {
+        nsCString message;
+        message.Append(line.data() + start, end - start);
+        nsCOMPtr<nsIRunnable> runnable = NewRunnableMethod<nsCString>(
+            "nsRemoteDebuggingPipe::ReceiveMessage",
+            this, &nsRemoteDebuggingPipe::ReceiveMessage, std::move(message));
+        NS_DispatchToMainThread(runnable.forget());
+      }
+      ++end;
+      start = end;
+    }
+    if (start != 0 && start < line.size()) {
+      memmove(line.data(), line.data() + start, line.size() - start);
+    }
+    line.resize(line.size() - start);
+  }
+}
+
+void nsRemoteDebuggingPipe::ReceiveMessage(const nsCString& aMessage) {
+  MOZ_RELEASE_ASSERT(NS_IsMainThread(), "Remote debugging pipe must be used on the Main thread.");
+  if (mClient) {
+    NS_ConvertUTF8toUTF16 utf16(aMessage);
+    mClient->ReceiveMessage(utf16);
+  }
+}
+
+void nsRemoteDebuggingPipe::Disconnected() {
+  MOZ_RELEASE_ASSERT(NS_IsMainThread(), "Remote debugging pipe must be used on the Main thread.");
+  if (mClient)
+    mClient->Disconnected();
+}
+
+nsresult nsRemoteDebuggingPipe::SendMessage(const nsAString& aMessage) {
+  MOZ_RELEASE_ASSERT(NS_IsMainThread(), "Remote debugging pipe must be used on the Main thread.");
+  if (!mClient) {
+    return NS_ERROR_FAILURE;
+  }
+  NS_ConvertUTF16toUTF8 utf8(aMessage);
+  nsCOMPtr<nsIRunnable> runnable = NS_NewRunnableFunction(
+      "nsRemoteDebuggingPipe::SendMessage",
+      [message = std::move(utf8)] {
+        const nsCString& flat = PromiseFlatCString(message);
+        WriteBytes(flat.Data(), flat.Length());
+        WriteBytes("\0", 1);
+      });
+  MOZ_ALWAYS_SUCCEEDS(mWriterThread->Dispatch(runnable.forget(), nsIThread::DISPATCH_NORMAL));
+  return NS_OK;
+}
+
+}  // namespace mozilla
diff --git a/browser_patches/firefox-beta/juggler/pipe/nsRemoteDebuggingPipe.h b/browser_patches/firefox-beta/juggler/pipe/nsRemoteDebuggingPipe.h
new file mode 100644
index 0000000000000000000000000000000000000000..be4cb2675e78106df8ace11162f9089b6fe146e9
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/pipe/nsRemoteDebuggingPipe.h
@@ -0,0 +1,34 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#pragma once
+
+#include <memory>
+#include "nsCOMPtr.h"
+#include "nsIRemoteDebuggingPipe.h"
+#include "nsThread.h"
+
+namespace mozilla {
+
+class nsRemoteDebuggingPipe final : public nsIRemoteDebuggingPipe {
+ public:
+  NS_DECL_THREADSAFE_ISUPPORTS
+  NS_DECL_NSIREMOTEDEBUGGINGPIPE
+
+  static already_AddRefed<nsIRemoteDebuggingPipe> GetSingleton();
+  nsRemoteDebuggingPipe();
+
+ private:
+  void ReaderLoop();
+  void ReceiveMessage(const nsCString& aMessage);
+  void Disconnected();
+  ~nsRemoteDebuggingPipe();
+
+  RefPtr<nsIRemoteDebuggingPipeClient> mClient;
+  nsCOMPtr<nsIThread> mReaderThread;
+  nsCOMPtr<nsIThread> mWriterThread;
+  std::atomic<bool> m_terminated { false };
+};
+
+}  // namespace mozilla
diff --git a/browser_patches/firefox-beta/juggler/protocol/BrowserHandler.js b/browser_patches/firefox-beta/juggler/protocol/BrowserHandler.js
new file mode 100644
index 0000000000000000000000000000000000000000..04a139343eb8d4d4491d3d00d8353a9b3f3d695c
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/protocol/BrowserHandler.js
@@ -0,0 +1,294 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const {AddonManager} = ChromeUtils.import("resource://gre/modules/AddonManager.jsm");
+const {Services} = ChromeUtils.import("resource://gre/modules/Services.jsm");
+const {TargetRegistry} = ChromeUtils.import("chrome://juggler/content/TargetRegistry.js");
+const {Helper} = ChromeUtils.import('chrome://juggler/content/Helper.js');
+const {PageHandler} = ChromeUtils.import("chrome://juggler/content/protocol/PageHandler.js");
+const {AppConstants} = ChromeUtils.import("resource://gre/modules/AppConstants.jsm");
+
+const helper = new Helper();
+
+class BrowserHandler {
+  constructor(session, dispatcher, targetRegistry, onclose) {
+    this._session = session;
+    this._dispatcher = dispatcher;
+    this._targetRegistry = targetRegistry;
+    this._enabled = false;
+    this._attachToDefaultContext = false;
+    this._eventListeners = [];
+    this._createdBrowserContextIds = new Set();
+    this._attachedSessions = new Map();
+    this._onclose = onclose;
+  }
+
+  async ['Browser.enable']({attachToDefaultContext}) {
+    if (this._enabled)
+      return;
+    this._enabled = true;
+    this._attachToDefaultContext = attachToDefaultContext;
+
+    this._eventListeners = [
+      helper.on(this._targetRegistry, TargetRegistry.Events.TargetCreated, this._onTargetCreated.bind(this)),
+      helper.on(this._targetRegistry, TargetRegistry.Events.TargetDestroyed, this._onTargetDestroyed.bind(this)),
+      helper.on(this._targetRegistry, TargetRegistry.Events.DownloadCreated, this._onDownloadCreated.bind(this)),
+      helper.on(this._targetRegistry, TargetRegistry.Events.DownloadFinished, this._onDownloadFinished.bind(this)),
+      helper.on(this._targetRegistry, TargetRegistry.Events.ScreencastStopped, sessionId => {
+        this._session.emitEvent('Browser.videoRecordingFinished', {screencastId: '' + sessionId});
+      })
+    ];
+
+    for (const target of this._targetRegistry.targets())
+      this._onTargetCreated(target);
+  }
+
+  async ['Browser.createBrowserContext']({removeOnDetach}) {
+    if (!this._enabled)
+      throw new Error('Browser domain is not enabled');
+    const browserContext = this._targetRegistry.createBrowserContext(removeOnDetach);
+    this._createdBrowserContextIds.add(browserContext.browserContextId);
+    return {browserContextId: browserContext.browserContextId};
+  }
+
+  async ['Browser.removeBrowserContext']({browserContextId}) {
+    if (!this._enabled)
+      throw new Error('Browser domain is not enabled');
+    await this._targetRegistry.browserContextForId(browserContextId).destroy();
+    this._createdBrowserContextIds.delete(browserContextId);
+  }
+
+  dispose() {
+    helper.removeListeners(this._eventListeners);
+    for (const [target, session] of this._attachedSessions)
+      this._dispatcher.destroySession(session);
+    this._attachedSessions.clear();
+    for (const browserContextId of this._createdBrowserContextIds) {
+      const browserContext = this._targetRegistry.browserContextForId(browserContextId);
+      if (browserContext.removeOnDetach)
+        browserContext.destroy();
+    }
+    this._createdBrowserContextIds.clear();
+  }
+
+  _shouldAttachToTarget(target) {
+    if (this._createdBrowserContextIds.has(target._browserContext.browserContextId))
+      return true;
+    return this._attachToDefaultContext && target._browserContext === this._targetRegistry.defaultContext();
+  }
+
+  _onTargetCreated(target) {
+    if (!this._shouldAttachToTarget(target))
+      return;
+    const channel = target.channel();
+    const session = this._dispatcher.createSession();
+    this._attachedSessions.set(target, session);
+    this._session.emitEvent('Browser.attachedToTarget', {
+      sessionId: session.sessionId(),
+      targetInfo: target.info()
+    });
+    session.setHandler(new PageHandler(target, session, channel));
+  }
+
+  _onTargetDestroyed(target) {
+    const session = this._attachedSessions.get(target);
+    if (!session)
+      return;
+    this._attachedSessions.delete(target);
+    this._dispatcher.destroySession(session);
+    this._session.emitEvent('Browser.detachedFromTarget', {
+      sessionId: session.sessionId(),
+      targetId: target.id(),
+    });
+  }
+
+  _onDownloadCreated(downloadInfo) {
+    this._session.emitEvent('Browser.downloadCreated', downloadInfo);
+  }
+
+  _onDownloadFinished(downloadInfo) {
+    this._session.emitEvent('Browser.downloadFinished', downloadInfo);
+  }
+
+  async ['Browser.cancelDownload']({uuid}) {
+    await this._targetRegistry.cancelDownload({uuid});
+  }
+
+  async ['Browser.newPage']({browserContextId}) {
+    const targetId = await this._targetRegistry.newPage({browserContextId});
+    return {targetId};
+  }
+
+  async ['Browser.close']() {
+    let browserWindow = Services.wm.getMostRecentWindow(
+      "navigator:browser"
+    );
+    if (browserWindow && browserWindow.gBrowserInit) {
+      // idleTasksFinishedPromise does not resolve when the window
+      // is closed early enough, so we race against window closure.
+      await Promise.race([
+        browserWindow.gBrowserInit.idleTasksFinishedPromise,
+        waitForWindowClosed(browserWindow),
+      ]);
+    }
+    this._onclose();
+    Services.startup.quit(Ci.nsIAppStartup.eForceQuit);
+  }
+
+  async ['Browser.grantPermissions']({browserContextId, origin, permissions}) {
+    await this._targetRegistry.browserContextForId(browserContextId).grantPermissions(origin, permissions);
+  }
+
+  async ['Browser.resetPermissions']({browserContextId}) {
+    this._targetRegistry.browserContextForId(browserContextId).resetPermissions();
+  }
+
+  ['Browser.setExtraHTTPHeaders']({browserContextId, headers}) {
+    this._targetRegistry.browserContextForId(browserContextId).extraHTTPHeaders = headers;
+  }
+
+  ['Browser.setHTTPCredentials']({browserContextId, credentials}) {
+    this._targetRegistry.browserContextForId(browserContextId).httpCredentials = nullToUndefined(credentials);
+  }
+
+  async ['Browser.setBrowserProxy']({type, host, port, bypass, username, password}) {
+    this._targetRegistry.setBrowserProxy({ type, host, port, bypass, username, password});
+  }
+
+  async ['Browser.setContextProxy']({browserContextId, type, host, port, bypass, username, password}) {
+    const browserContext = this._targetRegistry.browserContextForId(browserContextId);
+    browserContext.setProxy({ type, host, port, bypass, username, password });
+  }
+
+  ['Browser.setRequestInterception']({browserContextId, enabled}) {
+    this._targetRegistry.browserContextForId(browserContextId).requestInterceptionEnabled = enabled;
+  }
+
+  ['Browser.setIgnoreHTTPSErrors']({browserContextId, ignoreHTTPSErrors}) {
+    this._targetRegistry.browserContextForId(browserContextId).setIgnoreHTTPSErrors(nullToUndefined(ignoreHTTPSErrors));
+  }
+
+  ['Browser.setDownloadOptions']({browserContextId, downloadOptions}) {
+    this._targetRegistry.browserContextForId(browserContextId).downloadOptions = nullToUndefined(downloadOptions);
+  }
+
+  async ['Browser.setGeolocationOverride']({browserContextId, geolocation}) {
+    await this._targetRegistry.browserContextForId(browserContextId).applySetting('geolocation', nullToUndefined(geolocation));
+  }
+
+  async ['Browser.setOnlineOverride']({browserContextId, override}) {
+    await this._targetRegistry.browserContextForId(browserContextId).applySetting('onlineOverride', nullToUndefined(override));
+  }
+
+  async ['Browser.setColorScheme']({browserContextId, colorScheme}) {
+    await this._targetRegistry.browserContextForId(browserContextId).setColorScheme(nullToUndefined(colorScheme));
+  }
+
+  async ['Browser.setReducedMotion']({browserContextId, reducedMotion}) {
+    await this._targetRegistry.browserContextForId(browserContextId).setReducedMotion(nullToUndefined(reducedMotion));
+  }
+
+  async ['Browser.setForcedColors']({browserContextId, forcedColors}) {
+    await this._targetRegistry.browserContextForId(browserContextId).setForcedColors(nullToUndefined(forcedColors));
+  }
+
+  async ['Browser.setVideoRecordingOptions']({browserContextId, options}) {
+    await this._targetRegistry.browserContextForId(browserContextId).setVideoRecordingOptions(options);
+  }
+
+  async ['Browser.setUserAgentOverride']({browserContextId, userAgent}) {
+    await this._targetRegistry.browserContextForId(browserContextId).setDefaultUserAgent(userAgent);
+  }
+
+  async ['Browser.setPlatformOverride']({browserContextId, platform}) {
+    await this._targetRegistry.browserContextForId(browserContextId).setDefaultPlatform(platform);
+  }
+
+  async ['Browser.setBypassCSP']({browserContextId, bypassCSP}) {
+    await this._targetRegistry.browserContextForId(browserContextId).applySetting('bypassCSP', nullToUndefined(bypassCSP));
+  }
+
+  async ['Browser.setJavaScriptDisabled']({browserContextId, javaScriptDisabled}) {
+    await this._targetRegistry.browserContextForId(browserContextId).setJavaScriptDisabled(javaScriptDisabled);
+  }
+
+  async ['Browser.setLocaleOverride']({browserContextId, locale}) {
+    await this._targetRegistry.browserContextForId(browserContextId).applySetting('locale', nullToUndefined(locale));
+  }
+
+  async ['Browser.setTimezoneOverride']({browserContextId, timezoneId}) {
+    await this._targetRegistry.browserContextForId(browserContextId).applySetting('timezoneId', nullToUndefined(timezoneId));
+  }
+
+  async ['Browser.setTouchOverride']({browserContextId, hasTouch}) {
+    await this._targetRegistry.browserContextForId(browserContextId).setTouchOverride(nullToUndefined(hasTouch));
+  }
+
+  async ['Browser.setDefaultViewport']({browserContextId, viewport}) {
+    await this._targetRegistry.browserContextForId(browserContextId).setDefaultViewport(nullToUndefined(viewport));
+  }
+
+  async ['Browser.setScrollbarsHidden']({browserContextId, hidden}) {
+    await this._targetRegistry.browserContextForId(browserContextId).applySetting('scrollbarsHidden', nullToUndefined(hidden));
+  }
+
+  async ['Browser.setInitScripts']({browserContextId, scripts}) {
+    await this._targetRegistry.browserContextForId(browserContextId).setInitScripts(scripts);
+  }
+
+  async ['Browser.addBinding']({browserContextId, worldName, name, script}) {
+    await this._targetRegistry.browserContextForId(browserContextId).addBinding(worldName, name, script);
+  }
+
+  ['Browser.setCookies']({browserContextId, cookies}) {
+    this._targetRegistry.browserContextForId(browserContextId).setCookies(cookies);
+  }
+
+  ['Browser.clearCookies']({browserContextId}) {
+    this._targetRegistry.browserContextForId(browserContextId).clearCookies();
+  }
+
+  ['Browser.getCookies']({browserContextId}) {
+    const cookies = this._targetRegistry.browserContextForId(browserContextId).getCookies();
+    return {cookies};
+  }
+
+  async ['Browser.getInfo']() {
+    const version = AppConstants.MOZ_APP_VERSION_DISPLAY;
+    const userAgent = Components.classes["@mozilla.org/network/protocol;1?name=http"]
+                                .getService(Components.interfaces.nsIHttpProtocolHandler)
+                                .userAgent;
+    return {version: 'Firefox/' + version, userAgent};
+  }
+}
+
+async function waitForWindowClosed(browserWindow) {
+  if (browserWindow.closed)
+    return;
+  await new Promise((resolve => {
+    const listener = {
+      onCloseWindow: window => {
+        let domWindow;
+        if (window instanceof Ci.nsIAppWindow)
+          domWindow = window.QueryInterface(Ci.nsIInterfaceRequestor).getInterface(Ci.nsIDOMWindowInternal || Ci.nsIDOMWindow);
+        else
+          domWindow = window;
+        if (domWindow === browserWindow) {
+          Services.wm.removeListener(listener);
+          resolve();
+        }
+      },
+    };
+    Services.wm.addListener(listener);
+  }));
+}
+
+function nullToUndefined(value) {
+  return value === null ? undefined : value;
+}
+
+var EXPORTED_SYMBOLS = ['BrowserHandler'];
+this.BrowserHandler = BrowserHandler;
diff --git a/browser_patches/firefox-beta/juggler/protocol/Dispatcher.js b/browser_patches/firefox-beta/juggler/protocol/Dispatcher.js
new file mode 100644
index 0000000000000000000000000000000000000000..af72f307ac4953dd72b9ce3b1e07f67d22ae8f56
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/protocol/Dispatcher.js
@@ -0,0 +1,135 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const {protocol, checkScheme} = ChromeUtils.import("chrome://juggler/content/protocol/Protocol.js");
+const {Helper} = ChromeUtils.import('chrome://juggler/content/Helper.js');
+
+const helper = new Helper();
+
+class Dispatcher {
+  /**
+   * @param {Connection} connection
+   */
+  constructor(connection) {
+    this._connection = connection;
+    this._connection.onmessage = this._dispatch.bind(this);
+    this._connection.onclose = this._dispose.bind(this);
+    this._sessions = new Map();
+    this._rootSession = new ProtocolSession(this, undefined);
+  }
+
+  rootSession() {
+    return this._rootSession;
+  }
+
+  createSession() {
+    const session = new ProtocolSession(this, helper.generateId());
+    this._sessions.set(session.sessionId(), session);
+    return session;
+  }
+
+  destroySession(session) {
+    this._sessions.delete(session.sessionId());
+    session._dispose();
+  }
+
+  _dispose() {
+    this._connection.onmessage = null;
+    this._connection.onclose = null;
+    this._rootSession._dispose();
+    this._rootSession = null;
+    this._sessions.clear();
+  }
+
+  async _dispatch(event) {
+    const data = JSON.parse(event.data);
+    const id = data.id;
+    const sessionId = data.sessionId;
+    delete data.sessionId;
+    try {
+      const session = sessionId ? this._sessions.get(sessionId) : this._rootSession;
+      if (!session)
+        throw new Error(`ERROR: cannot find session with id "${sessionId}"`);
+      const method = data.method;
+      const params = data.params || {};
+      if (!id)
+        throw new Error(`ERROR: every message must have an 'id' parameter`);
+      if (!method)
+        throw new Error(`ERROR: every message must have a 'method' parameter`);
+
+      const [domain, methodName] = method.split('.');
+      const descriptor = protocol.domains[domain] ? protocol.domains[domain].methods[methodName] : null;
+      if (!descriptor)
+        throw new Error(`ERROR: method '${method}' is not supported`);
+      let details = {};
+      if (!checkScheme(descriptor.params || {}, params, details))
+        throw new Error(`ERROR: failed to call method '${method}' with parameters ${JSON.stringify(params, null, 2)}\n${details.error}`);
+
+      const result = await session.dispatch(method, params);
+
+      details = {};
+      if ((descriptor.returns || result) && !checkScheme(descriptor.returns, result, details))
+        throw new Error(`ERROR: failed to dispatch method '${method}' result ${JSON.stringify(result, null, 2)}\n${details.error}`);
+
+      this._connection.send(JSON.stringify({id, sessionId, result}));
+    } catch (e) {
+      this._connection.send(JSON.stringify({id, sessionId, error: {
+        message: e.message,
+        data: e.stack
+      }}));
+    }
+  }
+
+  _emitEvent(sessionId, eventName, params) {
+    const [domain, eName] = eventName.split('.');
+    const scheme = protocol.domains[domain] ? protocol.domains[domain].events[eName] : null;
+    if (!scheme)
+      throw new Error(`ERROR: event '${eventName}' is not supported`);
+    const details = {};
+    if (!checkScheme(scheme, params || {}, details))
+      throw new Error(`ERROR: failed to emit event '${eventName}' ${JSON.stringify(params, null, 2)}\n${details.error}`);
+    this._connection.send(JSON.stringify({method: eventName, params, sessionId}));
+  }
+}
+
+class ProtocolSession {
+  constructor(dispatcher, sessionId) {
+    this._sessionId = sessionId;
+    this._dispatcher = dispatcher;
+    this._handler = null;
+  }
+
+  sessionId() {
+    return this._sessionId;
+  }
+
+  setHandler(handler) {
+    this._handler = handler;
+  }
+
+  _dispose() {
+    if (this._handler)
+      this._handler.dispose();
+    this._handler = null;
+    this._dispatcher = null;
+  }
+
+  emitEvent(eventName, params) {
+    if (!this._dispatcher)
+      throw new Error(`Session has been disposed.`);
+    this._dispatcher._emitEvent(this._sessionId, eventName, params);
+  }
+
+  async dispatch(method, params) {
+    if (!this._handler)
+      throw new Error(`Session does not have a handler!`);
+    if (!this._handler[method])
+      throw new Error(`Handler for does not implement method "${method}"`);
+    return await this._handler[method](params);
+  }
+}
+
+this.EXPORTED_SYMBOLS = ['Dispatcher'];
+this.Dispatcher = Dispatcher;
+
diff --git a/browser_patches/firefox-beta/juggler/protocol/PageHandler.js b/browser_patches/firefox-beta/juggler/protocol/PageHandler.js
new file mode 100644
index 0000000000000000000000000000000000000000..415f395aaf048f2156ee8f9ab9e239799f61da41
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/protocol/PageHandler.js
@@ -0,0 +1,466 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const {Helper} = ChromeUtils.import('chrome://juggler/content/Helper.js');
+const {Services} = ChromeUtils.import("resource://gre/modules/Services.jsm");
+const {NetworkObserver, PageNetwork} = ChromeUtils.import('chrome://juggler/content/NetworkObserver.js');
+const {PageTarget} = ChromeUtils.import('chrome://juggler/content/TargetRegistry.js');
+const {setTimeout} = ChromeUtils.import('resource://gre/modules/Timer.jsm');
+
+const Cc = Components.classes;
+const Ci = Components.interfaces;
+const Cu = Components.utils;
+const XUL_NS = 'http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul';
+const helper = new Helper();
+
+function hashConsoleMessage(params) {
+  return params.location.lineNumber + ':' + params.location.columnNumber + ':' + params.location.url;
+}
+
+class WorkerHandler {
+  constructor(session, contentChannel, workerId) {
+    this._session = session;
+    this._contentWorker = contentChannel.connect(workerId);
+    this._workerConsoleMessages = new Set();
+    this._workerId = workerId;
+
+    const emitWrappedProtocolEvent = eventName => {
+      return params => {
+        this._session.emitEvent('Page.dispatchMessageFromWorker', {
+          workerId,
+          message: JSON.stringify({method: eventName, params}),
+        });
+      }
+    }
+
+    this._eventListeners = [
+      contentChannel.register(workerId, {
+        runtimeConsole: (params) => {
+          this._workerConsoleMessages.add(hashConsoleMessage(params));
+          emitWrappedProtocolEvent('Runtime.console')(params);
+        },
+        runtimeExecutionContextCreated: emitWrappedProtocolEvent('Runtime.executionContextCreated'),
+        runtimeExecutionContextDestroyed: emitWrappedProtocolEvent('Runtime.executionContextDestroyed'),
+      }),
+    ];
+  }
+
+  async sendMessage(message) {
+    const [domain, method] = message.method.split('.');
+    if (domain !== 'Runtime')
+      throw new Error('ERROR: can only dispatch to Runtime domain inside worker');
+    const result = await this._contentWorker.send(method, message.params);
+    this._session.emitEvent('Page.dispatchMessageFromWorker', {
+      workerId: this._workerId,
+      message: JSON.stringify({result, id: message.id}),
+    });
+  }
+
+  dispose() {
+    this._contentWorker.dispose();
+    helper.removeListeners(this._eventListeners);
+  }
+}
+
+class PageHandler {
+  constructor(target, session, contentChannel) {
+    this._session = session;
+    this._contentChannel = contentChannel;
+    this._contentPage = contentChannel.connect('page');
+    this._workers = new Map();
+
+    this._pageTarget = target;
+    this._pageNetwork = PageNetwork.forPageTarget(target);
+
+    const emitProtocolEvent = eventName => {
+      return (...args) => this._session.emitEvent(eventName, ...args);
+    }
+
+    this._reportedFrameIds = new Set();
+    this._networkEventsForUnreportedFrameIds = new Map();
+
+    // `Page.ready` protocol event is emitted whenever page has completed initialization, e.g.
+    // finished all the transient navigations to the `about:blank`.
+    //
+    // We'd like to avoid reporting meaningful events before the `Page.ready` since they are likely
+    // to be ignored by the protocol clients.
+    this._isPageReady = false;
+
+    if (this._pageTarget.videoRecordingInfo())
+      this._onVideoRecordingStarted();
+
+    this._eventListeners = [
+      helper.on(this._pageTarget, PageTarget.Events.DialogOpened, this._onDialogOpened.bind(this)),
+      helper.on(this._pageTarget, PageTarget.Events.DialogClosed, this._onDialogClosed.bind(this)),
+      helper.on(this._pageTarget, PageTarget.Events.Crashed, () => {
+        this._session.emitEvent('Page.crashed', {});
+      }),
+      helper.on(this._pageTarget, PageTarget.Events.ScreencastStarted, this._onVideoRecordingStarted.bind(this)),
+      helper.on(this._pageTarget, PageTarget.Events.ScreencastFrame, this._onScreencastFrame.bind(this)),
+      helper.on(this._pageNetwork, PageNetwork.Events.Request, this._handleNetworkEvent.bind(this, 'Network.requestWillBeSent')),
+      helper.on(this._pageNetwork, PageNetwork.Events.Response, this._handleNetworkEvent.bind(this, 'Network.responseReceived')),
+      helper.on(this._pageNetwork, PageNetwork.Events.RequestFinished, this._handleNetworkEvent.bind(this, 'Network.requestFinished')),
+      helper.on(this._pageNetwork, PageNetwork.Events.RequestFailed, this._handleNetworkEvent.bind(this, 'Network.requestFailed')),
+      contentChannel.register('page', {
+        pageBindingCalled: emitProtocolEvent('Page.bindingCalled'),
+        pageDispatchMessageFromWorker: emitProtocolEvent('Page.dispatchMessageFromWorker'),
+        pageEventFired: emitProtocolEvent('Page.eventFired'),
+        pageFileChooserOpened: emitProtocolEvent('Page.fileChooserOpened'),
+        pageFrameAttached: this._onFrameAttached.bind(this),
+        pageFrameDetached: emitProtocolEvent('Page.frameDetached'),
+        pageLinkClicked: emitProtocolEvent('Page.linkClicked'),
+        pageWillOpenNewWindowAsynchronously: emitProtocolEvent('Page.willOpenNewWindowAsynchronously'),
+        pageNavigationAborted: emitProtocolEvent('Page.navigationAborted'),
+        pageNavigationCommitted: emitProtocolEvent('Page.navigationCommitted'),
+        pageNavigationStarted: emitProtocolEvent('Page.navigationStarted'),
+        pageReady: this._onPageReady.bind(this),
+        pageSameDocumentNavigation: emitProtocolEvent('Page.sameDocumentNavigation'),
+        pageUncaughtError: emitProtocolEvent('Page.uncaughtError'),
+        pageWorkerCreated: this._onWorkerCreated.bind(this),
+        pageWorkerDestroyed: this._onWorkerDestroyed.bind(this),
+        runtimeConsole: params => {
+          const consoleMessageHash = hashConsoleMessage(params);
+          for (const worker of this._workers.values()) {
+            if (worker._workerConsoleMessages.has(consoleMessageHash)) {
+              worker._workerConsoleMessages.delete(consoleMessageHash);
+              return;
+            }
+          }
+          emitProtocolEvent('Runtime.console')(params);
+        },
+        runtimeExecutionContextCreated: emitProtocolEvent('Runtime.executionContextCreated'),
+        runtimeExecutionContextDestroyed: emitProtocolEvent('Runtime.executionContextDestroyed'),
+
+        webSocketCreated: emitProtocolEvent('Page.webSocketCreated'),
+        webSocketOpened: emitProtocolEvent('Page.webSocketOpened'),
+        webSocketClosed: emitProtocolEvent('Page.webSocketClosed'),
+        webSocketFrameReceived: emitProtocolEvent('Page.webSocketFrameReceived'),
+        webSocketFrameSent: emitProtocolEvent('Page.webSocketFrameSent'),
+      }),
+    ];
+  }
+
+  async dispose() {
+    this._contentPage.dispose();
+    helper.removeListeners(this._eventListeners);
+  }
+
+  _onVideoRecordingStarted() {
+    const info = this._pageTarget.videoRecordingInfo();
+    this._session.emitEvent('Page.videoRecordingStarted', { screencastId: info.sessionId, file: info.file });
+  }
+
+  _onScreencastFrame(params) {
+    this._session.emitEvent('Page.screencastFrame', params);
+  }
+
+  _onPageReady(event) {
+    this._isPageReady = true;
+    this._session.emitEvent('Page.ready');
+    for (const dialog of this._pageTarget.dialogs())
+      this._onDialogOpened(dialog);
+  }
+
+  _onDialogOpened(dialog) {
+    if (!this._isPageReady)
+      return;
+    this._session.emitEvent('Page.dialogOpened', {
+      dialogId: dialog.id(),
+      type: dialog.type(),
+      message: dialog.message(),
+      defaultValue: dialog.defaultValue(),
+    });
+  }
+
+  _onDialogClosed(dialog) {
+    if (!this._isPageReady)
+      return;
+    this._session.emitEvent('Page.dialogClosed', { dialogId: dialog.id(), });
+  }
+
+  _onWorkerCreated({workerId, frameId, url}) {
+    const worker = new WorkerHandler(this._session, this._contentChannel, workerId);
+    this._workers.set(workerId, worker);
+    this._session.emitEvent('Page.workerCreated', {workerId, frameId, url});
+  }
+
+  _onWorkerDestroyed({workerId}) {
+    const worker = this._workers.get(workerId);
+    if (!worker)
+      return;
+    this._workers.delete(workerId);
+    worker.dispose();
+    this._session.emitEvent('Page.workerDestroyed', {workerId});
+  }
+
+  _handleNetworkEvent(protocolEventName, eventDetails, frameId) {
+    if (!this._reportedFrameIds.has(frameId)) {
+      let events = this._networkEventsForUnreportedFrameIds.get(frameId);
+      if (!events) {
+        events = [];
+        this._networkEventsForUnreportedFrameIds.set(frameId, events);
+      }
+      events.push({eventName: protocolEventName, eventDetails});
+    } else {
+      this._session.emitEvent(protocolEventName, eventDetails);
+    }
+  }
+
+  _onFrameAttached({frameId, parentFrameId}) {
+    this._session.emitEvent('Page.frameAttached', {frameId, parentFrameId});
+    this._reportedFrameIds.add(frameId);
+    const events = this._networkEventsForUnreportedFrameIds.get(frameId) || [];
+    this._networkEventsForUnreportedFrameIds.delete(frameId);
+    for (const {eventName, eventDetails} of events)
+      this._session.emitEvent(eventName, eventDetails);
+  }
+
+  async ['Page.close']({runBeforeUnload}) {
+    // Postpone target close to deliver response in session.
+    Services.tm.dispatchToMainThread(() => {
+      this._pageTarget.close(runBeforeUnload);
+    });
+  }
+
+  async ['Page.setViewportSize']({viewportSize}) {
+    await this._pageTarget.setViewportSize(viewportSize === null ? undefined : viewportSize);
+  }
+
+  async ['Runtime.evaluate'](options) {
+    return await this._contentPage.send('evaluate', options);
+  }
+
+  async ['Runtime.callFunction'](options) {
+    return await this._contentPage.send('callFunction', options);
+  }
+
+  async ['Runtime.getObjectProperties'](options) {
+    return await this._contentPage.send('getObjectProperties', options);
+  }
+
+  async ['Runtime.disposeObject'](options) {
+    return await this._contentPage.send('disposeObject', options);
+  }
+
+  async ['Network.getResponseBody']({requestId}) {
+    return this._pageNetwork.getResponseBody(requestId);
+  }
+
+  async ['Network.setExtraHTTPHeaders']({headers}) {
+    this._pageNetwork.setExtraHTTPHeaders(headers);
+  }
+
+  async ['Network.setRequestInterception']({enabled}) {
+    if (enabled)
+      this._pageNetwork.enableRequestInterception();
+    else
+      this._pageNetwork.disableRequestInterception();
+  }
+
+  async ['Network.resumeInterceptedRequest']({requestId, url, method, headers, postData}) {
+    this._pageNetwork.resumeInterceptedRequest(requestId, url, method, headers, postData);
+  }
+
+  async ['Network.abortInterceptedRequest']({requestId, errorCode}) {
+    this._pageNetwork.abortInterceptedRequest(requestId, errorCode);
+  }
+
+  async ['Network.fulfillInterceptedRequest']({requestId, status, statusText, headers, base64body}) {
+    this._pageNetwork.fulfillInterceptedRequest(requestId, status, statusText, headers, base64body);
+  }
+
+  async ['Accessibility.getFullAXTree'](params) {
+    return await this._contentPage.send('getFullAXTree', params);
+  }
+
+  async ['Page.setFileInputFiles'](options) {
+    return await this._contentPage.send('setFileInputFiles', options);
+  }
+
+  async ['Page.setEmulatedMedia']({colorScheme, type, reducedMotion, forcedColors}) {
+    this._pageTarget.setColorScheme(colorScheme || null);
+    this._pageTarget.setReducedMotion(reducedMotion || null);
+    this._pageTarget.setForcedColors(forcedColors || null);
+    this._pageTarget.setEmulatedMedia(type);
+  }
+
+  async ['Page.bringToFront'](options) {
+    this._pageTarget._window.focus();
+  }
+
+  async ['Page.setCacheDisabled'](options) {
+    return await this._contentPage.send('setCacheDisabled', options);
+  }
+
+  async ['Page.addBinding'](options) {
+    return await this._contentPage.send('addBinding', options);
+  }
+
+  async ['Page.adoptNode'](options) {
+    return await this._contentPage.send('adoptNode', options);
+  }
+
+  async ['Page.screenshot']({ mimeType, clip, omitDeviceScaleFactor }) {
+    const rect = new DOMRect(clip.x, clip.y, clip.width, clip.height);
+
+    const browsingContext = this._pageTarget.linkedBrowser().browsingContext;
+    // `win.devicePixelRatio` returns a non-overriden value to priveleged code.
+    // See https://bugzilla.mozilla.org/show_bug.cgi?id=1761032
+    // See https://phabricator.services.mozilla.com/D141323
+    const devicePixelRatio = browsingContext.overrideDPPX || this._pageTarget._window.devicePixelRatio;
+    const scale = omitDeviceScaleFactor ? 1 : devicePixelRatio;
+    const canvasWidth = rect.width * scale;
+    const canvasHeight = rect.height * scale;
+
+    const MAX_CANVAS_DIMENSIONS = 32767;
+    const MAX_CANVAS_AREA = 472907776;
+    if (canvasWidth > MAX_CANVAS_DIMENSIONS || canvasHeight > MAX_CANVAS_DIMENSIONS)
+      throw new Error('Cannot take screenshot larger than ' + MAX_CANVAS_DIMENSIONS);
+    if (canvasWidth * canvasHeight > MAX_CANVAS_AREA)
+      throw new Error('Cannot take screenshot with more than ' + MAX_CANVAS_AREA + ' pixels');
+
+    let snapshot;
+    while (!snapshot) {
+      try {
+        //TODO(fission): browsingContext will change in case of cross-group navigation.
+        snapshot = await browsingContext.currentWindowGlobal.drawSnapshot(
+          rect,
+          scale,
+          "rgb(255,255,255)"
+        );
+      } catch (e) {
+        // The currentWindowGlobal.drawSnapshot might throw
+        // NS_ERROR_LOSS_OF_SIGNIFICANT_DATA if called during navigation.
+        // wait a little and re-try.
+        await new Promise(x => setTimeout(x, 50));
+      }
+    }
+
+    const win = browsingContext.topChromeWindow.ownerGlobal;
+    const canvas = win.document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');
+    canvas.width = canvasWidth;
+    canvas.height = canvasHeight;
+    let ctx = canvas.getContext('2d');
+    ctx.drawImage(snapshot, 0, 0);
+    snapshot.close();
+    const dataURL = canvas.toDataURL(mimeType);
+    return { data: dataURL.substring(dataURL.indexOf(',') + 1) };
+  }
+
+  async ['Page.getContentQuads'](options) {
+    return await this._contentPage.send('getContentQuads', options);
+  }
+
+  async ['Page.navigate'](options) {
+    return await this._contentPage.send('navigate', options);
+  }
+
+  async ['Page.goBack'](options) {
+    return await this._contentPage.send('goBack', options);
+  }
+
+  async ['Page.goForward'](options) {
+    return await this._contentPage.send('goForward', options);
+  }
+
+  async ['Page.reload'](options) {
+    return await this._contentPage.send('reload', options);
+  }
+
+  async ['Page.describeNode'](options) {
+    return await this._contentPage.send('describeNode', options);
+  }
+
+  async ['Page.scrollIntoViewIfNeeded'](options) {
+    return await this._contentPage.send('scrollIntoViewIfNeeded', options);
+  }
+
+  async ['Page.setInitScripts']({ scripts }) {
+    return await this._pageTarget.setInitScripts(scripts);
+  }
+
+  async ['Page.dispatchKeyEvent'](options) {
+    return await this._contentPage.send('dispatchKeyEvent', options);
+  }
+
+  async ['Page.dispatchTouchEvent'](options) {
+    return await this._contentPage.send('dispatchTouchEvent', options);
+  }
+
+  async ['Page.dispatchTapEvent'](options) {
+    return await this._contentPage.send('dispatchTapEvent', options);
+  }
+
+  async ['Page.dispatchMouseEvent'](options) {
+    return await this._contentPage.send('dispatchMouseEvent', options);
+  }
+
+  async ['Page.dispatchWheelEvent']({x, y, button, deltaX, deltaY, deltaZ, modifiers }) {
+    const boundingBox = this._pageTarget._linkedBrowser.getBoundingClientRect();
+    x += boundingBox.left;
+    y += boundingBox.top;
+    const deltaMode = 0; // WheelEvent.DOM_DELTA_PIXEL
+    const lineOrPageDeltaX = deltaX > 0 ? Math.floor(deltaX) : Math.ceil(deltaX);
+    const lineOrPageDeltaY = deltaY > 0 ? Math.floor(deltaY) : Math.ceil(deltaY);
+
+    const win = this._pageTarget._window;
+    win.windowUtils.sendWheelEvent(
+      x,
+      y,
+      deltaX,
+      deltaY,
+      deltaZ,
+      deltaMode,
+      modifiers,
+      lineOrPageDeltaX,
+      lineOrPageDeltaY,
+      0 /* options */);
+  }
+
+  async ['Page.insertText'](options) {
+    return await this._contentPage.send('insertText', options);
+  }
+
+  async ['Page.crash'](options) {
+    return await this._contentPage.send('crash', options);
+  }
+
+  async ['Page.handleDialog']({dialogId, accept, promptText}) {
+    const dialog = this._pageTarget.dialog(dialogId);
+    if (!dialog)
+      throw new Error('Failed to find dialog with id = ' + dialogId);
+    if (accept)
+      dialog.accept(promptText);
+    else
+      dialog.dismiss();
+  }
+
+  async ['Page.setInterceptFileChooserDialog'](options) {
+    return await this._contentPage.send('setInterceptFileChooserDialog', options);
+  }
+
+  async ['Page.startScreencast'](options) {
+    return await this._pageTarget.startScreencast(options);
+  }
+
+  async ['Page.screencastFrameAck'](options) {
+    await this._pageTarget.screencastFrameAck(options);
+  }
+
+  async ['Page.stopScreencast'](options) {
+    await this._pageTarget.stopScreencast(options);
+  }
+
+  async ['Page.sendMessageToWorker']({workerId, message}) {
+    const worker = this._workers.get(workerId);
+    if (!worker)
+      throw new Error('ERROR: cannot find worker with id ' + workerId);
+    return await worker.sendMessage(JSON.parse(message));
+  }
+}
+
+var EXPORTED_SYMBOLS = ['PageHandler'];
+this.PageHandler = PageHandler;
diff --git a/browser_patches/firefox-beta/juggler/protocol/PrimitiveTypes.js b/browser_patches/firefox-beta/juggler/protocol/PrimitiveTypes.js
new file mode 100644
index 0000000000000000000000000000000000000000..5799038f19cbca1096f6dfa628f71be6c0231639
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/protocol/PrimitiveTypes.js
@@ -0,0 +1,147 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const t = {};
+
+t.String = function(x, details = {}, path = ['<root>']) {
+  if (typeof x === 'string' || typeof x === 'String')
+    return true;
+  details.error = `Expected "${path.join('.')}" to be |string|; found |${typeof x}| \`${JSON.stringify(x)}\` instead.`;
+  return false;
+}
+
+t.Number = function(x, details = {}, path = ['<root>']) {
+  if (typeof x === 'number')
+    return true;
+  details.error = `Expected "${path.join('.')}" to be |number|; found |${typeof x}| \`${JSON.stringify(x)}\` instead.`;
+  return false;
+}
+
+t.Boolean = function(x, details = {}, path = ['<root>']) {
+  if (typeof x === 'boolean')
+    return true;
+  details.error = `Expected "${path.join('.')}" to be |boolean|; found |${typeof x}| \`${JSON.stringify(x)}\` instead.`;
+  return false;
+}
+
+t.Null = function(x, details = {}, path = ['<root>']) {
+  if (Object.is(x, null))
+    return true;
+  details.error = `Expected "${path.join('.')}" to be \`null\`; found \`${JSON.stringify(x)}\` instead.`;
+  return false;
+}
+
+t.Undefined = function(x, details = {}, path = ['<root>']) {
+  if (Object.is(x, undefined))
+    return true;
+  details.error = `Expected "${path.join('.')}" to be \`undefined\`; found \`${JSON.stringify(x)}\` instead.`;
+  return false;
+}
+
+t.Any = x => true,
+
+t.Enum = function(values) {
+  return function(x, details = {}, path = ['<root>']) {
+    if (values.indexOf(x) !== -1)
+      return true;
+    details.error = `Expected "${path.join('.')}" to be one of [${values.join(', ')}]; found \`${JSON.stringify(x)}\` (${typeof x}) instead.`;
+    return false;
+  }
+}
+
+t.Nullable = function(scheme) {
+  return function(x, details = {}, path = ['<root>']) {
+    if (Object.is(x, null))
+      return true;
+    return checkScheme(scheme, x, details, path);
+  }
+}
+
+t.Optional = function(scheme) {
+  return function(x, details = {}, path = ['<root>']) {
+    if (Object.is(x, undefined))
+      return true;
+    return checkScheme(scheme, x, details, path);
+  }
+}
+
+t.Array = function(scheme) {
+  return function(x, details = {}, path = ['<root>']) {
+    if (!Array.isArray(x)) {
+      details.error = `Expected "${path.join('.')}" to be an array; found \`${JSON.stringify(x)}\` (${typeof x}) instead.`;
+      return false;
+    }
+    const lastPathElement = path[path.length - 1];
+    for (let i = 0; i < x.length; ++i) {
+      path[path.length - 1] = lastPathElement + `[${i}]`;
+      if (!checkScheme(scheme, x[i], details, path))
+        return false;
+    }
+    path[path.length - 1] = lastPathElement;
+    return true;
+  }
+}
+
+t.Recursive = function(types, schemeName) {
+  return function(x, details = {}, path = ['<root>']) {
+    const scheme = types[schemeName];
+    return checkScheme(scheme, x, details, path);
+  }
+}
+
+function beauty(path, obj) {
+  if (path.length === 1)
+    return `object ${JSON.stringify(obj, null, 2)}`;
+  return `property "${path.join('.')}" - ${JSON.stringify(obj, null, 2)}`;
+}
+
+function checkScheme(scheme, x, details = {}, path = ['<root>']) {
+  if (!scheme)
+    throw new Error(`ILLDEFINED SCHEME: ${path.join('.')}`);
+  if (typeof scheme === 'object') {
+    if (!x) {
+      details.error = `Object "${path.join('.')}" is undefined, but has some scheme`;
+      return false;
+    }
+    for (const [propertyName, aScheme] of Object.entries(scheme)) {
+      path.push(propertyName);
+      const result = checkScheme(aScheme, x[propertyName], details, path);
+      path.pop();
+      if (!result)
+        return false;
+    }
+    for (const propertyName of Object.keys(x)) {
+      if (!scheme[propertyName]) {
+        path.push(propertyName);
+        details.error = `Found ${beauty(path, x[propertyName])} which is not described in this scheme`;
+        return false;
+      }
+    }
+    return true;
+  }
+  return scheme(x, details, path);
+}
+
+/*
+
+function test(scheme, obj) {
+  const details = {};
+  if (!checkScheme(scheme, obj, details)) {
+    dump(`FAILED: ${JSON.stringify(obj)}
+      details.error: ${details.error}
+    `);
+  } else {
+    dump(`SUCCESS: ${JSON.stringify(obj)}
+`);
+  }
+}
+
+test(t.Array(t.String), ['a', 'b', 2, 'c']);
+test(t.Either(t.String, t.Number), {});
+
+*/
+
+this.t = t;
+this.checkScheme = checkScheme;
+this.EXPORTED_SYMBOLS = ['t', 'checkScheme'];
diff --git a/browser_patches/firefox-beta/juggler/protocol/Protocol.js b/browser_patches/firefox-beta/juggler/protocol/Protocol.js
new file mode 100644
index 0000000000000000000000000000000000000000..be0f15af0d5a74b8a74ea69ede44e8b0c7ca4046
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/protocol/Protocol.js
@@ -0,0 +1,993 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const {t, checkScheme} = ChromeUtils.import('chrome://juggler/content/protocol/PrimitiveTypes.js');
+
+// Protocol-specific types.
+const browserTypes = {};
+
+browserTypes.TargetInfo = {
+  type: t.Enum(['page']),
+  targetId: t.String,
+  browserContextId: t.Optional(t.String),
+  // PageId of parent tab, if any.
+  openerId: t.Optional(t.String),
+};
+
+browserTypes.CookieOptions = {
+  name: t.String,
+  value: t.String,
+  url: t.Optional(t.String),
+  domain: t.Optional(t.String),
+  path: t.Optional(t.String),
+  secure: t.Optional(t.Boolean),
+  httpOnly: t.Optional(t.Boolean),
+  sameSite: t.Optional(t.Enum(['Strict', 'Lax', 'None'])),
+  expires: t.Optional(t.Number),
+};
+
+browserTypes.Cookie = {
+  name: t.String,
+  domain: t.String,
+  path: t.String,
+  value: t.String,
+  expires: t.Number,
+  size: t.Number,
+  httpOnly: t.Boolean,
+  secure: t.Boolean,
+  session: t.Boolean,
+  sameSite: t.Enum(['Strict', 'Lax', 'None']),
+};
+
+browserTypes.Geolocation = {
+  latitude: t.Number,
+  longitude: t.Number,
+  accuracy: t.Optional(t.Number),
+};
+
+browserTypes.DownloadOptions = {
+  behavior: t.Optional(t.Enum(['saveToDisk', 'cancel'])),
+  downloadsDir: t.Optional(t.String),
+};
+
+const pageTypes = {};
+pageTypes.DOMPoint = {
+  x: t.Number,
+  y: t.Number,
+};
+
+pageTypes.Rect = {
+  x: t.Number,
+  y: t.Number,
+  width: t.Number,
+  height: t.Number,
+};
+
+pageTypes.Size = {
+  width: t.Number,
+  height: t.Number,
+};
+
+pageTypes.Viewport = {
+  viewportSize: pageTypes.Size,
+  deviceScaleFactor: t.Optional(t.Number),
+};
+
+pageTypes.DOMQuad = {
+  p1: pageTypes.DOMPoint,
+  p2: pageTypes.DOMPoint,
+  p3: pageTypes.DOMPoint,
+  p4: pageTypes.DOMPoint,
+};
+
+pageTypes.TouchPoint = {
+  x: t.Number,
+  y: t.Number,
+  radiusX: t.Optional(t.Number),
+  radiusY: t.Optional(t.Number),
+  rotationAngle: t.Optional(t.Number),
+  force: t.Optional(t.Number),
+};
+
+pageTypes.Clip = {
+  x: t.Number,
+  y: t.Number,
+  width: t.Number,
+  height: t.Number,
+};
+
+pageTypes.InitScript = {
+  script: t.String,
+  worldName: t.Optional(t.String),
+};
+
+const runtimeTypes = {};
+runtimeTypes.RemoteObject = {
+  type: t.Optional(t.Enum(['object', 'function', 'undefined', 'string', 'number', 'boolean', 'symbol', 'bigint'])),
+  subtype: t.Optional(t.Enum(['array', 'null', 'node', 'regexp', 'date', 'map', 'set', 'weakmap', 'weakset', 'error', 'proxy', 'promise', 'typedarray'])),
+  objectId: t.Optional(t.String),
+  unserializableValue: t.Optional(t.Enum(['Infinity', '-Infinity', '-0', 'NaN'])),
+  value: t.Any
+};
+
+runtimeTypes.ObjectProperty = {
+  name: t.String,
+  value: runtimeTypes.RemoteObject,
+};
+
+runtimeTypes.ScriptLocation = {
+  columnNumber: t.Number,
+  lineNumber: t.Number,
+  url: t.String,
+};
+
+runtimeTypes.ExceptionDetails = {
+  text: t.Optional(t.String),
+  stack: t.Optional(t.String),
+  value: t.Optional(t.Any),
+};
+
+runtimeTypes.CallFunctionArgument = {
+  objectId: t.Optional(t.String),
+  unserializableValue: t.Optional(t.Enum(['Infinity', '-Infinity', '-0', 'NaN'])),
+  value: t.Any,
+};
+
+runtimeTypes.AuxData = {
+  frameId: t.Optional(t.String),
+  name: t.Optional(t.String),
+};
+
+const axTypes = {};
+axTypes.AXTree = {
+  role: t.String,
+  name: t.String,
+  children: t.Optional(t.Array(t.Recursive(axTypes, 'AXTree'))),
+
+  selected: t.Optional(t.Boolean),
+  focused: t.Optional(t.Boolean),
+  pressed: t.Optional(t.Boolean),
+  focusable: t.Optional(t.Boolean),
+  haspopup: t.Optional(t.String),
+  required: t.Optional(t.Boolean),
+  invalid: t.Optional(t.Boolean),
+  modal: t.Optional(t.Boolean),
+  editable: t.Optional(t.Boolean),
+  busy: t.Optional(t.Boolean),
+  multiline: t.Optional(t.Boolean),
+  readonly: t.Optional(t.Boolean),
+  checked: t.Optional(t.Enum(['mixed', true])),
+  expanded: t.Optional(t.Boolean),
+  disabled: t.Optional(t.Boolean),
+  multiselectable: t.Optional(t.Boolean),
+
+  value: t.Optional(t.String),
+  description: t.Optional(t.String),
+
+  roledescription: t.Optional(t.String),
+  valuetext: t.Optional(t.String),
+  orientation: t.Optional(t.String),
+  autocomplete: t.Optional(t.String),
+  keyshortcuts: t.Optional(t.String),
+
+  level: t.Optional(t.Number),
+
+  tag: t.Optional(t.String),
+
+  foundObject: t.Optional(t.Boolean),
+}
+
+const networkTypes = {};
+
+networkTypes.HTTPHeader = {
+  name: t.String,
+  value: t.String,
+};
+
+networkTypes.HTTPCredentials = {
+  username: t.String,
+  password: t.String,
+};
+
+networkTypes.SecurityDetails = {
+  protocol: t.String,
+  subjectName: t.String,
+  issuer: t.String,
+  validFrom: t.Number,
+  validTo: t.Number,
+};
+
+networkTypes.ResourceTiming = {
+  startTime: t.Number,
+  domainLookupStart: t.Number,
+  domainLookupEnd: t.Number,
+  connectStart: t.Number,
+  secureConnectionStart: t.Number,
+  connectEnd: t.Number,
+  requestStart: t.Number,
+  responseStart: t.Number,
+};
+
+const Browser = {
+  targets: ['browser'],
+
+  types: browserTypes,
+
+  events: {
+    'attachedToTarget': {
+      sessionId: t.String,
+      targetInfo: browserTypes.TargetInfo,
+    },
+    'detachedFromTarget': {
+      sessionId: t.String,
+      targetId: t.String,
+    },
+    'downloadCreated': {
+      uuid: t.String,
+      browserContextId: t.Optional(t.String),
+      pageTargetId: t.String,
+      url: t.String,
+      suggestedFileName: t.String,
+    },
+    'downloadFinished': {
+      uuid: t.String,
+      canceled: t.Optional(t.Boolean),
+      error: t.Optional(t.String),
+    },
+    'videoRecordingFinished': {
+      screencastId: t.String,
+    },
+  },
+
+  methods: {
+    'enable': {
+      params: {
+        attachToDefaultContext: t.Boolean,
+      },
+    },
+    'createBrowserContext': {
+      params: {
+        removeOnDetach: t.Optional(t.Boolean),
+      },
+      returns: {
+        browserContextId: t.String,
+      },
+    },
+    'removeBrowserContext': {
+      params: {
+        browserContextId: t.String,
+      },
+    },
+    'newPage': {
+      params: {
+        browserContextId: t.Optional(t.String),
+      },
+      returns: {
+        targetId: t.String,
+      }
+    },
+    'close': {},
+    'getInfo': {
+      returns: {
+        userAgent: t.String,
+        version: t.String,
+      },
+    },
+    'setExtraHTTPHeaders': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        headers: t.Array(networkTypes.HTTPHeader),
+      },
+    },
+    'setBrowserProxy': {
+      params: {
+        type: t.Enum(['http', 'https', 'socks', 'socks4']),
+        bypass: t.Array(t.String),
+        host: t.String,
+        port: t.Number,
+        username: t.Optional(t.String),
+        password: t.Optional(t.String),
+      },
+    },
+    'setContextProxy': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        type: t.Enum(['http', 'https', 'socks', 'socks4']),
+        bypass: t.Array(t.String),
+        host: t.String,
+        port: t.Number,
+        username: t.Optional(t.String),
+        password: t.Optional(t.String),
+      },
+    },
+    'setHTTPCredentials': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        credentials: t.Nullable(networkTypes.HTTPCredentials),
+      },
+    },
+    'setRequestInterception': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        enabled: t.Boolean,
+      },
+    },
+    'setGeolocationOverride': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        geolocation: t.Nullable(browserTypes.Geolocation),
+      }
+    },
+    'setUserAgentOverride': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        userAgent: t.Nullable(t.String),
+      }
+    },
+    'setPlatformOverride': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        platform: t.Nullable(t.String),
+      }
+    },
+    'setBypassCSP': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        bypassCSP: t.Nullable(t.Boolean),
+      }
+    },
+    'setIgnoreHTTPSErrors': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        ignoreHTTPSErrors: t.Nullable(t.Boolean),
+      }
+    },
+    'setJavaScriptDisabled': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        javaScriptDisabled: t.Boolean,
+      }
+    },
+    'setLocaleOverride': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        locale: t.Nullable(t.String),
+      }
+    },
+    'setTimezoneOverride': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        timezoneId: t.Nullable(t.String),
+      }
+    },
+    'setDownloadOptions': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        downloadOptions: t.Nullable(browserTypes.DownloadOptions),
+      }
+    },
+    'setTouchOverride': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        hasTouch: t.Nullable(t.Boolean),
+      }
+    },
+    'setDefaultViewport': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        viewport: t.Nullable(pageTypes.Viewport),
+      }
+    },
+    'setScrollbarsHidden': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        hidden: t.Boolean,
+      }
+    },
+    'setInitScripts': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        scripts: t.Array(pageTypes.InitScript),
+      }
+    },
+    'addBinding': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        worldName: t.Optional(t.String),
+        name: t.String,
+        script: t.String,
+      },
+    },
+    'grantPermissions': {
+      params: {
+        origin: t.String,
+        browserContextId: t.Optional(t.String),
+        permissions: t.Array(t.String),
+      },
+    },
+    'resetPermissions': {
+      params: {
+        browserContextId: t.Optional(t.String),
+      }
+    },
+    'setCookies': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        cookies: t.Array(browserTypes.CookieOptions),
+      }
+    },
+    'clearCookies': {
+      params: {
+        browserContextId: t.Optional(t.String),
+      }
+    },
+    'getCookies': {
+      params: {
+        browserContextId: t.Optional(t.String)
+      },
+      returns: {
+        cookies: t.Array(browserTypes.Cookie),
+      },
+    },
+    'setOnlineOverride': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        override: t.Nullable(t.Enum(['online', 'offline'])),
+      }
+    },
+    'setColorScheme': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        colorScheme: t.Nullable(t.Enum(['dark', 'light', 'no-preference'])),
+      },
+    },
+    'setReducedMotion': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        reducedMotion: t.Nullable(t.Enum(['reduce', 'no-preference'])),
+      },
+    },
+    'setForcedColors': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        forcedColors: t.Nullable(t.Enum(['active', 'none'])),
+      },
+    },
+    'setVideoRecordingOptions': {
+      params: {
+        browserContextId: t.Optional(t.String),
+        options: t.Optional({
+          dir: t.String,
+          width: t.Number,
+          height: t.Number,
+        }),
+      },
+    },
+    'cancelDownload': {
+      params: {
+        uuid: t.Optional(t.String),
+      }
+    }
+  },
+};
+
+const Network = {
+  targets: ['page'],
+  types: networkTypes,
+  events: {
+    'requestWillBeSent': {
+      // frameId may be absent for redirected requests.
+      frameId: t.Optional(t.String),
+      requestId: t.String,
+      // RequestID of redirected request.
+      redirectedFrom: t.Optional(t.String),
+      postData: t.Optional(t.String),
+      headers: t.Array(networkTypes.HTTPHeader),
+      isIntercepted: t.Boolean,
+      url: t.String,
+      method: t.String,
+      navigationId: t.Optional(t.String),
+      cause: t.String,
+      internalCause: t.String,
+    },
+    'responseReceived': {
+      securityDetails: t.Nullable(networkTypes.SecurityDetails),
+      requestId: t.String,
+      fromCache: t.Boolean,
+      remoteIPAddress: t.Optional(t.String),
+      remotePort: t.Optional(t.Number),
+      status: t.Number,
+      statusText: t.String,
+      headers: t.Array(networkTypes.HTTPHeader),
+      timing: networkTypes.ResourceTiming,
+      fromServiceWorker: t.Boolean,
+    },
+    'requestFinished': {
+      requestId: t.String,
+      responseEndTime: t.Number,
+      transferSize: t.Number,
+      encodedBodySize: t.Number,
+      protocolVersion: t.Optional(t.String),
+    },
+    'requestFailed': {
+      requestId: t.String,
+      errorCode: t.String,
+    },
+  },
+  methods: {
+    'setRequestInterception': {
+      params: {
+        enabled: t.Boolean,
+      },
+    },
+    'setExtraHTTPHeaders': {
+      params: {
+        headers: t.Array(networkTypes.HTTPHeader),
+      },
+    },
+    'abortInterceptedRequest': {
+      params: {
+        requestId: t.String,
+        errorCode: t.String,
+      },
+    },
+    'resumeInterceptedRequest': {
+      params: {
+        requestId: t.String,
+        url: t.Optional(t.String),
+        method: t.Optional(t.String),
+        headers: t.Optional(t.Array(networkTypes.HTTPHeader)),
+        postData: t.Optional(t.String),
+      },
+    },
+    'fulfillInterceptedRequest': {
+      params: {
+        requestId: t.String,
+        status: t.Number,
+        statusText: t.String,
+        headers: t.Array(networkTypes.HTTPHeader),
+        base64body: t.Optional(t.String),  // base64-encoded
+      },
+    },
+    'getResponseBody': {
+      params: {
+        requestId: t.String,
+      },
+      returns: {
+        base64body: t.String,
+        evicted: t.Optional(t.Boolean),
+      },
+    },
+  },
+};
+
+const Runtime = {
+  targets: ['page'],
+  types: runtimeTypes,
+  events: {
+    'executionContextCreated': {
+      executionContextId: t.String,
+      auxData: runtimeTypes.AuxData,
+    },
+    'executionContextDestroyed': {
+      executionContextId: t.String,
+    },
+    'console': {
+      executionContextId: t.String,
+      args: t.Array(runtimeTypes.RemoteObject),
+      type: t.String,
+      location: runtimeTypes.ScriptLocation,
+    },
+  },
+  methods: {
+    'evaluate': {
+      params: {
+        // Pass frameId here.
+        executionContextId: t.String,
+        expression: t.String,
+        returnByValue: t.Optional(t.Boolean),
+      },
+
+      returns: {
+        result: t.Optional(runtimeTypes.RemoteObject),
+        exceptionDetails: t.Optional(runtimeTypes.ExceptionDetails),
+      }
+    },
+    'callFunction': {
+      params: {
+        // Pass frameId here.
+        executionContextId: t.String,
+        functionDeclaration: t.String,
+        returnByValue: t.Optional(t.Boolean),
+        args: t.Array(runtimeTypes.CallFunctionArgument),
+      },
+
+      returns: {
+        result: t.Optional(runtimeTypes.RemoteObject),
+        exceptionDetails: t.Optional(runtimeTypes.ExceptionDetails),
+      }
+    },
+    'disposeObject': {
+      params: {
+        executionContextId: t.String,
+        objectId: t.String,
+      },
+    },
+
+    'getObjectProperties': {
+      params: {
+        executionContextId: t.String,
+        objectId: t.String,
+      },
+
+      returns: {
+        properties: t.Array(runtimeTypes.ObjectProperty),
+      }
+    },
+  },
+};
+
+const Page = {
+  targets: ['page'],
+
+  types: pageTypes,
+  events: {
+    'ready': {
+    },
+    'crashed': {
+    },
+    'eventFired': {
+      frameId: t.String,
+      name: t.Enum(['load', 'DOMContentLoaded']),
+    },
+    'uncaughtError': {
+      frameId: t.String,
+      message: t.String,
+      stack: t.String,
+    },
+    'frameAttached': {
+      frameId: t.String,
+      parentFrameId: t.Optional(t.String),
+    },
+    'frameDetached': {
+      frameId: t.String,
+    },
+    'navigationStarted': {
+      frameId: t.String,
+      navigationId: t.String,
+      url: t.String,
+    },
+    'navigationCommitted': {
+      frameId: t.String,
+      // |navigationId| can only be null in response to enable.
+      navigationId: t.Optional(t.String),
+      url: t.String,
+      // frame.id or frame.name
+      name: t.String,
+    },
+    'navigationAborted': {
+      frameId: t.String,
+      navigationId: t.String,
+      errorText: t.String,
+    },
+    'sameDocumentNavigation': {
+      frameId: t.String,
+      url: t.String,
+    },
+    'dialogOpened': {
+      dialogId: t.String,
+      type: t.Enum(['prompt', 'alert', 'confirm', 'beforeunload']),
+      message: t.String,
+      defaultValue: t.Optional(t.String),
+    },
+    'dialogClosed': {
+      dialogId: t.String,
+    },
+    'bindingCalled': {
+      executionContextId: t.String,
+      name: t.String,
+      payload: t.Any,
+    },
+    'linkClicked': {
+      phase: t.Enum(['before', 'after']),
+    },
+    'willOpenNewWindowAsynchronously': {},
+    'fileChooserOpened': {
+      executionContextId: t.String,
+      element: runtimeTypes.RemoteObject
+    },
+    'workerCreated': {
+      workerId: t.String,
+      frameId: t.String,
+      url: t.String,
+    },
+    'workerDestroyed': {
+      workerId: t.String,
+    },
+    'dispatchMessageFromWorker': {
+      workerId: t.String,
+      message: t.String,
+    },
+    'videoRecordingStarted': {
+      screencastId: t.String,
+      file: t.String,
+    },
+    'webSocketCreated': {
+      frameId: t.String,
+      wsid: t.String,
+      requestURL: t.String,
+    },
+    'webSocketOpened': {
+      frameId: t.String,
+      requestId: t.String,
+      wsid: t.String,
+      effectiveURL: t.String,
+    },
+    'webSocketClosed': {
+      frameId: t.String,
+      wsid: t.String,
+      error: t.String,
+    },
+    'webSocketFrameSent': {
+      frameId: t.String,
+      wsid: t.String,
+      opcode: t.Number,
+      data: t.String,
+    },
+    'webSocketFrameReceived': {
+      frameId: t.String,
+      wsid: t.String,
+      opcode: t.Number,
+      data: t.String,
+    },
+    'screencastFrame': {
+      data: t.String,
+      deviceWidth: t.Number,
+      deviceHeight: t.Number,
+    },
+  },
+
+  methods: {
+    'close': {
+      params: {
+        runBeforeUnload: t.Optional(t.Boolean),
+      },
+    },
+    'setFileInputFiles': {
+      params: {
+        frameId: t.String,
+        objectId: t.String,
+        files: t.Array(t.String),
+      },
+    },
+    'addBinding': {
+      params: {
+        worldName: t.Optional(t.String),
+        name: t.String,
+        script: t.String,
+      },
+    },
+    'setViewportSize': {
+      params: {
+        viewportSize: t.Nullable(pageTypes.Size),
+      },
+    },
+    'bringToFront': {
+      params: {
+      },
+    },
+    'setEmulatedMedia': {
+      params: {
+        type: t.Optional(t.Enum(['screen', 'print', ''])),
+        colorScheme: t.Optional(t.Enum(['dark', 'light', 'no-preference'])),
+        reducedMotion: t.Optional(t.Enum(['reduce', 'no-preference'])),
+        forcedColors: t.Optional(t.Enum(['active', 'none'])),
+      },
+    },
+    'setCacheDisabled': {
+      params: {
+        cacheDisabled: t.Boolean,
+      },
+    },
+    'describeNode': {
+      params: {
+        frameId: t.String,
+        objectId: t.String,
+      },
+      returns: {
+        contentFrameId: t.Optional(t.String),
+        ownerFrameId: t.Optional(t.String),
+      },
+    },
+    'scrollIntoViewIfNeeded': {
+      params: {
+        frameId: t.String,
+        objectId: t.String,
+        rect: t.Optional(pageTypes.Rect),
+      },
+    },
+    'setInitScripts': {
+      params: {
+        scripts: t.Array(pageTypes.InitScript)
+      }
+    },
+    'navigate': {
+      params: {
+        frameId: t.String,
+        url: t.String,
+        referer: t.Optional(t.String),
+      },
+      returns: {
+        navigationId: t.Nullable(t.String),
+        navigationURL: t.Nullable(t.String),
+      }
+    },
+    'goBack': {
+      params: {
+        frameId: t.String,
+      },
+      returns: {
+        success: t.Boolean,
+      },
+    },
+    'goForward': {
+      params: {
+        frameId: t.String,
+      },
+      returns: {
+        success: t.Boolean,
+      },
+    },
+    'reload': {
+      params: {
+        frameId: t.String,
+      },
+    },
+    'adoptNode': {
+      params: {
+        frameId: t.String,
+        objectId: t.String,
+        executionContextId: t.String,
+      },
+      returns: {
+        remoteObject: t.Nullable(runtimeTypes.RemoteObject),
+      },
+    },
+    'screenshot': {
+      params: {
+        mimeType: t.Enum(['image/png', 'image/jpeg']),
+        clip: pageTypes.Clip,
+        omitDeviceScaleFactor: t.Optional(t.Boolean),
+      },
+      returns: {
+        data: t.String,
+      }
+    },
+    'getContentQuads': {
+      params: {
+        frameId: t.String,
+        objectId: t.String,
+      },
+      returns: {
+        quads: t.Array(pageTypes.DOMQuad),
+      },
+    },
+    'dispatchKeyEvent': {
+      params: {
+        type: t.String,
+        key: t.String,
+        keyCode: t.Number,
+        location: t.Number,
+        code: t.String,
+        repeat: t.Boolean,
+        text: t.Optional(t.String),
+      }
+    },
+    'dispatchTouchEvent': {
+      params: {
+        type: t.Enum(['touchStart', 'touchEnd', 'touchMove', 'touchCancel']),
+        touchPoints: t.Array(pageTypes.TouchPoint),
+        modifiers: t.Number,
+      },
+      returns: {
+        defaultPrevented: t.Boolean,
+      }
+    },
+    'dispatchTapEvent': {
+      params: {
+        x: t.Number,
+        y: t.Number,
+        modifiers: t.Number,
+      }
+    },
+    'dispatchMouseEvent': {
+      params: {
+        type: t.String,
+        button: t.Number,
+        x: t.Number,
+        y: t.Number,
+        modifiers: t.Number,
+        clickCount: t.Optional(t.Number),
+        buttons: t.Number,
+      }
+    },
+    'dispatchWheelEvent': {
+      params: {
+        x: t.Number,
+        y: t.Number,
+        deltaX: t.Number,
+        deltaY: t.Number,
+        deltaZ: t.Number,
+        modifiers: t.Number,
+      }
+    },
+    'insertText': {
+      params: {
+        text: t.String,
+      }
+    },
+    'crash': {
+      params: {}
+    },
+    'handleDialog': {
+      params: {
+        dialogId: t.String,
+        accept: t.Boolean,
+        promptText: t.Optional(t.String),
+      },
+    },
+    'setInterceptFileChooserDialog': {
+      params: {
+        enabled: t.Boolean,
+      },
+    },
+    'sendMessageToWorker': {
+      params: {
+        frameId: t.String,
+        workerId: t.String,
+        message: t.String,
+      },
+    },
+    'startScreencast': {
+      params: {
+        width: t.Number,
+        height: t.Number,
+        quality: t.Number,
+      },
+      returns: {
+        screencastId: t.String,
+      },
+    },
+    'screencastFrameAck': {
+      params: {
+        screencastId: t.String,
+      },
+    },
+    'stopScreencast': {
+    },
+  },
+};
+
+
+const Accessibility = {
+  targets: ['page'],
+  types: axTypes,
+  events: {},
+  methods: {
+    'getFullAXTree': {
+      params: {
+        objectId: t.Optional(t.String),
+      },
+      returns: {
+        tree: axTypes.AXTree
+      },
+    }
+  }
+}
+
+this.protocol = {
+  domains: {Browser, Page, Runtime, Network, Accessibility},
+};
+this.checkScheme = checkScheme;
+this.EXPORTED_SYMBOLS = ['protocol', 'checkScheme'];
diff --git a/browser_patches/firefox-beta/juggler/screencast/HeadlessWindowCapturer.cpp b/browser_patches/firefox-beta/juggler/screencast/HeadlessWindowCapturer.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..88d1791dde449ba0fe461232764dd210fff2f41f
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/screencast/HeadlessWindowCapturer.cpp
@@ -0,0 +1,144 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "HeadlessWindowCapturer.h"
+
+#include "api/video/i420_buffer.h"
+#include "HeadlessWidget.h"
+#include "libyuv.h"
+#include "mozilla/EndianUtils.h"
+#include "mozilla/gfx/DataSurfaceHelpers.h"
+#include "rtc_base/ref_counted_object.h"
+#include "rtc_base/time_utils.h"
+#include "api/scoped_refptr.h"
+
+using namespace mozilla::widget;
+using namespace webrtc;
+
+namespace mozilla {
+
+rtc::scoped_refptr<webrtc::VideoCaptureModuleEx> HeadlessWindowCapturer::Create(HeadlessWidget* headlessWindow) {
+  return new rtc::RefCountedObject<HeadlessWindowCapturer>(headlessWindow);
+}
+
+HeadlessWindowCapturer::HeadlessWindowCapturer(mozilla::widget::HeadlessWidget* window)
+    : mWindow(window) {
+}
+HeadlessWindowCapturer::~HeadlessWindowCapturer() {
+  StopCapture();
+}
+
+
+void HeadlessWindowCapturer::RegisterCaptureDataCallback(rtc::VideoSinkInterface<webrtc::VideoFrame>* dataCallback) {
+  rtc::CritScope lock2(&_callBackCs);
+  _dataCallBacks.insert(dataCallback);
+}
+void HeadlessWindowCapturer::DeRegisterCaptureDataCallback(rtc::VideoSinkInterface<webrtc::VideoFrame>* dataCallback) {
+  rtc::CritScope lock2(&_callBackCs);
+  auto it = _dataCallBacks.find(dataCallback);
+  if (it != _dataCallBacks.end()) {
+    _dataCallBacks.erase(it);
+  }
+}
+
+void HeadlessWindowCapturer::RegisterRawFrameCallback(webrtc::RawFrameCallback* rawFrameCallback) {
+  rtc::CritScope lock2(&_callBackCs);
+  _rawFrameCallbacks.insert(rawFrameCallback);
+}
+
+void HeadlessWindowCapturer::DeRegisterRawFrameCallback(webrtc::RawFrameCallback* rawFrameCallback) {
+  rtc::CritScope lock2(&_callBackCs);
+  auto it = _rawFrameCallbacks.find(rawFrameCallback);
+  if (it != _rawFrameCallbacks.end()) {
+    _rawFrameCallbacks.erase(it);
+  }
+}
+
+void HeadlessWindowCapturer::NotifyFrameCaptured(const webrtc::VideoFrame& frame) {
+  rtc::CritScope lock2(&_callBackCs);
+  for (auto dataCallBack : _dataCallBacks)
+    dataCallBack->OnFrame(frame);
+}
+
+int32_t HeadlessWindowCapturer::StopCaptureIfAllClientsClose() {
+  if (_dataCallBacks.empty()) {
+    return StopCapture();
+  } else {
+    return 0;
+  }
+}
+
+int32_t HeadlessWindowCapturer::StartCapture(const webrtc::VideoCaptureCapability& capability) {
+  mWindow->SetSnapshotListener([this] (RefPtr<gfx::DataSourceSurface>&& dataSurface){
+    if (!NS_IsInCompositorThread()) {
+      fprintf(stderr, "SnapshotListener is called not on the Compositor thread!\n");
+      return;
+    }
+
+    if (dataSurface->GetFormat() != gfx::SurfaceFormat::B8G8R8A8) {
+      fprintf(stderr, "Unexpected snapshot surface format: %hhd\n", dataSurface->GetFormat());
+      return;
+    }
+
+    webrtc::VideoCaptureCapability frameInfo;
+    frameInfo.width = dataSurface->GetSize().width;
+    frameInfo.height = dataSurface->GetSize().height;
+#if MOZ_LITTLE_ENDIAN()
+    frameInfo.videoType = VideoType::kARGB;
+#else
+    frameInfo.videoType = VideoType::kBGRA;
+#endif
+
+    {
+      rtc::CritScope lock2(&_callBackCs);
+      for (auto rawFrameCallback : _rawFrameCallbacks) {
+        rawFrameCallback->OnRawFrame(dataSurface->GetData(), dataSurface->Stride(), frameInfo);
+      }
+      if (!_dataCallBacks.size())
+        return;
+    }
+
+    int width = dataSurface->GetSize().width;
+    int height = dataSurface->GetSize().height;
+    rtc::scoped_refptr<I420Buffer> buffer = I420Buffer::Create(width, height);
+
+    gfx::DataSourceSurface::ScopedMap map(dataSurface.get(), gfx::DataSourceSurface::MapType::READ);
+    if (!map.IsMapped()) {
+      fprintf(stderr, "Failed to map snapshot bytes!\n");
+      return;
+    }
+
+#if MOZ_LITTLE_ENDIAN()
+    const int conversionResult = libyuv::ARGBToI420(
+#else
+    const int conversionResult = libyuv::BGRAToI420(
+#endif
+        map.GetData(), map.GetStride(),
+        buffer->MutableDataY(), buffer->StrideY(),
+        buffer->MutableDataU(), buffer->StrideU(),
+        buffer->MutableDataV(), buffer->StrideV(),
+        width, height);
+    if (conversionResult != 0) {
+      fprintf(stderr, "Failed to convert capture frame to I420: %d\n", conversionResult);
+      return;
+    }
+
+    VideoFrame captureFrame(buffer, 0, rtc::TimeMillis(), kVideoRotation_0);
+    NotifyFrameCaptured(captureFrame);
+  });
+  return 0;
+}
+
+int32_t HeadlessWindowCapturer::StopCapture() {
+  if (!CaptureStarted())
+    return 0;
+  mWindow->SetSnapshotListener(nullptr);
+  return 0;
+}
+
+bool HeadlessWindowCapturer::CaptureStarted() {
+  return true;
+}
+
+}  // namespace mozilla
diff --git a/browser_patches/firefox-beta/juggler/screencast/HeadlessWindowCapturer.h b/browser_patches/firefox-beta/juggler/screencast/HeadlessWindowCapturer.h
new file mode 100644
index 0000000000000000000000000000000000000000..9f67565c04d41840ee2daeb48274f8147bc5831c
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/screencast/HeadlessWindowCapturer.h
@@ -0,0 +1,64 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#pragma once
+
+#include <memory>
+#include <set>
+#include "api/video/video_frame.h"
+#include "api/video/video_sink_interface.h"
+#include "modules/video_capture/video_capture.h"
+#include "rtc_base/deprecated/recursive_critical_section.h"
+#include "video_engine/desktop_capture_impl.h"
+
+class nsIWidget;
+
+namespace mozilla {
+
+namespace widget {
+class HeadlessWidget;
+}
+
+class HeadlessWindowCapturer : public webrtc::VideoCaptureModuleEx {
+ public:
+  static rtc::scoped_refptr<webrtc::VideoCaptureModuleEx> Create(mozilla::widget::HeadlessWidget*);
+
+  void RegisterCaptureDataCallback(
+      rtc::VideoSinkInterface<webrtc::VideoFrame>* dataCallback) override;
+  void DeRegisterCaptureDataCallback(
+      rtc::VideoSinkInterface<webrtc::VideoFrame>* dataCallback) override;
+  int32_t StopCaptureIfAllClientsClose() override;
+
+  void RegisterRawFrameCallback(webrtc::RawFrameCallback* rawFrameCallback) override;
+  void DeRegisterRawFrameCallback(webrtc::RawFrameCallback* rawFrameCallback) override;
+
+  int32_t SetCaptureRotation(webrtc::VideoRotation) override { return -1; }
+  bool SetApplyRotation(bool) override { return false; }
+  bool GetApplyRotation() override { return true; }
+
+  const char* CurrentDeviceName() const override { return "Headless window"; }
+
+  // Platform dependent
+  int32_t StartCapture(const webrtc::VideoCaptureCapability& capability) override;
+  bool FocusOnSelectedSource() override { return false; }
+  int32_t StopCapture() override;
+  bool CaptureStarted() override;
+  int32_t CaptureSettings(webrtc::VideoCaptureCapability& settings) override {
+    return -1;
+  }
+
+ protected:
+  HeadlessWindowCapturer(mozilla::widget::HeadlessWidget*);
+  ~HeadlessWindowCapturer() override;
+
+ private:
+  void NotifyFrameCaptured(const webrtc::VideoFrame& frame);
+
+  RefPtr<mozilla::widget::HeadlessWidget> mWindow;
+  rtc::RecursiveCriticalSection _callBackCs;
+  std::set<rtc::VideoSinkInterface<webrtc::VideoFrame>*> _dataCallBacks;
+  std::set<webrtc::RawFrameCallback*> _rawFrameCallbacks;
+};
+
+}  // namespace mozilla
diff --git a/browser_patches/firefox-beta/juggler/screencast/ScreencastEncoder.cpp b/browser_patches/firefox-beta/juggler/screencast/ScreencastEncoder.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..5891953392bb56d5af6e5717ce948902efb268fb
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/screencast/ScreencastEncoder.cpp
@@ -0,0 +1,382 @@
+/*
+ * Copyright (c) 2010, The WebM Project authors. All rights reserved.
+ * Copyright (c) 2013 The Chromium Authors. All rights reserved.
+ * Copyright (C) 2020 Microsoft Corporation.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "ScreencastEncoder.h"
+
+#include <algorithm>
+#include <libyuv.h>
+#include <vpx/vp8.h>
+#include <vpx/vp8cx.h>
+#include <vpx/vpx_encoder.h>
+#include "nsIThread.h"
+#include "nsThreadUtils.h"
+#include "WebMFileWriter.h"
+#include "api/video/video_frame.h"
+
+namespace mozilla {
+
+namespace {
+
+struct VpxCodecDeleter {
+  void operator()(vpx_codec_ctx_t* codec) {
+    if (codec) {
+        vpx_codec_err_t ret = vpx_codec_destroy(codec);
+        if (ret != VPX_CODEC_OK)
+            fprintf(stderr, "Failed to destroy codec: %s\n", vpx_codec_error(codec));
+    }
+  }
+};
+
+using ScopedVpxCodec = std::unique_ptr<vpx_codec_ctx_t, VpxCodecDeleter>;
+
+// Number of timebase unints per one frame.
+constexpr int timeScale = 1000;
+
+// Defines the dimension of a macro block. This is used to compute the active
+// map for the encoder.
+const int kMacroBlockSize = 16;
+
+void createImage(unsigned int width, unsigned int height,
+                 std::unique_ptr<vpx_image_t>& out_image,
+                 std::unique_ptr<uint8_t[]>& out_image_buffer,
+                 int& out_buffer_size) {
+  std::unique_ptr<vpx_image_t> image(new vpx_image_t());
+  memset(image.get(), 0, sizeof(vpx_image_t));
+
+  // libvpx seems to require both to be assigned.
+  image->d_w = width;
+  image->w = width;
+  image->d_h = height;
+  image->h = height;
+
+  // I420
+  image->fmt = VPX_IMG_FMT_YV12;
+  image->x_chroma_shift = 1;
+  image->y_chroma_shift = 1;
+
+  // libyuv's fast-path requires 16-byte aligned pointers and strides, so pad
+  // the Y, U and V planes' strides to multiples of 16 bytes.
+  const int y_stride = ((image->w - 1) & ~15) + 16;
+  const int uv_unaligned_stride = y_stride >> image->x_chroma_shift;
+  const int uv_stride = ((uv_unaligned_stride - 1) & ~15) + 16;
+
+  // libvpx accesses the source image in macro blocks, and will over-read
+  // if the image is not padded out to the next macroblock: crbug.com/119633.
+  // Pad the Y, U and V planes' height out to compensate.
+  // Assuming macroblocks are 16x16, aligning the planes' strides above also
+  // macroblock aligned them.
+  static_assert(kMacroBlockSize == 16, "macroblock_size_not_16");
+  const int y_rows = ((image->h - 1) & ~(kMacroBlockSize-1)) + kMacroBlockSize;
+  const int uv_rows = y_rows >> image->y_chroma_shift;
+
+  // Allocate a YUV buffer large enough for the aligned data & padding.
+  out_buffer_size = y_stride * y_rows + 2*uv_stride * uv_rows;
+  std::unique_ptr<uint8_t[]> image_buffer(new uint8_t[out_buffer_size]);
+
+  // Reset image value to 128 so we just need to fill in the y plane.
+  memset(image_buffer.get(), 128, out_buffer_size);
+
+  // Fill in the information for |image_|.
+  unsigned char* uchar_buffer =
+      reinterpret_cast<unsigned char*>(image_buffer.get());
+  image->planes[0] = uchar_buffer;
+  image->planes[1] = image->planes[0] + y_stride * y_rows;
+  image->planes[2] = image->planes[1] + uv_stride * uv_rows;
+  image->stride[0] = y_stride;
+  image->stride[1] = uv_stride;
+  image->stride[2] = uv_stride;
+
+  out_image = std::move(image);
+  out_image_buffer = std::move(image_buffer);
+}
+
+} // namespace
+
+class ScreencastEncoder::VPXFrame {
+public:
+    VPXFrame(rtc::scoped_refptr<webrtc::VideoFrameBuffer>&& buffer, const gfx::IntMargin& margin)
+        : m_frameBuffer(std::move(buffer))
+        , m_margin(margin)
+    { }
+
+    void setDuration(TimeDuration duration) { m_duration = duration; }
+    TimeDuration duration() const { return m_duration; }
+
+    void convertToVpxImage(vpx_image_t* image)
+    {
+        if (m_frameBuffer->type() != webrtc::VideoFrameBuffer::Type::kI420) {
+            fprintf(stderr, "convertToVpxImage unexpected frame buffer type: %d\n", m_frameBuffer->type());
+            return;
+        }
+
+        auto src = m_frameBuffer->GetI420();
+        const int y_stride = image->stride[VPX_PLANE_Y];
+        MOZ_ASSERT(image->stride[VPX_PLANE_U] == image->stride[VPX_PLANE_V]);
+        const int uv_stride = image->stride[1];
+        uint8_t* y_data = image->planes[VPX_PLANE_Y];
+        uint8_t* u_data = image->planes[VPX_PLANE_U];
+        uint8_t* v_data = image->planes[VPX_PLANE_V];
+
+        double src_width = src->width() - m_margin.LeftRight();
+        double src_height = src->height() - m_margin.top;
+        // YUV offsets must be even.
+        int yuvTopOffset = m_margin.top & 1 ? m_margin.top + 1 : m_margin.top;
+        int yuvLeftOffset = m_margin.left & 1 ? m_margin.left + 1 : m_margin.left;
+
+        if (src_width > image->w || src_height > image->h) {
+          double scale = std::min(image->w / src_width, image->h / src_height);
+          double dst_width = src_width * scale;
+          if (dst_width > image->w) {
+            src_width *= image->w / dst_width;
+            dst_width = image->w;
+          }
+          double dst_height = src_height * scale;
+          if (dst_height > image->h) {
+            src_height *= image->h / dst_height;
+            dst_height = image->h;
+          }
+          libyuv::I420Scale(src->DataY() + yuvTopOffset * src->StrideY() + yuvLeftOffset, src->StrideY(),
+                            src->DataU() + (yuvTopOffset * src->StrideU() + yuvLeftOffset) / 2, src->StrideU(),
+                            src->DataV() + (yuvTopOffset * src->StrideV() + yuvLeftOffset) / 2, src->StrideV(),
+                            src_width, src_height,
+                            y_data, y_stride,
+                            u_data, uv_stride,
+                            v_data, uv_stride,
+                            dst_width, dst_height,
+                            libyuv::kFilterBilinear);
+        } else {
+          int width = std::min<int>(image->w, src_width);
+          int height = std::min<int>(image->h, src_height);
+
+          libyuv::I420Copy(src->DataY() + yuvTopOffset * src->StrideY() + yuvLeftOffset, src->StrideY(),
+                           src->DataU() + (yuvTopOffset * src->StrideU() + yuvLeftOffset) / 2, src->StrideU(),
+                           src->DataV() + (yuvTopOffset * src->StrideV() + yuvLeftOffset) / 2, src->StrideV(),
+                           y_data, y_stride,
+                           u_data, uv_stride,
+                           v_data, uv_stride,
+                           width, height);
+        }
+    }
+
+private:
+    rtc::scoped_refptr<webrtc::VideoFrameBuffer> m_frameBuffer;
+    gfx::IntMargin m_margin;
+    TimeDuration m_duration;
+};
+
+
+class ScreencastEncoder::VPXCodec {
+public:
+    VPXCodec(ScopedVpxCodec codec, vpx_codec_enc_cfg_t cfg, FILE* file)
+        : m_codec(std::move(codec))
+        , m_cfg(cfg)
+        , m_file(file)
+        , m_writer(new WebMFileWriter(file, &m_cfg))
+    {
+        nsresult rv = NS_NewNamedThread("Screencast enc", getter_AddRefs(m_encoderQueue));
+        if (rv != NS_OK) {
+          fprintf(stderr, "ScreencastEncoder::VPXCodec failed to spawn thread %d\n", rv);
+          return;
+        }
+
+        createImage(cfg.g_w, cfg.g_h, m_image, m_imageBuffer, m_imageBufferSize);
+    }
+
+    ~VPXCodec() {
+      m_encoderQueue->Shutdown();
+      m_encoderQueue = nullptr;
+    }
+
+    void encodeFrameAsync(std::unique_ptr<VPXFrame>&& frame)
+    {
+        m_encoderQueue->Dispatch(NS_NewRunnableFunction("VPXCodec::encodeFrameAsync", [this, frame = std::move(frame)] {
+            memset(m_imageBuffer.get(), 128, m_imageBufferSize);
+            frame->convertToVpxImage(m_image.get());
+
+            double frameCount = frame->duration().ToSeconds() * fps;
+            // For long duration repeat frame at 1 fps to ensure last frame duration is short enough.
+            // TODO: figure out why simply passing duration doesn't work well.
+            for (;frameCount > 1.5; frameCount -= 1) {
+                encodeFrame(m_image.get(), timeScale);
+            }
+            encodeFrame(m_image.get(), std::max<int>(1, frameCount * timeScale));
+        }));
+    }
+
+    void finishAsync(std::function<void()>&& callback)
+    {
+        m_encoderQueue->Dispatch(NS_NewRunnableFunction("VPXCodec::finishAsync", [this, callback = std::move(callback)] {
+            finish();
+            callback();
+        }));
+    }
+
+private:
+    bool encodeFrame(vpx_image_t *img, int duration)
+    {
+        vpx_codec_iter_t iter = nullptr;
+        const vpx_codec_cx_pkt_t *pkt = nullptr;
+        int flags = 0;
+        const vpx_codec_err_t res = vpx_codec_encode(m_codec.get(), img, m_pts, duration, flags, VPX_DL_REALTIME);
+        if (res != VPX_CODEC_OK) {
+            fprintf(stderr, "Failed to encode frame: %s\n", vpx_codec_error(m_codec.get()));
+            return false;
+        }
+
+        bool gotPkts = false;
+        while ((pkt = vpx_codec_get_cx_data(m_codec.get(), &iter)) != nullptr) {
+            gotPkts = true;
+
+            if (pkt->kind == VPX_CODEC_CX_FRAME_PKT) {
+                m_writer->writeFrame(pkt);
+                ++m_frameCount;
+                // fprintf(stderr, "  #%03d %spts=%" PRId64 " sz=%zd\n", m_frameCount, (pkt->data.frame.flags & VPX_FRAME_IS_KEY) != 0 ? "[K] " : "", pkt->data.frame.pts, pkt->data.frame.sz);
+                m_pts += pkt->data.frame.duration;
+            }
+        }
+
+        return gotPkts;
+    }
+
+    void finish()
+    {
+        // Flush encoder.
+        while (encodeFrame(nullptr, 1))
+            ++m_frameCount;
+
+        m_writer->finish();
+        fclose(m_file);
+        // fprintf(stderr, "ScreencastEncoder::finish %d frames\n", m_frameCount);
+    }
+
+    RefPtr<nsIThread> m_encoderQueue;
+    ScopedVpxCodec m_codec;
+    vpx_codec_enc_cfg_t m_cfg;
+    FILE* m_file { nullptr };
+    std::unique_ptr<WebMFileWriter> m_writer;
+    int m_frameCount { 0 };
+    int64_t m_pts { 0 };
+    std::unique_ptr<uint8_t[]> m_imageBuffer;
+    int m_imageBufferSize { 0 };
+    std::unique_ptr<vpx_image_t> m_image;
+};
+
+ScreencastEncoder::ScreencastEncoder(std::unique_ptr<VPXCodec> vpxCodec, const gfx::IntMargin& margin)
+    : m_vpxCodec(std::move(vpxCodec))
+    , m_margin(margin)
+{
+}
+
+ScreencastEncoder::~ScreencastEncoder()
+{
+}
+
+std::unique_ptr<ScreencastEncoder> ScreencastEncoder::create(nsCString& errorString, const nsCString& filePath, int width, int height, const gfx::IntMargin& margin)
+{
+    vpx_codec_iface_t* codec_interface = vpx_codec_vp8_cx();
+    if (!codec_interface) {
+        errorString = "Codec not found.";
+        return nullptr;
+    }
+
+    if (width <= 0 || height <= 0 || (width % 2) != 0 || (height % 2) != 0) {
+        errorString.AppendPrintf("Invalid frame size: %dx%d", width, height);
+        return nullptr;
+    }
+
+    vpx_codec_enc_cfg_t cfg;
+    memset(&cfg, 0, sizeof(cfg));
+    vpx_codec_err_t error = vpx_codec_enc_config_default(codec_interface, &cfg, 0);
+    if (error) {
+        errorString.AppendPrintf("Failed to get default codec config: %s", vpx_codec_err_to_string(error));
+        return nullptr;
+    }
+
+    cfg.g_w = width;
+    cfg.g_h = height;
+    cfg.g_timebase.num = 1;
+    cfg.g_timebase.den = fps * timeScale;
+    cfg.g_error_resilient = VPX_ERROR_RESILIENT_DEFAULT;
+
+    ScopedVpxCodec codec(new vpx_codec_ctx_t);
+    if (vpx_codec_enc_init(codec.get(), codec_interface, &cfg, 0)) {
+        errorString.AppendPrintf("Failed to initialize encoder: %s", vpx_codec_error(codec.get()));
+        return nullptr;
+    }
+
+    FILE* file = fopen(filePath.get(), "wb");
+    if (!file) {
+        errorString.AppendPrintf("Failed to open file '%s' for writing: %s", filePath.get(), strerror(errno));
+        return nullptr;
+    }
+
+    std::unique_ptr<VPXCodec> vpxCodec(new VPXCodec(std::move(codec), cfg, file));
+    // fprintf(stderr, "ScreencastEncoder initialized with: %s\n", vpx_codec_iface_name(codec_interface));
+    return std::make_unique<ScreencastEncoder>(std::move(vpxCodec), margin);
+}
+
+void ScreencastEncoder::flushLastFrame()
+{
+    TimeStamp now = TimeStamp::Now();
+    if (m_lastFrameTimestamp) {
+        // If previous frame encoding failed for some rason leave the timestampt intact.
+        if (!m_lastFrame)
+            return;
+
+        m_lastFrame->setDuration(now - m_lastFrameTimestamp);
+        m_vpxCodec->encodeFrameAsync(std::move(m_lastFrame));
+    }
+    m_lastFrameTimestamp = now;
+}
+
+void ScreencastEncoder::encodeFrame(const webrtc::VideoFrame& videoFrame)
+{
+    // fprintf(stderr, "ScreencastEncoder::encodeFrame\n");
+    flushLastFrame();
+
+    m_lastFrame = std::make_unique<VPXFrame>(videoFrame.video_frame_buffer(), m_margin);
+}
+
+void ScreencastEncoder::finish(std::function<void()>&& callback)
+{
+    if (!m_vpxCodec) {
+        callback();
+        return;
+    }
+
+    flushLastFrame();
+    m_vpxCodec->finishAsync([callback = std::move(callback)] () mutable {
+        NS_DispatchToMainThread(NS_NewRunnableFunction("ScreencastEncoder::finish callback", std::move(callback)));
+    });
+}
+
+
+} // namespace mozilla
diff --git a/browser_patches/firefox-beta/juggler/screencast/ScreencastEncoder.h b/browser_patches/firefox-beta/juggler/screencast/ScreencastEncoder.h
new file mode 100644
index 0000000000000000000000000000000000000000..883ad01011cf6da0c4aec3e45d85167af5589c86
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/screencast/ScreencastEncoder.h
@@ -0,0 +1,45 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#pragma once
+
+#include <functional>
+#include <memory>
+#include "mozilla/gfx/Rect.h"
+#include "mozilla/Maybe.h"
+#include "mozilla/TimeStamp.h"
+#include "nsISupportsImpl.h"
+#include "nsStringFwd.h"
+
+namespace webrtc {
+class VideoFrame;
+}
+
+namespace mozilla {
+
+class ScreencastEncoder {
+public:
+    static constexpr int fps = 25;
+
+    static std::unique_ptr<ScreencastEncoder> create(nsCString& errorString, const nsCString& filePath, int width, int height, const gfx::IntMargin& margin);
+
+    class VPXCodec;
+    ScreencastEncoder(std::unique_ptr<VPXCodec>, const gfx::IntMargin& margin);
+    ~ScreencastEncoder();
+
+    void encodeFrame(const webrtc::VideoFrame& videoFrame);
+
+    void finish(std::function<void()>&& callback);
+
+private:
+    void flushLastFrame();
+
+    std::unique_ptr<VPXCodec> m_vpxCodec;
+    gfx::IntMargin m_margin;
+    TimeStamp m_lastFrameTimestamp;
+    class VPXFrame;
+    std::unique_ptr<VPXFrame> m_lastFrame;
+};
+
+} // namespace mozilla
diff --git a/browser_patches/firefox-beta/juggler/screencast/WebMFileWriter.cpp b/browser_patches/firefox-beta/juggler/screencast/WebMFileWriter.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..f720b300f25187fc97fd277bd91e7efd3734f132
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/screencast/WebMFileWriter.cpp
@@ -0,0 +1,50 @@
+/*
+ *  Copyright (c) 2014 The WebM project authors. All Rights Reserved.
+ */
+
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "WebMFileWriter.h"
+
+#include <string>
+#include "mkvmuxer/mkvmuxerutil.h"
+
+namespace mozilla {
+
+WebMFileWriter::WebMFileWriter(FILE* file, vpx_codec_enc_cfg_t* cfg)
+    : m_cfg(cfg)
+    , m_writer(new mkvmuxer::MkvWriter(file))
+    , m_segment(new mkvmuxer::Segment()) {
+  m_segment->Init(m_writer.get());
+  m_segment->set_mode(mkvmuxer::Segment::kFile);
+  m_segment->OutputCues(true);
+
+  mkvmuxer::SegmentInfo* info = m_segment->GetSegmentInfo();
+  std::string version = "Playwright " + std::string(vpx_codec_version_str());
+  info->set_writing_app(version.c_str());
+
+  // Add vp8 track.
+  m_videoTrackId = m_segment->AddVideoTrack(
+      static_cast<int>(m_cfg->g_w), static_cast<int>(m_cfg->g_h), 0);
+  if (!m_videoTrackId) {
+    fprintf(stderr, "Failed to add video track\n");
+  }
+}
+
+WebMFileWriter::~WebMFileWriter() {}
+
+void WebMFileWriter::writeFrame(const vpx_codec_cx_pkt_t* pkt) {
+  int64_t pts_ns = pkt->data.frame.pts * 1000000000ll * m_cfg->g_timebase.num /
+                   m_cfg->g_timebase.den;
+  m_segment->AddFrame(static_cast<uint8_t*>(pkt->data.frame.buf),
+                      pkt->data.frame.sz, m_videoTrackId, pts_ns,
+                      pkt->data.frame.flags & VPX_FRAME_IS_KEY);
+}
+
+void WebMFileWriter::finish() {
+  m_segment->Finalize();
+}
+
+} // namespace mozilla
diff --git a/browser_patches/firefox-beta/juggler/screencast/WebMFileWriter.h b/browser_patches/firefox-beta/juggler/screencast/WebMFileWriter.h
new file mode 100644
index 0000000000000000000000000000000000000000..4a7fd06e6c3e749f85616886850026089a464d07
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/screencast/WebMFileWriter.h
@@ -0,0 +1,32 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#pragma once
+
+#include <memory>
+#include <stdio.h>
+#include <stdlib.h>
+#include "vpx/vpx_encoder.h"
+
+#include "mkvmuxer/mkvmuxer.h"
+#include "mkvmuxer/mkvwriter.h"
+
+namespace mozilla {
+
+class WebMFileWriter {
+public:
+    WebMFileWriter(FILE*, vpx_codec_enc_cfg_t* cfg);
+    ~WebMFileWriter();
+
+    void writeFrame(const vpx_codec_cx_pkt_t* pkt);
+    void finish();
+
+private:
+    vpx_codec_enc_cfg_t* m_cfg = nullptr;
+    std::unique_ptr<mkvmuxer::MkvWriter> m_writer;
+    std::unique_ptr<mkvmuxer::Segment> m_segment;
+    uint64_t m_videoTrackId = 0;
+};
+
+} // namespace mozilla
diff --git a/browser_patches/firefox-beta/juggler/screencast/components.conf b/browser_patches/firefox-beta/juggler/screencast/components.conf
new file mode 100644
index 0000000000000000000000000000000000000000..6298739122ea57dd2f3093bbc66d1fb047b689c7
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/screencast/components.conf
@@ -0,0 +1,15 @@
+# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+Classes = [
+    {
+        'cid': '{d8c4d9e0-9462-445e-9e43-68d3872ad1de}',
+        'contract_ids': ['@mozilla.org/juggler/screencast;1'],
+        'type': 'nsIScreencastService',
+        'constructor': 'mozilla::nsScreencastService::GetSingleton',
+        'headers': ['/juggler/screencast/nsScreencastService.h'],
+    },
+]
diff --git a/browser_patches/firefox-beta/juggler/screencast/moz.build b/browser_patches/firefox-beta/juggler/screencast/moz.build
new file mode 100644
index 0000000000000000000000000000000000000000..e21b177c3965ce909242db0c70fd632cc6e868ba
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/screencast/moz.build
@@ -0,0 +1,49 @@
+# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+XPIDL_SOURCES += [
+    'nsIScreencastService.idl',
+]
+
+XPIDL_MODULE = 'jugglerscreencast'
+
+SOURCES += [
+    'HeadlessWindowCapturer.cpp',
+    'nsScreencastService.cpp',
+    'ScreencastEncoder.cpp',
+]
+
+XPCOM_MANIFESTS += [
+    'components.conf',
+]
+
+LOCAL_INCLUDES += [
+    '/dom/media/systemservices',
+    '/media/libyuv/libyuv/include',
+    '/third_party/libwebrtc',
+    '/third_party/libwebrtc/third_party/abseil-cpp',
+]
+
+LOCAL_INCLUDES += [
+    '/widget',
+    '/widget/headless',
+]
+
+LOCAL_INCLUDES += [
+    '/third_party/aom/third_party/libwebm',
+]
+
+SOURCES += [
+    '/third_party/aom/third_party/libwebm/mkvmuxer/mkvmuxer.cc',
+    '/third_party/aom/third_party/libwebm/mkvmuxer/mkvmuxerutil.cc',
+    '/third_party/aom/third_party/libwebm/mkvmuxer/mkvwriter.cc',
+    'WebMFileWriter.cpp',
+]
+
+include('/dom/media/webrtc/third_party_build/webrtc.mozbuild')
+include('/ipc/chromium/chromium-config.mozbuild')
+
+FINAL_LIBRARY = 'xul'
diff --git a/browser_patches/firefox-beta/juggler/screencast/nsIScreencastService.idl b/browser_patches/firefox-beta/juggler/screencast/nsIScreencastService.idl
new file mode 100644
index 0000000000000000000000000000000000000000..16c94371ba1c53f0cfb0b58dce8a673b4ea11b1a
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/screencast/nsIScreencastService.idl
@@ -0,0 +1,31 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "nsISupports.idl"
+
+interface nsIDocShell;
+
+[scriptable, uuid(0b5d32c4-aeeb-11eb-8529-0242ac130003)]
+interface nsIScreencastServiceClient : nsISupports
+{
+  void screencastFrame(in AString frame, in uint32_t deviceWidth, in uint32_t deviceHeight);
+
+  void screencastStopped();
+};
+
+/**
+ * Service for recording window video.
+ */
+[scriptable, uuid(d8c4d9e0-9462-445e-9e43-68d3872ad1de)]
+interface nsIScreencastService : nsISupports
+{
+  AString startVideoRecording(in nsIScreencastServiceClient client, in nsIDocShell docShell, in boolean isVideo, in ACString fileName, in uint32_t width, in uint32_t height, in uint32_t quality, in uint32_t viewportWidth, in uint32_t viewportHeight, in uint32_t offset_top);
+
+  /**
+   * Will emit 'juggler-screencast-stopped' when the video file is saved.
+   */
+  void stopVideoRecording(in AString sessionId);
+
+  void screencastFrameAck(in AString sessionId);
+};
diff --git a/browser_patches/firefox-beta/juggler/screencast/nsScreencastService.cpp b/browser_patches/firefox-beta/juggler/screencast/nsScreencastService.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..20a766dc3735de0fda7e4bf869a9f67b53e2611e
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/screencast/nsScreencastService.cpp
@@ -0,0 +1,378 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "nsScreencastService.h"
+
+#include "ScreencastEncoder.h"
+#include "HeadlessWidget.h"
+#include "HeadlessWindowCapturer.h"
+#include "mozilla/Base64.h"
+#include "mozilla/ClearOnShutdown.h"
+#include "mozilla/PresShell.h"
+#include "mozilla/StaticPtr.h"
+#include "nsIDocShell.h"
+#include "nsIObserverService.h"
+#include "nsIRandomGenerator.h"
+#include "nsISupportsPrimitives.h"
+#include "nsThreadManager.h"
+#include "nsView.h"
+#include "nsViewManager.h"
+#include "modules/desktop_capture/desktop_capturer.h"
+#include "modules/desktop_capture/desktop_capture_options.h"
+#include "modules/desktop_capture/desktop_frame.h"
+#include "modules/video_capture/video_capture.h"
+#include "mozilla/widget/PlatformWidgetTypes.h"
+#include "video_engine/desktop_capture_impl.h"
+extern "C" {
+#include "jpeglib.h"
+}
+#include <libyuv.h>
+
+using namespace mozilla::widget;
+
+namespace mozilla {
+
+NS_IMPL_ISUPPORTS(nsScreencastService, nsIScreencastService)
+
+namespace {
+
+const int kMaxFramesInFlight = 1;
+
+StaticRefPtr<nsScreencastService> gScreencastService;
+
+rtc::scoped_refptr<webrtc::VideoCaptureModuleEx> CreateWindowCapturer(nsIWidget* widget) {
+  if (gfxPlatform::IsHeadless()) {
+    HeadlessWidget* headlessWidget = static_cast<HeadlessWidget*>(widget);
+    return HeadlessWindowCapturer::Create(headlessWidget);
+  }
+  uintptr_t rawWindowId = reinterpret_cast<uintptr_t>(widget->GetNativeData(NS_NATIVE_WINDOW_WEBRTC_DEVICE_ID));
+  if (!rawWindowId) {
+    fprintf(stderr, "Failed to get native window id\n");
+    return nullptr;
+  }
+  nsCString windowId;
+  windowId.AppendPrintf("%" PRIuPTR, rawWindowId);
+  bool captureCursor = false;
+  static int moduleId = 0;
+  return webrtc::DesktopCaptureImpl::Create(++moduleId, windowId.get(), CaptureDeviceType::Window, captureCursor);
+}
+
+nsresult generateUid(nsString& uid) {
+  nsresult rv = NS_OK;
+  nsCOMPtr<nsIRandomGenerator> rg = do_GetService("@mozilla.org/security/random-generator;1", &rv);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  uint8_t* buffer;
+  const int kLen = 16;
+  rv = rg->GenerateRandomBytes(kLen, &buffer);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  for (int i = 0; i < kLen; i++) {
+    uid.AppendPrintf("%02x", buffer[i]);
+  }
+  free(buffer);
+  return rv;
+}
+}
+
+class nsScreencastService::Session : public rtc::VideoSinkInterface<webrtc::VideoFrame>,
+                                     public webrtc::RawFrameCallback {
+  Session(
+    nsIScreencastServiceClient* client,
+    rtc::scoped_refptr<webrtc::VideoCaptureModuleEx>&& capturer,
+    std::unique_ptr<ScreencastEncoder> encoder,
+    int width, int height,
+    int viewportWidth, int viewportHeight,
+    gfx::IntMargin margin,
+    uint32_t jpegQuality)
+      : mClient(client)
+      , mCaptureModule(std::move(capturer))
+      , mEncoder(std::move(encoder))
+      , mJpegQuality(jpegQuality)
+      , mWidth(width)
+      , mHeight(height)
+      , mViewportWidth(viewportWidth)
+      , mViewportHeight(viewportHeight)
+      , mMargin(margin) {
+  }
+  ~Session() override = default;
+
+ public:
+  NS_INLINE_DECL_THREADSAFE_REFCOUNTING(Session)
+  static RefPtr<Session> Create(
+    nsIScreencastServiceClient* client,
+    rtc::scoped_refptr<webrtc::VideoCaptureModuleEx>&& capturer,
+    std::unique_ptr<ScreencastEncoder> encoder,
+    int width, int height,
+    int viewportWidth, int viewportHeight,
+    gfx::IntMargin margin,
+    uint32_t jpegQuality) {
+    return do_AddRef(new Session(client, std::move(capturer), std::move(encoder), width, height, viewportWidth, viewportHeight, margin, jpegQuality));
+  }
+
+  bool Start() {
+    webrtc::VideoCaptureCapability capability;
+    // The size is ignored in fact.
+    capability.width = 1280;
+    capability.height = 960;
+    capability.maxFPS = ScreencastEncoder::fps;
+    capability.videoType = webrtc::VideoType::kI420;
+    int error = mCaptureModule->StartCapture(capability);
+    if (error) {
+      fprintf(stderr, "StartCapture error %d\n", error);
+      return false;
+    }
+
+    if (mEncoder)
+      mCaptureModule->RegisterCaptureDataCallback(this);
+    else
+      mCaptureModule->RegisterRawFrameCallback(this);
+    return true;
+  }
+
+  void Stop() {
+    if (mStopped) {
+      fprintf(stderr, "Screencast session has already been stopped\n");
+      return;
+    }
+    mStopped = true;
+    if (mEncoder)
+      mCaptureModule->DeRegisterCaptureDataCallback(this);
+    else
+      mCaptureModule->DeRegisterRawFrameCallback(this);
+    int error = mCaptureModule->StopCapture();
+    if (error) {
+      fprintf(stderr, "StopCapture error %d\n", error);
+    }
+    if (mEncoder) {
+      mEncoder->finish([this, protect = RefPtr{this}] {
+        NS_DispatchToMainThread(NS_NewRunnableFunction(
+            "NotifyScreencastStopped", [this, protect = std::move(protect)]() -> void {
+              mClient->ScreencastStopped();
+            }));
+      });
+    } else {
+      mClient->ScreencastStopped();
+    }
+  }
+
+  void ScreencastFrameAck() {
+    if (mFramesInFlight.load() == 0) {
+      fprintf(stderr, "ScreencastFrameAck is called while there are no inflight frames\n");
+      return;
+    }
+    mFramesInFlight.fetch_sub(1);
+  }
+
+  // These callbacks end up running on the VideoCapture thread.
+  void OnFrame(const webrtc::VideoFrame& videoFrame) override {
+    if (!mEncoder)
+      return;
+    mEncoder->encodeFrame(videoFrame);
+  }
+
+  // These callbacks end up running on the VideoCapture thread.
+  void OnRawFrame(uint8_t* videoFrame, size_t videoFrameStride, const webrtc::VideoCaptureCapability& frameInfo) override {
+    int pageWidth = frameInfo.width - mMargin.LeftRight();
+    int pageHeight = frameInfo.height - mMargin.TopBottom();
+    // Frame size is 1x1 when browser window is minimized.
+    if (pageWidth <= 1 || pageHeight <= 1)
+      return;
+    // Headed Firefox brings sizes in sync slowly.
+    if (mViewportWidth && pageWidth > mViewportWidth)
+      pageWidth = mViewportWidth;
+    if (mViewportHeight && pageHeight > mViewportHeight)
+      pageHeight = mViewportHeight;
+
+    if (mFramesInFlight.load() >= kMaxFramesInFlight)
+      return;
+
+    int screenshotWidth = pageWidth;
+    int screenshotHeight = pageHeight;
+    int screenshotTopMargin = mMargin.TopBottom();
+    std::unique_ptr<uint8_t[]> canvas;
+    uint8_t* canvasPtr = videoFrame;
+    int canvasStride = videoFrameStride;
+
+    if (mWidth < pageWidth || mHeight < pageHeight) {
+      double scale = std::min(1., std::min((double)mWidth / pageWidth, (double)mHeight / pageHeight));
+      int canvasWidth = frameInfo.width * scale;
+      int canvasHeight = frameInfo.height * scale;
+      canvasStride = canvasWidth * 4;
+
+      screenshotWidth *= scale;
+      screenshotHeight *= scale;
+      screenshotTopMargin *= scale;
+
+      canvas.reset(new uint8_t[canvasWidth * canvasHeight * 4]);
+      canvasPtr = canvas.get();
+      libyuv::ARGBScale(videoFrame,
+                        videoFrameStride,
+                        frameInfo.width,
+                        frameInfo.height,
+                        canvasPtr,
+                        canvasStride,
+                        canvasWidth,
+                        canvasHeight,
+                        libyuv::kFilterBilinear);
+    }
+
+    jpeg_compress_struct info;
+    jpeg_error_mgr error;
+    info.err = jpeg_std_error(&error);
+    jpeg_create_compress(&info);
+
+    unsigned char* bufferPtr = nullptr;
+    unsigned long bufferSize;
+    jpeg_mem_dest(&info, &bufferPtr, &bufferSize);
+
+    info.image_width = screenshotWidth;
+    info.image_height = screenshotHeight;
+
+#if MOZ_LITTLE_ENDIAN()
+    if (frameInfo.videoType == webrtc::VideoType::kARGB)
+      info.in_color_space = JCS_EXT_BGRA;
+    if (frameInfo.videoType == webrtc::VideoType::kBGRA)
+      info.in_color_space = JCS_EXT_ARGB;
+#else
+    if (frameInfo.videoType == webrtc::VideoType::kARGB)
+      info.in_color_space = JCS_EXT_ARGB;
+    if (frameInfo.videoType == webrtc::VideoType::kBGRA)
+      info.in_color_space = JCS_EXT_BGRA;
+#endif
+
+    // # of color components in input image
+    info.input_components = 4;
+
+    jpeg_set_defaults(&info);
+    jpeg_set_quality(&info, mJpegQuality, true);
+
+    jpeg_start_compress(&info, true);
+    while (info.next_scanline < info.image_height) {
+      JSAMPROW row = canvasPtr + (screenshotTopMargin + info.next_scanline) * canvasStride;
+      if (jpeg_write_scanlines(&info, &row, 1) != 1) {
+        fprintf(stderr, "JPEG library failed to encode line\n");
+        break;
+      }
+    }
+
+    jpeg_finish_compress(&info);
+    jpeg_destroy_compress(&info);
+
+    nsCString base64;
+    nsresult rv = mozilla::Base64Encode(reinterpret_cast<char *>(bufferPtr), bufferSize, base64);
+    free(bufferPtr);
+    if (NS_WARN_IF(NS_FAILED(rv))) {
+      return;
+    }
+
+    mFramesInFlight.fetch_add(1);
+    NS_DispatchToMainThread(NS_NewRunnableFunction(
+        "NotifyScreencastFrame", [this, protect = RefPtr{this}, base64, pageWidth, pageHeight]() -> void {
+          if (mStopped)
+            return;
+          NS_ConvertUTF8toUTF16 utf16(base64);
+          mClient->ScreencastFrame(utf16, pageWidth, pageHeight);
+        }));
+  }
+
+ private:
+  RefPtr<nsIScreencastServiceClient> mClient;
+  rtc::scoped_refptr<webrtc::VideoCaptureModuleEx> mCaptureModule;
+  std::unique_ptr<ScreencastEncoder> mEncoder;
+  uint32_t mJpegQuality;
+  bool mStopped = false;
+  std::atomic<uint32_t> mFramesInFlight = 0;
+  int mWidth;
+  int mHeight;
+  int mViewportWidth;
+  int mViewportHeight;
+  gfx::IntMargin mMargin;
+};
+
+
+// static
+already_AddRefed<nsIScreencastService> nsScreencastService::GetSingleton() {
+  if (gScreencastService) {
+    return do_AddRef(gScreencastService);
+  }
+
+  gScreencastService = new nsScreencastService();
+  // ClearOnShutdown(&gScreencastService);
+  return do_AddRef(gScreencastService);
+}
+
+nsScreencastService::nsScreencastService() = default;
+
+nsScreencastService::~nsScreencastService() {
+}
+
+nsresult nsScreencastService::StartVideoRecording(nsIScreencastServiceClient* aClient, nsIDocShell* aDocShell, bool isVideo, const nsACString& aVideoFileName, uint32_t width, uint32_t height, uint32_t quality, uint32_t viewportWidth, uint32_t viewportHeight, uint32_t offsetTop, nsAString& sessionId) {
+  MOZ_RELEASE_ASSERT(NS_IsMainThread(), "Screencast service must be started on the Main thread.");
+
+  PresShell* presShell = aDocShell->GetPresShell();
+  if (!presShell)
+    return NS_ERROR_UNEXPECTED;
+  nsViewManager* viewManager = presShell->GetViewManager();
+  if (!viewManager)
+    return NS_ERROR_UNEXPECTED;
+  nsView* view = viewManager->GetRootView();
+  if (!view)
+    return NS_ERROR_UNEXPECTED;
+  nsIWidget* widget = view->GetWidget();
+
+  rtc::scoped_refptr<webrtc::VideoCaptureModuleEx> capturer = CreateWindowCapturer(widget);
+  if (!capturer)
+    return NS_ERROR_FAILURE;
+
+  gfx::IntMargin margin;
+  auto bounds = widget->GetScreenBounds().ToUnknownRect();
+  auto clientBounds = widget->GetClientBounds().ToUnknownRect();
+  // Crop the image to exclude frame (if any).
+  margin = bounds - clientBounds;
+  // Crop the image to exclude controls.
+  margin.top += offsetTop;
+
+  nsCString error;
+  std::unique_ptr<ScreencastEncoder> encoder;
+  if (isVideo) {
+    encoder = ScreencastEncoder::create(error, PromiseFlatCString(aVideoFileName), width, height, margin);
+    if (!encoder) {
+      fprintf(stderr, "Failed to create ScreencastEncoder: %s\n", error.get());
+      return NS_ERROR_FAILURE;
+    }
+  }
+
+  nsString uid;
+  nsresult rv = generateUid(uid);
+  NS_ENSURE_SUCCESS(rv, rv);
+  sessionId = uid;
+
+  auto session = Session::Create(aClient, std::move(capturer), std::move(encoder), width, height, viewportWidth, viewportHeight, margin, isVideo ? 0 : quality);
+  if (!session->Start())
+    return NS_ERROR_FAILURE;
+  mIdToSession.emplace(sessionId, std::move(session));
+  return NS_OK;
+}
+
+nsresult nsScreencastService::StopVideoRecording(const nsAString& aSessionId) {
+  nsString sessionId(aSessionId);
+  auto it = mIdToSession.find(sessionId);
+  if (it == mIdToSession.end())
+    return NS_ERROR_INVALID_ARG;
+  it->second->Stop();
+  mIdToSession.erase(it);
+  return NS_OK;
+}
+
+nsresult nsScreencastService::ScreencastFrameAck(const nsAString& aSessionId) {
+  nsString sessionId(aSessionId);
+  auto it = mIdToSession.find(sessionId);
+  if (it == mIdToSession.end())
+    return NS_ERROR_INVALID_ARG;
+  it->second->ScreencastFrameAck();
+  return NS_OK;
+}
+
+}  // namespace mozilla
diff --git a/browser_patches/firefox-beta/juggler/screencast/nsScreencastService.h b/browser_patches/firefox-beta/juggler/screencast/nsScreencastService.h
new file mode 100644
index 0000000000000000000000000000000000000000..419603e0e69b0a1ca7033ba7c7dfc19a0e85b422
--- /dev/null
+++ b/browser_patches/firefox-beta/juggler/screencast/nsScreencastService.h
@@ -0,0 +1,29 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#pragma once
+
+#include <memory>
+#include <map>
+#include "nsIScreencastService.h"
+
+namespace mozilla {
+
+class nsScreencastService final : public nsIScreencastService {
+ public:
+  NS_DECL_ISUPPORTS
+  NS_DECL_NSISCREENCASTSERVICE
+
+  static already_AddRefed<nsIScreencastService> GetSingleton();
+
+  nsScreencastService();
+
+ private:
+  ~nsScreencastService();
+
+  class Session;
+  std::map<nsString, RefPtr<Session>> mIdToSession;
+};
+
+}  // namespace mozilla
diff --git a/browser_patches/firefox-beta/patches/bootstrap.diff b/browser_patches/firefox-beta/patches/bootstrap.diff
new file mode 100644
index 0000000000000000000000000000000000000000..e3356a8ad8e3da27fd72ea42589bce51019d023b
--- /dev/null
+++ b/browser_patches/firefox-beta/patches/bootstrap.diff
@@ -0,0 +1,2922 @@
+diff --git a/accessible/base/NotificationController.h b/accessible/base/NotificationController.h
+index afb6230bb613ecde4a5e3271478a682d0396dc3b..a3a7d9786f9d18bad6afc292264b9dbc62c14cf2 100644
+--- a/accessible/base/NotificationController.h
++++ b/accessible/base/NotificationController.h
+@@ -276,6 +276,8 @@ class NotificationController final : public EventQueue,
+   }
+ #endif
+ 
++  bool IsUpdatePendingForJugglerAccessibility() { return IsUpdatePending(); }
++
+  protected:
+   virtual ~NotificationController();
+ 
+diff --git a/accessible/interfaces/nsIAccessibleDocument.idl b/accessible/interfaces/nsIAccessibleDocument.idl
+index a91df31c96afda66f478a5a38eaa4352039c2a0b..ee777c1746284027fb3aa2f1686f8082af9d89ee 100644
+--- a/accessible/interfaces/nsIAccessibleDocument.idl
++++ b/accessible/interfaces/nsIAccessibleDocument.idl
+@@ -72,4 +72,9 @@ interface nsIAccessibleDocument : nsISupports
+    * Return the child document accessible at the given index.
+    */
+   nsIAccessibleDocument getChildDocumentAt(in unsigned long index);
++
++  /**
++   * Return whether it is updating.
++   */
++  readonly attribute boolean isUpdatePendingForJugglerAccessibility;
+ };
+diff --git a/accessible/xpcom/xpcAccessibleDocument.cpp b/accessible/xpcom/xpcAccessibleDocument.cpp
+index 1ddd5c8372c2742a8dc4e7a8156c084aaf2442fc..7e3aa30c20d8b2fcae5c12d293ca7772ecd28657 100644
+--- a/accessible/xpcom/xpcAccessibleDocument.cpp
++++ b/accessible/xpcom/xpcAccessibleDocument.cpp
+@@ -143,6 +143,15 @@ xpcAccessibleDocument::GetVirtualCursor(nsIAccessiblePivot** aVirtualCursor) {
+   return NS_OK;
+ }
+ 
++
++NS_IMETHODIMP
++xpcAccessibleDocument::GetIsUpdatePendingForJugglerAccessibility(bool* updating) {
++  NS_ENSURE_ARG_POINTER(updating);
++  *updating = Intl()->Controller()->IsUpdatePendingForJugglerAccessibility();
++  return NS_OK;
++}
++
++
+ ////////////////////////////////////////////////////////////////////////////////
+ // xpcAccessibleDocument
+ 
+diff --git a/accessible/xpcom/xpcAccessibleDocument.h b/accessible/xpcom/xpcAccessibleDocument.h
+index 416a1c5497c97ed80cc0f37d72545e36f7e36b4c..b81983cf7153378260a21f6af225e3493f8f30dc 100644
+--- a/accessible/xpcom/xpcAccessibleDocument.h
++++ b/accessible/xpcom/xpcAccessibleDocument.h
+@@ -48,6 +48,8 @@ class xpcAccessibleDocument : public xpcAccessibleHyperText,
+                                 nsIAccessibleDocument** aDocument) final;
+   NS_IMETHOD GetVirtualCursor(nsIAccessiblePivot** aVirtualCursor) final;
+ 
++  NS_IMETHOD GetIsUpdatePendingForJugglerAccessibility(bool* aUpdating) final;
++
+   /**
+    * Return XPCOM wrapper for the internal accessible.
+    */
+diff --git a/browser/app/winlauncher/LauncherProcessWin.cpp b/browser/app/winlauncher/LauncherProcessWin.cpp
+index 4c5a84e9f824ca68dfcc429df5550136c647992a..c39d73a3b8be8bb8476618e93ef263e3640ba1ab 100644
+--- a/browser/app/winlauncher/LauncherProcessWin.cpp
++++ b/browser/app/winlauncher/LauncherProcessWin.cpp
+@@ -23,6 +23,7 @@
+ #include "mozilla/WinHeaderOnlyUtils.h"
+ #include "nsWindowsHelpers.h"
+ 
++#include <io.h>
+ #include <windows.h>
+ #include <processthreadsapi.h>
+ 
+@@ -421,8 +422,19 @@ Maybe<int> LauncherMain(int& argc, wchar_t* argv[],
+   HANDLE stdHandles[] = {::GetStdHandle(STD_INPUT_HANDLE),
+                          ::GetStdHandle(STD_OUTPUT_HANDLE),
+                          ::GetStdHandle(STD_ERROR_HANDLE)};
+-
+   attrs.AddInheritableHandles(stdHandles);
++  // Playwright pipe installation.
++  bool hasJugglerPipe =
++      mozilla::CheckArg(argc, argv, L"juggler-pipe",
++                        static_cast<const wchar_t**>(nullptr),
++                        mozilla::CheckArgFlag::None) == mozilla::ARG_FOUND;
++  if (hasJugglerPipe) {
++    intptr_t stdio3 = _get_osfhandle(3);
++    intptr_t stdio4 = _get_osfhandle(4);
++    HANDLE pipeHandles[] = {reinterpret_cast<HANDLE>(stdio3),
++                            reinterpret_cast<HANDLE>(stdio4)};
++    attrs.AddInheritableHandles(pipeHandles);
++  }
+ 
+   DWORD creationFlags = CREATE_SUSPENDED | CREATE_UNICODE_ENVIRONMENT;
+ 
+diff --git a/browser/installer/allowed-dupes.mn b/browser/installer/allowed-dupes.mn
+index b59fe4b1854fec7cb329139f9c6773498fb9de51..29973af04902848808e850b40bf85e5f694d349a 100644
+--- a/browser/installer/allowed-dupes.mn
++++ b/browser/installer/allowed-dupes.mn
+@@ -71,6 +71,12 @@ browser/features/webcompat@mozilla.org/shims/empty-shim.txt
+ removed-files
+ #endif
+ 
++# Juggler/marionette files
++chrome/juggler/content/content/floating-scrollbars.css
++browser/chrome/devtools/skin/floating-scrollbars-responsive-design.css
++chrome/juggler/content/server/stream-utils.js
++chrome/marionette/content/stream-utils.js
++
+ #ifdef MOZ_EME_WIN32_ARTIFACT
+ gmp-clearkey/0.1/manifest.json
+ i686/gmp-clearkey/0.1/manifest.json
+diff --git a/browser/installer/package-manifest.in b/browser/installer/package-manifest.in
+index 73a41dc25b9ad674750ce5849a9db8f9878e5e11..e669054d361a148fff895ee24d1ea28c11d0a484 100644
+--- a/browser/installer/package-manifest.in
++++ b/browser/installer/package-manifest.in
+@@ -198,6 +198,11 @@
+ @RESPATH@/chrome/remote.manifest
+ #endif
+ 
++@RESPATH@/chrome/juggler@JAREXT@
++@RESPATH@/chrome/juggler.manifest
++@RESPATH@/components/juggler.manifest
++@RESPATH@/components/juggler.js
++
+ #if defined(ENABLE_TESTS) && defined(MOZ_DEBUG)
+ @RESPATH@/components/TestInterfaceJS.js
+ @RESPATH@/components/TestInterfaceJS.manifest
+diff --git a/devtools/server/socket/websocket-server.js b/devtools/server/socket/websocket-server.js
+index 040c7b124dec6bb254563bbe74fe50012cb077a3..b4e6b8132786af70e8ad0dce88b67c2835307f88 100644
+--- a/devtools/server/socket/websocket-server.js
++++ b/devtools/server/socket/websocket-server.js
+@@ -133,13 +133,12 @@ function writeHttpResponse(output, response) {
+  * Process the WebSocket handshake headers and return the key to be sent in
+  * Sec-WebSocket-Accept response header.
+  */
+-function processRequest({ requestLine, headers }) {
++function processRequest({ requestLine, headers }, expectedPath) {
+   const [method, path] = requestLine.split(" ");
+   if (method !== "GET") {
+     throw new Error("The handshake request must use GET method");
+   }
+-
+-  if (path !== "/") {
++  if (path !== expectedPath) {
+     throw new Error("The handshake request has unknown path");
+   }
+ 
+@@ -189,13 +188,13 @@ function computeKey(key) {
+ /**
+  * Perform the server part of a WebSocket opening handshake on an incoming connection.
+  */
+-const serverHandshake = async function(input, output) {
++const serverHandshake = async function(input, output, expectedPath) {
+   // Read the request
+   const request = await readHttpRequest(input);
+ 
+   try {
+     // Check and extract info from the request
+-    const { acceptKey } = processRequest(request);
++    const { acceptKey } = processRequest(request, expectedPath);
+ 
+     // Send response headers
+     await writeHttpResponse(output, [
+@@ -217,8 +216,8 @@ const serverHandshake = async function(input, output) {
+  * Performs the WebSocket handshake and waits for the WebSocket to open.
+  * Returns Promise with a WebSocket ready to send and receive messages.
+  */
+-const accept = async function(transport, input, output) {
+-  await serverHandshake(input, output);
++const accept = async function(transport, input, output, expectedPath) {
++  await serverHandshake(input, output, expectedPath || "/");
+ 
+   const transportProvider = {
+     setListener(upgradeListener) {
+diff --git a/docshell/base/BrowsingContext.cpp b/docshell/base/BrowsingContext.cpp
+index 2eb25e3e50f8865a1788e1043187eb78f5efc72f..a3435e5f28cc4932b530ae9890f0d8591f22c717 100644
+--- a/docshell/base/BrowsingContext.cpp
++++ b/docshell/base/BrowsingContext.cpp
+@@ -111,6 +111,20 @@ struct ParamTraits<mozilla::dom::PrefersColorSchemeOverride>
+           mozilla::dom::PrefersColorSchemeOverride::None,
+           mozilla::dom::PrefersColorSchemeOverride::EndGuard_> {};
+ 
++template <>
++struct ParamTraits<mozilla::dom::PrefersReducedMotionOverride>
++    : public ContiguousEnumSerializer<
++          mozilla::dom::PrefersReducedMotionOverride,
++          mozilla::dom::PrefersReducedMotionOverride::None,
++          mozilla::dom::PrefersReducedMotionOverride::EndGuard_> {};
++
++template <>
++struct ParamTraits<mozilla::dom::ForcedColorsOverride>
++    : public ContiguousEnumSerializer<
++          mozilla::dom::ForcedColorsOverride,
++          mozilla::dom::ForcedColorsOverride::None,
++          mozilla::dom::ForcedColorsOverride::EndGuard_> {};
++
+ template <>
+ struct ParamTraits<mozilla::dom::ExplicitActiveStatus>
+     : public ContiguousEnumSerializer<
+@@ -2780,6 +2794,40 @@ void BrowsingContext::DidSet(FieldIndex<IDX_PrefersColorSchemeOverride>,
+   PresContextAffectingFieldChanged();
+ }
+ 
++void BrowsingContext::DidSet(FieldIndex<IDX_PrefersReducedMotionOverride>,
++                             dom::PrefersReducedMotionOverride aOldValue) {
++  MOZ_ASSERT(IsTop());
++  if (PrefersReducedMotionOverride() == aOldValue) {
++    return;
++  }
++  PreOrderWalk([&](BrowsingContext* aContext) {
++    if (nsIDocShell* shell = aContext->GetDocShell()) {
++      if (nsPresContext* pc = shell->GetPresContext()) {
++        pc->MediaFeatureValuesChanged(
++            {MediaFeatureChangeReason::SystemMetricsChange},
++            MediaFeatureChangePropagation::JustThisDocument);
++      }
++    }
++  });
++}
++
++void BrowsingContext::DidSet(FieldIndex<IDX_ForcedColorsOverride>,
++                             dom::ForcedColorsOverride aOldValue) {
++  MOZ_ASSERT(IsTop());
++  if (ForcedColorsOverride() == aOldValue) {
++    return;
++  }
++  PreOrderWalk([&](BrowsingContext* aContext) {
++    if (nsIDocShell* shell = aContext->GetDocShell()) {
++      if (nsPresContext* pc = shell->GetPresContext()) {
++        pc->MediaFeatureValuesChanged(
++            {MediaFeatureChangeReason::SystemMetricsChange},
++            MediaFeatureChangePropagation::JustThisDocument);
++      }
++    }
++  });
++}
++
+ void BrowsingContext::DidSet(FieldIndex<IDX_MediumOverride>,
+                              nsString&& aOldValue) {
+   MOZ_ASSERT(IsTop());
+diff --git a/docshell/base/BrowsingContext.h b/docshell/base/BrowsingContext.h
+index e0b091feba6ce38e57681c62c386d3b70234de1f..4fae381a8bded7ae004ccb25187b3ace559fea41 100644
+--- a/docshell/base/BrowsingContext.h
++++ b/docshell/base/BrowsingContext.h
+@@ -176,10 +176,10 @@ enum class ExplicitActiveStatus : uint8_t {
+   FIELD(GVInaudibleAutoplayRequestStatus, GVAutoplayRequestStatus)            \
+   /* ScreenOrientation-related APIs */                                        \
+   FIELD(CurrentOrientationAngle, float)                                       \
+-  FIELD(CurrentOrientationType, mozilla::dom::OrientationType)                \
++  FIELD(CurrentOrientationType, dom::OrientationType)                \
+   FIELD(OrientationLock, mozilla::hal::ScreenOrientation)                     \
+   FIELD(UserAgentOverride, nsString)                                          \
+-  FIELD(TouchEventsOverrideInternal, mozilla::dom::TouchEventsOverride)       \
++  FIELD(TouchEventsOverrideInternal, dom::TouchEventsOverride)       \
+   FIELD(EmbedderElementType, Maybe<nsString>)                                 \
+   FIELD(MessageManagerGroup, nsString)                                        \
+   FIELD(MaxTouchPointsOverride, uint8_t)                                      \
+@@ -217,6 +217,10 @@ enum class ExplicitActiveStatus : uint8_t {
+    * <browser> embedder element. */                                           \
+   FIELD(EmbedderColorScheme, dom::PrefersColorSchemeOverride)                 \
+   FIELD(DisplayMode, dom::DisplayMode)                                        \
++  /* playwright addition */                                                   \
++  FIELD(PrefersReducedMotionOverride, dom::PrefersReducedMotionOverride)      \
++  /* playwright addition */                                                   \
++  FIELD(ForcedColorsOverride, dom::ForcedColorsOverride)                      \
+   /* The number of entries added to the session history because of this       \
+    * browsing context. */                                                     \
+   FIELD(HistoryEntryCount, uint32_t)                                          \
+@@ -893,6 +897,14 @@ class BrowsingContext : public nsILoadContext, public nsWrapperCache {
+     return GetPrefersColorSchemeOverride();
+   }
+ 
++  dom::PrefersReducedMotionOverride PrefersReducedMotionOverride() const {
++    return GetPrefersReducedMotionOverride();
++  }
++
++  dom::ForcedColorsOverride ForcedColorsOverride() const {
++    return GetForcedColorsOverride();
++  }
++
+   bool IsInBFCache() const;
+ 
+   bool AllowJavascript() const { return GetAllowJavascript(); }
+@@ -1047,6 +1059,23 @@ class BrowsingContext : public nsILoadContext, public nsWrapperCache {
+ 
+   void PresContextAffectingFieldChanged();
+ 
++  bool CanSet(FieldIndex<IDX_PrefersReducedMotionOverride>,
++              dom::PrefersReducedMotionOverride, ContentParent*) {
++    return IsTop();
++  }
++
++  void DidSet(FieldIndex<IDX_PrefersReducedMotionOverride>,
++              dom::PrefersReducedMotionOverride aOldValue);
++
++
++  bool CanSet(FieldIndex<IDX_ForcedColorsOverride>,
++              dom::ForcedColorsOverride, ContentParent*) {
++    return IsTop();
++  }
++
++  void DidSet(FieldIndex<IDX_ForcedColorsOverride>,
++              dom::ForcedColorsOverride aOldValue);
++
+   void DidSet(FieldIndex<IDX_MediumOverride>, nsString&& aOldValue);
+ 
+   bool CanSet(FieldIndex<IDX_SuspendMediaWhenInactive>, bool, ContentParent*) {
+diff --git a/docshell/base/nsDocShell.cpp b/docshell/base/nsDocShell.cpp
+index c42f9450ce1a8e1b1b77ac3c5e5dd186f2b03d9f..dfb824b4b5ae54126beba8231111e93f0de2000d 100644
+--- a/docshell/base/nsDocShell.cpp
++++ b/docshell/base/nsDocShell.cpp
+@@ -15,6 +15,12 @@
+ #  include <unistd.h>  // for getpid()
+ #endif
+ 
++#if JS_HAS_INTL_API && !MOZ_SYSTEM_ICU
++#  include "unicode/locid.h"
++#endif /* JS_HAS_INTL_API && !MOZ_SYSTEM_ICU */
++
++#include "js/LocaleSensitive.h"
++
+ #include "mozilla/ArrayUtils.h"
+ #include "mozilla/Attributes.h"
+ #include "mozilla/AutoRestore.h"
+@@ -65,6 +71,7 @@
+ #include "mozilla/dom/ContentFrameMessageManager.h"
+ #include "mozilla/dom/DocGroup.h"
+ #include "mozilla/dom/Element.h"
++#include "mozilla/dom/Geolocation.h"
+ #include "mozilla/dom/HTMLAnchorElement.h"
+ #include "mozilla/dom/HTMLIFrameElement.h"
+ #include "mozilla/dom/PerformanceNavigation.h"
+@@ -90,6 +97,7 @@
+ #include "mozilla/dom/JSWindowActorChild.h"
+ #include "mozilla/dom/DocumentBinding.h"
+ #include "mozilla/ipc/ProtocolUtils.h"
++#include "mozilla/dom/WorkerCommon.h"
+ #include "mozilla/net/DocumentChannel.h"
+ #include "mozilla/net/DocumentChannelChild.h"
+ #include "mozilla/net/ParentChannelWrapper.h"
+@@ -114,6 +122,7 @@
+ #include "nsIDocShellTreeOwner.h"
+ #include "mozilla/dom/Document.h"
+ #include "nsHTMLDocument.h"
++#include "mozilla/dom/Element.h"
+ #include "nsIDocumentLoaderFactory.h"
+ #include "nsIDOMWindow.h"
+ #include "nsIEditingSession.h"
+@@ -208,6 +217,7 @@
+ #include "nsFocusManager.h"
+ #include "nsGlobalWindow.h"
+ #include "nsJSEnvironment.h"
++#include "nsJSUtils.h"
+ #include "nsNetCID.h"
+ #include "nsNetUtil.h"
+ #include "nsObjectLoadingContent.h"
+@@ -371,6 +381,13 @@ nsDocShell::nsDocShell(BrowsingContext* aBrowsingContext,
+       mAllowDNSPrefetch(true),
+       mAllowWindowControl(true),
+       mCSSErrorReportingEnabled(false),
++      mFileInputInterceptionEnabled(false),
++      mOverrideHasFocus(false),
++      mBypassCSPEnabled(false),
++      mForceActiveState(false),
++      mOnlineOverride(nsIDocShell::ONLINE_OVERRIDE_NONE),
++      mReducedMotionOverride(REDUCED_MOTION_OVERRIDE_NONE),
++      mForcedColorsOverride(FORCED_COLORS_OVERRIDE_NO_OVERRIDE),
+       mAllowAuth(mItemType == typeContent),
+       mAllowKeywordFixup(false),
+       mDisableMetaRefreshWhenInactive(false),
+@@ -3266,6 +3283,221 @@ nsDocShell::GetMessageManager(ContentFrameMessageManager** aMessageManager) {
+   return NS_OK;
+ }
+ 
++// =============== Juggler Begin =======================
++
++nsDocShell* nsDocShell::GetRootDocShell() {
++  nsCOMPtr<nsIDocShellTreeItem> rootAsItem;
++  GetInProcessSameTypeRootTreeItem(getter_AddRefs(rootAsItem));
++  nsCOMPtr<nsIDocShell> rootShell = do_QueryInterface(rootAsItem);
++  return nsDocShell::Cast(rootShell);
++}
++
++NS_IMETHODIMP
++nsDocShell::GetBypassCSPEnabled(bool* aEnabled) {
++  MOZ_ASSERT(aEnabled);
++  *aEnabled = mBypassCSPEnabled;
++  return NS_OK;
++}
++
++NS_IMETHODIMP
++nsDocShell::SetBypassCSPEnabled(bool aEnabled) {
++  mBypassCSPEnabled = aEnabled;
++  return NS_OK;
++}
++
++NS_IMETHODIMP
++nsDocShell::GetForceActiveState(bool* aEnabled) {
++  MOZ_ASSERT(aEnabled);
++  *aEnabled = mForceActiveState;
++  return NS_OK;
++}
++
++NS_IMETHODIMP
++nsDocShell::SetForceActiveState(bool aEnabled) {
++  mForceActiveState = aEnabled;
++  ActivenessMaybeChanged();
++  return NS_OK;
++}
++
++bool nsDocShell::IsBypassCSPEnabled() {
++  return GetRootDocShell()->mBypassCSPEnabled;
++}
++
++NS_IMETHODIMP
++nsDocShell::GetOverrideHasFocus(bool* aEnabled) {
++  MOZ_ASSERT(aEnabled);
++  *aEnabled = mOverrideHasFocus;
++  return NS_OK;
++}
++
++NS_IMETHODIMP
++nsDocShell::SetOverrideHasFocus(bool aEnabled) {
++  mOverrideHasFocus = aEnabled;
++  return NS_OK;
++}
++
++bool nsDocShell::ShouldOverrideHasFocus() const {
++  return mOverrideHasFocus;
++}
++
++NS_IMETHODIMP
++nsDocShell::GetLanguageOverride(nsAString& aLanguageOverride) {
++  aLanguageOverride = GetRootDocShell()->mLanguageOverride;
++  return NS_OK;
++}
++
++
++static void SetIcuLocale(const nsAString& aLanguageOverride) {
++  icu::Locale locale(NS_LossyConvertUTF16toASCII(aLanguageOverride).get());
++  if (icu::Locale::getDefault() == locale)
++    return;
++  UErrorCode error_code = U_ZERO_ERROR;
++  const char* lang = locale.getLanguage();
++  if (lang != nullptr && *lang != '\0') {
++    icu::Locale::setDefault(locale, error_code);
++  } else {
++    fprintf(stderr, "SetIcuLocale Failed to set the ICU default locale to %s\n", NS_LossyConvertUTF16toASCII(aLanguageOverride).get());
++  }
++
++  AutoJSAPI jsapi;
++  jsapi.Init();
++  JSContext* cx = jsapi.cx();
++  JS_ResetDefaultLocale(JS_GetRuntime(cx));
++
++  ResetDefaultLocaleInAllWorkers();
++}
++
++NS_IMETHODIMP
++nsDocShell::SetLanguageOverride(const nsAString& aLanguageOverride) {
++  mLanguageOverride = aLanguageOverride;
++  SetIcuLocale(aLanguageOverride);
++  return NS_OK;
++}
++
++NS_IMETHODIMP
++nsDocShell::OverrideTimezone(const nsAString& aTimezoneOverride,
++                             bool* aSuccess) {
++  NS_ENSURE_ARG(aSuccess);
++  NS_LossyConvertUTF16toASCII timeZoneId(aTimezoneOverride);
++  *aSuccess = nsJSUtils::SetTimeZoneOverride(timeZoneId.get());
++
++  // Set TZ which affects localtime_s().
++  auto setTimeZoneEnv = [](const char* value) {
++#if defined(_WIN32)
++    return _putenv_s("TZ", value) == 0;
++#else
++    return setenv("TZ", value, true) == 0;
++#endif /* _WIN32 */
++  };
++  if (*aSuccess) {
++    *aSuccess = setTimeZoneEnv(timeZoneId.get());
++    if (!*aSuccess) {
++      fprintf(stderr, "Failed to set 'TZ' to '%s'\n", timeZoneId.get());
++    }
++  }
++  return NS_OK;
++}
++
++NS_IMETHODIMP
++nsDocShell::GetFileInputInterceptionEnabled(bool* aEnabled) {
++  MOZ_ASSERT(aEnabled);
++  *aEnabled = GetRootDocShell()->mFileInputInterceptionEnabled;
++  return NS_OK;
++}
++
++NS_IMETHODIMP
++nsDocShell::SetFileInputInterceptionEnabled(bool aEnabled) {
++  mFileInputInterceptionEnabled = aEnabled;
++  return NS_OK;
++}
++
++bool nsDocShell::IsFileInputInterceptionEnabled() {
++  return GetRootDocShell()->mFileInputInterceptionEnabled;
++}
++
++void nsDocShell::FilePickerShown(mozilla::dom::Element* element) {
++  nsCOMPtr<nsIObserverService> observerService =
++      mozilla::services::GetObserverService();
++  observerService->NotifyObservers(
++      ToSupports(element), "juggler-file-picker-shown", nullptr);
++}
++
++RefPtr<nsGeolocationService> nsDocShell::GetGeolocationServiceOverride() {
++  return GetRootDocShell()->mGeolocationServiceOverride;
++}
++
++NS_IMETHODIMP
++nsDocShell::SetGeolocationOverride(nsIDOMGeoPosition* aGeolocationOverride) {
++  if (aGeolocationOverride) {
++    if (!mGeolocationServiceOverride) {
++      mGeolocationServiceOverride = new nsGeolocationService();
++      mGeolocationServiceOverride->Init();
++    }
++    mGeolocationServiceOverride->Update(aGeolocationOverride);
++  } else {
++    mGeolocationServiceOverride = nullptr;
++  }
++  return NS_OK;
++}
++
++NS_IMETHODIMP
++nsDocShell::GetOnlineOverride(OnlineOverride* aOnlineOverride) {
++  *aOnlineOverride = GetRootDocShell()->mOnlineOverride;
++  return NS_OK;
++}
++
++NS_IMETHODIMP
++nsDocShell::SetOnlineOverride(OnlineOverride aOnlineOverride) {
++  // We don't have a way to verify this coming from Javascript, so this check is
++  // still needed.
++  if (!(aOnlineOverride == ONLINE_OVERRIDE_NONE ||
++        aOnlineOverride == ONLINE_OVERRIDE_ONLINE ||
++        aOnlineOverride == ONLINE_OVERRIDE_OFFLINE)) {
++    return NS_ERROR_INVALID_ARG;
++  }
++
++  mOnlineOverride = aOnlineOverride;
++  return NS_OK;
++}
++
++NS_IMETHODIMP
++nsDocShell::GetReducedMotionOverride(ReducedMotionOverride* aReducedMotionOverride) {
++  *aReducedMotionOverride = GetRootDocShell()->mReducedMotionOverride;
++  return NS_OK;
++}
++
++NS_IMETHODIMP
++nsDocShell::SetReducedMotionOverride(ReducedMotionOverride aReducedMotionOverride) {
++  mReducedMotionOverride = aReducedMotionOverride;
++  RefPtr<nsPresContext> presContext = GetPresContext();
++  if (presContext) {
++    presContext->MediaFeatureValuesChanged(
++        {MediaFeatureChangeReason::SystemMetricsChange},
++        MediaFeatureChangePropagation::JustThisDocument);
++  }
++  return NS_OK;
++}
++
++NS_IMETHODIMP
++nsDocShell::GetForcedColorsOverride(ForcedColorsOverride* aForcedColorsOverride) {
++  *aForcedColorsOverride = GetRootDocShell()->mForcedColorsOverride;
++  return NS_OK;
++}
++
++NS_IMETHODIMP
++nsDocShell::SetForcedColorsOverride(ForcedColorsOverride aForcedColorsOverride) {
++  mForcedColorsOverride = aForcedColorsOverride;
++  RefPtr<nsPresContext> presContext = GetPresContext();
++  if (presContext) {
++    presContext->MediaFeatureValuesChanged(
++        {MediaFeatureChangeReason::SystemMetricsChange},
++        MediaFeatureChangePropagation::JustThisDocument);
++  }
++  return NS_OK;
++}
++
++// =============== Juggler End =======================
++
+ NS_IMETHODIMP
+ nsDocShell::GetIsNavigating(bool* aOut) {
+   *aOut = mIsNavigating;
+@@ -4896,7 +5128,7 @@ nsDocShell::GetVisibility(bool* aVisibility) {
+ }
+ 
+ void nsDocShell::ActivenessMaybeChanged() {
+-  const bool isActive = mBrowsingContext->IsActive();
++  const bool isActive = mForceActiveState || mBrowsingContext->IsActive();
+   if (RefPtr<PresShell> presShell = GetPresShell()) {
+     presShell->ActivenessMaybeChanged();
+   }
+@@ -8633,6 +8865,12 @@ nsresult nsDocShell::PerformRetargeting(nsDocShellLoadState* aLoadState) {
+                      true,  // aForceNoOpener
+                      getter_AddRefs(newBC));
+       MOZ_ASSERT(!newBC);
++      if (rv == NS_OK) {
++        nsCOMPtr<nsIObserverService> observerService = mozilla::services::GetObserverService();
++        if (observerService) {
++          observerService->NotifyObservers(GetAsSupports(this), "juggler-window-open-in-new-context", nullptr);
++        }
++      }
+       return rv;
+     }
+ 
+@@ -12781,6 +13019,9 @@ class OnLinkClickEvent : public Runnable {
+       mHandler->OnLinkClickSync(mContent, mLoadState, mNoOpenerImplied,
+                                 mTriggeringPrincipal);
+     }
++    nsCOMPtr<nsIObserverService> observerService = mozilla::services::GetObserverService();
++    observerService->NotifyObservers(ToSupports(mContent), "juggler-link-click-sync", nullptr);
++
+     return NS_OK;
+   }
+ 
+@@ -12860,6 +13101,8 @@ nsresult nsDocShell::OnLinkClick(
+   nsCOMPtr<nsIRunnable> ev =
+       new OnLinkClickEvent(this, aContent, loadState, noOpenerImplied,
+                            aIsTrusted, aTriggeringPrincipal);
++  nsCOMPtr<nsIObserverService> observerService = mozilla::services::GetObserverService();
++  observerService->NotifyObservers(ToSupports(aContent), "juggler-link-click", nullptr);
+   return Dispatch(TaskCategory::UI, ev.forget());
+ }
+ 
+diff --git a/docshell/base/nsDocShell.h b/docshell/base/nsDocShell.h
+index 79b2af0c0f58e00965473edb55a4e184dd225b1b..4a991cba9d77207a631b5f076c37e7f9281e9a4a 100644
+--- a/docshell/base/nsDocShell.h
++++ b/docshell/base/nsDocShell.h
+@@ -16,6 +16,7 @@
+ #include "mozilla/UniquePtr.h"
+ #include "mozilla/WeakPtr.h"
+ #include "mozilla/dom/BrowsingContext.h"
++#include "mozilla/dom/Element.h"
+ #include "mozilla/dom/WindowProxyHolder.h"
+ #include "nsCOMPtr.h"
+ #include "nsCharsetSource.h"
+@@ -76,6 +77,7 @@ class nsCommandManager;
+ class nsDocShellEditorData;
+ class nsDOMNavigationTiming;
+ class nsDSURIContentListener;
++class nsGeolocationService;
+ class nsGlobalWindowOuter;
+ 
+ class FramingChecker;
+@@ -408,6 +410,15 @@ class nsDocShell final : public nsDocLoader,
+   void SetWillChangeProcess() { mWillChangeProcess = true; }
+   bool WillChangeProcess() { return mWillChangeProcess; }
+ 
++  bool IsFileInputInterceptionEnabled();
++  void FilePickerShown(mozilla::dom::Element* element);
++
++  bool ShouldOverrideHasFocus() const;
++
++  bool IsBypassCSPEnabled();
++
++  RefPtr<nsGeolocationService> GetGeolocationServiceOverride();
++
+   // Create a content viewer within this nsDocShell for the given
+   // `WindowGlobalChild` actor.
+   nsresult CreateContentViewerForActor(
+@@ -1023,6 +1034,8 @@ class nsDocShell final : public nsDocLoader,
+ 
+   bool CSSErrorReportingEnabled() const { return mCSSErrorReportingEnabled; }
+ 
++  nsDocShell* GetRootDocShell();
++
+   // Handles retrieval of subframe session history for nsDocShell::LoadURI. If a
+   // load is requested in a subframe of the current DocShell, the subframe
+   // loadType may need to reflect the loadType of the parent document, or in
+@@ -1308,6 +1321,16 @@ class nsDocShell final : public nsDocLoader,
+   bool mAllowDNSPrefetch : 1;
+   bool mAllowWindowControl : 1;
+   bool mCSSErrorReportingEnabled : 1;
++  bool mFileInputInterceptionEnabled: 1;
++  bool mOverrideHasFocus : 1;
++  bool mBypassCSPEnabled : 1;
++  bool mForceActiveState : 1;
++  nsString mLanguageOverride;
++  RefPtr<nsGeolocationService> mGeolocationServiceOverride;
++  OnlineOverride mOnlineOverride;
++  ReducedMotionOverride mReducedMotionOverride;
++  ForcedColorsOverride mForcedColorsOverride;
++
+   bool mAllowAuth : 1;
+   bool mAllowKeywordFixup : 1;
+   bool mDisableMetaRefreshWhenInactive : 1;
+diff --git a/docshell/base/nsIDocShell.idl b/docshell/base/nsIDocShell.idl
+index 6b85ddd842a6d2e29f86047017b78b2007b99867..e0b56c4f85544580b9a631619fb06799ad244494 100644
+--- a/docshell/base/nsIDocShell.idl
++++ b/docshell/base/nsIDocShell.idl
+@@ -44,6 +44,7 @@ interface nsIURI;
+ interface nsIChannel;
+ interface nsIContentViewer;
+ interface nsIContentSecurityPolicy;
++interface nsIDOMGeoPosition;
+ interface nsIEditor;
+ interface nsIEditingSession;
+ interface nsIInputStream;
+@@ -803,6 +804,41 @@ interface nsIDocShell : nsIDocShellTreeItem
+    */
+   void synchronizeLayoutHistoryState();
+ 
++  attribute boolean fileInputInterceptionEnabled;
++
++  attribute boolean overrideHasFocus;
++
++  attribute boolean bypassCSPEnabled;
++
++  attribute boolean forceActiveState;
++
++  attribute AString languageOverride;
++
++  boolean overrideTimezone(in AString timezoneId);
++
++  cenum OnlineOverride: 8 {
++    ONLINE_OVERRIDE_NONE = 0,
++    ONLINE_OVERRIDE_ONLINE = 1,
++    ONLINE_OVERRIDE_OFFLINE = 2,
++  };
++  [infallible] attribute nsIDocShell_OnlineOverride onlineOverride;
++
++  cenum ReducedMotionOverride : 8 {
++    REDUCED_MOTION_OVERRIDE_REDUCE,
++    REDUCED_MOTION_OVERRIDE_NO_PREFERENCE,
++    REDUCED_MOTION_OVERRIDE_NONE, /* This clears the override. */
++  };
++  [infallible] attribute nsIDocShell_ReducedMotionOverride reducedMotionOverride;
++
++  cenum ForcedColorsOverride : 8 {
++    FORCED_COLORS_OVERRIDE_ACTIVE,
++    FORCED_COLORS_OVERRIDE_NONE,
++    FORCED_COLORS_OVERRIDE_NO_OVERRIDE, /* This clears the override. */
++  };
++  [infallible] attribute nsIDocShell_ForcedColorsOverride forcedColorsOverride;
++
++  void setGeolocationOverride(in nsIDOMGeoPosition position);
++
+   /**
+    * This attempts to save any applicable layout history state (like
+    * scroll position) in the nsISHEntry. This is normally done
+diff --git a/dom/base/Document.cpp b/dom/base/Document.cpp
+index feaee86ca5fd78d7df8d08a737ba9b8da173feac..86f31fb2d1e6b6e667e066eaff80763855cef08e 100644
+--- a/dom/base/Document.cpp
++++ b/dom/base/Document.cpp
+@@ -3645,6 +3645,9 @@ void Document::SendToConsole(nsCOMArray<nsISecurityConsoleMessage>& aMessages) {
+ }
+ 
+ void Document::ApplySettingsFromCSP(bool aSpeculative) {
++  if (mDocumentContainer && mDocumentContainer->IsBypassCSPEnabled())
++    return;
++
+   nsresult rv = NS_OK;
+   if (!aSpeculative) {
+     // 1) apply settings from regular CSP
+@@ -3702,6 +3705,11 @@ nsresult Document::InitCSP(nsIChannel* aChannel) {
+   MOZ_ASSERT(!mScriptGlobalObject,
+              "CSP must be initialized before mScriptGlobalObject is set!");
+ 
++  nsCOMPtr<nsIDocShell> shell(mDocumentContainer);
++  if (shell && nsDocShell::Cast(shell)->IsBypassCSPEnabled()) {
++    return NS_OK;
++  }
++
+   // If this is a data document - no need to set CSP.
+   if (mLoadedAsData) {
+     return NS_OK;
+@@ -4508,6 +4516,10 @@ bool Document::HasFocus(ErrorResult& rv) const {
+     return false;
+   }
+ 
++  if (IsActive() && mDocumentContainer->ShouldOverrideHasFocus()) {
++    return true;
++  }
++
+   if (!fm->IsInActiveWindow(bc)) {
+     return false;
+   }
+@@ -17654,6 +17666,71 @@ ColorScheme Document::PreferredColorScheme(IgnoreRFP aIgnoreRFP) const {
+   return LookAndFeel::PreferredColorSchemeForContent();
+ }
+ 
++bool Document::PrefersReducedMotion() const {
++  auto* docShell = static_cast<nsDocShell*>(GetDocShell());
++  nsIDocShell::ReducedMotionOverride reducedMotion;
++  if (docShell && docShell->GetReducedMotionOverride(&reducedMotion) == NS_OK &&
++      reducedMotion != nsIDocShell::REDUCED_MOTION_OVERRIDE_NONE) {
++    switch (reducedMotion) {
++      case nsIDocShell::REDUCED_MOTION_OVERRIDE_REDUCE:
++        return true;
++      case nsIDocShell::REDUCED_MOTION_OVERRIDE_NO_PREFERENCE:
++        return false;
++      case nsIDocShell::REDUCED_MOTION_OVERRIDE_NONE:
++        break;
++    };
++  }
++
++  if (auto* bc = GetBrowsingContext()) {
++    switch (bc->Top()->PrefersReducedMotionOverride()) {
++      case dom::PrefersReducedMotionOverride::Reduce:
++        return true;
++      case dom::PrefersReducedMotionOverride::No_preference:
++        return false;
++      case dom::PrefersReducedMotionOverride::None:
++      case dom::PrefersReducedMotionOverride::EndGuard_:
++        break;
++    }
++  }
++
++  if (nsContentUtils::ShouldResistFingerprinting(this)) {
++    return false;
++  }
++  return LookAndFeel::GetInt(LookAndFeel::IntID::PrefersReducedMotion, 0) == 1;
++}
++
++bool Document::ForcedColors() const {
++  auto* docShell = static_cast<nsDocShell*>(GetDocShell());
++  nsIDocShell::ForcedColorsOverride forcedColors;
++  if (docShell && docShell->GetForcedColorsOverride(&forcedColors) == NS_OK) {
++    switch (forcedColors) {
++      case nsIDocShell::FORCED_COLORS_OVERRIDE_ACTIVE:
++        return true;
++      case nsIDocShell::FORCED_COLORS_OVERRIDE_NONE:
++        return false;
++      case nsIDocShell::FORCED_COLORS_OVERRIDE_NO_OVERRIDE:
++        break;
++    };
++  }
++
++  if (auto* bc = GetBrowsingContext()) {
++    switch (bc->Top()->ForcedColorsOverride()) {
++      case dom::ForcedColorsOverride::Active:
++        return true;
++      case dom::ForcedColorsOverride::None:
++        return false;
++      case dom::ForcedColorsOverride::No_override:
++      case dom::ForcedColorsOverride::EndGuard_:
++        break;
++    }
++  }
++
++  if (mIsBeingUsedAsImage) {
++    return false;
++  }
++  return !PreferenceSheet::PrefsFor(*this).mUseDocumentColors;
++}
++
+ bool Document::HasRecentlyStartedForegroundLoads() {
+   if (!sLoadingForegroundTopLevelContentDocument) {
+     return false;
+diff --git a/dom/base/Document.h b/dom/base/Document.h
+index 7a4ddc544948509dfe6b7998f31fb9bdf2de841e..40d92e63470091fe3497291aa631464f0ee92b71 100644
+--- a/dom/base/Document.h
++++ b/dom/base/Document.h
+@@ -4001,6 +4001,9 @@ class Document : public nsINode,
+   // color-scheme meta tag.
+   ColorScheme DefaultColorScheme() const;
+ 
++  bool PrefersReducedMotion() const;
++  bool ForcedColors() const;
++
+   static bool HasRecentlyStartedForegroundLoads();
+ 
+   static bool AutomaticStorageAccessPermissionCanBeGranted(
+diff --git a/dom/base/Navigator.cpp b/dom/base/Navigator.cpp
+index 85f28cce26f37b5df95c4a96658b9328f13b5a47..917d89943589ba4d7b065bdacb76aa281508de29 100644
+--- a/dom/base/Navigator.cpp
++++ b/dom/base/Navigator.cpp
+@@ -325,14 +325,18 @@ void Navigator::GetAppName(nsAString& aAppName, CallerType aCallerType) const {
+  * for more detail.
+  */
+ /* static */
+-void Navigator::GetAcceptLanguages(nsTArray<nsString>& aLanguages) {
++void Navigator::GetAcceptLanguages(const nsString* aLanguageOverride, nsTArray<nsString>& aLanguages) {
+   MOZ_ASSERT(NS_IsMainThread());
+ 
+   aLanguages.Clear();
+ 
+   // E.g. "de-de, en-us,en".
+   nsAutoString acceptLang;
+-  Preferences::GetLocalizedString("intl.accept_languages", acceptLang);
++  if (aLanguageOverride && aLanguageOverride->Length())
++    acceptLang = *aLanguageOverride;
++  else
++    Preferences::GetLocalizedString("intl.accept_languages", acceptLang);
++    
+ 
+   // Split values on commas.
+   for (nsDependentSubstring lang :
+@@ -384,7 +388,13 @@ void Navigator::GetLanguage(nsAString& aLanguage) {
+ }
+ 
+ void Navigator::GetLanguages(nsTArray<nsString>& aLanguages) {
+-  GetAcceptLanguages(aLanguages);
++  if (mWindow && mWindow->GetDocShell()) {
++    nsString languageOverride;
++    mWindow->GetDocShell()->GetLanguageOverride(languageOverride);
++    GetAcceptLanguages(&languageOverride, aLanguages);
++  } else {
++    GetAcceptLanguages(nullptr, aLanguages);
++  }
+ 
+   // The returned value is cached by the binding code. The window listens to the
+   // accept languages change and will clear the cache when needed. It has to
+@@ -563,7 +573,13 @@ bool Navigator::CookieEnabled() {
+   return granted;
+ }
+ 
+-bool Navigator::OnLine() { return !NS_IsOffline(); }
++bool Navigator::OnLine() {
++  nsDocShell* docShell = static_cast<nsDocShell*>(GetDocShell());
++  nsIDocShell::OnlineOverride onlineOverride;
++  if (!docShell || docShell->GetOnlineOverride(&onlineOverride) != NS_OK || onlineOverride == nsIDocShell::ONLINE_OVERRIDE_NONE)
++    return !NS_IsOffline();
++  return onlineOverride == nsIDocShell::ONLINE_OVERRIDE_ONLINE;
++}
+ 
+ void Navigator::GetBuildID(nsAString& aBuildID, CallerType aCallerType,
+                            ErrorResult& aRv) const {
+diff --git a/dom/base/Navigator.h b/dom/base/Navigator.h
+index 2a16e5e18427944f007c3f33301f2faea92f63e0..69a2037379bc03f941789814d00c7e99e58bdf0e 100644
+--- a/dom/base/Navigator.h
++++ b/dom/base/Navigator.h
+@@ -216,7 +216,7 @@ class Navigator final : public nsISupports, public nsWrapperCache {
+ 
+   StorageManager* Storage();
+ 
+-  static void GetAcceptLanguages(nsTArray<nsString>& aLanguages);
++  static void GetAcceptLanguages(const nsString* aLanguageOverride, nsTArray<nsString>& aLanguages);
+ 
+   dom::MediaCapabilities* MediaCapabilities();
+   dom::MediaSession* MediaSession();
+diff --git a/dom/base/nsContentUtils.cpp b/dom/base/nsContentUtils.cpp
+index efc42b7f547d9b8b8a202e2130c409b3bb63e9fb..ebf11bd9ed41c061863836a96ae0cda7e37d2032 100644
+--- a/dom/base/nsContentUtils.cpp
++++ b/dom/base/nsContentUtils.cpp
+@@ -8369,7 +8369,8 @@ nsresult nsContentUtils::SendMouseEvent(
+     bool aIgnoreRootScrollFrame, float aPressure,
+     unsigned short aInputSourceArg, uint32_t aIdentifier, bool aToWindow,
+     PreventDefaultResult* aPreventDefault, bool aIsDOMEventSynthesized,
+-    bool aIsWidgetEventSynthesized) {
++    bool aIsWidgetEventSynthesized,
++    bool convertToPointer) {
+   nsPoint offset;
+   nsCOMPtr<nsIWidget> widget = GetWidget(aPresShell, &offset);
+   if (!widget) return NS_ERROR_FAILURE;
+@@ -8428,6 +8429,7 @@ nsresult nsContentUtils::SendMouseEvent(
+   event.mTime = PR_IntervalNow();
+   event.mFlags.mIsSynthesizedForTests = aIsDOMEventSynthesized;
+   event.mExitFrom = exitFrom;
++  event.convertToPointer = convertToPointer;
+ 
+   nsPresContext* presContext = aPresShell->GetPresContext();
+   if (!presContext) return NS_ERROR_FAILURE;
+diff --git a/dom/base/nsContentUtils.h b/dom/base/nsContentUtils.h
+index 739e8ca23c858ac2bf0356ad8c0eb0da4471d9ea..afb76693d313dc3c97fb54d014ed146a5b1bfb01 100644
+--- a/dom/base/nsContentUtils.h
++++ b/dom/base/nsContentUtils.h
+@@ -2943,7 +2943,8 @@ class nsContentUtils {
+       int32_t aModifiers, bool aIgnoreRootScrollFrame, float aPressure,
+       unsigned short aInputSourceArg, uint32_t aIdentifier, bool aToWindow,
+       mozilla::PreventDefaultResult* aPreventDefault,
+-      bool aIsDOMEventSynthesized, bool aIsWidgetEventSynthesized);
++      bool aIsDOMEventSynthesized, bool aIsWidgetEventSynthesized,
++      bool convertToPointer = true);
+ 
+   static void FirePageShowEventForFrameLoaderSwap(
+       nsIDocShellTreeItem* aItem,
+diff --git a/dom/base/nsDOMWindowUtils.cpp b/dom/base/nsDOMWindowUtils.cpp
+index 24771c8d8fb251cb837f2c5c43a34f2f5e921188..1ccc540f4bf0a71546117479c86a07252ca00f1d 100644
+--- a/dom/base/nsDOMWindowUtils.cpp
++++ b/dom/base/nsDOMWindowUtils.cpp
+@@ -683,7 +683,7 @@ nsDOMWindowUtils::SendMouseEvent(
+     int32_t aClickCount, int32_t aModifiers, bool aIgnoreRootScrollFrame,
+     float aPressure, unsigned short aInputSourceArg,
+     bool aIsDOMEventSynthesized, bool aIsWidgetEventSynthesized,
+-    int32_t aButtons, uint32_t aIdentifier, uint8_t aOptionalArgCount,
++    int32_t aButtons, uint32_t aIdentifier, bool aDisablePointerEvent, uint8_t aOptionalArgCount,
+     bool* aPreventDefault) {
+   return SendMouseEventCommon(
+       aType, aX, aY, aButton, aClickCount, aModifiers, aIgnoreRootScrollFrame,
+@@ -691,7 +691,7 @@ nsDOMWindowUtils::SendMouseEvent(
+       aOptionalArgCount >= 7 ? aIdentifier : DEFAULT_MOUSE_POINTER_ID, false,
+       aPreventDefault, aOptionalArgCount >= 4 ? aIsDOMEventSynthesized : true,
+       aOptionalArgCount >= 5 ? aIsWidgetEventSynthesized : false,
+-      aOptionalArgCount >= 6 ? aButtons : MOUSE_BUTTONS_NOT_SPECIFIED);
++      aOptionalArgCount >= 6 ? aButtons : MOUSE_BUTTONS_NOT_SPECIFIED, !aDisablePointerEvent);
+ }
+ 
+ NS_IMETHODIMP
+@@ -718,13 +718,13 @@ nsDOMWindowUtils::SendMouseEventCommon(
+     int32_t aClickCount, int32_t aModifiers, bool aIgnoreRootScrollFrame,
+     float aPressure, unsigned short aInputSourceArg, uint32_t aPointerId,
+     bool aToWindow, bool* aPreventDefault, bool aIsDOMEventSynthesized,
+-    bool aIsWidgetEventSynthesized, int32_t aButtons) {
++    bool aIsWidgetEventSynthesized, int32_t aButtons, bool aConvertToPointer) {
+   RefPtr<PresShell> presShell = GetPresShell();
+   PreventDefaultResult preventDefaultResult;
+   nsresult rv = nsContentUtils::SendMouseEvent(
+       presShell, aType, aX, aY, aButton, aButtons, aClickCount, aModifiers,
+       aIgnoreRootScrollFrame, aPressure, aInputSourceArg, aPointerId, aToWindow,
+-      &preventDefaultResult, aIsDOMEventSynthesized, aIsWidgetEventSynthesized);
++      &preventDefaultResult, aIsDOMEventSynthesized, aIsWidgetEventSynthesized, aConvertToPointer);
+ 
+   if (aPreventDefault) {
+     *aPreventDefault = preventDefaultResult != PreventDefaultResult::No;
+diff --git a/dom/base/nsDOMWindowUtils.h b/dom/base/nsDOMWindowUtils.h
+index 30e0fafa77857c33e9871259a6ac0cebac965df8..3d8810abcfac1c220529b4e6163b0159475723ff 100644
+--- a/dom/base/nsDOMWindowUtils.h
++++ b/dom/base/nsDOMWindowUtils.h
+@@ -93,7 +93,7 @@ class nsDOMWindowUtils final : public nsIDOMWindowUtils,
+       int32_t aClickCount, int32_t aModifiers, bool aIgnoreRootScrollFrame,
+       float aPressure, unsigned short aInputSourceArg, uint32_t aIdentifier,
+       bool aToWindow, bool* aPreventDefault, bool aIsDOMEventSynthesized,
+-      bool aIsWidgetEventSynthesized, int32_t aButtons);
++      bool aIsWidgetEventSynthesized, int32_t aButtons, bool aConvertToPointer = true);
+ 
+   MOZ_CAN_RUN_SCRIPT
+   nsresult SendTouchEventCommon(
+diff --git a/dom/base/nsFocusManager.cpp b/dom/base/nsFocusManager.cpp
+index 6f226bbe93a5ba7621bcdeb910ff62568ae600d1..cca5be36464557439b7d119e97a173420b1bc4e2 100644
+--- a/dom/base/nsFocusManager.cpp
++++ b/dom/base/nsFocusManager.cpp
+@@ -1610,6 +1610,10 @@ void nsFocusManager::SetFocusInner(Element* aNewContent, int32_t aFlags,
+         (GetActiveBrowsingContext() == newRootBrowsingContext);
+   }
+ 
++  // In Playwright, we want to send focus events even if the element
++  // isn't actually in the active window.
++  isElementInActiveWindow = true;
++
+   // Exit fullscreen if a website focuses another window
+   if (StaticPrefs::full_screen_api_exit_on_windowRaise() &&
+       !isElementInActiveWindow && (aFlags & FLAG_RAISE) &&
+@@ -2929,7 +2933,9 @@ void nsFocusManager::RaiseWindow(nsPIDOMWindowOuter* aWindow,
+     }
+   }
+ 
+-  if (sTestMode) {
++  // In Playwright, we still want to execte the embedder functions
++  // to actually show / focus windows.
++  if (false && sTestMode) {
+     // In test mode, emulate raising the window. WindowRaised takes
+     // care of lowering the present active window. This happens in
+     // a separate runnable to avoid touching multiple windows in
+diff --git a/dom/base/nsGlobalWindowOuter.cpp b/dom/base/nsGlobalWindowOuter.cpp
+index 674353189dca391077370b899b69041305c440ca..5069dd0a761e5fd666d3ae4506cd6292fdbc92d3 100644
+--- a/dom/base/nsGlobalWindowOuter.cpp
++++ b/dom/base/nsGlobalWindowOuter.cpp
+@@ -2478,7 +2478,7 @@ nsresult nsGlobalWindowOuter::SetNewDocument(Document* aDocument,
+         &nsGlobalWindowInner::FireOnNewGlobalObject));
+   }
+ 
+-  if (newInnerWindow && !newInnerWindow->mHasNotifiedGlobalCreated && mDoc) {
++  if (newInnerWindow && mDoc) {
+     // We should probably notify. However if this is the, arguably bad,
+     // situation when we're creating a temporary non-chrome-about-blank
+     // document in a chrome docshell, don't notify just yet. Instead wait
+@@ -2497,10 +2497,16 @@ nsresult nsGlobalWindowOuter::SetNewDocument(Document* aDocument,
+     }();
+ 
+     if (!isContentAboutBlankInChromeDocshell) {
+-      newInnerWindow->mHasNotifiedGlobalCreated = true;
+-      nsContentUtils::AddScriptRunner(NewRunnableMethod(
+-          "nsGlobalWindowOuter::DispatchDOMWindowCreated", this,
+-          &nsGlobalWindowOuter::DispatchDOMWindowCreated));
++      if (!newInnerWindow->mHasNotifiedGlobalCreated) {
++        newInnerWindow->mHasNotifiedGlobalCreated = true;
++        nsContentUtils::AddScriptRunner(NewRunnableMethod(
++            "nsGlobalWindowOuter::DispatchDOMWindowCreated", this,
++            &nsGlobalWindowOuter::DispatchDOMWindowCreated));
++      } else if (!reUseInnerWindow) {
++        nsContentUtils::AddScriptRunner(NewRunnableMethod(
++            "nsGlobalWindowOuter::JugglerDispatchDOMWindowReused", this,
++            &nsGlobalWindowOuter::JugglerDispatchDOMWindowReused));
++      }
+     }
+   }
+ 
+@@ -2621,6 +2627,19 @@ void nsGlobalWindowOuter::DispatchDOMWindowCreated() {
+   }
+ }
+ 
++void nsGlobalWindowOuter::JugglerDispatchDOMWindowReused() {
++  nsCOMPtr<nsIObserverService> observerService =
++      mozilla::services::GetObserverService();
++  if (observerService && mDoc) {
++    nsIPrincipal* principal = mDoc->NodePrincipal();
++    if (!principal->IsSystemPrincipal()) {
++      observerService->NotifyObservers(static_cast<nsIDOMWindow*>(this),
++                                      "juggler-dom-window-reused",
++                                      nullptr);
++    }
++  }
++}
++
+ void nsGlobalWindowOuter::ClearStatus() { SetStatusOuter(u""_ns); }
+ 
+ void nsGlobalWindowOuter::SetDocShell(nsDocShell* aDocShell) {
+@@ -3734,6 +3753,14 @@ Maybe<CSSIntSize> nsGlobalWindowOuter::GetRDMDeviceSize(
+       }
+     }
+   }
++  if (topInProcessContentDoc) {
++    nsIDocShell* docShell = topInProcessContentDoc->GetDocShell();
++    if (docShell && docShell->GetDeviceSizeIsPageSize()) {
++      nsPresContext* presContext = docShell->GetPresContext();
++      if (presContext)
++        return Some(CSSPixel::FromAppUnitsRounded(presContext->GetVisibleArea().Size()));
++    }
++  }
+   return Nothing();
+ }
+ 
+diff --git a/dom/base/nsGlobalWindowOuter.h b/dom/base/nsGlobalWindowOuter.h
+index 70cea10edfd5445c93900c876dbbcaa07dccf23b..814f29ac5fbd08e4b5b458995aa7ed17d16b5fce 100644
+--- a/dom/base/nsGlobalWindowOuter.h
++++ b/dom/base/nsGlobalWindowOuter.h
+@@ -330,6 +330,7 @@ class nsGlobalWindowOuter final : public mozilla::dom::EventTarget,
+ 
+   // Outer windows only.
+   void DispatchDOMWindowCreated();
++  void JugglerDispatchDOMWindowReused();
+ 
+   // Outer windows only.
+   virtual void EnsureSizeAndPositionUpToDate() override;
+diff --git a/dom/base/nsINode.cpp b/dom/base/nsINode.cpp
+index 88e24213ce8f052d1bbe00c4fcb385aa70496552..1810403a058c8eee5e7c2ec2ccaa387a28f6b13a 100644
+--- a/dom/base/nsINode.cpp
++++ b/dom/base/nsINode.cpp
+@@ -1324,6 +1324,62 @@ void nsINode::GetBoxQuadsFromWindowOrigin(const BoxQuadOptions& aOptions,
+   mozilla::GetBoxQuadsFromWindowOrigin(this, aOptions, aResult, aRv);
+ }
+ 
++static nsIFrame* GetFirstFrame(nsINode* aNode) {
++  if (!aNode->IsContent())
++    return nullptr;
++  nsIFrame* frame = aNode->AsContent()->GetPrimaryFrame(FlushType::Frames);
++  if (!frame) {
++    FlattenedChildIterator iter(aNode->AsContent());
++    for (nsIContent* child = iter.GetNextChild(); child; child = iter.GetNextChild()) {
++      frame = child->GetPrimaryFrame(FlushType::Frames);
++      if (frame) {
++        break;
++      }
++    }
++  }
++  return frame;
++}
++
++void nsINode::ScrollRectIntoViewIfNeeded(int32_t x, int32_t y,
++                                         int32_t w, int32_t h,
++                                         ErrorResult& aRv) {
++  aRv = NS_ERROR_UNEXPECTED;
++  nsCOMPtr<Document> document = OwnerDoc();
++  if (!document) {
++    return aRv.ThrowNotFoundError("Node is detached from document");
++  }
++  PresShell* presShell = document->GetPresShell();
++  if (!presShell) {
++    return aRv.ThrowNotFoundError("Node is detached from document");
++  }
++  nsIFrame* primaryFrame = GetFirstFrame(this);
++  if (!primaryFrame) {
++    return aRv.ThrowNotFoundError("Node does not have a layout object");
++  }
++  aRv = NS_OK;
++  nsRect rect;
++  if (x == -1 && y == -1 && w == -1 && h == -1) {
++    rect = primaryFrame->GetRectRelativeToSelf();
++  } else {
++    rect = nsRect(nsPresContext::CSSPixelsToAppUnits(x),
++                  nsPresContext::CSSPixelsToAppUnits(y),
++                  nsPresContext::CSSPixelsToAppUnits(w),
++                  nsPresContext::CSSPixelsToAppUnits(h));
++  }
++  presShell->ScrollFrameRectIntoView(
++      primaryFrame, rect,
++      nsMargin(),
++      ScrollAxis(kScrollToCenter, WhenToScroll::Always),
++      ScrollAxis(kScrollToCenter, WhenToScroll::Always),
++      ScrollFlags::ScrollOverflowHidden);
++  // If a _visual_ scroll update is pending, cancel it; otherwise, it will
++  // clobber next scroll (e.g. subsequent window.scrollTo(0, 0) wlll break).
++  if (presShell->GetPendingVisualScrollUpdate()) {
++    presShell->AcknowledgePendingVisualScrollUpdate();
++    presShell->ClearPendingVisualScrollUpdate();
++  }
++}
++
+ already_AddRefed<DOMQuad> nsINode::ConvertQuadFromNode(
+     DOMQuad& aQuad, const GeometryNode& aFrom,
+     const ConvertCoordinateOptions& aOptions, CallerType aCallerType,
+diff --git a/dom/base/nsINode.h b/dom/base/nsINode.h
+index 56adeeb339ec7dcf63785b46c194c38614e2b000..0421f57f310c397438090cbd3f4b4290cc21151b 100644
+--- a/dom/base/nsINode.h
++++ b/dom/base/nsINode.h
+@@ -2131,6 +2131,10 @@ class nsINode : public mozilla::dom::EventTarget {
+                                    nsTArray<RefPtr<DOMQuad>>& aResult,
+                                    ErrorResult& aRv);
+ 
++  void ScrollRectIntoViewIfNeeded(int32_t x, int32_t y,
++                                  int32_t w, int32_t h,
++                                  ErrorResult& aRv);
++
+   already_AddRefed<DOMQuad> ConvertQuadFromNode(
+       DOMQuad& aQuad, const TextOrElementOrDocument& aFrom,
+       const ConvertCoordinateOptions& aOptions, CallerType aCallerType,
+diff --git a/dom/base/nsJSUtils.cpp b/dom/base/nsJSUtils.cpp
+index 2b8e5f7f34ee91034ddd53c858937e0f67008645..7bb979dadfa1811593d4cc3fcb306f35b2b34093 100644
+--- a/dom/base/nsJSUtils.cpp
++++ b/dom/base/nsJSUtils.cpp
+@@ -169,6 +169,11 @@ bool nsJSUtils::GetScopeChainForElement(
+   return true;
+ }
+ 
++/* static */
++bool nsJSUtils::SetTimeZoneOverride(const char* timezoneId) {
++  return JS::SetTimeZoneOverride(timezoneId);
++}
++
+ /* static */
+ void nsJSUtils::ResetTimeZone() { JS::ResetTimeZone(); }
+ 
+diff --git a/dom/base/nsJSUtils.h b/dom/base/nsJSUtils.h
+index 85a21e459305f556933f4dc0fa7441d8f9ed95a9..d7cb86479ba2ed06542307349d6d86dfd026d55d 100644
+--- a/dom/base/nsJSUtils.h
++++ b/dom/base/nsJSUtils.h
+@@ -78,6 +78,7 @@ class nsJSUtils {
+       JSContext* aCx, mozilla::dom::Element* aElement,
+       JS::MutableHandleVector<JSObject*> aScopeChain);
+ 
++  static bool SetTimeZoneOverride(const char* timezoneId);
+   static void ResetTimeZone();
+ 
+   static bool DumpEnabled();
+diff --git a/dom/chrome-webidl/BrowsingContext.webidl b/dom/chrome-webidl/BrowsingContext.webidl
+index 414e8367d19057d3249f07f6590fc84534406bf3..5872741f2e22d500cd3b939e66e730aaac5ad717 100644
+--- a/dom/chrome-webidl/BrowsingContext.webidl
++++ b/dom/chrome-webidl/BrowsingContext.webidl
+@@ -52,6 +52,24 @@ enum PrefersColorSchemeOverride {
+   "dark",
+ };
+ 
++/**
++ * CSS prefers-reduced-motion values.
++ */
++enum PrefersReducedMotionOverride {
++  "none",
++  "reduce",
++  "no-preference",
++};
++
++/**
++ * CSS forced-colors values.
++ */
++enum ForcedColorsOverride {
++  "none",
++  "active",
++  "no-override",  /* This clears the override. */
++};
++
+ /**
+  * Allowed overrides of platform/pref default behaviour for touch events.
+  */
+@@ -186,6 +204,12 @@ interface BrowsingContext {
+   // Color-scheme simulation, for DevTools.
+   [SetterThrows] attribute PrefersColorSchemeOverride prefersColorSchemeOverride;
+ 
++  // Reduced-Motion simulation, for DevTools.
++  [SetterThrows] attribute PrefersReducedMotionOverride prefersReducedMotionOverride;
++
++  // Forced-Colors simulation, for DevTools.
++  [SetterThrows] attribute ForcedColorsOverride forcedColorsOverride;
++
+   /**
+    * A unique identifier for the browser element that is hosting this
+    * BrowsingContext tree. Every BrowsingContext in the element's tree will
+diff --git a/dom/geolocation/Geolocation.cpp b/dom/geolocation/Geolocation.cpp
+index 5b85084f551faa37ed41a3f7c15482b68b653937..b0886dc9fdd5740d24359aed29d45351599950e1 100644
+--- a/dom/geolocation/Geolocation.cpp
++++ b/dom/geolocation/Geolocation.cpp
+@@ -23,6 +23,7 @@
+ #include "nsComponentManagerUtils.h"
+ #include "nsContentPermissionHelper.h"
+ #include "nsContentUtils.h"
++#include "nsDocShell.h"
+ #include "nsGlobalWindow.h"
+ #include "mozilla/dom/Document.h"
+ #include "nsINamed.h"
+@@ -260,10 +261,8 @@ nsGeolocationRequest::Allow(JS::Handle<JS::Value> aChoices) {
+     return NS_OK;
+   }
+ 
+-  RefPtr<nsGeolocationService> gs =
+-      nsGeolocationService::GetGeolocationService();
+-
+-  bool canUseCache = false;
++  nsGeolocationService* gs = mLocator->GetGeolocationService();
++  bool canUseCache = gs != nsGeolocationService::sService.get();
+   CachedPositionAndAccuracy lastPosition = gs->GetCachedPosition();
+   if (lastPosition.position) {
+     EpochTimeStamp cachedPositionTime_ms;
+@@ -436,8 +435,7 @@ void nsGeolocationRequest::Shutdown() {
+   // If there are no other high accuracy requests, the geolocation service will
+   // notify the provider to switch to the default accuracy.
+   if (mOptions && mOptions->mEnableHighAccuracy) {
+-    RefPtr<nsGeolocationService> gs =
+-        nsGeolocationService::GetGeolocationService();
++    nsGeolocationService* gs = mLocator ? mLocator->GetGeolocationService() : nullptr;
+     if (gs) {
+       gs->UpdateAccuracy();
+     }
+@@ -727,8 +725,14 @@ void nsGeolocationService::StopDevice() {
+ StaticRefPtr<nsGeolocationService> nsGeolocationService::sService;
+ 
+ already_AddRefed<nsGeolocationService>
+-nsGeolocationService::GetGeolocationService() {
++nsGeolocationService::GetGeolocationService(nsDocShell* docShell) {
+   RefPtr<nsGeolocationService> result;
++  if (docShell) {
++    result = docShell->GetGeolocationServiceOverride();
++    if (result)
++      return result.forget();
++  }
++
+   if (nsGeolocationService::sService) {
+     result = nsGeolocationService::sService;
+ 
+@@ -820,7 +824,9 @@ nsresult Geolocation::Init(nsPIDOMWindowInner* aContentDom) {
+   // If no aContentDom was passed into us, we are being used
+   // by chrome/c++ and have no mOwner, no mPrincipal, and no need
+   // to prompt.
+-  mService = nsGeolocationService::GetGeolocationService();
++  nsCOMPtr<Document> doc = aContentDom ? aContentDom->GetDoc() : nullptr;
++  mService = nsGeolocationService::GetGeolocationService(
++      doc ? static_cast<nsDocShell*>(doc->GetDocShell()) : nullptr);
+   if (mService) {
+     mService->AddLocator(this);
+   }
+diff --git a/dom/geolocation/Geolocation.h b/dom/geolocation/Geolocation.h
+index 5c0d2f96a22c6928d6aee5a226032c0944ae7a54..5a7bb1f6cea1946eea143dca4e2f1e19746a04a4 100644
+--- a/dom/geolocation/Geolocation.h
++++ b/dom/geolocation/Geolocation.h
+@@ -31,6 +31,7 @@
+ 
+ #include "nsIGeolocationProvider.h"
+ #include "mozilla/Attributes.h"
++#include "nsDocShell.h"
+ 
+ class nsGeolocationService;
+ class nsGeolocationRequest;
+@@ -48,13 +49,14 @@ struct CachedPositionAndAccuracy {
+   bool isHighAccuracy;
+ };
+ 
++
+ /**
+  * Singleton that manages the geolocation provider
+  */
+ class nsGeolocationService final : public nsIGeolocationUpdate,
+                                    public nsIObserver {
+  public:
+-  static already_AddRefed<nsGeolocationService> GetGeolocationService();
++  static already_AddRefed<nsGeolocationService> GetGeolocationService(nsDocShell* docShell = nullptr);
+   static mozilla::StaticRefPtr<nsGeolocationService> sService;
+ 
+   NS_DECL_THREADSAFE_ISUPPORTS
+@@ -179,6 +181,8 @@ class Geolocation final : public nsIGeolocationUpdate, public nsWrapperCache {
+   // null.
+   static already_AddRefed<Geolocation> NonWindowSingleton();
+ 
++  nsGeolocationService* GetGeolocationService() { return mService; };
++
+  private:
+   ~Geolocation();
+ 
+diff --git a/dom/html/HTMLInputElement.cpp b/dom/html/HTMLInputElement.cpp
+index c8888eb6cfb0319e83d711d6958f8d03faf409d7..878a72a2aa005fd2ee7ac0290706629b66ddb837 100644
+--- a/dom/html/HTMLInputElement.cpp
++++ b/dom/html/HTMLInputElement.cpp
+@@ -53,6 +53,7 @@
+ #include "nsMappedAttributes.h"
+ #include "nsIFormControl.h"
+ #include "mozilla/dom/Document.h"
++#include "nsDocShell.h"
+ #include "nsIFormControlFrame.h"
+ #include "nsITextControlFrame.h"
+ #include "nsIFrame.h"
+@@ -746,6 +747,12 @@ nsresult HTMLInputElement::InitFilePicker(FilePickerType aType) {
+     return NS_ERROR_FAILURE;
+   }
+ 
++  nsDocShell* docShell = static_cast<nsDocShell*>(win->GetDocShell());
++  if (docShell && docShell->IsFileInputInterceptionEnabled()) {
++    docShell->FilePickerShown(this);
++    return NS_OK;
++  }
++
+   if (IsPopupBlocked(doc)) {
+     return NS_OK;
+   }
+diff --git a/dom/interfaces/base/nsIDOMWindowUtils.idl b/dom/interfaces/base/nsIDOMWindowUtils.idl
+index c16b813f29d8a519673129bb7debaaec0430145a..6f82922ac7e889e55beda7d43da3ebe6adeb7ca9 100644
+--- a/dom/interfaces/base/nsIDOMWindowUtils.idl
++++ b/dom/interfaces/base/nsIDOMWindowUtils.idl
+@@ -375,7 +375,8 @@ interface nsIDOMWindowUtils : nsISupports {
+                          [optional] in boolean aIsDOMEventSynthesized,
+                          [optional] in boolean aIsWidgetEventSynthesized,
+                          [optional] in long aButtons,
+-                         [optional] in unsigned long aIdentifier);
++                         [optional] in unsigned long aIdentifier,
++                         [optional] in boolean aDisablePointerEvent);
+ 
+   /** Synthesize a touch event. The event types supported are:
+    *    touchstart, touchend, touchmove, and touchcancel
+diff --git a/dom/media/systemservices/video_engine/desktop_capture_impl.cc b/dom/media/systemservices/video_engine/desktop_capture_impl.cc
+index 9d4e8fbbfe8d45cc6245c7659423004ad1ceedeb..f955c7bace3cedfe0469e59a5e8c5824158c4d50 100644
+--- a/dom/media/systemservices/video_engine/desktop_capture_impl.cc
++++ b/dom/media/systemservices/video_engine/desktop_capture_impl.cc
+@@ -123,10 +123,11 @@ int32_t ScreenDeviceInfoImpl::GetOrientation(const char* deviceUniqueIdUTF8,
+   return 0;
+ }
+ 
+-VideoCaptureModule* DesktopCaptureImpl::Create(const int32_t id,
++VideoCaptureModuleEx* DesktopCaptureImpl::Create(const int32_t id,
+                                                const char* uniqueId,
+-                                               const CaptureDeviceType type) {
+-  return new rtc::RefCountedObject<DesktopCaptureImpl>(id, uniqueId, type);
++                                               const CaptureDeviceType type,
++                                               bool captureCursor) {
++  return new rtc::RefCountedObject<DesktopCaptureImpl>(id, uniqueId, type, captureCursor);
+ }
+ 
+ int32_t WindowDeviceInfoImpl::Init() {
+@@ -358,9 +359,13 @@ int32_t DesktopCaptureImpl::Init() {
+     DesktopCapturer::SourceId sourceId = atoi(_deviceUniqueId.c_str());
+     pWindowCapturer->SelectSource(sourceId);
+ 
+-    desktop_capturer_cursor_composer_ =
+-        std::unique_ptr<DesktopAndCursorComposer>(
+-            new DesktopAndCursorComposer(std::move(pWindowCapturer), options));
++    if (capture_cursor_) {
++      desktop_capturer_cursor_composer_ =
++          std::unique_ptr<DesktopAndCursorComposer>(
++              new DesktopAndCursorComposer(std::move(pWindowCapturer), options));
++    } else {
++      desktop_capturer_cursor_composer_ = std::move(pWindowCapturer);
++    }
+   } else if (_deviceType == CaptureDeviceType::Browser) {
+     // XXX We don't capture cursors, so avoid the extra indirection layer. We
+     // could also pass null for the pMouseCursorMonitor.
+@@ -377,13 +382,15 @@ int32_t DesktopCaptureImpl::Init() {
+ }
+ 
+ DesktopCaptureImpl::DesktopCaptureImpl(const int32_t id, const char* uniqueId,
+-                                       const CaptureDeviceType type)
++                                       const CaptureDeviceType type,
++                                       bool captureCursor)
+     : _id(id),
+       _deviceUniqueId(uniqueId),
+       _deviceType(type),
+       _requestedCapability(),
+       _rotateFrame(kVideoRotation_0),
+       last_capture_time_ms_(rtc::TimeMillis()),
++      capture_cursor_(captureCursor),
+       time_event_(EventWrapper::Create()),
+ #if defined(_WIN32)
+       capturer_thread_(
+@@ -428,6 +435,19 @@ void DesktopCaptureImpl::DeRegisterCaptureDataCallback(
+   }
+ }
+ 
++void DesktopCaptureImpl::RegisterRawFrameCallback(RawFrameCallback* rawFrameCallback) {
++  rtc::CritScope lock(&_apiCs);
++  _rawFrameCallbacks.insert(rawFrameCallback);
++}
++
++void DesktopCaptureImpl::DeRegisterRawFrameCallback(RawFrameCallback* rawFrameCallback) {
++  rtc::CritScope lock(&_apiCs);
++  auto it = _rawFrameCallbacks.find(rawFrameCallback);
++  if (it != _rawFrameCallbacks.end()) {
++    _rawFrameCallbacks.erase(it);
++  }
++}
++
+ int32_t DesktopCaptureImpl::StopCaptureIfAllClientsClose() {
+   if (_dataCallBacks.empty()) {
+     return StopCapture();
+@@ -636,6 +656,15 @@ void DesktopCaptureImpl::OnCaptureResult(DesktopCapturer::Result result,
+   frameInfo.height = frame->size().height();
+   frameInfo.videoType = VideoType::kARGB;
+ 
++  size_t videoFrameStride =
++      frameInfo.width * DesktopFrame::kBytesPerPixel;
++  {
++    rtc::CritScope cs(&_apiCs);
++    for (auto rawFrameCallback : _rawFrameCallbacks) {
++      rawFrameCallback->OnRawFrame(videoFrame, videoFrameStride, frameInfo);
++    }
++  }
++
+   size_t videoFrameLength =
+       frameInfo.width * frameInfo.height * DesktopFrame::kBytesPerPixel;
+   IncomingFrame(videoFrame, videoFrameLength,
+diff --git a/dom/media/systemservices/video_engine/desktop_capture_impl.h b/dom/media/systemservices/video_engine/desktop_capture_impl.h
+index b725849dab1d1f898ab988e57a35c27e3eb44700..e2e13b0a0926475fe673fecf5e3c497569d158b3 100644
+--- a/dom/media/systemservices/video_engine/desktop_capture_impl.h
++++ b/dom/media/systemservices/video_engine/desktop_capture_impl.h
+@@ -46,6 +46,21 @@ namespace webrtc {
+ 
+ class VideoCaptureEncodeInterface;
+ 
++class RawFrameCallback {
++ public:
++  virtual ~RawFrameCallback() {}
++
++  virtual void OnRawFrame(uint8_t* videoFrame, size_t videoFrameLength, const VideoCaptureCapability& frameInfo) = 0;
++};
++
++class VideoCaptureModuleEx : public VideoCaptureModule {
++ public:
++  virtual ~VideoCaptureModuleEx() {}
++
++  virtual void RegisterRawFrameCallback(RawFrameCallback* rawFrameCallback) = 0;
++  virtual void DeRegisterRawFrameCallback(RawFrameCallback* rawFrameCallback) = 0;
++};
++
+ // simulate deviceInfo interface for video engine, bridge screen/application and
+ // real screen/application device info
+ 
+@@ -158,12 +173,13 @@ class BrowserDeviceInfoImpl : public VideoCaptureModule::DeviceInfo {
+ // As with video, DesktopCaptureImpl is a proxy for screen sharing
+ // and follows the video pipeline design
+ class DesktopCaptureImpl : public DesktopCapturer::Callback,
+-                           public VideoCaptureModule {
++                           public VideoCaptureModuleEx {
+  public:
+   /* Create a screen capture modules object
+    */
+-  static VideoCaptureModule* Create(const int32_t id, const char* uniqueId,
+-                                    const CaptureDeviceType type);
++  static VideoCaptureModuleEx* Create(const int32_t id, const char* uniqueId,
++                                    const CaptureDeviceType type,
++                                    bool captureCursor = true);
+   static VideoCaptureModule::DeviceInfo* CreateDeviceInfo(
+       const int32_t id, const CaptureDeviceType type);
+ 
+@@ -173,6 +189,8 @@ class DesktopCaptureImpl : public DesktopCapturer::Callback,
+   void DeRegisterCaptureDataCallback(
+       rtc::VideoSinkInterface<VideoFrame>* dataCallback) override;
+   int32_t StopCaptureIfAllClientsClose() override;
++  void RegisterRawFrameCallback(RawFrameCallback* rawFrameCallback) override;
++  void DeRegisterRawFrameCallback(RawFrameCallback* rawFrameCallback) override;
+ 
+   int32_t SetCaptureRotation(VideoRotation rotation) override;
+   bool SetApplyRotation(bool enable) override;
+@@ -193,7 +211,7 @@ class DesktopCaptureImpl : public DesktopCapturer::Callback,
+ 
+  protected:
+   DesktopCaptureImpl(const int32_t id, const char* uniqueId,
+-                     const CaptureDeviceType type);
++                     const CaptureDeviceType type, bool captureCursor);
+   virtual ~DesktopCaptureImpl();
+   int32_t DeliverCapturedFrame(webrtc::VideoFrame& captureFrame);
+ 
+@@ -215,6 +233,7 @@ class DesktopCaptureImpl : public DesktopCapturer::Callback,
+   rtc::RecursiveCriticalSection _apiCs;
+ 
+   std::set<rtc::VideoSinkInterface<VideoFrame>*> _dataCallBacks;
++  std::set<RawFrameCallback*> _rawFrameCallbacks;
+ 
+   int64_t _incomingFrameTimesNanos
+       [kFrameRateCountHistorySize];  // timestamp for local captured frames
+@@ -237,6 +256,7 @@ class DesktopCaptureImpl : public DesktopCapturer::Callback,
+   void ProcessIter();
+ 
+  private:
++  bool capture_cursor_ = true;
+   // This is created on the main thread and accessed on both the main thread
+   // and the capturer thread. It is created prior to the capturer thread
+   // starting and is destroyed after it is stopped.
+diff --git a/dom/script/ScriptSettings.cpp b/dom/script/ScriptSettings.cpp
+index 8c8a5810fd56512cf37635da1f43757719f06113..d2bc58fcd3b05f989f948839d574d00d0409873c 100644
+--- a/dom/script/ScriptSettings.cpp
++++ b/dom/script/ScriptSettings.cpp
+@@ -150,6 +150,30 @@ ScriptSettingsStackEntry::~ScriptSettingsStackEntry() {
+   MOZ_ASSERT_IF(mGlobalObject, mGlobalObject->HasJSGlobal());
+ }
+ 
++static nsIGlobalObject* UnwrapSandboxGlobal(nsIGlobalObject* global) {
++  if (!global)
++    return global;
++  JSObject* globalObject = global->GetGlobalJSObject();
++  if (!globalObject)
++    return global;
++  JSContext* cx = nsContentUtils::GetCurrentJSContext();
++  if (!cx)
++    return global;
++  JS::Rooted<JSObject*> proto(cx);
++  JS::RootedObject rootedGlobal(cx, globalObject);
++  if (!JS_GetPrototype(cx, rootedGlobal, &proto))
++    return global;
++  if (!proto || !xpc::IsSandboxPrototypeProxy(proto))
++    return global;
++  // If this is a sandbox associated with a DOMWindow via a
++  // sandboxPrototype, use that DOMWindow. This supports GreaseMonkey
++  // and JetPack content scripts.
++  proto = js::CheckedUnwrapDynamic(proto, cx, /* stopAtWindowProxy = */ false);
++  if (!proto)
++    return global;
++  return xpc::WindowGlobalOrNull(proto);
++}
++
+ // If the entry or incumbent global ends up being something that the subject
+ // principal doesn't subsume, we don't want to use it. This never happens on
+ // the web, but can happen with asymmetric privilege relationships (i.e.
+@@ -177,7 +201,7 @@ static nsIGlobalObject* ClampToSubject(nsIGlobalObject* aGlobalOrNull) {
+   NS_ENSURE_TRUE(globalPrin, GetCurrentGlobal());
+   if (!nsContentUtils::SubjectPrincipalOrSystemIfNativeCaller()
+            ->SubsumesConsideringDomain(globalPrin)) {
+-    return GetCurrentGlobal();
++    return UnwrapSandboxGlobal(GetCurrentGlobal());
+   }
+ 
+   return aGlobalOrNull;
+diff --git a/dom/security/nsCSPUtils.cpp b/dom/security/nsCSPUtils.cpp
+index b31ca1000cb1d7b8ca1af74b9ac0313aba053875..54abd38a35fc2b4906760c370d9f96d7f2ade0e2 100644
+--- a/dom/security/nsCSPUtils.cpp
++++ b/dom/security/nsCSPUtils.cpp
+@@ -127,6 +127,11 @@ void CSP_ApplyMetaCSPToDoc(mozilla::dom::Document& aDoc,
+     return;
+   }
+ 
++  if (aDoc.GetDocShell() &&
++      nsDocShell::Cast(aDoc.GetDocShell())->IsBypassCSPEnabled()) {
++    return;
++  }
++
+   nsAutoString policyStr(
+       nsContentUtils::TrimWhitespace<nsContentUtils::IsHTMLWhitespace>(
+           aPolicyStr));
+diff --git a/dom/webidl/GeometryUtils.webidl b/dom/webidl/GeometryUtils.webidl
+index 2f71b284ee5f7e11f117c447834b48355784448c..ddcc545da1efec5784273b032efa00ad8b89fec0 100644
+--- a/dom/webidl/GeometryUtils.webidl
++++ b/dom/webidl/GeometryUtils.webidl
+@@ -16,6 +16,8 @@ dictionary BoxQuadOptions {
+   GeometryNode relativeTo;
+   [ChromeOnly]
+   boolean createFramesForSuppressedWhitespace = true;
++  [ChromeOnly]
++  boolean recurseWhenNoFrame = false;
+ };
+ 
+ dictionary ConvertCoordinateOptions {
+@@ -27,6 +29,9 @@ interface mixin GeometryUtils {
+   [Throws, Func="nsINode::HasBoxQuadsSupport", NeedsCallerType]
+   sequence<DOMQuad> getBoxQuads(optional BoxQuadOptions options = {});
+ 
++  [ChromeOnly, Throws, Func="nsINode::HasBoxQuadsSupport"]
++  void scrollRectIntoViewIfNeeded(long x, long y, long w, long h);
++
+   /* getBoxQuadsFromWindowOrigin is similar to getBoxQuads, but the
+    * returned quads are further translated relative to the window
+    * origin -- which is not the layout origin. Further translation
+diff --git a/dom/workers/RuntimeService.cpp b/dom/workers/RuntimeService.cpp
+index 1422ee80d2ac3cf24304f3b2318ad0bc7da7efe7..1940994c96c2c714761d242f374973b08e81d51d 100644
+--- a/dom/workers/RuntimeService.cpp
++++ b/dom/workers/RuntimeService.cpp
+@@ -976,7 +976,7 @@ void PrefLanguagesChanged(const char* /* aPrefName */, void* /* aClosure */) {
+   AssertIsOnMainThread();
+ 
+   nsTArray<nsString> languages;
+-  Navigator::GetAcceptLanguages(languages);
++  Navigator::GetAcceptLanguages(nullptr, languages);
+ 
+   RuntimeService* runtime = RuntimeService::GetService();
+   if (runtime) {
+@@ -1178,8 +1178,7 @@ bool RuntimeService::RegisterWorker(WorkerPrivate& aWorkerPrivate) {
+       }
+ 
+       // The navigator overridden properties should have already been read.
+-
+-      Navigator::GetAcceptLanguages(mNavigatorProperties.mLanguages);
++      Navigator::GetAcceptLanguages(nullptr, mNavigatorProperties.mLanguages);
+       mNavigatorPropertiesLoaded = true;
+     }
+ 
+@@ -1783,6 +1782,13 @@ void RuntimeService::PropagateStorageAccessPermissionGranted(
+   }
+ }
+ 
++void RuntimeService::ResetDefaultLocaleInAllWorkers() {
++  AssertIsOnMainThread();
++  BroadcastAllWorkers([](auto& worker) {
++    worker.ResetDefaultLocale();
++  });
++}
++
+ template <typename Func>
+ void RuntimeService::BroadcastAllWorkers(const Func& aFunc) {
+   AssertIsOnMainThread();
+@@ -2198,6 +2204,14 @@ void PropagateStorageAccessPermissionGrantedToWorkers(
+   }
+ }
+ 
++void ResetDefaultLocaleInAllWorkers() {
++  AssertIsOnMainThread();
++  RuntimeService* runtime = RuntimeService::GetService();
++  if (runtime) {
++    runtime->ResetDefaultLocaleInAllWorkers();
++  }
++}
++
+ WorkerPrivate* GetWorkerPrivateFromContext(JSContext* aCx) {
+   MOZ_ASSERT(!NS_IsMainThread());
+   MOZ_ASSERT(aCx);
+diff --git a/dom/workers/RuntimeService.h b/dom/workers/RuntimeService.h
+index ef32cc847e8b86319830bb93879aaf809fe464d4..5db3be0dc87e50ff75177194ca734313b22509d6 100644
+--- a/dom/workers/RuntimeService.h
++++ b/dom/workers/RuntimeService.h
+@@ -110,6 +110,8 @@ class RuntimeService final : public nsIObserver {
+   void PropagateStorageAccessPermissionGranted(
+       const nsPIDOMWindowInner& aWindow);
+ 
++  void ResetDefaultLocaleInAllWorkers();
++
+   const NavigatorProperties& GetNavigatorProperties() const {
+     return mNavigatorProperties;
+   }
+diff --git a/dom/workers/WorkerCommon.h b/dom/workers/WorkerCommon.h
+index d10dabb5c5ff8e17851edf2bd2efc08e74584d8e..53c4070c5fde43b27fb8fbfdcf4c23d8af57fba3 100644
+--- a/dom/workers/WorkerCommon.h
++++ b/dom/workers/WorkerCommon.h
+@@ -44,6 +44,8 @@ void ResumeWorkersForWindow(const nsPIDOMWindowInner& aWindow);
+ void PropagateStorageAccessPermissionGrantedToWorkers(
+     const nsPIDOMWindowInner& aWindow);
+ 
++void ResetDefaultLocaleInAllWorkers();
++
+ // All of these are implemented in WorkerScope.cpp
+ 
+ bool IsWorkerGlobal(JSObject* global);
+diff --git a/dom/workers/WorkerPrivate.cpp b/dom/workers/WorkerPrivate.cpp
+index 957103c9baec027ed667ccea45cdde5f44961daf..2eb02b70b59c515d8c758cf576dac2b18c8df80e 100644
+--- a/dom/workers/WorkerPrivate.cpp
++++ b/dom/workers/WorkerPrivate.cpp
+@@ -695,6 +695,18 @@ class UpdateContextOptionsRunnable final : public WorkerControlRunnable {
+   }
+ };
+ 
++class ResetDefaultLocaleRunnable final : public WorkerControlRunnable {
++ public:
++  explicit ResetDefaultLocaleRunnable(WorkerPrivate* aWorkerPrivate)
++      : WorkerControlRunnable(aWorkerPrivate, WorkerThreadUnchangedBusyCount) {}
++
++  virtual bool WorkerRun(JSContext* aCx,
++                         WorkerPrivate* aWorkerPrivate) override {
++    aWorkerPrivate->ResetDefaultLocaleInternal(aCx);
++    return true;
++  }
++};
++
+ class UpdateLanguagesRunnable final : public WorkerRunnable {
+   nsTArray<nsString> mLanguages;
+ 
+@@ -1925,6 +1937,16 @@ void WorkerPrivate::UpdateContextOptions(
+   }
+ }
+ 
++void WorkerPrivate::ResetDefaultLocale() {
++  AssertIsOnParentThread();
++
++  RefPtr<ResetDefaultLocaleRunnable> runnable =
++      new ResetDefaultLocaleRunnable(this);
++  if (!runnable->Dispatch()) {
++    NS_WARNING("Failed to reset default locale in worker!");
++  }
++}
++
+ void WorkerPrivate::UpdateLanguages(const nsTArray<nsString>& aLanguages) {
+   AssertIsOnParentThread();
+ 
+@@ -5086,6 +5108,15 @@ void WorkerPrivate::UpdateContextOptionsInternal(
+   }
+ }
+ 
++void WorkerPrivate::ResetDefaultLocaleInternal(JSContext* aCx) {
++  JS_ResetDefaultLocale(JS_GetRuntime(aCx));
++  auto data = mWorkerThreadAccessible.Access();
++
++  for (uint32_t index = 0; index < data->mChildWorkers.Length(); index++) {
++    data->mChildWorkers[index]->ResetDefaultLocale();
++  }
++}
++
+ void WorkerPrivate::UpdateLanguagesInternal(
+     const nsTArray<nsString>& aLanguages) {
+   WorkerGlobalScope* globalScope = GlobalScope();
+diff --git a/dom/workers/WorkerPrivate.h b/dom/workers/WorkerPrivate.h
+index 1f31c4a6a94491cb6c981655e30e1fd42c4dbfc1..dbfdf4fc27f112e7cadbb768a858323f8ee919d1 100644
+--- a/dom/workers/WorkerPrivate.h
++++ b/dom/workers/WorkerPrivate.h
+@@ -330,6 +330,8 @@ class WorkerPrivate final
+   void UpdateContextOptionsInternal(JSContext* aCx,
+                                     const JS::ContextOptions& aContextOptions);
+ 
++  void ResetDefaultLocaleInternal(JSContext* aCx);
++
+   void UpdateLanguagesInternal(const nsTArray<nsString>& aLanguages);
+ 
+   void UpdateJSWorkerMemoryParameterInternal(JSContext* aCx, JSGCParamKey key,
+@@ -966,6 +968,8 @@ class WorkerPrivate final
+ 
+   void UpdateContextOptions(const JS::ContextOptions& aContextOptions);
+ 
++  void ResetDefaultLocale();
++
+   void UpdateLanguages(const nsTArray<nsString>& aLanguages);
+ 
+   void UpdateJSWorkerMemoryParameter(JSGCParamKey key, Maybe<uint32_t> value);
+diff --git a/intl/components/src/TimeZone.cpp b/intl/components/src/TimeZone.cpp
+index 145dd3f07112c2390325de50f8eae674484adfe6..8cb3787e1b6bb25c6a58f1d910ae7dbc440d9ace 100644
+--- a/intl/components/src/TimeZone.cpp
++++ b/intl/components/src/TimeZone.cpp
+@@ -16,6 +16,7 @@
+ 
+ namespace mozilla::intl {
+ 
++
+ /* static */
+ Result<UniquePtr<TimeZone>, ICUError> TimeZone::TryCreate(
+     Maybe<Span<const char16_t>> aTimeZoneOverride) {
+@@ -239,6 +240,13 @@ static ICUResult SetDefaultTimeZone(TimeZoneIdentifierVector& timeZone) {
+ }
+ #endif
+ 
++bool TimeZone::IsValidTimeZoneId(const char* timeZoneId) {
++  // Validate timezone id.
++  mozilla::UniquePtr<icu::TimeZone> timeZone(icu::TimeZone::createTimeZone(
++      icu::UnicodeString(timeZoneId, -1, US_INV)));
++  return timeZone && *timeZone != icu::TimeZone::getUnknown();
++}
++
+ Result<bool, ICUError> TimeZone::SetDefaultTimeZone(
+     Span<const char> aTimeZone) {
+ #if MOZ_INTL_USE_ICU_CPP_TIMEZONE
+diff --git a/intl/components/src/TimeZone.h b/intl/components/src/TimeZone.h
+index 180092bd3fc0b70462cc6ba67e72946e4c4c7604..bcaecb9fcd7b630c75289581a887cc6894733168 100644
+--- a/intl/components/src/TimeZone.h
++++ b/intl/components/src/TimeZone.h
+@@ -154,6 +154,8 @@ class TimeZone final {
+     return FillBufferWithICUCall(aBuffer, ucal_getHostTimeZone);
+   }
+ 
++  static bool IsValidTimeZoneId(const char* timeZoneId);
++
+   /**
+    * Set the default time zone.
+    */
+diff --git a/js/public/Date.h b/js/public/Date.h
+index bb69d58dc96ed7f0b37f73e26abdd0bdfeaaf556..8436d439f72287176a2fe6a1a837d3db73409e67 100644
+--- a/js/public/Date.h
++++ b/js/public/Date.h
+@@ -53,6 +53,8 @@ namespace JS {
+  */
+ extern JS_PUBLIC_API void ResetTimeZone();
+ 
++extern JS_PUBLIC_API bool SetTimeZoneOverride(const char* timezoneId);
++
+ class ClippedTime;
+ inline ClippedTime TimeClip(double time);
+ 
+diff --git a/js/src/debugger/Object.cpp b/js/src/debugger/Object.cpp
+index 1c00fed8e0dc84b12c9b1c169d841e27402579a1..ad25cb5f8a0572c9c8622f85551b79dd2ffea819 100644
+--- a/js/src/debugger/Object.cpp
++++ b/js/src/debugger/Object.cpp
+@@ -2373,7 +2373,11 @@ Maybe<Completion> DebuggerObject::call(JSContext* cx,
+         invokeArgs[i].set(args2[i]);
+       }
+ 
++      // Disable CSP for the scope of the call.
++      const JSSecurityCallbacks* securityCallbacks = JS_GetSecurityCallbacks(cx);
++      JS_SetSecurityCallbacks(cx, nullptr);
+       ok = js::Call(cx, calleev, thisv, invokeArgs, &result);
++      JS_SetSecurityCallbacks(cx, securityCallbacks);
+     }
+   }
+ 
+diff --git a/js/src/vm/DateTime.cpp b/js/src/vm/DateTime.cpp
+index a86a6e9f7177c86624f118ebbc2e012766137bd1..5ebd1f106a556471fda5961d1f11f8eac31718cc 100644
+--- a/js/src/vm/DateTime.cpp
++++ b/js/src/vm/DateTime.cpp
+@@ -178,6 +178,11 @@ void js::DateTimeInfo::internalResetTimeZone(ResetTimeZoneMode mode) {
+   }
+ }
+ 
++void js::DateTimeInfo::internalSetTimeZoneOverride(std::string timeZone) {
++  timeZoneOverride_ = std::move(timeZone);
++  internalResetTimeZone(ResetTimeZoneMode::ResetEvenIfOffsetUnchanged);
++}
++
+ void js::DateTimeInfo::updateTimeZone() {
+   MOZ_ASSERT(timeZoneStatus_ != TimeZoneStatus::Valid);
+ 
+@@ -502,10 +507,24 @@ void js::ResetTimeZoneInternal(ResetTimeZoneMode mode) {
+   js::DateTimeInfo::resetTimeZone(mode);
+ }
+ 
++void js::SetTimeZoneOverrideInternal(std::string timeZone) {
++  auto guard = js::DateTimeInfo::instance->lock();
++  guard->internalSetTimeZoneOverride(timeZone);
++}
++
+ JS_PUBLIC_API void JS::ResetTimeZone() {
+   js::ResetTimeZoneInternal(js::ResetTimeZoneMode::ResetEvenIfOffsetUnchanged);
+ }
+ 
++JS_PUBLIC_API bool JS::SetTimeZoneOverride(const char* timeZoneId) {
++  if (!mozilla::intl::TimeZone::IsValidTimeZoneId(timeZoneId)) {
++    fprintf(stderr, "Invalid timezone id: %s\n", timeZoneId);
++    return false;
++  }
++  js::SetTimeZoneOverrideInternal(std::string(timeZoneId));
++  return true;
++}
++
+ #if JS_HAS_INTL_API
+ #  if defined(XP_WIN)
+ static bool IsOlsonCompatibleWindowsTimeZoneId(std::string_view tz) {
+@@ -727,9 +746,17 @@ void js::ResyncICUDefaultTimeZone() {
+ 
+ void js::DateTimeInfo::internalResyncICUDefaultTimeZone() {
+ #if JS_HAS_INTL_API
++  if (!timeZoneOverride_.empty()) {
++    mozilla::Span<const char> tzid = mozilla::Span(timeZoneOverride_.data(), timeZoneOverride_.length());
++    auto result = mozilla::intl::TimeZone::SetDefaultTimeZone(tzid);
++    if (result.isErr()) {
++      fprintf(stderr, "ERROR: failed to setup default time zone\n");
++    }
++    return;
++  }
++
+   if (const char* tzenv = std::getenv("TZ")) {
+     std::string_view tz(tzenv);
+-
+     mozilla::Span<const char> tzid;
+ 
+ #  if defined(XP_WIN)
+diff --git a/js/src/vm/DateTime.h b/js/src/vm/DateTime.h
+index 3ce936fe3a4a83f9161eddc9e5289322d6a363e3..6b1c34244d8b2f2102ec423e2d96812fb5d41a9d 100644
+--- a/js/src/vm/DateTime.h
++++ b/js/src/vm/DateTime.h
+@@ -63,6 +63,8 @@ enum class ResetTimeZoneMode : bool {
+  */
+ extern void ResetTimeZoneInternal(ResetTimeZoneMode mode);
+ 
++extern void SetTimeZoneOverrideInternal(std::string timeZone);
++
+ /**
+  * ICU's default time zone, used for various date/time formatting operations
+  * that include the local time in the representation, is allowed to go stale
+@@ -202,6 +204,7 @@ class DateTimeInfo {
+   // and js::ResyncICUDefaultTimeZone().
+   friend void js::ResetTimeZoneInternal(ResetTimeZoneMode);
+   friend void js::ResyncICUDefaultTimeZone();
++  friend void js::SetTimeZoneOverrideInternal(std::string);
+ 
+   static void resetTimeZone(ResetTimeZoneMode mode) {
+     auto guard = instance->lock();
+@@ -293,6 +296,8 @@ class DateTimeInfo {
+   JS::UniqueChars locale_;
+   JS::UniqueTwoByteChars standardName_;
+   JS::UniqueTwoByteChars daylightSavingsName_;
++
++  std::string timeZoneOverride_;
+ #else
+   // Restrict the data-time range to the minimum required time_t range as
+   // specified in POSIX. Most operating systems support 64-bit time_t
+@@ -308,6 +313,8 @@ class DateTimeInfo {
+ 
+   void internalResetTimeZone(ResetTimeZoneMode mode);
+ 
++  void internalSetTimeZoneOverride(std::string timeZone);
++
+   void updateTimeZone();
+ 
+   void internalResyncICUDefaultTimeZone();
+diff --git a/layout/base/GeometryUtils.cpp b/layout/base/GeometryUtils.cpp
+index dac899f7558b26d6848da8b98ed8a93555c8751a..2a07d67fa1c2840b25085566e84dc3b2d9b789cf 100644
+--- a/layout/base/GeometryUtils.cpp
++++ b/layout/base/GeometryUtils.cpp
+@@ -23,6 +23,7 @@
+ #include "nsContentUtils.h"
+ #include "nsCSSFrameConstructor.h"
+ #include "nsLayoutUtils.h"
++#include "ChildIterator.h"
+ 
+ using namespace mozilla;
+ using namespace mozilla::dom;
+@@ -261,11 +262,27 @@ static bool CheckFramesInSameTopLevelBrowsingContext(nsIFrame* aFrame1,
+   return false;
+ }
+ 
++static nsIFrame* GetFrameForNode(nsINode* aNode,
++                                 bool aCreateFramesForSuppressedWhitespace,
++                                 bool aRecurseWhenNoFrame) {
++  nsIFrame* frame = GetFrameForNode(aNode, aCreateFramesForSuppressedWhitespace);
++  if (!frame && aRecurseWhenNoFrame && aNode->IsContent()) {
++    dom::FlattenedChildIterator iter(aNode->AsContent());
++    for (nsIContent* child = iter.GetNextChild(); child; child = iter.GetNextChild()) {
++      frame = GetFrameForNode(child, aCreateFramesForSuppressedWhitespace, aRecurseWhenNoFrame);
++      if (frame) {
++        break;
++      }
++    }
++  }
++  return frame;
++}
++
+ void GetBoxQuads(nsINode* aNode, const dom::BoxQuadOptions& aOptions,
+                  nsTArray<RefPtr<DOMQuad> >& aResult, CallerType aCallerType,
+                  ErrorResult& aRv) {
+   nsIFrame* frame =
+-      GetFrameForNode(aNode, aOptions.mCreateFramesForSuppressedWhitespace);
++      GetFrameForNode(aNode, aOptions.mCreateFramesForSuppressedWhitespace, aOptions.mRecurseWhenNoFrame);
+   if (!frame) {
+     // No boxes to return
+     return;
+@@ -280,7 +297,7 @@ void GetBoxQuads(nsINode* aNode, const dom::BoxQuadOptions& aOptions,
+   // when that happens and re-check it.
+   if (!weakFrame.IsAlive()) {
+     frame =
+-        GetFrameForNode(aNode, aOptions.mCreateFramesForSuppressedWhitespace);
++        GetFrameForNode(aNode, aOptions.mCreateFramesForSuppressedWhitespace, aOptions.mRecurseWhenNoFrame);
+     if (!frame) {
+       // No boxes to return
+       return;
+diff --git a/layout/base/PresShell.cpp b/layout/base/PresShell.cpp
+index 8cd1cee03620a33e3301373bb0ba3f1f0cfa062b..7100faf245bf35af3da20dba3dc49d4f65fcb8a5 100644
+--- a/layout/base/PresShell.cpp
++++ b/layout/base/PresShell.cpp
+@@ -10901,7 +10901,9 @@ auto PresShell::ComputeActiveness() const -> Activeness {
+     if (!browserChild->IsVisible()) {
+       MOZ_LOG(gLog, LogLevel::Debug,
+               (" > BrowserChild %p is not visible", browserChild));
+-      return {false, inActiveTab};
++      bool isActive;
++      root->GetDocShell()->GetForceActiveState(&isActive);
++      return {isActive, inActiveTab};
+     }
+ 
+     // If the browser is visible but just due to be preserving layers
+diff --git a/layout/style/GeckoBindings.h b/layout/style/GeckoBindings.h
+index 8b434ea8977e1c3a4a9238d00477dd012a170596..1980be6beff1b4dc7720eb9518ed2b265cc675e0 100644
+--- a/layout/style/GeckoBindings.h
++++ b/layout/style/GeckoBindings.h
+@@ -567,6 +567,7 @@ void Gecko_MediaFeatures_GetDeviceSize(const mozilla::dom::Document*,
+ 
+ float Gecko_MediaFeatures_GetResolution(const mozilla::dom::Document*);
+ bool Gecko_MediaFeatures_PrefersReducedMotion(const mozilla::dom::Document*);
++bool Gecko_MediaFeatures_ForcedColors(const mozilla::dom::Document*);
+ mozilla::StylePrefersContrast Gecko_MediaFeatures_PrefersContrast(
+     const mozilla::dom::Document*);
+ mozilla::StylePrefersColorScheme Gecko_MediaFeatures_PrefersColorScheme(
+diff --git a/layout/style/nsMediaFeatures.cpp b/layout/style/nsMediaFeatures.cpp
+index 2ef43008df12886ad00485ef743564774850c2ba..bb53b96ae491146d895e1c32d62dc0f2ea00812f 100644
+--- a/layout/style/nsMediaFeatures.cpp
++++ b/layout/style/nsMediaFeatures.cpp
+@@ -260,10 +260,11 @@ bool Gecko_MediaFeatures_MatchesPlatform(StylePlatform aPlatform) {
+ }
+ 
+ bool Gecko_MediaFeatures_PrefersReducedMotion(const Document* aDocument) {
+-  if (nsContentUtils::ShouldResistFingerprinting(aDocument)) {
+-    return false;
+-  }
+-  return LookAndFeel::GetInt(LookAndFeel::IntID::PrefersReducedMotion, 0) == 1;
++  return aDocument->PrefersReducedMotion();
++}
++
++bool Gecko_MediaFeatures_ForcedColors(const Document* aDocument) {
++  return aDocument->ForcedColors();
+ }
+ 
+ StylePrefersColorScheme Gecko_MediaFeatures_PrefersColorScheme(
+diff --git a/media/libjpeg/jconfig.h b/media/libjpeg/jconfig.h
+index f2723e654098ff27542e1eb16a536c11ad0af617..b0b480551ff7d895dfdeb5a9800874858929c8ba 100644
+--- a/media/libjpeg/jconfig.h
++++ b/media/libjpeg/jconfig.h
+@@ -17,6 +17,7 @@
+ /* #undef D_ARITH_CODING_SUPPORTED */
+ 
+ /* Support in-memory source/destination managers */
++#define MEM_SRCDST_SUPPORTED 1
+ /* #undef MEM_SRCDST_SUPPORTED */
+ 
+ /* Use accelerated SIMD routines. */
+diff --git a/modules/libpref/init/all.js b/modules/libpref/init/all.js
+index 03fda287c5203648ac3535e57bcf94f6c78606fb..4f76df0900eada6c1eaae41a7f0cd2cf8480dfa0 100644
+--- a/modules/libpref/init/all.js
++++ b/modules/libpref/init/all.js
+@@ -4341,7 +4341,9 @@ pref("devtools.experiment.f12.shortcut_disabled", false);
+ // doesn't provide a way to lock the pref
+ pref("dom.postMessage.sharedArrayBuffer.bypassCOOP_COEP.insecure.enabled", false);
+ #else
+-pref("dom.postMessage.sharedArrayBuffer.bypassCOOP_COEP.insecure.enabled", false, locked);
++// Playwright: DO NOT make preference locked so that we can overwrite it
++// later in our playwright.cfg file.
++pref("dom.postMessage.sharedArrayBuffer.bypassCOOP_COEP.insecure.enabled", false);
+ #endif
+ 
+ // Whether to start the private browsing mode at application startup
+diff --git a/netwerk/base/nsINetworkInterceptController.idl b/netwerk/base/nsINetworkInterceptController.idl
+index e869cd28d396aa87c522241d3e63d435ee8dbae6..2d307f089209721d88d231b03e8628890b8228ea 100644
+--- a/netwerk/base/nsINetworkInterceptController.idl
++++ b/netwerk/base/nsINetworkInterceptController.idl
+@@ -59,6 +59,7 @@ interface nsIInterceptedChannel : nsISupports
+      * results in the resulting client not being controlled.
+      */
+     void resetInterception(in boolean bypass);
++    void resetInterceptionWithURI(in nsIURI aURI);
+ 
+     /**
+      * Set the status and reason for the forthcoming synthesized response.
+diff --git a/netwerk/protocol/http/InterceptedHttpChannel.cpp b/netwerk/protocol/http/InterceptedHttpChannel.cpp
+index 019412c56ba24c06265d20a424dab4d4a850d04b..4ccb5e035fea85fe6b3393473cb620cbc9603de4 100644
+--- a/netwerk/protocol/http/InterceptedHttpChannel.cpp
++++ b/netwerk/protocol/http/InterceptedHttpChannel.cpp
+@@ -663,6 +663,14 @@ void InterceptedHttpChannel::DoAsyncAbort(nsresult aStatus) {
+   Unused << AsyncAbort(aStatus);
+ }
+ 
++NS_IMETHODIMP
++InterceptedHttpChannel::ResetInterceptionWithURI(nsIURI* aURI) {
++  if (aURI) {
++    mURI = aURI;
++  }
++  return ResetInterception(true);
++}
++
+ NS_IMETHODIMP
+ InterceptedHttpChannel::ResetInterception(bool aBypass) {
+   if (mCanceled) {
+diff --git a/parser/html/nsHtml5TreeOpExecutor.cpp b/parser/html/nsHtml5TreeOpExecutor.cpp
+index d956b3b5c6ecf6a983689d09e491193519f34ceb..826aabb5b794a2d4028950066ca3036223a35e0c 100644
+--- a/parser/html/nsHtml5TreeOpExecutor.cpp
++++ b/parser/html/nsHtml5TreeOpExecutor.cpp
+@@ -1330,6 +1330,10 @@ void nsHtml5TreeOpExecutor::UpdateReferrerInfoFromMeta(
+ void nsHtml5TreeOpExecutor::AddSpeculationCSP(const nsAString& aCSP) {
+   NS_ASSERTION(NS_IsMainThread(), "Wrong thread!");
+ 
++  if (mDocShell && static_cast<nsDocShell*>(mDocShell.get())->IsBypassCSPEnabled()) {
++    return;
++  }
++
+   nsresult rv = NS_OK;
+   nsCOMPtr<nsIContentSecurityPolicy> preloadCsp = mDocument->GetPreloadCsp();
+   if (!preloadCsp) {
+diff --git a/security/manager/ssl/nsCertOverrideService.cpp b/security/manager/ssl/nsCertOverrideService.cpp
+index 153722c33b9db6475aa5134ad5b665051ac68658..74324d95f7088c65c3d52ab2a7c40e89901d9512 100644
+--- a/security/manager/ssl/nsCertOverrideService.cpp
++++ b/security/manager/ssl/nsCertOverrideService.cpp
+@@ -572,7 +572,12 @@ nsCertOverrideService::HasMatchingOverride(
+   bool disableAllSecurityCheck = false;
+   {
+     MutexAutoLock lock(mMutex);
+-    disableAllSecurityCheck = mDisableAllSecurityCheck;
++    if (aOriginAttributes.mUserContextId) {
++      disableAllSecurityCheck = mUserContextIdsWithDisabledSecurityChecks.has(
++          aOriginAttributes.mUserContextId);
++    } else {
++      disableAllSecurityCheck = mDisableAllSecurityCheck;
++    }
+   }
+   if (disableAllSecurityCheck) {
+     nsCertOverride::OverrideBits all = nsCertOverride::OverrideBits::Untrusted |
+@@ -789,14 +794,24 @@ static bool IsDebugger() {
+ 
+ NS_IMETHODIMP
+ nsCertOverrideService::
+-    SetDisableAllSecurityChecksAndLetAttackersInterceptMyData(bool aDisable) {
+-  if (!(PR_GetEnv("XPCSHELL_TEST_PROFILE_DIR") || IsDebugger())) {
++    SetDisableAllSecurityChecksAndLetAttackersInterceptMyData(
++      bool aDisable, uint32_t aUserContextId) {
++  if (false /* juggler hacks */ && !(PR_GetEnv("XPCSHELL_TEST_PROFILE_DIR") || IsDebugger())) {
+     return NS_ERROR_NOT_AVAILABLE;
+   }
+ 
+   {
+     MutexAutoLock lock(mMutex);
+-    mDisableAllSecurityCheck = aDisable;
++    if (aUserContextId) {
++      if (aDisable) {
++        mozilla::Unused << mUserContextIdsWithDisabledSecurityChecks.put(aUserContextId);
++      } else {
++        mUserContextIdsWithDisabledSecurityChecks.remove(aUserContextId);
++      }
++      return NS_OK;
++    } else {
++      mDisableAllSecurityCheck = aDisable;
++    }
+   }
+ 
+   nsCOMPtr<nsINSSComponent> nss(do_GetService(PSM_COMPONENT_CONTRACTID));
+diff --git a/security/manager/ssl/nsCertOverrideService.h b/security/manager/ssl/nsCertOverrideService.h
+index e601df1b13d9b2c028bffe6348d052960c80951c..0d782585199479db6218f4c72ed7b6133e3122b3 100644
+--- a/security/manager/ssl/nsCertOverrideService.h
++++ b/security/manager/ssl/nsCertOverrideService.h
+@@ -134,6 +134,7 @@ class nsCertOverrideService final : public nsICertOverrideService,
+ 
+   mozilla::Mutex mMutex;
+   bool mDisableAllSecurityCheck GUARDED_BY(mMutex);
++  mozilla::HashSet<uint32_t> mUserContextIdsWithDisabledSecurityChecks GUARDED_BY(mMutex);
+   nsCOMPtr<nsIFile> mSettingsFile GUARDED_BY(mMutex);
+   nsTHashtable<nsCertOverrideEntry> mSettingsTable GUARDED_BY(mMutex);
+ 
+diff --git a/security/manager/ssl/nsICertOverrideService.idl b/security/manager/ssl/nsICertOverrideService.idl
+index 3862fe6830874c036592fd217cab7ad5f4cd3e27..3166b37db0e52f7f2972d2bcb7a72ed819805794 100644
+--- a/security/manager/ssl/nsICertOverrideService.idl
++++ b/security/manager/ssl/nsICertOverrideService.idl
+@@ -201,7 +201,9 @@ interface nsICertOverrideService : nsISupports {
+    *  @param aDisable If true, disable all security check and make
+    *                  hasMatchingOverride always return true.
+    */
+-  void setDisableAllSecurityChecksAndLetAttackersInterceptMyData(in boolean aDisable);
++  void setDisableAllSecurityChecksAndLetAttackersInterceptMyData(
++      in boolean aDisable,
++      [optional] in uint32_t aUserContextId);
+ 
+   readonly attribute boolean securityCheckDisabled;
+ };
+diff --git a/services/settings/Utils.jsm b/services/settings/Utils.jsm
+index 23d6bf1a20bea134358347b43e8fc776a04617f3..12f96aece0b2c843c34815cafb80ff1b6b6528aa 100644
+--- a/services/settings/Utils.jsm
++++ b/services/settings/Utils.jsm
+@@ -103,7 +103,7 @@ function _isUndefined(value) {
+ 
+ var Utils = {
+   get SERVER_URL() {
+-    return lazy.allowServerURLOverride
++    return true || lazy.allowServerURLOverride
+       ? lazy.gServerURL
+       : AppConstants.REMOTE_SETTINGS_SERVER_URL;
+   },
+diff --git a/servo/components/style/gecko/media_features.rs b/servo/components/style/gecko/media_features.rs
+index 8c93dfa24ce7810f004227fc0430338229a0bc3f..09a1f93dd027394345e910e00b765689490ac2a3 100644
+--- a/servo/components/style/gecko/media_features.rs
++++ b/servo/components/style/gecko/media_features.rs
+@@ -224,10 +224,15 @@ pub enum ForcedColors {
+ 
+ /// https://drafts.csswg.org/mediaqueries-5/#forced-colors
+ fn eval_forced_colors(context: &Context, query_value: Option<ForcedColors>) -> bool {
+-    let forced = !context.device().use_document_colors();
++    let prefers_forced_colors =
++        unsafe { bindings::Gecko_MediaFeatures_ForcedColors(context.device().document()) };
++    let query_value = match query_value {
++        Some(v) => v,
++        None => return prefers_forced_colors,
++    };
+     match query_value {
+-        Some(query_value) => forced == (query_value == ForcedColors::Active),
+-        None => forced,
++        ForcedColors::Active => prefers_forced_colors,
++        ForcedColors::None => !prefers_forced_colors,
+     }
+ }
+ 
+diff --git a/toolkit/components/browser/nsIWebBrowserChrome.idl b/toolkit/components/browser/nsIWebBrowserChrome.idl
+index 4f7337926efbb086a2be97cdbcb3dca39e27c786..f2005cb726ff153d6b1011d6af0479dbf1af02a5 100644
+--- a/toolkit/components/browser/nsIWebBrowserChrome.idl
++++ b/toolkit/components/browser/nsIWebBrowserChrome.idl
+@@ -70,6 +70,9 @@ interface nsIWebBrowserChrome : nsISupports
+     // Whether this window should use out-of-process cross-origin subframes.
+     const unsigned long CHROME_FISSION_WINDOW         = 0x00200000;
+ 
++    // Whether this window has "width" or "height" defined in features
++    const unsigned long JUGGLER_WINDOW_EXPLICIT_SIZE  = 0x00400000;
++
+     // Prevents new window animations on MacOS and Windows. Currently
+     // ignored for Linux.
+     const unsigned long CHROME_SUPPRESS_ANIMATION     = 0x01000000;
+diff --git a/toolkit/components/enterprisepolicies/EnterprisePoliciesParent.jsm b/toolkit/components/enterprisepolicies/EnterprisePoliciesParent.jsm
+index aecb28d95de7cc84a3e2010264a056e178cb11be..79b729d99e5d693d13223401ef72c7020c10fb1a 100644
+--- a/toolkit/components/enterprisepolicies/EnterprisePoliciesParent.jsm
++++ b/toolkit/components/enterprisepolicies/EnterprisePoliciesParent.jsm
+@@ -117,6 +117,12 @@ EnterprisePoliciesManager.prototype = {
+       Services.prefs.clearUserPref(PREF_POLICIES_APPLIED);
+     }
+ 
++    // Playwright: Disable enterprise policies
++    if (true) {
++      this.status = Ci.nsIEnterprisePolicies.INACTIVE;
++      return;
++    }
++
+     let provider = this._chooseProvider();
+ 
+     if (provider.failed) {
+diff --git a/toolkit/components/startup/nsAppStartup.cpp b/toolkit/components/startup/nsAppStartup.cpp
+index a76e612bc7149155305468307bebf0e69679897d..ba3c5dc0af69a34fcfbf04a3dbc506ef45833107 100644
+--- a/toolkit/components/startup/nsAppStartup.cpp
++++ b/toolkit/components/startup/nsAppStartup.cpp
+@@ -370,7 +370,7 @@ nsAppStartup::Quit(uint32_t aMode, int aExitCode, bool* aUserAllowedQuit) {
+     nsCOMPtr<nsISimpleEnumerator> windowEnumerator;
+     nsCOMPtr<nsIWindowMediator> mediator(
+         do_GetService(NS_WINDOWMEDIATOR_CONTRACTID));
+-    if (mediator) {
++    if (ferocity != eForceQuit && mediator) {
+       mediator->GetEnumerator(nullptr, getter_AddRefs(windowEnumerator));
+       if (windowEnumerator) {
+         bool more;
+diff --git a/toolkit/components/statusfilter/nsBrowserStatusFilter.cpp b/toolkit/components/statusfilter/nsBrowserStatusFilter.cpp
+index 3e9672fdfe9ddab8acd0f8b18772aece92bb3b64..83454a9c27c96d72597445653beaa014c38728cd 100644
+--- a/toolkit/components/statusfilter/nsBrowserStatusFilter.cpp
++++ b/toolkit/components/statusfilter/nsBrowserStatusFilter.cpp
+@@ -174,8 +174,8 @@ nsBrowserStatusFilter::OnStateChange(nsIWebProgress* aWebProgress,
+ }
+ 
+ NS_IMETHODIMP
+-nsBrowserStatusFilter::OnProgressChange(nsIWebProgress* aWebProgress,
+-                                        nsIRequest* aRequest,
++nsBrowserStatusFilter::OnProgressChange(nsIWebProgress *aWebProgress,
++                                        nsIRequest *aRequest,
+                                         int32_t aCurSelfProgress,
+                                         int32_t aMaxSelfProgress,
+                                         int32_t aCurTotalProgress,
+diff --git a/toolkit/components/windowwatcher/nsWindowWatcher.cpp b/toolkit/components/windowwatcher/nsWindowWatcher.cpp
+index 33ffbeb8e969eccd0c40effc693d9191aab15891..386c3e76fdff6b6e60917ebf2ecf7595598ac57f 100644
+--- a/toolkit/components/windowwatcher/nsWindowWatcher.cpp
++++ b/toolkit/components/windowwatcher/nsWindowWatcher.cpp
+@@ -1814,7 +1814,11 @@ uint32_t nsWindowWatcher::CalculateChromeFlagsForContent(
+ 
+   // Open a minimal popup.
+   *aIsPopupRequested = true;
+-  return nsIWebBrowserChrome::CHROME_MINIMAL_POPUP;
++  uint32_t chromeFlags = 0;
++  if (aFeatures.Exists("width") || aFeatures.Exists("height")) {
++    chromeFlags |= nsIWebBrowserChrome::JUGGLER_WINDOW_EXPLICIT_SIZE;
++  }
++  return chromeFlags | nsIWebBrowserChrome::CHROME_MINIMAL_POPUP;
+ }
+ 
+ /**
+diff --git a/toolkit/mozapps/update/UpdateService.jsm b/toolkit/mozapps/update/UpdateService.jsm
+index 285568a708854e5afb33268ccf8e7a2f3b4d4dcb..4667eb22474863c44e43e46f524b3362d14dcade 100644
+--- a/toolkit/mozapps/update/UpdateService.jsm
++++ b/toolkit/mozapps/update/UpdateService.jsm
+@@ -3608,6 +3608,8 @@ UpdateService.prototype = {
+   },
+ 
+   get disabledForTesting() {
++    /* for playwright */
++    return true;
+     return (
+       (Cu.isInAutomation ||
+         lazy.Marionette.running ||
+diff --git a/toolkit/toolkit.mozbuild b/toolkit/toolkit.mozbuild
+index 1241f1b0f94e0965b517898167ca1b52cfb48dc5..39c14eb7c548b81d564bd2a4ed15c70a920e173c 100644
+--- a/toolkit/toolkit.mozbuild
++++ b/toolkit/toolkit.mozbuild
+@@ -154,6 +154,7 @@ if CONFIG['ENABLE_WEBDRIVER']:
+         '/remote',
+         '/testing/firefox-ui',
+         '/testing/marionette',
++        '/juggler',
+         '/toolkit/components/telemetry/tests/marionette',
+     ]
+ 
+diff --git a/toolkit/xre/nsWindowsWMain.cpp b/toolkit/xre/nsWindowsWMain.cpp
+index ea14a59b80bbfbaa17d7569734b8409d9d21fcde..f993e78e02563cada8c131be3d4658bc8f7532b6 100644
+--- a/toolkit/xre/nsWindowsWMain.cpp
++++ b/toolkit/xre/nsWindowsWMain.cpp
+@@ -14,9 +14,11 @@
+ #endif
+ 
+ #include "mozilla/Char16.h"
++#include "mozilla/CmdLineAndEnvUtils.h"
+ #include "nsUTF8Utils.h"
+ #include "nsWindowsHelpers.h"
+ 
++#include <io.h>
+ #include <windows.h>
+ #include <versionhelpers.h>
+ 
+@@ -130,6 +132,20 @@ int wmain(int argc, WCHAR** argv) {
+ 
+   SanitizeEnvironmentVariables();
+   SetDllDirectoryW(L"");
++  bool hasJugglerPipe =
++      mozilla::CheckArg(argc, argv, L"juggler-pipe",
++                        static_cast<const wchar_t**>(nullptr),
++                        mozilla::CheckArgFlag::None) == mozilla::ARG_FOUND;
++  if (hasJugglerPipe && !mozilla::EnvHasValue("PW_PIPE_READ")) {
++    intptr_t stdio3 = _get_osfhandle(3);
++    intptr_t stdio4 = _get_osfhandle(4);
++    CHAR stdio3str[20];
++    CHAR stdio4str[20];
++    itoa(stdio3, stdio3str, 10);
++    itoa(stdio4, stdio4str, 10);
++    SetEnvironmentVariableA("PW_PIPE_READ", stdio3str);
++    SetEnvironmentVariableA("PW_PIPE_WRITE", stdio4str);
++  }
+ 
+   // Only run this code if LauncherProcessWin.h was included beforehand, thus
+   // signalling that the hosting process should support launcher mode.
+diff --git a/uriloader/base/nsDocLoader.cpp b/uriloader/base/nsDocLoader.cpp
+index 9ca3975c99c8bff3829bce1cf49d1235910c3ab8..6606eb02fba53ea8bd401d07460b85b068abd2bd 100644
+--- a/uriloader/base/nsDocLoader.cpp
++++ b/uriloader/base/nsDocLoader.cpp
+@@ -827,6 +827,13 @@ void nsDocLoader::DocLoaderIsEmpty(bool aFlushLayout,
+                         ("DocLoader:%p: Firing load event for document.open\n",
+                          this));
+ 
++                nsCOMPtr<nsIObserverService> os = mozilla::services::GetObserverService();
++                if (os) {
++                  nsIPrincipal* principal = doc->NodePrincipal();
++                  if (!principal->IsSystemPrincipal())
++                    os->NotifyObservers(ToSupports(doc), "juggler-document-open-loaded", nullptr);
++                }
++
+                 // This is a very cut-down version of
+                 // nsDocumentViewer::LoadComplete that doesn't do various things
+                 // that are not relevant here because this wasn't an actual
+diff --git a/uriloader/exthandler/nsExternalHelperAppService.cpp b/uriloader/exthandler/nsExternalHelperAppService.cpp
+index 3aaf69cd26156e497e46e5b714db1c2de2ba8c38..015533b2cba80b842e5a82a438e350d2dcdcad47 100644
+--- a/uriloader/exthandler/nsExternalHelperAppService.cpp
++++ b/uriloader/exthandler/nsExternalHelperAppService.cpp
+@@ -110,6 +110,7 @@
+ 
+ #include "mozilla/Components.h"
+ #include "mozilla/ClearOnShutdown.h"
++#include "mozilla/ErrorNames.h"
+ #include "mozilla/Preferences.h"
+ #include "mozilla/ipc/URIUtils.h"
+ 
+@@ -834,6 +835,12 @@ NS_IMETHODIMP nsExternalHelperAppService::ApplyDecodingForExtension(
+   return NS_OK;
+ }
+ 
++NS_IMETHODIMP nsExternalHelperAppService::SetDownloadInterceptor(
++    nsIDownloadInterceptor* interceptor) {
++  mInterceptor = interceptor;
++  return NS_OK;
++}
++
+ nsresult nsExternalHelperAppService::GetFileTokenForPath(
+     const char16_t* aPlatformAppPath, nsIFile** aFile) {
+   nsDependentString platformAppPath(aPlatformAppPath);
+@@ -1443,7 +1450,12 @@ nsresult nsExternalAppHandler::SetUpTempFile(nsIChannel* aChannel) {
+   // Strip off the ".part" from mTempLeafName
+   mTempLeafName.Truncate(mTempLeafName.Length() - ArrayLength(".part") + 1);
+ 
++  return CreateSaverForTempFile();
++}
++
++nsresult nsExternalAppHandler::CreateSaverForTempFile() {
+   MOZ_ASSERT(!mSaver, "Output file initialization called more than once!");
++  nsresult rv;
+   mSaver =
+       do_CreateInstance(NS_BACKGROUNDFILESAVERSTREAMLISTENER_CONTRACTID, &rv);
+   NS_ENSURE_SUCCESS(rv, rv);
+@@ -1634,7 +1646,36 @@ NS_IMETHODIMP nsExternalAppHandler::OnStartRequest(nsIRequest* request) {
+     return NS_OK;
+   }
+ 
+-  rv = SetUpTempFile(aChannel);
++  bool isIntercepted = false;
++  nsCOMPtr<nsIDownloadInterceptor> interceptor = mExtProtSvc->mInterceptor;
++  if (interceptor) {
++    nsCOMPtr<nsIFile> fileToUse;
++    rv = interceptor->InterceptDownloadRequest(this, request, mBrowsingContext, getter_AddRefs(fileToUse), &isIntercepted);
++    if (!NS_SUCCEEDED(rv)) {
++      LOG(("    failed to call nsIDowloadInterceptor.interceptDownloadRequest"));
++      return rv;
++    }
++    if (isIntercepted) {
++      LOG(("    request interceped by nsIDowloadInterceptor"));
++      if (fileToUse) {
++        mTempFile = fileToUse;
++        rv = mTempFile->GetLeafName(mTempLeafName);
++        NS_ENSURE_SUCCESS(rv, rv);
++      } else {
++        Cancel(NS_BINDING_ABORTED);
++        return NS_OK;
++      }
++    }
++  }
++
++  // Temp file is the final destination when download is intercepted. In that
++  // case we only need to create saver (and not create transfer later). Not creating
++  // mTransfer also cuts off all downloads handling logic in the js compoenents and
++  // browser UI.
++  if (isIntercepted)
++    rv = CreateSaverForTempFile();
++  else
++    rv = SetUpTempFile(aChannel);
+   if (NS_FAILED(rv)) {
+     nsresult transferError = rv;
+ 
+@@ -1689,6 +1730,9 @@ NS_IMETHODIMP nsExternalAppHandler::OnStartRequest(nsIRequest* request) {
+ 
+   bool alwaysAsk = true;
+   mMimeInfo->GetAlwaysAskBeforeHandling(&alwaysAsk);
++  if (isIntercepted) {
++    return NS_OK;
++  }
+   if (alwaysAsk) {
+     // But we *don't* ask if this mimeInfo didn't come from
+     // our user configuration datastore and the user has said
+@@ -2254,6 +2298,16 @@ nsExternalAppHandler::OnSaveComplete(nsIBackgroundFileSaver* aSaver,
+     NotifyTransfer(aStatus);
+   }
+ 
++  if (!mCanceled) {
++    nsCOMPtr<nsIDownloadInterceptor> interceptor = mExtProtSvc->mInterceptor;
++    if (interceptor) {
++      nsCString noError;
++      nsresult rv = interceptor->OnDownloadComplete(this, noError);
++      MOZ_ASSERT(NS_SUCCEEDED(rv), "Failed to call nsIDowloadInterceptor.OnDownloadComplete");
++      Unused << rv;
++    }
++  }
++
+   return NS_OK;
+ }
+ 
+@@ -2733,6 +2787,15 @@ NS_IMETHODIMP nsExternalAppHandler::Cancel(nsresult aReason) {
+     }
+   }
+ 
++  nsCOMPtr<nsIDownloadInterceptor> interceptor = mExtProtSvc->mInterceptor;
++  if (interceptor) {
++    nsCString errorName;
++    GetErrorName(aReason, errorName);
++    nsresult rv = interceptor->OnDownloadComplete(this, errorName);
++    MOZ_ASSERT(NS_SUCCEEDED(rv), "Failed notify nsIDowloadInterceptor about cancel");
++    Unused << rv;
++  }
++
+   // Break our reference cycle with the helper app dialog (set up in
+   // OnStartRequest)
+   mDialog = nullptr;
+diff --git a/uriloader/exthandler/nsExternalHelperAppService.h b/uriloader/exthandler/nsExternalHelperAppService.h
+index f8832bbde4042df9631794ca45886dcb02b60457..6a28695117997f1fd3753a75c94bc0e67e49d215 100644
+--- a/uriloader/exthandler/nsExternalHelperAppService.h
++++ b/uriloader/exthandler/nsExternalHelperAppService.h
+@@ -241,6 +241,8 @@ class nsExternalHelperAppService : public nsIExternalHelperAppService,
+       mozilla::dom::BrowsingContext* aContentContext, bool aForceSave,
+       nsIInterfaceRequestor* aWindowContext,
+       nsIStreamListener** aStreamListener);
++
++  nsCOMPtr<nsIDownloadInterceptor> mInterceptor;
+ };
+ 
+ /**
+@@ -437,6 +439,9 @@ class nsExternalAppHandler final : public nsIStreamListener,
+    * Upon successful return, both mTempFile and mSaver will be valid.
+    */
+   nsresult SetUpTempFile(nsIChannel* aChannel);
++
++  nsresult CreateSaverForTempFile();
++
+   /**
+    * When we download a helper app, we are going to retarget all load
+    * notifications into our own docloader and load group instead of
+diff --git a/uriloader/exthandler/nsIExternalHelperAppService.idl b/uriloader/exthandler/nsIExternalHelperAppService.idl
+index 3554c69aaced17631d8d1e4d9a000f0dd8b7ba9c..52d6b60707d076906e79160fef155eaaf999470c 100644
+--- a/uriloader/exthandler/nsIExternalHelperAppService.idl
++++ b/uriloader/exthandler/nsIExternalHelperAppService.idl
+@@ -6,6 +6,8 @@
+ 
+ #include "nsICancelable.idl"
+ 
++webidl BrowsingContext;
++interface nsIHelperAppLauncher;
+ interface nsIURI;
+ interface nsIRequest;
+ interface nsIStreamListener;
+@@ -15,6 +17,17 @@ interface nsIWebProgressListener2;
+ interface nsIInterfaceRequestor;
+ webidl BrowsingContext;
+ 
++/**
++ * Interceptor interface used by Juggler.
++ */
++[scriptable, uuid(9a20e9b0-75d0-11ea-bc55-0242ac130003)]
++interface nsIDownloadInterceptor : nsISupports
++{
++  bool interceptDownloadRequest(in nsIHelperAppLauncher aHandler, in nsIRequest aRequest, in BrowsingContext aBrowsingContext, out nsIFile file);
++
++  void onDownloadComplete(in nsIHelperAppLauncher aHandler, in ACString aErrorName);
++};
++
+ /**
+  * The external helper app service is used for finding and launching
+  * platform specific external applications for a given mime content type.
+@@ -76,6 +89,7 @@ interface nsIExternalHelperAppService : nsISupports
+   boolean applyDecodingForExtension(in AUTF8String aExtension,
+                                     in ACString aEncodingType);
+ 
++  void setDownloadInterceptor(in nsIDownloadInterceptor interceptor);
+ };
+ 
+ /**
+diff --git a/widget/InProcessCompositorWidget.cpp b/widget/InProcessCompositorWidget.cpp
+index 1c25e9d9a101233f71e92288a0f93125b81ac1c5..22cf67b0f6e3ddd2b3ed725a314ba6a9896abd1c 100644
+--- a/widget/InProcessCompositorWidget.cpp
++++ b/widget/InProcessCompositorWidget.cpp
+@@ -4,7 +4,10 @@
+ 
+ #include "InProcessCompositorWidget.h"
+ 
++#include "HeadlessCompositorWidget.h"
++#include "HeadlessWidget.h"
+ #include "mozilla/VsyncDispatcher.h"
++#include "mozilla/widget/PlatformWidgetTypes.h"
+ #include "nsBaseWidget.h"
+ 
+ namespace mozilla {
+@@ -23,6 +26,12 @@ RefPtr<CompositorWidget> CompositorWidget::CreateLocal(
+   // do it after the static_cast.
+   nsBaseWidget* widget = static_cast<nsBaseWidget*>(aWidget);
+   MOZ_RELEASE_ASSERT(widget);
++  if (aInitData.type() ==
++      CompositorWidgetInitData::THeadlessCompositorWidgetInitData) {
++    return new HeadlessCompositorWidget(
++        aInitData.get_HeadlessCompositorWidgetInitData(), aOptions,
++        static_cast<HeadlessWidget*>(aWidget));
++  }
+   return new InProcessCompositorWidget(aOptions, widget);
+ }
+ #endif
+diff --git a/widget/cocoa/NativeKeyBindings.mm b/widget/cocoa/NativeKeyBindings.mm
+index d3e5983259053175584254e7ac01ca9ce024f33a..97f5b851c402fea5477c0ee57af451c62b016eec 100644
+--- a/widget/cocoa/NativeKeyBindings.mm
++++ b/widget/cocoa/NativeKeyBindings.mm
+@@ -492,6 +492,13 @@
+       break;
+     case KEY_NAME_INDEX_ArrowLeft:
+       if (aEvent.IsAlt()) {
++        if (aEvent.IsMeta() || aEvent.IsControl())
++          break;
++        instance->AppendEditCommandsForSelector(
++            !aEvent.IsShift()
++                ? ToObjcSelectorPtr(@selector(moveWordLeft:))
++                : ToObjcSelectorPtr(@selector(moveWordLeftAndModifySelection:)),
++            aCommands);
+         break;
+       }
+       if (aEvent.IsMeta() || (aEvent.IsControl() && aEvent.IsShift())) {
+@@ -512,6 +519,13 @@
+       break;
+     case KEY_NAME_INDEX_ArrowRight:
+       if (aEvent.IsAlt()) {
++        if (aEvent.IsMeta() || aEvent.IsControl())
++          break;
++        instance->AppendEditCommandsForSelector(
++            !aEvent.IsShift()
++                ? ToObjcSelectorPtr(@selector(moveWordRight:))
++                : ToObjcSelectorPtr(@selector(moveWordRightAndModifySelection:)),
++            aCommands);
+         break;
+       }
+       if (aEvent.IsMeta() || (aEvent.IsControl() && aEvent.IsShift())) {
+@@ -532,6 +546,10 @@
+       break;
+     case KEY_NAME_INDEX_ArrowUp:
+       if (aEvent.IsControl()) {
++        if (aEvent.IsMeta() || aEvent.IsAlt())
++          break;
++        instance->AppendEditCommandsForSelector(
++          ToObjcSelectorPtr(@selector(scrollPageUp:)), aCommands);
+         break;
+       }
+       if (aEvent.IsMeta()) {
+@@ -541,7 +559,7 @@
+         instance->AppendEditCommandsForSelector(
+             !aEvent.IsShift()
+                 ? ToObjcSelectorPtr(@selector(moveToBeginningOfDocument:))
+-                : ToObjcSelectorPtr(@selector(moveToBegginingOfDocumentAndModifySelection:)),
++                : ToObjcSelectorPtr(@selector(moveToBeginningOfDocumentAndModifySelection:)),
+             aCommands);
+         break;
+       }
+@@ -564,6 +582,10 @@
+       break;
+     case KEY_NAME_INDEX_ArrowDown:
+       if (aEvent.IsControl()) {
++        if (aEvent.IsMeta() || aEvent.IsAlt())
++          break;
++        instance->AppendEditCommandsForSelector(
++          ToObjcSelectorPtr(@selector(scrollPageDown:)), aCommands);
+         break;
+       }
+       if (aEvent.IsMeta()) {
+diff --git a/widget/headless/HeadlessCompositorWidget.cpp b/widget/headless/HeadlessCompositorWidget.cpp
+index b31a969b7ab3d0fc80912b110d91dfdf3e5991f4..52aed4f9fb51f3f58a440d7e57eaccd6dfcbc2ab 100644
+--- a/widget/headless/HeadlessCompositorWidget.cpp
++++ b/widget/headless/HeadlessCompositorWidget.cpp
+@@ -3,6 +3,7 @@
+  * License, v. 2.0. If a copy of the MPL was not distributed with this
+  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+ 
++#include "mozilla/layers/CompositorThread.h"
+ #include "mozilla/widget/PlatformWidgetTypes.h"
+ #include "HeadlessCompositorWidget.h"
+ #include "VsyncDispatcher.h"
+@@ -13,10 +14,32 @@ namespace widget {
+ HeadlessCompositorWidget::HeadlessCompositorWidget(
+     const HeadlessCompositorWidgetInitData& aInitData,
+     const layers::CompositorOptions& aOptions, HeadlessWidget* aWindow)
+-    : CompositorWidget(aOptions), mWidget(aWindow) {
++    : CompositorWidget(aOptions), mWidget(aWindow), mMon("snapshotListener") {
+   mClientSize = aInitData.InitialClientSize();
+ }
+ 
++void HeadlessCompositorWidget::SetSnapshotListener(HeadlessWidget::SnapshotListener&& listener) {
++  MOZ_ASSERT(NS_IsMainThread());
++
++  ReentrantMonitorAutoEnter lock(mMon);
++  mSnapshotListener = std::move(listener);
++  layers::CompositorThread()->Dispatch(NewRunnableMethod(
++      "HeadlessCompositorWidget::PeriodicSnapshot", this,
++      &HeadlessCompositorWidget::PeriodicSnapshot
++  ));
++}
++
++already_AddRefed<gfx::DrawTarget> HeadlessCompositorWidget::StartRemoteDrawingInRegion(
++    const LayoutDeviceIntRegion& aInvalidRegion,
++    layers::BufferMode* aBufferMode) {
++  if (!mDrawTarget)
++    return nullptr;
++
++  *aBufferMode = layers::BufferMode::BUFFER_NONE;
++  RefPtr<gfx::DrawTarget> result = mDrawTarget;
++  return result.forget();
++}
++
+ void HeadlessCompositorWidget::ObserveVsync(VsyncObserver* aObserver) {
+   if (RefPtr<CompositorVsyncDispatcher> cvd =
+           mWidget->GetCompositorVsyncDispatcher()) {
+@@ -29,6 +52,59 @@ nsIWidget* HeadlessCompositorWidget::RealWidget() { return mWidget; }
+ void HeadlessCompositorWidget::NotifyClientSizeChanged(
+     const LayoutDeviceIntSize& aClientSize) {
+   mClientSize = aClientSize;
++  layers::CompositorThread()->Dispatch(NewRunnableMethod<LayoutDeviceIntSize>(
++      "HeadlessCompositorWidget::UpdateDrawTarget", this,
++      &HeadlessCompositorWidget::UpdateDrawTarget,
++      aClientSize));
++}
++
++void HeadlessCompositorWidget::UpdateDrawTarget(const LayoutDeviceIntSize& aClientSize) {
++  MOZ_ASSERT(NS_IsInCompositorThread());
++  if (aClientSize.IsEmpty()) {
++    mDrawTarget = nullptr;
++    return;
++  }
++
++  RefPtr<gfx::DrawTarget> old = std::move(mDrawTarget);
++  gfx::SurfaceFormat format = gfx::SurfaceFormat::B8G8R8A8;
++  gfx::IntSize size = aClientSize.ToUnknownSize();
++  mDrawTarget = mozilla::gfx::Factory::CreateDrawTarget(
++      mozilla::gfx::BackendType::SKIA, size, format);
++  if (old) {
++    RefPtr<gfx::SourceSurface> snapshot = old->Snapshot();
++    if (snapshot)
++      mDrawTarget->CopySurface(snapshot.get(), old->GetRect(), gfx::IntPoint(0, 0));
++  }
++}
++
++void HeadlessCompositorWidget::PeriodicSnapshot() {
++  ReentrantMonitorAutoEnter lock(mMon);
++  if (!mSnapshotListener)
++    return;
++
++  TakeSnapshot();
++  NS_DelayedDispatchToCurrentThread(NewRunnableMethod(
++      "HeadlessCompositorWidget::PeriodicSnapshot", this,
++      &HeadlessCompositorWidget::PeriodicSnapshot), 40);
++}
++
++void HeadlessCompositorWidget::TakeSnapshot() {
++  if (!mDrawTarget)
++    return;
++
++  RefPtr<gfx::SourceSurface> snapshot = mDrawTarget->Snapshot();
++  if (!snapshot) {
++    fprintf(stderr, "Failed to get snapshot of draw target\n");
++    return;
++  }
++
++  RefPtr<gfx::DataSourceSurface> dataSurface = snapshot->GetDataSurface();
++  if (!dataSurface) {
++    fprintf(stderr, "Failed to get data surface from snapshot\n");
++    return;
++  }
++
++  mSnapshotListener(std::move(dataSurface));
+ }
+ 
+ LayoutDeviceIntSize HeadlessCompositorWidget::GetClientSize() {
+diff --git a/widget/headless/HeadlessCompositorWidget.h b/widget/headless/HeadlessCompositorWidget.h
+index 7f91de9e67d7ffa02de3eef1d760e5cfd05e7ad6..753b8902026626e8f0a190ea3130ba5e65c24835 100644
+--- a/widget/headless/HeadlessCompositorWidget.h
++++ b/widget/headless/HeadlessCompositorWidget.h
+@@ -6,6 +6,7 @@
+ #ifndef widget_headless_HeadlessCompositorWidget_h
+ #define widget_headless_HeadlessCompositorWidget_h
+ 
++#include "mozilla/ReentrantMonitor.h"
+ #include "mozilla/widget/CompositorWidget.h"
+ 
+ #include "HeadlessWidget.h"
+@@ -23,8 +24,12 @@ class HeadlessCompositorWidget final : public CompositorWidget,
+                            HeadlessWidget* aWindow);
+ 
+   void NotifyClientSizeChanged(const LayoutDeviceIntSize& aClientSize);
++  void SetSnapshotListener(HeadlessWidget::SnapshotListener&& listener);
+ 
+   // CompositorWidget Overrides
++  already_AddRefed<gfx::DrawTarget> StartRemoteDrawingInRegion(
++      const LayoutDeviceIntRegion& aInvalidRegion,
++      layers::BufferMode* aBufferMode) override;
+ 
+   uintptr_t GetWidgetKey() override;
+ 
+@@ -42,9 +47,17 @@ class HeadlessCompositorWidget final : public CompositorWidget,
+   }
+ 
+  private:
++  void UpdateDrawTarget(const LayoutDeviceIntSize& aClientSize);
++  void PeriodicSnapshot();
++  void TakeSnapshot();
++
+   HeadlessWidget* mWidget;
++  mozilla::ReentrantMonitor mMon;
+ 
+   LayoutDeviceIntSize mClientSize;
++
++  HeadlessWidget::SnapshotListener mSnapshotListener;
++  RefPtr<gfx::DrawTarget> mDrawTarget;
+ };
+ 
+ }  // namespace widget
+diff --git a/widget/headless/HeadlessWidget.cpp b/widget/headless/HeadlessWidget.cpp
+index c1fbcccc93d9a6876aa82893cdf9c09b72087751..7a8073e3b746aec3a894957e87975189c06782d3 100644
+--- a/widget/headless/HeadlessWidget.cpp
++++ b/widget/headless/HeadlessWidget.cpp
+@@ -109,6 +109,8 @@ void HeadlessWidget::Destroy() {
+     }
+   }
+ 
++  SetSnapshotListener(nullptr);
++
+   nsBaseWidget::OnDestroy();
+ 
+   nsBaseWidget::Destroy();
+@@ -564,5 +566,15 @@ nsresult HeadlessWidget::SynthesizeNativeTouchPadPinch(
+   DispatchPinchGestureInput(inputToDispatch);
+   return NS_OK;
+ }
++
++void HeadlessWidget::SetSnapshotListener(SnapshotListener&& listener) {
++  if (!mCompositorWidget) {
++    if (listener)
++      fprintf(stderr, "Trying to set SnapshotListener without compositor widget\n");
++    return;
++  }
++  mCompositorWidget->SetSnapshotListener(std::move(listener));
++}
++
+ }  // namespace widget
+ }  // namespace mozilla
+diff --git a/widget/headless/HeadlessWidget.h b/widget/headless/HeadlessWidget.h
+index 2b80eea70e58dd53c34edd9c5fa4415c42bcd632..72ecda7d8ddc7a9f87a954b547f8411e67ef1570 100644
+--- a/widget/headless/HeadlessWidget.h
++++ b/widget/headless/HeadlessWidget.h
+@@ -135,6 +135,9 @@ class HeadlessWidget : public nsBaseWidget {
+       TouchpadGesturePhase aEventPhase, float aScale,
+       LayoutDeviceIntPoint aPoint, int32_t aModifierFlags) override;
+ 
++  using SnapshotListener = std::function<void(RefPtr<gfx::DataSourceSurface>&&)>;
++  void SetSnapshotListener(SnapshotListener&& listener);
++
+  private:
+   ~HeadlessWidget();
+   bool mEnabled;
+diff --git a/widget/windows/nsAppShell.cpp b/widget/windows/nsAppShell.cpp
+index e2cf83f3d6ee0b120bb22f46aa873d3bd6436cd0..8ea269c8de520d3a9eed42f99f66ad28f5e63fbc 100644
+--- a/widget/windows/nsAppShell.cpp
++++ b/widget/windows/nsAppShell.cpp
+@@ -17,7 +17,9 @@
+ #include "WinIMEHandler.h"
+ #include "mozilla/widget/AudioSession.h"
+ #include "mozilla/BackgroundHangMonitor.h"
+-#include "mozilla/BackgroundTasks.h"
++#ifdef MOZ_BACKGROUNDTASKS
++#  include "mozilla/BackgroundTasks.h"
++#endif
+ #include "mozilla/Hal.h"
+ #include "nsIDOMWakeLockListener.h"
+ #include "nsIPowerManagerService.h"
+diff --git a/xpcom/reflect/xptinfo/xptinfo.h b/xpcom/reflect/xptinfo/xptinfo.h
+index 2456c2c2b58b27cd595880b547ed20fb687a1835..e967c089b2331c7cd36d34e511543fbc84320b7d 100644
+--- a/xpcom/reflect/xptinfo/xptinfo.h
++++ b/xpcom/reflect/xptinfo/xptinfo.h
+@@ -514,7 +514,7 @@ static_assert(sizeof(nsXPTMethodInfo) == 8, "wrong size");
+ #if defined(MOZ_THUNDERBIRD) || defined(MOZ_SUITE)
+ #  define PARAM_BUFFER_COUNT 18
+ #else
+-#  define PARAM_BUFFER_COUNT 14
++#  define PARAM_BUFFER_COUNT 15
+ #endif
+ 
+ /**
diff --git a/browser_patches/firefox-beta/preferences/00-playwright-prefs.js b/browser_patches/firefox-beta/preferences/00-playwright-prefs.js
new file mode 100644
index 0000000000000000000000000000000000000000..1895d2d1b74c5469636240a63a23b65564abffcf
--- /dev/null
+++ b/browser_patches/firefox-beta/preferences/00-playwright-prefs.js
@@ -0,0 +1,3 @@
+// Any comment. You must start the file with a single-line comment!
+pref("general.config.filename", "playwright.cfg");
+pref("general.config.obscure_value", 0);
diff --git a/browser_patches/firefox-beta/preferences/playwright.cfg b/browser_patches/firefox-beta/preferences/playwright.cfg
new file mode 100644
index 0000000000000000000000000000000000000000..f58a6d10d43e94b56dd651d5d60988a966547d7c
--- /dev/null
+++ b/browser_patches/firefox-beta/preferences/playwright.cfg
@@ -0,0 +1,291 @@
+// Any comment. You must start the file with a comment!
+
+// =================================================================
+// THESE ARE THE PROPERTIES THAT MUST BE ENABLED FOR JUGGLER TO WORK
+// =================================================================
+
+pref("datareporting.policy.dataSubmissionEnabled", false);
+pref("datareporting.policy.dataSubmissionPolicyAccepted", false);
+pref("datareporting.policy.dataSubmissionPolicyBypassNotification", true);
+
+// @see https://github.com/microsoft/playwright/issues/4297
+pref("browser.tabs.remote.useCrossOriginEmbedderPolicy", false);
+pref("browser.tabs.remote.useCrossOriginOpenerPolicy", false);
+
+pref("browser.tabs.remote.separatePrivilegedMozillaWebContentProcess", false);
+
+pref("pdfjs.disabled", true);
+
+// Disable all kinds of cross-process navigations until we are ready.
+pref("fission.autostart", false);
+pref("fission.webContentIsolationStrategy", 0);
+pref("fission.bfcacheInParent", false);
+// Avoid about:blank loading cross-process until we are ready.
+pref("browser.tabs.remote.systemTriggeredAboutBlankAnywhere", true);
+
+// =================================================================
+// =================================================================
+
+// @see https://github.com/microsoft/playwright/issues/8178
+pref("dom.postMessage.sharedArrayBuffer.bypassCOOP_COEP.insecure.enabled", true);
+
+// Use light theme by default.
+pref("ui.systemUsesDarkTheme", 0);
+
+// Only allow the old modal dialogs. This should be removed when there is
+// support for the new modal UI (see Bug 1686743).
+pref("prompts.contentPromptSubDialog", false);
+
+// Increase max number of child web processes so that new pages
+// get a new process by default and we have a process isolation
+// between pages from different contexts. If this becomes a performance
+// issue we can povide custom '@mozilla.org/ipc/processselector;1'
+//
+pref("dom.ipc.processCount", 60000);
+
+// Never reuse processes as they may keep previously overridden values
+// (locale, timezone etc.).
+pref("dom.ipc.processPrelaunch.enabled", false);
+
+// Do not use system colors - they are affected by themes.
+pref("ui.use_standins_for_native_colors", true);
+
+// Isolate permissions by user context.
+pref("permissions.isolateBy.userContext", true);
+
+pref("dom.push.serverURL", "");
+// This setting breaks settings loading.
+pref("services.settings.server", "");
+pref("browser.safebrowsing.provider.mozilla.updateURL", "");
+pref("browser.library.activity-stream.enabled", false);
+pref("browser.search.geoSpecificDefaults", false);
+pref("browser.search.geoSpecificDefaults.url", "");
+pref("captivedetect.canonicalURL", "");
+pref("network.captive-portal-service.enabled", false);
+pref("network.connectivity-service.enabled", false);
+pref("browser.newtabpage.activity-stream.asrouter.providers.snippets", "");
+
+// Make sure Shield doesn't hit the network.
+pref("app.normandy.api_url", "");
+pref("app.normandy.enabled", false);
+
+// Disable updater
+pref("app.update.enabled", false);
+// Disable Firefox old build background check
+pref("app.update.checkInstallTime", false);
+// Disable automatically upgrading Firefox
+pref("app.update.disabledForTesting", true);
+
+// make absolutely sure it is really off
+pref("app.update.auto", false);
+pref("app.update.mode", 0);
+pref("app.update.service.enabled", false);
+// Dislabe newtabpage
+pref("browser.startup.homepage", "about:blank");
+pref("browser.startup.page", 0);
+pref("browser.newtabpage.enabled", false);
+// Do not redirect user when a milstone upgrade of Firefox is detected
+pref("browser.startup.homepage_override.mstone", "ignore");
+
+pref("browser.tabs.remote.separateFileUriProcess", false);
+pref("security.sandbox.content.level", 2);
+
+// Disable topstories
+pref("browser.newtabpage.activity-stream.feeds.section.topstories", false);
+// DevTools JSONViewer sometimes fails to load dependencies with its require.js.
+// This doesn't affect Puppeteer operations, but spams console with a lot of
+// unpleasant errors.
+// (bug 1424372)
+pref("devtools.jsonview.enabled", false);
+
+// Increase the APZ content response timeout in tests to 1 minute.
+// This is to accommodate the fact that test environments tends to be
+// slower than production environments (with the b2g emulator being
+// the slowest of them all), resulting in the production timeout value
+// sometimes being exceeded and causing false-positive test failures.
+//
+// (bug 1176798, bug 1177018, bug 1210465)
+pref("apz.content_response_timeout", 60000);
+
+// Allow creating files in content process - required for
+// |Page.setFileInputFiles| protocol method.
+pref("dom.file.createInChild", true);
+
+// Indicate that the download panel has been shown once so that
+// whichever download test runs first doesn't show the popup
+// inconsistently.
+pref("browser.download.panel.shown", true);
+// Background thumbnails in particular cause grief, and disabling
+// thumbnails in general cannot hurt
+pref("browser.pagethumbnails.capturing_disabled", true);
+// Disable safebrowsing components.
+pref("browser.safebrowsing.blockedURIs.enabled", false);
+pref("browser.safebrowsing.downloads.enabled", false);
+pref("browser.safebrowsing.passwords.enabled", false);
+pref("browser.safebrowsing.malware.enabled", false);
+pref("browser.safebrowsing.phishing.enabled", false);
+// Disable updates to search engines.
+pref("browser.search.update", false);
+// Do not restore the last open set of tabs if the browser has crashed
+pref("browser.sessionstore.resume_from_crash", false);
+// Don't check for the default web browser during startup.
+pref("browser.shell.checkDefaultBrowser", false);
+
+// Disable browser animations (tabs, fullscreen, sliding alerts)
+pref("toolkit.cosmeticAnimations.enabled", false);
+
+// Close the window when the last tab gets closed
+pref("browser.tabs.closeWindowWithLastTab", true);
+
+// Do not allow background tabs to be zombified on Android, otherwise for
+// tests that open additional tabs, the test harness tab itself might get
+// unloaded
+pref("browser.tabs.disableBackgroundZombification", false);
+
+// Do not warn when closing all open tabs
+pref("browser.tabs.warnOnClose", false);
+
+// Do not warn when closing all other open tabs
+pref("browser.tabs.warnOnCloseOtherTabs", false);
+
+// Do not warn when multiple tabs will be opened
+pref("browser.tabs.warnOnOpen", false);
+
+// Disable first run splash page on Windows 10
+pref("browser.usedOnWindows10.introURL", "");
+
+// Disable the UI tour.
+//
+// Should be set in profile.
+pref("browser.uitour.enabled", false);
+
+// Turn off search suggestions in the location bar so as not to trigger
+// network connections.
+pref("browser.urlbar.suggest.searches", false);
+
+// Do not warn on quitting Firefox
+pref("browser.warnOnQuit", false);
+
+// Do not show datareporting policy notifications which can
+// interfere with tests
+pref("datareporting.healthreport.documentServerURI", "");
+pref("datareporting.healthreport.about.reportUrl", "");
+pref("datareporting.healthreport.logging.consoleEnabled", false);
+pref("datareporting.healthreport.service.enabled", false);
+pref("datareporting.healthreport.service.firstRun", false);
+pref("datareporting.healthreport.uploadEnabled", false);
+
+// Automatically unload beforeunload alerts
+pref("dom.disable_beforeunload", false);
+
+// Disable popup-blocker
+pref("dom.disable_open_during_load", false);
+
+// Disable the ProcessHangMonitor
+pref("dom.ipc.reportProcessHangs", false);
+pref("hangmonitor.timeout", 0);
+
+// Disable slow script dialogues
+pref("dom.max_chrome_script_run_time", 0);
+pref("dom.max_script_run_time", 0);
+
+// Only load extensions from the application and user profile
+// AddonManager.SCOPE_PROFILE + AddonManager.SCOPE_APPLICATION
+pref("extensions.autoDisableScopes", 0);
+pref("extensions.enabledScopes", 5);
+
+// Disable metadata caching for installed add-ons by default
+pref("extensions.getAddons.cache.enabled", false);
+
+// Disable installing any distribution extensions or add-ons.
+pref("extensions.installDistroAddons", false);
+
+// Turn off extension updates so they do not bother tests
+pref("extensions.update.enabled", false);
+pref("extensions.update.notifyUser", false);
+
+// Make sure opening about:addons will not hit the network
+pref("extensions.webservice.discoverURL", "");
+
+pref("extensions.screenshots.disabled", true);
+pref("extensions.screenshots.upload-disabled", true);
+
+// Allow the application to have focus even it runs in the background
+pref("focusmanager.testmode", true);
+
+// Disable useragent updates
+pref("general.useragent.updates.enabled", false);
+
+// No ICC color correction.
+// See https://developer.mozilla.org/en/docs/Mozilla/Firefox/Releases/3.5/ICC_color_correction_in_Firefox.
+pref("gfx.color_management.mode", 0);
+pref("gfx.color_management.rendering_intent", 3);
+
+// Always use network provider for geolocation tests so we bypass the
+// macOS dialog raised by the corelocation provider
+pref("geo.provider.testing", true);
+
+// Do not scan Wifi
+pref("geo.wifi.scan", false);
+
+// Show chrome errors and warnings in the error console
+pref("javascript.options.showInConsole", true);
+
+// Disable download and usage of OpenH264: and Widevine plugins
+pref("media.gmp-manager.updateEnabled", false);
+
+// Do not prompt with long usernames or passwords in URLs
+pref("network.http.phishy-userpass-length", 255);
+
+// Do not prompt for temporary redirects
+pref("network.http.prompt-temp-redirect", false);
+
+// Disable speculative connections so they are not reported as leaking
+// when they are hanging around
+pref("network.http.speculative-parallel-limit", 0);
+
+// Do not automatically switch between offline and online
+pref("network.manage-offline-status", false);
+
+// Make sure SNTP requests do not hit the network
+pref("network.sntp.pools", "");
+
+// Disable Flash
+pref("plugin.state.flash", 0);
+
+pref("privacy.trackingprotection.enabled", false);
+
+pref("security.certerrors.mitm.priming.enabled", false);
+
+// Local documents have access to all other local documents,
+// including directory listings
+pref("security.fileuri.strict_origin_policy", false);
+
+// Tests do not wait for the notification button security delay
+pref("security.notification_enable_delay", 0);
+
+// Do not automatically fill sign-in forms with known usernames and
+// passwords
+pref("signon.autofillForms", false);
+
+// Disable password capture, so that tests that include forms are not
+// influenced by the presence of the persistent doorhanger notification
+pref("signon.rememberSignons", false);
+
+// Disable first-run welcome page
+pref("startup.homepage_welcome_url", "about:blank");
+pref("startup.homepage_welcome_url.additional", "");
+
+// Prevent starting into safe mode after application crashes
+pref("toolkit.startup.max_resumed_crashes", -1);
+lockPref("toolkit.crashreporter.enabled", false);
+
+pref("toolkit.telemetry.enabled", false);
+pref("toolkit.telemetry.server", "");
+
+// Disable downloading the list of blocked extensions.
+pref("extensions.blocklist.enabled", false);
+
+// Force Firefox Devtools to open in a separate window.
+pref("devtools.toolbox.host", "window");
+
diff --git a/browser_patches/firefox/BUILD_NUMBER b/browser_patches/firefox/BUILD_NUMBER
new file mode 100644
index 0000000000000000000000000000000000000000..397ac5e794fe7519bbb32381f2ba4e3d8c73d66d
--- /dev/null
+++ b/browser_patches/firefox/BUILD_NUMBER
@@ -0,0 +1,2 @@
+1344
+Changed: yurys@chromium.org Fri Aug  5 15:15:08 PDT 2022
diff --git a/browser_patches/firefox/EXPECTED_BUILDS b/browser_patches/firefox/EXPECTED_BUILDS
new file mode 100644
index 0000000000000000000000000000000000000000..d2bf4c2ace24d8e98e31daea5cb44072873d26b7
--- /dev/null
+++ b/browser_patches/firefox/EXPECTED_BUILDS
@@ -0,0 +1,9 @@
+firefox-mac-11.zip
+firefox-mac-11-arm64.zip
+firefox-ubuntu-18.04.zip
+firefox-ubuntu-20.04.zip
+firefox-ubuntu-20.04-arm64.zip
+firefox-ubuntu-22.04.zip
+firefox-ubuntu-22.04-arm64.zip
+firefox-debian-11.zip
+firefox-win64.zip
diff --git a/browser_patches/firefox/UPSTREAM_CONFIG.sh b/browser_patches/firefox/UPSTREAM_CONFIG.sh
index ed5d78cb8eb84190c2ded0c2b79b826de2b3b01b..37f825fa642181f594f37e1101013abdb6b2e770 100644
--- a/browser_patches/firefox/UPSTREAM_CONFIG.sh
+++ b/browser_patches/firefox/UPSTREAM_CONFIG.sh
@@ -1,3 +1,3 @@
 REMOTE_URL="https://github.com/mozilla/gecko-dev"
 BASE_BRANCH="release"
-BASE_REVISION="fd854580ffc6fba6a0acdf335c96a1b24b976cb9"
+BASE_REVISION="f532fa26bc150add9f8ba42e5fbfdbeffa23662f"
diff --git a/browser_patches/firefox/archive.sh b/browser_patches/firefox/archive.sh
new file mode 100755
index 0000000000000000000000000000000000000000..1c34d8fb06e0406490955bb8183b4dcd7305ddb3
--- /dev/null
+++ b/browser_patches/firefox/archive.sh
@@ -0,0 +1,61 @@
+#!/bin/bash
+set -e
+set +x
+
+if [[ ("$1" == "-h") || ("$1" == "--help") ]]; then
+  echo "usage: $(basename "$0") [output-absolute-path]"
+  echo
+  echo "Generate distributable .zip archive from Firefox checkout folder that was previously built."
+  echo
+  exit 0
+fi
+
+ZIP_PATH=$1
+if [[ $ZIP_PATH != /* ]]; then
+  echo "ERROR: path $ZIP_PATH is not absolute"
+  exit 1
+fi
+if [[ $ZIP_PATH != *.zip ]]; then
+  echo "ERROR: path $ZIP_PATH must have .zip extension"
+  exit 1
+fi
+if [[ -f $ZIP_PATH ]]; then
+  echo "ERROR: path $ZIP_PATH exists; can't do anything."
+  exit 1
+fi
+if ! [[ -d $(dirname "$ZIP_PATH") ]]; then
+  echo "ERROR: folder for path $($ZIP_PATH) does not exist."
+  exit 1
+fi
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname "$0")"
+SCRIPT_FOLDER="$(pwd -P)"
+source "${SCRIPT_FOLDER}/../utils.sh"
+
+if [[ -z "${FF_CHECKOUT_PATH}" ]]; then
+  FF_CHECKOUT_PATH="$HOME/firefox"
+fi
+OBJ_FOLDER="${FF_CHECKOUT_PATH}/obj-build-playwright"
+
+cd "${FF_CHECKOUT_PATH}"
+
+export MH_BRANCH=mozilla-release
+export MOZ_BUILD_DATE=$(date +%Y%m%d%H%M%S)
+./mach package
+node "${SCRIPT_FOLDER}/install-preferences.js" "${OBJ_FOLDER}/dist/firefox"
+
+if ! [[ -d "$OBJ_FOLDER/dist/firefox" ]]; then
+  echo "ERROR: cannot find $OBJ_FOLDER/dist/firefox folder in the firefox checkout. Did you build?"
+  exit 1;
+fi
+
+if is_win; then
+  # Bundle vcruntime14_1.dll - see https://github.com/microsoft/playwright/issues/9974
+  cd "$(printMSVCRedistDir)"
+  cp -t "${OBJ_FOLDER}/dist/firefox" vcruntime140_1.dll
+fi
+
+# tar resulting directory and cleanup TMP.
+cd "${OBJ_FOLDER}/dist"
+zip -r "$ZIP_PATH" firefox
diff --git a/browser_patches/firefox/build.sh b/browser_patches/firefox/build.sh
new file mode 100755
index 0000000000000000000000000000000000000000..4f2e8c1b54917c2ef61bdd329bf8a1840c36035a
--- /dev/null
+++ b/browser_patches/firefox/build.sh
@@ -0,0 +1,153 @@
+#!/bin/bash
+set -e
+set +x
+
+RUST_VERSION="1.59.0"
+CBINDGEN_VERSION="0.24.3"
+
+trap "cd $(pwd -P)" EXIT
+
+cd "$(dirname "$0")"
+SCRIPT_FOLDER="$(pwd -P)"
+source "${SCRIPT_FOLDER}/../utils.sh"
+
+if [[ ! -z "${FF_CHECKOUT_PATH}" ]]; then
+  cd "${FF_CHECKOUT_PATH}"
+  echo "WARNING: checkout path from FF_CHECKOUT_PATH env: ${FF_CHECKOUT_PATH}"
+else
+  cd "$HOME/firefox"
+fi
+
+args=("$@")
+IS_FULL=""
+IS_JUGGLER=""
+IS_DEBUG=""
+for ((i="${#args[@]}"-1; i >= 0; --i)); do
+    case ${args[i]} in
+        --full) IS_FULL="1"; unset args[i]; ;;
+        --juggler) IS_JUGGLER="1"; unset args[i]; ;;
+        --debug) IS_DEBUG="1"; unset args[i]; ;;
+    esac
+done
+
+if [[ -n "${IS_JUGGLER}" && -n "${IS_FULL}" ]]; then
+  echo "ERROR: either --full or --juggler is allowed"
+  exit 1
+fi
+
+echo "== BUILD CONFIGURATION =="
+if [[ -n "${IS_FULL}" ]]; then
+  echo "- build type: FULL"
+elif [[ -n "${IS_JUGGLER}" ]]; then
+  echo "- build type: JUGGLER"
+else
+  echo "- build type: INCREMENTAL"
+fi
+
+if [[ -n "${IS_DEBUG}" ]]; then
+  echo "- debug: YES"
+else
+  echo "- debug: NO"
+fi
+
+echo "========================="
+
+rm -rf .mozconfig
+
+if is_mac; then
+  selectXcodeVersionOrDie $(node "${SCRIPT_FOLDER}/../get_xcode_version.js" firefox)
+  echo "-- building on Mac"
+elif is_linux; then
+  echo "-- building on Linux"
+elif is_win; then
+  echo "ac_add_options --disable-update-agent" >> .mozconfig
+  echo "ac_add_options --disable-default-browser-agent" >> .mozconfig
+  echo "ac_add_options --disable-maintenance-service" >> .mozconfig
+
+  echo "-- building win64 build on MINGW"
+  echo "ac_add_options --target=x86_64-pc-mingw32" >> .mozconfig
+  echo "ac_add_options --host=x86_64-pc-mingw32" >> .mozconfig
+  DLL_FILE=$("C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -find '**\Redist\MSVC\*\x64\**\vcruntime140.dll')
+  WIN32_REDIST_DIR=$(dirname "$DLL_FILE" | tail -n 1)
+  if ! [[ -d $WIN32_REDIST_DIR ]]; then
+    echo "ERROR: cannot find MS VS C++ redistributable $WIN32_REDIST_DIR"
+    exit 1;
+  fi
+else
+  echo "ERROR: cannot upload on this platform!" 1>&2
+  exit 1;
+fi
+
+# There's no pre-built wasi sysroot on certain platforms.
+echo "ac_add_options --without-wasm-sandboxed-libraries" >> .mozconfig
+
+OBJ_FOLDER="obj-build-playwright"
+echo "mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/${OBJ_FOLDER}" >> .mozconfig
+echo "ac_add_options --disable-crashreporter" >> .mozconfig
+echo "ac_add_options --disable-backgroundtasks" >> .mozconfig
+
+if [[ -n "${IS_DEBUG}" ]]; then
+  echo "ac_add_options --enable-debug" >> .mozconfig
+  echo "ac_add_options --enable-debug-symbols" >> .mozconfig
+else
+  echo "ac_add_options --enable-release" >> .mozconfig
+fi
+
+if is_mac || is_win; then
+  # This options is only available on win and mac.
+  echo "ac_add_options --disable-update-agent" >> .mozconfig
+fi
+
+if [[ -z "${IS_JUGGLER}" ]]; then
+  # TODO: rustup is not in the PATH on Windows
+  if command -v rustup >/dev/null; then
+    # We manage Rust version ourselves.
+    echo "-- Using rust v${RUST_VERSION}"
+    rustup install "${RUST_VERSION}"
+    rustup default "${RUST_VERSION}"
+  fi
+  # Firefox on Linux arm64 host does not ship
+  # cbindgen in their default toolchains - install manually.
+  if command -v cargo >/dev/null; then
+    echo "-- Using cbindgen v${CBINDGEN_VERSION}"
+    cargo install cbindgen --version "${CBINDGEN_VERSION}"
+  fi
+fi
+
+if [[ -n "${IS_FULL}" ]]; then
+  # This is a slow but sure way to get all the necessary toolchains.
+  # However, it will not work if tree is dirty.
+  # Bail out if git repo is dirty.
+  if [[ -n $(git status -s --untracked-files=no) ]]; then
+    echo "ERROR: dirty GIT state - commit everything and re-run the script."
+    exit 1
+  fi
+
+  # 1. We have a --single-branch checkout, so we have to add a "master" branch and fetch it
+  git remote set-branches --add browser_upstream master
+  git fetch --depth 1 browser_upstream master
+  # 2. Checkout the master branch and run bootstrap from it.
+  git checkout browser_upstream/master
+  echo "ac_add_options --enable-bootstrap" >> .mozconfig
+  SHELL=/bin/sh ./mach --no-interactive bootstrap --application-choice=browser
+  git checkout -
+  rm -rf "${OBJ_FOLDER}"
+
+  if [[ -n "${WIN32_REDIST_DIR}" ]]; then
+    # Having this option in .mozconfig kills incremental compilation.
+    echo "export WIN32_REDIST_DIR=\"$WIN32_REDIST_DIR\"" >> .mozconfig
+  fi
+fi
+
+if [[ -n "${IS_JUGGLER}" ]]; then
+  ./mach build faster
+else
+  ./mach build
+  if is_mac; then
+    FF_DEBUG_BUILD="${IS_DEBUG}" node "${SCRIPT_FOLDER}"/install-preferences.js "$PWD"/${OBJ_FOLDER}/dist
+  else
+    FF_DEBUG_BUILD="${IS_DEBUG}" node "${SCRIPT_FOLDER}"/install-preferences.js "$PWD"/${OBJ_FOLDER}/dist/bin
+  fi
+fi
+
+
diff --git a/browser_patches/firefox/clean.sh b/browser_patches/firefox/clean.sh
new file mode 100755
index 0000000000000000000000000000000000000000..d94baf33a30d9d33610c78277c576c7672aa2cb5
--- /dev/null
+++ b/browser_patches/firefox/clean.sh
@@ -0,0 +1,20 @@
+#!/bin/bash
+set -e
+set +x
+
+trap "cd $(pwd -P)" EXIT
+if [[ ! -z "${FF_CHECKOUT_PATH}" ]]; then
+  cd "${FF_CHECKOUT_PATH}"
+  echo "WARNING: checkout path from FF_CHECKOUT_PATH env: ${FF_CHECKOUT_PATH}"
+else
+  cd "$HOME/firefox"
+fi
+
+OBJ_FOLDER="obj-build-playwright"
+if [[ -d $OBJ_FOLDER ]]; then
+  rm -rf $OBJ_FOLDER
+fi
+
+if [[ -f "mach" ]]; then
+  ./mach clobber || true
+fi
diff --git a/browser_patches/firefox/install-preferences.js b/browser_patches/firefox/install-preferences.js
new file mode 100644
index 0000000000000000000000000000000000000000..f82f791d54c0535ac4256b406edfea31cc2dc701
--- /dev/null
+++ b/browser_patches/firefox/install-preferences.js
@@ -0,0 +1,100 @@
+/**
+ * Copyright 2018 Google Inc. All rights reserved.
+ * Modifications copyright (c) Microsoft Corporation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+const os = require('os');
+const fs = require('fs');
+const path = require('path');
+const util = require('util');
+
+const writeFileAsync = util.promisify(fs.writeFile.bind(fs));
+const mkdirAsync = util.promisify(fs.mkdir.bind(fs));
+
+// Install browser preferences after downloading and unpacking
+// firefox instances.
+// Based on:   https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Enterprise_deployment_before_60#Configuration
+async function installFirefoxPreferences(distpath) {
+  let executablePath = '';
+  if (os.platform() === 'linux')
+    executablePath = path.join(distpath, 'firefox');
+  else if (os.platform() === 'darwin')
+    executablePath = path.join(distpath, (process.env.FF_DEBUG_BUILD ? 'NightlyDebug.app' : 'Nightly.app'), 'Contents', 'MacOS', 'firefox');
+  else if (os.platform() === 'win32')
+    executablePath = path.join(distpath, 'firefox.exe');
+
+  const firefoxFolder = path.dirname(executablePath);
+
+  let prefPath = '';
+  let configPath = '';
+  if (os.platform() === 'darwin') {
+    prefPath = path.join(firefoxFolder, '..', 'Resources', 'defaults', 'pref');
+    configPath = path.join(firefoxFolder, '..', 'Resources');
+  } else if (os.platform() === 'linux') {
+    if (!fs.existsSync(path.join(firefoxFolder, 'browser', 'defaults')))
+      await mkdirAsync(path.join(firefoxFolder, 'browser', 'defaults'));
+    if (!fs.existsSync(path.join(firefoxFolder, 'browser', 'defaults', 'preferences')))
+      await mkdirAsync(path.join(firefoxFolder, 'browser', 'defaults', 'preferences'));
+    prefPath = path.join(firefoxFolder, 'browser', 'defaults', 'preferences');
+    configPath = firefoxFolder;
+  } else if (os.platform() === 'win32') {
+    prefPath = path.join(firefoxFolder, 'defaults', 'pref');
+    configPath = firefoxFolder;
+  } else {
+    throw new Error('Unsupported platform: ' + os.platform());
+  }
+
+  await Promise.all([
+    copyFile({
+      from: path.join(__dirname, 'preferences', '00-playwright-prefs.js'),
+      to: path.join(prefPath, '00-playwright-prefs.js'),
+    }),
+    copyFile({
+      from: path.join(__dirname, 'preferences', 'playwright.cfg'),
+      to: path.join(configPath, 'playwright.cfg'),
+    }),
+  ]);
+}
+
+function copyFile({from, to}) {
+  const rd = fs.createReadStream(from);
+  const wr = fs.createWriteStream(to);
+  return new Promise(function(resolve, reject) {
+    rd.on('error', reject);
+    wr.on('error', reject);
+    wr.on('finish', resolve);
+    rd.pipe(wr);
+  }).catch(function(error) {
+    rd.destroy();
+    wr.end();
+    throw error;
+  });
+}
+
+module.exports = { installFirefoxPreferences };
+
+if (require.main === module) {
+  if (process.argv.length !== 3) {
+    console.log('ERROR: expected a path to the directory with browser build');
+    process.exit(1);
+    return;
+  }
+
+  installFirefoxPreferences(process.argv[2]).catch(error => {
+    console.error('ERROR: failed to put preferences!');
+    console.error(error);
+    process.exit(1);
+  });
+}
diff --git a/browser_patches/firefox/juggler/NetworkObserver.js b/browser_patches/firefox/juggler/NetworkObserver.js
index f1979594973fa1f18cb7fb26c2e468be91d2afa5..340f756f6cfef0dce4e3067c1da4d6743f304a36 100644
--- a/browser_patches/firefox/juggler/NetworkObserver.js
+++ b/browser_patches/firefox/juggler/NetworkObserver.js
@@ -863,7 +863,7 @@ function setPostData(httpChannel, postData, headers) {
   const body = atob(postData);
   synthesized.setData(body, body.length);
 
-  const overriddenHeader = (lowerCaseName) => {
+  const overriddenHeader = (lowerCaseName, defaultValue) => {
     if (headers) {
       for (const header of headers) {
         if (header.name.toLowerCase() === lowerCaseName) {
@@ -871,22 +871,11 @@ function setPostData(httpChannel, postData, headers) {
         }
       }
     }
-    return undefined;
+    return defaultValue;
   }
   // Clear content-length, so that upload stream resets it.
   httpChannel.setRequestHeader('content-length', '', false /* merge */);
-  let contentType = overriddenHeader('content-type');
-  if (contentType === undefined) {
-    try {
-      contentType = httpChannel.getRequestHeader('content-type');
-    } catch (e) {
-      if (e.result == Cr.NS_ERROR_NOT_AVAILABLE)
-        contentType =  'application/octet-stream';
-      else
-        throw e;
-    }
-  }
-  httpChannel.explicitSetUploadStream(synthesized, contentType, -1, httpChannel.requestMethod, false);
+  httpChannel.explicitSetUploadStream(synthesized, overriddenHeader('content-type', 'application/octet-stream'), -1, httpChannel.requestMethod, false);
 }
 
 function convertString(s, source, dest) {
diff --git a/browser_patches/firefox/juggler/components/Juggler.js b/browser_patches/firefox/juggler/components/Juggler.js
deleted file mode 100644
index ed4242406f27030fecb25211894f0154aa3d7902..0000000000000000000000000000000000000000
--- a/browser_patches/firefox/juggler/components/Juggler.js
+++ /dev/null
@@ -1,135 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-var EXPORTED_SYMBOLS = ["Juggler", "JugglerFactory"];
-
-const {XPCOMUtils} = ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");
-const {ComponentUtils} = ChromeUtils.import("resource://gre/modules/ComponentUtils.jsm");
-const {Services} = ChromeUtils.import("resource://gre/modules/Services.jsm");
-const {Dispatcher} = ChromeUtils.import("chrome://juggler/content/protocol/Dispatcher.js");
-const {BrowserHandler} = ChromeUtils.import("chrome://juggler/content/protocol/BrowserHandler.js");
-const {NetworkObserver} = ChromeUtils.import("chrome://juggler/content/NetworkObserver.js");
-const {TargetRegistry} = ChromeUtils.import("chrome://juggler/content/TargetRegistry.js");
-const {Helper} = ChromeUtils.import('chrome://juggler/content/Helper.js');
-const helper = new Helper();
-
-const Cc = Components.classes;
-const Ci = Components.interfaces;
-
-const FRAME_SCRIPT = "chrome://juggler/content/content/main.js";
-
-let browserStartupFinishedCallback;
-let browserStartupFinishedPromise = new Promise(x => browserStartupFinishedCallback = x);
-
-class Juggler {
-  get classDescription() { return "Sample command-line handler"; }
-  get classID() { return Components.ID('{f7a74a33-e2ab-422d-b022-4fb213dd2639}'); }
-  get contractID() { return "@mozilla.org/remote/juggler;1" }
-  get QueryInterface() {
-    return ChromeUtils.generateQI([ Ci.nsICommandLineHandler, Ci.nsIObserver ]);
-  }
-  get helpInfo() {
-    return "  --juggler            Enable Juggler automation\n";
-  }
-
-  handle(cmdLine) {
-    // flag has to be consumed in nsICommandLineHandler:handle
-    // to avoid issues on macos. See Marionette.jsm::handle() for more details.
-    // TODO: remove after Bug 1724251 is fixed.
-    cmdLine.handleFlag("juggler-pipe", false);
-  }
-
-  // This flow is taken from Remote agent and Marionette.
-  // See https://github.com/mozilla/gecko-dev/blob/0c1b4921830e6af8bc951da01d7772de2fe60a08/remote/components/RemoteAgent.jsm#L302
-  async observe(subject, topic) {
-    switch (topic) {
-      case "profile-after-change":
-        Services.obs.addObserver(this, "command-line-startup");
-        Services.obs.addObserver(this, "browser-idle-startup-tasks-finished");
-        break;
-      case "command-line-startup":
-        Services.obs.removeObserver(this, topic);
-        const cmdLine = subject;
-        const jugglerPipeFlag = cmdLine.handleFlag('juggler-pipe', false);
-        if (!jugglerPipeFlag)
-          return;
-
-        this._silent = cmdLine.findFlag('silent', false) >= 0;
-        if (this._silent) {
-          Services.startup.enterLastWindowClosingSurvivalArea();
-          browserStartupFinishedCallback();
-        }
-        Services.obs.addObserver(this, "final-ui-startup");
-        break;
-      case "browser-idle-startup-tasks-finished":
-        browserStartupFinishedCallback();
-        break;
-      // Used to wait until the initial application window has been opened.
-      case "final-ui-startup":
-        Services.obs.removeObserver(this, topic);
-
-        const targetRegistry = new TargetRegistry();
-        new NetworkObserver(targetRegistry);
-
-        const loadFrameScript = () => {
-          Services.mm.loadFrameScript(FRAME_SCRIPT, true /* aAllowDelayedLoad */);
-          if (Cc["@mozilla.org/gfx/info;1"].getService(Ci.nsIGfxInfo).isHeadless) {
-            const styleSheetService = Cc["@mozilla.org/content/style-sheet-service;1"].getService(Components.interfaces.nsIStyleSheetService);
-            const ioService = Cc["@mozilla.org/network/io-service;1"].getService(Components.interfaces.nsIIOService);
-            const uri = ioService.newURI('chrome://juggler/content/content/hidden-scrollbars.css', null, null);
-            styleSheetService.loadAndRegisterSheet(uri, styleSheetService.AGENT_SHEET);
-          }
-        };
-
-        // Force create hidden window here, otherwise its creation later closes the web socket!
-        Services.appShell.hiddenDOMWindow;
-
-        let pipeStopped = false;
-        let browserHandler;
-        const pipe = Cc['@mozilla.org/juggler/remotedebuggingpipe;1'].getService(Ci.nsIRemoteDebuggingPipe);
-        const connection = {
-          QueryInterface: ChromeUtils.generateQI([Ci.nsIRemoteDebuggingPipeClient]),
-          receiveMessage(message) {
-            if (this.onmessage)
-              this.onmessage({ data: message });
-          },
-          disconnected() {
-            if (browserHandler)
-              browserHandler['Browser.close']();
-          },
-          send(message) {
-            if (pipeStopped) {
-              // We are missing the response to Browser.close,
-              // but everything works fine. Once we actually need it,
-              // we have to stop the pipe after the response is sent.
-              return;
-            }
-            pipe.sendMessage(message);
-          },
-        };
-        pipe.init(connection);
-        const dispatcher = new Dispatcher(connection);
-        browserHandler = new BrowserHandler(dispatcher.rootSession(), dispatcher, targetRegistry, () => {
-          if (this._silent)
-            Services.startup.exitLastWindowClosingSurvivalArea();
-          connection.onclose();
-          pipe.stop();
-          pipeStopped = true;
-        }, () => browserStartupFinishedPromise);
-        dispatcher.rootSession().setHandler(browserHandler);
-        loadFrameScript();
-        dump(`\nJuggler listening to the pipe\n`);
-        break;
-    }
-  }
-
-}
-
-const jugglerInstance = new Juggler();
-
-// This is used by the XPCOM codepath which expects a constructor
-var JugglerFactory = function() {
-  return jugglerInstance;
-};
-
diff --git a/browser_patches/firefox/juggler/components/components.conf b/browser_patches/firefox/juggler/components/components.conf
deleted file mode 100644
index e5bc6523b10cd3853a12b5183571326516d2949a..0000000000000000000000000000000000000000
--- a/browser_patches/firefox/juggler/components/components.conf
+++ /dev/null
@@ -1,18 +0,0 @@
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
- 
-Classes = [
-    # Juggler
-    {
-        "cid": "{f7a74a33-e2ab-422d-b022-4fb213dd2639}",
-        "contract_ids": ["@mozilla.org/remote/juggler;1"],
-        "categories": {
-            "command-line-handler": "m-remote",
-            "profile-after-change": "Juggler",
-        },
-        "jsm": "chrome://juggler/content/components/Juggler.js",
-        "constructor": "JugglerFactory",
-    },
-]
- 
diff --git a/browser_patches/firefox/juggler/components/juggler.js b/browser_patches/firefox/juggler/components/juggler.js
new file mode 100644
index 0000000000000000000000000000000000000000..7fd1ca3ad6e5948d9facb91acb34dfffe7cb2c57
--- /dev/null
+++ b/browser_patches/firefox/juggler/components/juggler.js
@@ -0,0 +1,131 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const {XPCOMUtils} = ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");
+const {ComponentUtils} = ChromeUtils.import("resource://gre/modules/ComponentUtils.jsm");
+const {Services} = ChromeUtils.import("resource://gre/modules/Services.jsm");
+const {Dispatcher} = ChromeUtils.import("chrome://juggler/content/protocol/Dispatcher.js");
+const {BrowserHandler} = ChromeUtils.import("chrome://juggler/content/protocol/BrowserHandler.js");
+const {NetworkObserver} = ChromeUtils.import("chrome://juggler/content/NetworkObserver.js");
+const {TargetRegistry} = ChromeUtils.import("chrome://juggler/content/TargetRegistry.js");
+const {Helper} = ChromeUtils.import('chrome://juggler/content/Helper.js');
+const helper = new Helper();
+
+const Cc = Components.classes;
+const Ci = Components.interfaces;
+
+const FRAME_SCRIPT = "chrome://juggler/content/content/main.js";
+
+// Command Line Handler
+function CommandLineHandler() {
+};
+
+CommandLineHandler.prototype = {
+  classDescription: "Sample command-line handler",
+  classID: Components.ID('{f7a74a33-e2ab-422d-b022-4fb213dd2639}'),
+  contractID: "@mozilla.org/remote/juggler;1",
+  _xpcom_categories: [{
+    category: "command-line-handler",
+    entry: "m-juggler"
+  }],
+
+  /* nsICommandLineHandler */
+  handle: async function(cmdLine) {
+    const jugglerFlag = cmdLine.handleFlagWithParam("juggler", false);
+    const jugglerPipeFlag = cmdLine.handleFlag("juggler-pipe", false);
+    if (!jugglerPipeFlag && (!jugglerFlag || isNaN(jugglerFlag)))
+      return;
+    const silent = cmdLine.preventDefault;
+    if (silent)
+      Services.startup.enterLastWindowClosingSurvivalArea();
+
+    const targetRegistry = new TargetRegistry();
+    new NetworkObserver(targetRegistry);
+
+    const loadFrameScript = () => {
+      Services.mm.loadFrameScript(FRAME_SCRIPT, true /* aAllowDelayedLoad */);
+      if (Cc["@mozilla.org/gfx/info;1"].getService(Ci.nsIGfxInfo).isHeadless) {
+        const styleSheetService = Cc["@mozilla.org/content/style-sheet-service;1"].getService(Components.interfaces.nsIStyleSheetService);
+        const ioService = Cc["@mozilla.org/network/io-service;1"].getService(Components.interfaces.nsIIOService);
+        const uri = ioService.newURI('chrome://juggler/content/content/hidden-scrollbars.css', null, null);
+        styleSheetService.loadAndRegisterSheet(uri, styleSheetService.AGENT_SHEET);
+      }
+    };
+
+    // Force create hidden window here, otherwise its creation later closes the web socket!
+    Services.appShell.hiddenDOMWindow;
+
+    if (jugglerFlag) {
+      const port = parseInt(jugglerFlag, 10);
+      const { require } = ChromeUtils.import("resource://devtools/shared/Loader.jsm");
+      const WebSocketServer = require('devtools/server/socket/websocket-server');
+      this._server = Cc["@mozilla.org/network/server-socket;1"].createInstance(Ci.nsIServerSocket);
+      this._server.initSpecialConnection(port, Ci.nsIServerSocket.KeepWhenOffline | Ci.nsIServerSocket.LoopbackOnly, 4);
+      const token = helper.generateId();
+      this._server.asyncListen({
+        onSocketAccepted: async(socket, transport) => {
+          const input = transport.openInputStream(0, 0, 0);
+          const output = transport.openOutputStream(0, 0, 0);
+          const webSocket = await WebSocketServer.accept(transport, input, output, "/" + token);
+          const dispatcher = new Dispatcher(webSocket);
+          const browserHandler = new BrowserHandler(dispatcher.rootSession(), dispatcher, targetRegistry, () => {
+            if (silent)
+              Services.startup.exitLastWindowClosingSurvivalArea();
+          });
+          dispatcher.rootSession().setHandler(browserHandler);
+        }
+      });
+      loadFrameScript();
+      dump(`Juggler listening on ws://127.0.0.1:${this._server.port}/${token}\n`);
+    } else if (jugglerPipeFlag) {
+      let browserHandler;
+      let pipeStopped = false;
+      const pipe = Cc['@mozilla.org/juggler/remotedebuggingpipe;1'].getService(Ci.nsIRemoteDebuggingPipe);
+      const connection = {
+        QueryInterface: ChromeUtils.generateQI([Ci.nsIRemoteDebuggingPipeClient]),
+        receiveMessage(message) {
+          if (this.onmessage)
+            this.onmessage({ data: message });
+        },
+        disconnected() {
+          if (browserHandler)
+            browserHandler['Browser.close']();
+        },
+        send(message) {
+          if (pipeStopped) {
+            // We are missing the response to Browser.close,
+            // but everything works fine. Once we actually need it,
+            // we have to stop the pipe after the response is sent.
+            return;
+          }
+          pipe.sendMessage(message);
+        },
+      };
+      pipe.init(connection);
+      const dispatcher = new Dispatcher(connection);
+      browserHandler = new BrowserHandler(dispatcher.rootSession(), dispatcher, targetRegistry, () => {
+        if (silent)
+          Services.startup.exitLastWindowClosingSurvivalArea();
+        connection.onclose();
+        pipe.stop();
+        pipeStopped = true;
+      });
+      dispatcher.rootSession().setHandler(browserHandler);
+      loadFrameScript();
+      dump(`\nJuggler listening to the pipe\n`);
+    }
+  },
+
+  QueryInterface: ChromeUtils.generateQI([ Ci.nsICommandLineHandler ]),
+
+  // CHANGEME: change the help info as appropriate, but
+  // follow the guidelines in nsICommandLineHandler.idl
+  // specifically, flag descriptions should start at
+  // character 24, and lines should be wrapped at
+  // 72 characters with embedded newlines,
+  // and finally, the string should end with a newline
+  helpInfo : "  --juggler            Enable Juggler automation\n"
+};
+
+var NSGetFactory = ComponentUtils.generateNSGetFactory([CommandLineHandler]);
diff --git a/browser_patches/firefox/juggler/components/juggler.manifest b/browser_patches/firefox/juggler/components/juggler.manifest
new file mode 100644
index 0000000000000000000000000000000000000000..50f8930207563e0d6b8a7878fc602dbca54d77fc
--- /dev/null
+++ b/browser_patches/firefox/juggler/components/juggler.manifest
@@ -0,0 +1,3 @@
+component {f7a74a33-e2ab-422d-b022-4fb213dd2639} juggler.js
+contract @mozilla.org/remote/juggler;1 {f7a74a33-e2ab-422d-b022-4fb213dd2639}
+category command-line-handler m-juggler @mozilla.org/remote/juggler;1
diff --git a/browser_patches/firefox/juggler/components/moz.build b/browser_patches/firefox/juggler/components/moz.build
index bab81f83fcb290c7a201e3a282b90a193ba4e080..268fbc361d8053182bb6c27f626e853dd7aeb254 100644
--- a/browser_patches/firefox/juggler/components/moz.build
+++ b/browser_patches/firefox/juggler/components/moz.build
@@ -2,5 +2,8 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-XPCOM_MANIFESTS += ["components.conf"]
+EXTRA_COMPONENTS += [
+    "juggler.js",
+    "juggler.manifest",
+]
 
diff --git a/browser_patches/firefox/juggler/content/PageAgent.js b/browser_patches/firefox/juggler/content/PageAgent.js
index 63a1807e4db1c8c75c512b96ab6be85bf44804c8..934739648290798395c7e25eee5430efc3567db5 100644
--- a/browser_patches/firefox/juggler/content/PageAgent.js
+++ b/browser_patches/firefox/juggler/content/PageAgent.js
@@ -711,8 +711,8 @@ class PageAgent {
         false /*aIgnoreRootScrollFrame*/,
         undefined /*pressure*/,
         undefined /*inputSource*/,
-        true /*isDOMEventSynthesized*/,
-        false /*isWidgetEventSynthesized*/,
+        undefined /*isDOMEventSynthesized*/,
+        undefined /*isWidgetEventSynthesized*/,
         buttons);
       obs.removeObserver(trapDrag, 'on-datatransfer-available');
 
diff --git a/browser_patches/firefox/juggler/jar.mn b/browser_patches/firefox/juggler/jar.mn
index 8b3d3922c14ab37981034572e1b233c8326be8f1..adc90edd79e69e4933fb9c2055d1f2e0ab4c4c3d 100644
--- a/browser_patches/firefox/juggler/jar.mn
+++ b/browser_patches/firefox/juggler/jar.mn
@@ -4,9 +4,6 @@
 
 juggler.jar:
 % content juggler %content/
-
-  content/components/Juggler.js (components/Juggler.js)
-
   content/Helper.js (Helper.js)
   content/NetworkObserver.js (NetworkObserver.js)
   content/TargetRegistry.js (TargetRegistry.js)
diff --git a/browser_patches/firefox/juggler/protocol/BrowserHandler.js b/browser_patches/firefox/juggler/protocol/BrowserHandler.js
index 623f9cc33126891848d0ef6d1502d893ea3cf263..04a139343eb8d4d4491d3d00d8353a9b3f3d695c 100644
--- a/browser_patches/firefox/juggler/protocol/BrowserHandler.js
+++ b/browser_patches/firefox/juggler/protocol/BrowserHandler.js
@@ -14,7 +14,7 @@ const {AppConstants} = ChromeUtils.import("resource://gre/modules/AppConstants.j
 const helper = new Helper();
 
 class BrowserHandler {
-  constructor(session, dispatcher, targetRegistry, onclose, onstart) {
+  constructor(session, dispatcher, targetRegistry, onclose) {
     this._session = session;
     this._dispatcher = dispatcher;
     this._targetRegistry = targetRegistry;
@@ -24,13 +24,11 @@ class BrowserHandler {
     this._createdBrowserContextIds = new Set();
     this._attachedSessions = new Map();
     this._onclose = onclose;
-    this._onstart = onstart;
   }
 
   async ['Browser.enable']({attachToDefaultContext}) {
     if (this._enabled)
       return;
-    await this._onstart();
     this._enabled = true;
     this._attachToDefaultContext = attachToDefaultContext;
 
diff --git a/browser_patches/firefox/patches/bootstrap.diff b/browser_patches/firefox/patches/bootstrap.diff
index b32d2fe975daad15521c34aacfd8c41dd3a33c0d..6a406855c30abf714ce416744784afa5ced77a75 100644
--- a/browser_patches/firefox/patches/bootstrap.diff
+++ b/browser_patches/firefox/patches/bootstrap.diff
@@ -109,19 +109,21 @@ index b59fe4b1854fec7cb329139f9c6773498fb9de51..29973af04902848808e850b40bf85e5f
  gmp-clearkey/0.1/manifest.json
  i686/gmp-clearkey/0.1/manifest.json
 diff --git a/browser/installer/package-manifest.in b/browser/installer/package-manifest.in
-index 14e582fc61be808d5b6f3ae7801f43c7b0b743d4..80e400b5c3e316afe2bff1bac16808bad16dc4bd 100644
+index 73a41dc25b9ad674750ce5849a9db8f9878e5e11..e669054d361a148fff895ee24d1ea28c11d0a484 100644
 --- a/browser/installer/package-manifest.in
 +++ b/browser/installer/package-manifest.in
-@@ -192,6 +192,9 @@
+@@ -198,6 +198,11 @@
  @RESPATH@/chrome/remote.manifest
  #endif
  
 +@RESPATH@/chrome/juggler@JAREXT@
 +@RESPATH@/chrome/juggler.manifest
++@RESPATH@/components/juggler.manifest
++@RESPATH@/components/juggler.js
 +
- ; [Extensions]
- @RESPATH@/components/extensions-toolkit.manifest
- @RESPATH@/browser/components/extensions-browser.manifest
+ #if defined(ENABLE_TESTS) && defined(MOZ_DEBUG)
+ @RESPATH@/components/TestInterfaceJS.js
+ @RESPATH@/components/TestInterfaceJS.manifest
 diff --git a/devtools/server/socket/websocket-server.js b/devtools/server/socket/websocket-server.js
 index 040c7b124dec6bb254563bbe74fe50012cb077a3..b4e6b8132786af70e8ad0dce88b67c2835307f88 100644
 --- a/devtools/server/socket/websocket-server.js
@@ -170,7 +172,7 @@ index 040c7b124dec6bb254563bbe74fe50012cb077a3..b4e6b8132786af70e8ad0dce88b67c28
    const transportProvider = {
      setListener(upgradeListener) {
 diff --git a/docshell/base/BrowsingContext.cpp b/docshell/base/BrowsingContext.cpp
-index 4b4c20d5d04e51e5eeb08027c4b48068ee21d703..5529185d2a39e041b7e5021a5f5de63269644a4b 100644
+index 2eb25e3e50f8865a1788e1043187eb78f5efc72f..a3435e5f28cc4932b530ae9890f0d8591f22c717 100644
 --- a/docshell/base/BrowsingContext.cpp
 +++ b/docshell/base/BrowsingContext.cpp
 @@ -111,6 +111,20 @@ struct ParamTraits<mozilla::dom::PrefersColorSchemeOverride>
@@ -194,7 +196,7 @@ index 4b4c20d5d04e51e5eeb08027c4b48068ee21d703..5529185d2a39e041b7e5021a5f5de632
  template <>
  struct ParamTraits<mozilla::dom::ExplicitActiveStatus>
      : public ContiguousEnumSerializer<
-@@ -2782,6 +2796,40 @@ void BrowsingContext::DidSet(FieldIndex<IDX_PrefersColorSchemeOverride>,
+@@ -2780,6 +2794,40 @@ void BrowsingContext::DidSet(FieldIndex<IDX_PrefersColorSchemeOverride>,
    PresContextAffectingFieldChanged();
  }
  
@@ -303,7 +305,7 @@ index e0b091feba6ce38e57681c62c386d3b70234de1f..4fae381a8bded7ae004ccb25187b3ace
  
    bool CanSet(FieldIndex<IDX_SuspendMediaWhenInactive>, bool, ContentParent*) {
 diff --git a/docshell/base/nsDocShell.cpp b/docshell/base/nsDocShell.cpp
-index e7f3305fae1c6754974b2a53995080f487d559cf..eaa173262e6cfec0765153fb890588fef768d74c 100644
+index c42f9450ce1a8e1b1b77ac3c5e5dd186f2b03d9f..dfb824b4b5ae54126beba8231111e93f0de2000d 100644
 --- a/docshell/base/nsDocShell.cpp
 +++ b/docshell/base/nsDocShell.cpp
 @@ -15,6 +15,12 @@
@@ -365,7 +367,7 @@ index e7f3305fae1c6754974b2a53995080f487d559cf..eaa173262e6cfec0765153fb890588fe
        mAllowAuth(mItemType == typeContent),
        mAllowKeywordFixup(false),
        mDisableMetaRefreshWhenInactive(false),
-@@ -3256,6 +3273,221 @@ nsDocShell::GetMessageManager(ContentFrameMessageManager** aMessageManager) {
+@@ -3266,6 +3283,221 @@ nsDocShell::GetMessageManager(ContentFrameMessageManager** aMessageManager) {
    return NS_OK;
  }
  
@@ -587,7 +589,7 @@ index e7f3305fae1c6754974b2a53995080f487d559cf..eaa173262e6cfec0765153fb890588fe
  NS_IMETHODIMP
  nsDocShell::GetIsNavigating(bool* aOut) {
    *aOut = mIsNavigating;
-@@ -4886,7 +5118,7 @@ nsDocShell::GetVisibility(bool* aVisibility) {
+@@ -4896,7 +5128,7 @@ nsDocShell::GetVisibility(bool* aVisibility) {
  }
  
  void nsDocShell::ActivenessMaybeChanged() {
@@ -596,7 +598,7 @@ index e7f3305fae1c6754974b2a53995080f487d559cf..eaa173262e6cfec0765153fb890588fe
    if (RefPtr<PresShell> presShell = GetPresShell()) {
      presShell->ActivenessMaybeChanged();
    }
-@@ -8624,6 +8856,12 @@ nsresult nsDocShell::PerformRetargeting(nsDocShellLoadState* aLoadState) {
+@@ -8633,6 +8865,12 @@ nsresult nsDocShell::PerformRetargeting(nsDocShellLoadState* aLoadState) {
                       true,  // aForceNoOpener
                       getter_AddRefs(newBC));
        MOZ_ASSERT(!newBC);
@@ -609,7 +611,7 @@ index e7f3305fae1c6754974b2a53995080f487d559cf..eaa173262e6cfec0765153fb890588fe
        return rv;
      }
  
-@@ -12780,6 +13018,9 @@ class OnLinkClickEvent : public Runnable {
+@@ -12781,6 +13019,9 @@ class OnLinkClickEvent : public Runnable {
        mHandler->OnLinkClickSync(mContent, mLoadState, mNoOpenerImplied,
                                  mTriggeringPrincipal);
      }
@@ -619,7 +621,7 @@ index e7f3305fae1c6754974b2a53995080f487d559cf..eaa173262e6cfec0765153fb890588fe
      return NS_OK;
    }
  
-@@ -12859,6 +13100,8 @@ nsresult nsDocShell::OnLinkClick(
+@@ -12860,6 +13101,8 @@ nsresult nsDocShell::OnLinkClick(
    nsCOMPtr<nsIRunnable> ev =
        new OnLinkClickEvent(this, aContent, loadState, noOpenerImplied,
                             aIsTrusted, aTriggeringPrincipal);
@@ -629,7 +631,7 @@ index e7f3305fae1c6754974b2a53995080f487d559cf..eaa173262e6cfec0765153fb890588fe
  }
  
 diff --git a/docshell/base/nsDocShell.h b/docshell/base/nsDocShell.h
-index 61998bf661a2c765411280e03d0726b227c31a3f..5ba8e2ac8e13ae9d18591fd477e5c9414843e3cc 100644
+index 79b2af0c0f58e00965473edb55a4e184dd225b1b..4a991cba9d77207a631b5f076c37e7f9281e9a4a 100644
 --- a/docshell/base/nsDocShell.h
 +++ b/docshell/base/nsDocShell.h
 @@ -16,6 +16,7 @@
@@ -640,7 +642,7 @@ index 61998bf661a2c765411280e03d0726b227c31a3f..5ba8e2ac8e13ae9d18591fd477e5c941
  #include "mozilla/dom/WindowProxyHolder.h"
  #include "nsCOMPtr.h"
  #include "nsCharsetSource.h"
-@@ -77,6 +78,7 @@ class nsCommandManager;
+@@ -76,6 +77,7 @@ class nsCommandManager;
  class nsDocShellEditorData;
  class nsDOMNavigationTiming;
  class nsDSURIContentListener;
@@ -648,7 +650,7 @@ index 61998bf661a2c765411280e03d0726b227c31a3f..5ba8e2ac8e13ae9d18591fd477e5c941
  class nsGlobalWindowOuter;
  
  class FramingChecker;
-@@ -409,6 +411,15 @@ class nsDocShell final : public nsDocLoader,
+@@ -408,6 +410,15 @@ class nsDocShell final : public nsDocLoader,
    void SetWillChangeProcess() { mWillChangeProcess = true; }
    bool WillChangeProcess() { return mWillChangeProcess; }
  
@@ -664,7 +666,7 @@ index 61998bf661a2c765411280e03d0726b227c31a3f..5ba8e2ac8e13ae9d18591fd477e5c941
    // Create a content viewer within this nsDocShell for the given
    // `WindowGlobalChild` actor.
    nsresult CreateContentViewerForActor(
-@@ -1028,6 +1039,8 @@ class nsDocShell final : public nsDocLoader,
+@@ -1023,6 +1034,8 @@ class nsDocShell final : public nsDocLoader,
  
    bool CSSErrorReportingEnabled() const { return mCSSErrorReportingEnabled; }
  
@@ -673,7 +675,7 @@ index 61998bf661a2c765411280e03d0726b227c31a3f..5ba8e2ac8e13ae9d18591fd477e5c941
    // Handles retrieval of subframe session history for nsDocShell::LoadURI. If a
    // load is requested in a subframe of the current DocShell, the subframe
    // loadType may need to reflect the loadType of the parent document, or in
-@@ -1313,6 +1326,16 @@ class nsDocShell final : public nsDocLoader,
+@@ -1308,6 +1321,16 @@ class nsDocShell final : public nsDocLoader,
    bool mAllowDNSPrefetch : 1;
    bool mAllowWindowControl : 1;
    bool mCSSErrorReportingEnabled : 1;
@@ -745,10 +747,10 @@ index 6b85ddd842a6d2e29f86047017b78b2007b99867..e0b56c4f85544580b9a631619fb06799
     * This attempts to save any applicable layout history state (like
     * scroll position) in the nsISHEntry. This is normally done
 diff --git a/dom/base/Document.cpp b/dom/base/Document.cpp
-index 3c074b09154843577c78b0271b2069eacca8408c..efcb018e9568ce55889acde030dc2baabdbb3e9b 100644
+index feaee86ca5fd78d7df8d08a737ba9b8da173feac..86f31fb2d1e6b6e667e066eaff80763855cef08e 100644
 --- a/dom/base/Document.cpp
 +++ b/dom/base/Document.cpp
-@@ -3646,6 +3646,9 @@ void Document::SendToConsole(nsCOMArray<nsISecurityConsoleMessage>& aMessages) {
+@@ -3645,6 +3645,9 @@ void Document::SendToConsole(nsCOMArray<nsISecurityConsoleMessage>& aMessages) {
  }
  
  void Document::ApplySettingsFromCSP(bool aSpeculative) {
@@ -758,7 +760,7 @@ index 3c074b09154843577c78b0271b2069eacca8408c..efcb018e9568ce55889acde030dc2baa
    nsresult rv = NS_OK;
    if (!aSpeculative) {
      // 1) apply settings from regular CSP
-@@ -3703,6 +3706,11 @@ nsresult Document::InitCSP(nsIChannel* aChannel) {
+@@ -3702,6 +3705,11 @@ nsresult Document::InitCSP(nsIChannel* aChannel) {
    MOZ_ASSERT(!mScriptGlobalObject,
               "CSP must be initialized before mScriptGlobalObject is set!");
  
@@ -770,7 +772,7 @@ index 3c074b09154843577c78b0271b2069eacca8408c..efcb018e9568ce55889acde030dc2baa
    // If this is a data document - no need to set CSP.
    if (mLoadedAsData) {
      return NS_OK;
-@@ -4510,6 +4518,10 @@ bool Document::HasFocus(ErrorResult& rv) const {
+@@ -4508,6 +4516,10 @@ bool Document::HasFocus(ErrorResult& rv) const {
      return false;
    }
  
@@ -781,7 +783,7 @@ index 3c074b09154843577c78b0271b2069eacca8408c..efcb018e9568ce55889acde030dc2baa
    if (!fm->IsInActiveWindow(bc)) {
      return false;
    }
-@@ -17984,6 +17996,71 @@ ColorScheme Document::PreferredColorScheme(IgnoreRFP aIgnoreRFP) const {
+@@ -17654,6 +17666,71 @@ ColorScheme Document::PreferredColorScheme(IgnoreRFP aIgnoreRFP) const {
    return LookAndFeel::PreferredColorSchemeForContent();
  }
  
@@ -854,10 +856,10 @@ index 3c074b09154843577c78b0271b2069eacca8408c..efcb018e9568ce55889acde030dc2baa
    if (!sLoadingForegroundTopLevelContentDocument) {
      return false;
 diff --git a/dom/base/Document.h b/dom/base/Document.h
-index 67377432eaec1a6220e17184fce79e3de8362028..52c2dae0bd73f887df0bc4b4cbb32f990dbf672f 100644
+index 7a4ddc544948509dfe6b7998f31fb9bdf2de841e..40d92e63470091fe3497291aa631464f0ee92b71 100644
 --- a/dom/base/Document.h
 +++ b/dom/base/Document.h
-@@ -4016,6 +4016,9 @@ class Document : public nsINode,
+@@ -4001,6 +4001,9 @@ class Document : public nsINode,
    // color-scheme meta tag.
    ColorScheme DefaultColorScheme() const;
  
@@ -868,7 +870,7 @@ index 67377432eaec1a6220e17184fce79e3de8362028..52c2dae0bd73f887df0bc4b4cbb32f99
  
    static bool AutomaticStorageAccessPermissionCanBeGranted(
 diff --git a/dom/base/Navigator.cpp b/dom/base/Navigator.cpp
-index 92081a09b4925e0b687608abd8ad51d02ff2f5cf..b010190d8af0cd1765d91b5bbd7e46e360a6c30f 100644
+index 85f28cce26f37b5df95c4a96658b9328f13b5a47..917d89943589ba4d7b065bdacb76aa281508de29 100644
 --- a/dom/base/Navigator.cpp
 +++ b/dom/base/Navigator.cpp
 @@ -325,14 +325,18 @@ void Navigator::GetAppName(nsAString& aAppName, CallerType aCallerType) const {
@@ -923,10 +925,10 @@ index 92081a09b4925e0b687608abd8ad51d02ff2f5cf..b010190d8af0cd1765d91b5bbd7e46e3
  void Navigator::GetBuildID(nsAString& aBuildID, CallerType aCallerType,
                             ErrorResult& aRv) const {
 diff --git a/dom/base/Navigator.h b/dom/base/Navigator.h
-index cb821086b1ac884ba96ef8874211bff16106b206..3b93388637f9ec7493735e9beb6f02a78e14c6b3 100644
+index 2a16e5e18427944f007c3f33301f2faea92f63e0..69a2037379bc03f941789814d00c7e99e58bdf0e 100644
 --- a/dom/base/Navigator.h
 +++ b/dom/base/Navigator.h
-@@ -215,7 +215,7 @@ class Navigator final : public nsISupports, public nsWrapperCache {
+@@ -216,7 +216,7 @@ class Navigator final : public nsISupports, public nsWrapperCache {
  
    StorageManager* Storage();
  
@@ -936,10 +938,10 @@ index cb821086b1ac884ba96ef8874211bff16106b206..3b93388637f9ec7493735e9beb6f02a7
    dom::MediaCapabilities* MediaCapabilities();
    dom::MediaSession* MediaSession();
 diff --git a/dom/base/nsContentUtils.cpp b/dom/base/nsContentUtils.cpp
-index 25b6994c9a42054f97b18d5c4a3e35a0010ee749..cef7ba95112677f1a41beb66db718126601bd151 100644
+index efc42b7f547d9b8b8a202e2130c409b3bb63e9fb..ebf11bd9ed41c061863836a96ae0cda7e37d2032 100644
 --- a/dom/base/nsContentUtils.cpp
 +++ b/dom/base/nsContentUtils.cpp
-@@ -8505,7 +8505,8 @@ nsresult nsContentUtils::SendMouseEvent(
+@@ -8369,7 +8369,8 @@ nsresult nsContentUtils::SendMouseEvent(
      bool aIgnoreRootScrollFrame, float aPressure,
      unsigned short aInputSourceArg, uint32_t aIdentifier, bool aToWindow,
      PreventDefaultResult* aPreventDefault, bool aIsDOMEventSynthesized,
@@ -949,7 +951,7 @@ index 25b6994c9a42054f97b18d5c4a3e35a0010ee749..cef7ba95112677f1a41beb66db718126
    nsPoint offset;
    nsCOMPtr<nsIWidget> widget = GetWidget(aPresShell, &offset);
    if (!widget) return NS_ERROR_FAILURE;
-@@ -8564,6 +8565,7 @@ nsresult nsContentUtils::SendMouseEvent(
+@@ -8428,6 +8429,7 @@ nsresult nsContentUtils::SendMouseEvent(
    event.mTime = PR_IntervalNow();
    event.mFlags.mIsSynthesizedForTests = aIsDOMEventSynthesized;
    event.mExitFrom = exitFrom;
@@ -958,10 +960,10 @@ index 25b6994c9a42054f97b18d5c4a3e35a0010ee749..cef7ba95112677f1a41beb66db718126
    nsPresContext* presContext = aPresShell->GetPresContext();
    if (!presContext) return NS_ERROR_FAILURE;
 diff --git a/dom/base/nsContentUtils.h b/dom/base/nsContentUtils.h
-index de038d0832adb4037d2d076011e433412e85cb83..79c59cb6da7a7746df983614d7eff02f97eddfb0 100644
+index 739e8ca23c858ac2bf0356ad8c0eb0da4471d9ea..afb76693d313dc3c97fb54d014ed146a5b1bfb01 100644
 --- a/dom/base/nsContentUtils.h
 +++ b/dom/base/nsContentUtils.h
-@@ -2957,7 +2957,8 @@ class nsContentUtils {
+@@ -2943,7 +2943,8 @@ class nsContentUtils {
        int32_t aModifiers, bool aIgnoreRootScrollFrame, float aPressure,
        unsigned short aInputSourceArg, uint32_t aIdentifier, bool aToWindow,
        mozilla::PreventDefaultResult* aPreventDefault,
@@ -972,7 +974,7 @@ index de038d0832adb4037d2d076011e433412e85cb83..79c59cb6da7a7746df983614d7eff02f
    static void FirePageShowEventForFrameLoaderSwap(
        nsIDocShellTreeItem* aItem,
 diff --git a/dom/base/nsDOMWindowUtils.cpp b/dom/base/nsDOMWindowUtils.cpp
-index 8cee829af918aa0c44049f794746816f73fb7b50..daad61c3fbd526aa941c8c0be28892d7ec00521d 100644
+index 24771c8d8fb251cb837f2c5c43a34f2f5e921188..1ccc540f4bf0a71546117479c86a07252ca00f1d 100644
 --- a/dom/base/nsDOMWindowUtils.cpp
 +++ b/dom/base/nsDOMWindowUtils.cpp
 @@ -683,7 +683,7 @@ nsDOMWindowUtils::SendMouseEvent(
@@ -1023,7 +1025,7 @@ index 30e0fafa77857c33e9871259a6ac0cebac965df8..3d8810abcfac1c220529b4e6163b0159
    MOZ_CAN_RUN_SCRIPT
    nsresult SendTouchEventCommon(
 diff --git a/dom/base/nsFocusManager.cpp b/dom/base/nsFocusManager.cpp
-index 25c06cd90d552345da4fffbcdb4dfaab02377c97..cc81b234da508405daba42735430dd3f065d2b0c 100644
+index 6f226bbe93a5ba7621bcdeb910ff62568ae600d1..cca5be36464557439b7d119e97a173420b1bc4e2 100644
 --- a/dom/base/nsFocusManager.cpp
 +++ b/dom/base/nsFocusManager.cpp
 @@ -1610,6 +1610,10 @@ void nsFocusManager::SetFocusInner(Element* aNewContent, int32_t aFlags,
@@ -1037,7 +1039,7 @@ index 25c06cd90d552345da4fffbcdb4dfaab02377c97..cc81b234da508405daba42735430dd3f
    // Exit fullscreen if a website focuses another window
    if (StaticPrefs::full_screen_api_exit_on_windowRaise() &&
        !isElementInActiveWindow && (aFlags & FLAG_RAISE) &&
-@@ -2934,7 +2938,9 @@ void nsFocusManager::RaiseWindow(nsPIDOMWindowOuter* aWindow,
+@@ -2929,7 +2933,9 @@ void nsFocusManager::RaiseWindow(nsPIDOMWindowOuter* aWindow,
      }
    }
  
@@ -1049,10 +1051,10 @@ index 25c06cd90d552345da4fffbcdb4dfaab02377c97..cc81b234da508405daba42735430dd3f
      // care of lowering the present active window. This happens in
      // a separate runnable to avoid touching multiple windows in
 diff --git a/dom/base/nsGlobalWindowOuter.cpp b/dom/base/nsGlobalWindowOuter.cpp
-index 02e1ad995ba68d69e4353b89464a0259e22d24a0..bb169f97aff4fe707a4fb2be6c5db5eba7e80c49 100644
+index 674353189dca391077370b899b69041305c440ca..5069dd0a761e5fd666d3ae4506cd6292fdbc92d3 100644
 --- a/dom/base/nsGlobalWindowOuter.cpp
 +++ b/dom/base/nsGlobalWindowOuter.cpp
-@@ -2489,7 +2489,7 @@ nsresult nsGlobalWindowOuter::SetNewDocument(Document* aDocument,
+@@ -2478,7 +2478,7 @@ nsresult nsGlobalWindowOuter::SetNewDocument(Document* aDocument,
          &nsGlobalWindowInner::FireOnNewGlobalObject));
    }
  
@@ -1061,7 +1063,7 @@ index 02e1ad995ba68d69e4353b89464a0259e22d24a0..bb169f97aff4fe707a4fb2be6c5db5eb
      // We should probably notify. However if this is the, arguably bad,
      // situation when we're creating a temporary non-chrome-about-blank
      // document in a chrome docshell, don't notify just yet. Instead wait
-@@ -2508,10 +2508,16 @@ nsresult nsGlobalWindowOuter::SetNewDocument(Document* aDocument,
+@@ -2497,10 +2497,16 @@ nsresult nsGlobalWindowOuter::SetNewDocument(Document* aDocument,
      }();
  
      if (!isContentAboutBlankInChromeDocshell) {
@@ -1082,7 +1084,7 @@ index 02e1ad995ba68d69e4353b89464a0259e22d24a0..bb169f97aff4fe707a4fb2be6c5db5eb
      }
    }
  
-@@ -2632,6 +2638,19 @@ void nsGlobalWindowOuter::DispatchDOMWindowCreated() {
+@@ -2621,6 +2627,19 @@ void nsGlobalWindowOuter::DispatchDOMWindowCreated() {
    }
  }
  
@@ -1102,7 +1104,7 @@ index 02e1ad995ba68d69e4353b89464a0259e22d24a0..bb169f97aff4fe707a4fb2be6c5db5eb
  void nsGlobalWindowOuter::ClearStatus() { SetStatusOuter(u""_ns); }
  
  void nsGlobalWindowOuter::SetDocShell(nsDocShell* aDocShell) {
-@@ -3769,6 +3788,14 @@ Maybe<CSSIntSize> nsGlobalWindowOuter::GetRDMDeviceSize(
+@@ -3734,6 +3753,14 @@ Maybe<CSSIntSize> nsGlobalWindowOuter::GetRDMDeviceSize(
        }
      }
    }
@@ -1118,10 +1120,10 @@ index 02e1ad995ba68d69e4353b89464a0259e22d24a0..bb169f97aff4fe707a4fb2be6c5db5eb
  }
  
 diff --git a/dom/base/nsGlobalWindowOuter.h b/dom/base/nsGlobalWindowOuter.h
-index a82771c6d0bf1b5d5547e42fa3dad61537381d4a..0a4e153a11972b305a425ecb4fdb427766174a18 100644
+index 70cea10edfd5445c93900c876dbbcaa07dccf23b..814f29ac5fbd08e4b5b458995aa7ed17d16b5fce 100644
 --- a/dom/base/nsGlobalWindowOuter.h
 +++ b/dom/base/nsGlobalWindowOuter.h
-@@ -333,6 +333,7 @@ class nsGlobalWindowOuter final : public mozilla::dom::EventTarget,
+@@ -330,6 +330,7 @@ class nsGlobalWindowOuter final : public mozilla::dom::EventTarget,
  
    // Outer windows only.
    void DispatchDOMWindowCreated();
@@ -1130,7 +1132,7 @@ index a82771c6d0bf1b5d5547e42fa3dad61537381d4a..0a4e153a11972b305a425ecb4fdb4277
    // Outer windows only.
    virtual void EnsureSizeAndPositionUpToDate() override;
 diff --git a/dom/base/nsINode.cpp b/dom/base/nsINode.cpp
-index 1088bfc489a067f95bfb84a822a787bdf9463e54..54c4687ff71ec1b82912d9139f061ef5c7d4a426 100644
+index 88e24213ce8f052d1bbe00c4fcb385aa70496552..1810403a058c8eee5e7c2ec2ccaa387a28f6b13a 100644
 --- a/dom/base/nsINode.cpp
 +++ b/dom/base/nsINode.cpp
 @@ -1324,6 +1324,62 @@ void nsINode::GetBoxQuadsFromWindowOrigin(const BoxQuadOptions& aOptions,
@@ -1197,10 +1199,10 @@ index 1088bfc489a067f95bfb84a822a787bdf9463e54..54c4687ff71ec1b82912d9139f061ef5
      DOMQuad& aQuad, const GeometryNode& aFrom,
      const ConvertCoordinateOptions& aOptions, CallerType aCallerType,
 diff --git a/dom/base/nsINode.h b/dom/base/nsINode.h
-index 0c7c5867c4a1f2543b774a1f3371c4ce0807f33f..ae35e4a023297f2f0b9d59eb9a0fa8e5aa649202 100644
+index 56adeeb339ec7dcf63785b46c194c38614e2b000..0421f57f310c397438090cbd3f4b4290cc21151b 100644
 --- a/dom/base/nsINode.h
 +++ b/dom/base/nsINode.h
-@@ -2130,6 +2130,10 @@ class nsINode : public mozilla::dom::EventTarget {
+@@ -2131,6 +2131,10 @@ class nsINode : public mozilla::dom::EventTarget {
                                     nsTArray<RefPtr<DOMQuad>>& aResult,
                                     ErrorResult& aRv);
  
@@ -1212,7 +1214,7 @@ index 0c7c5867c4a1f2543b774a1f3371c4ce0807f33f..ae35e4a023297f2f0b9d59eb9a0fa8e5
        DOMQuad& aQuad, const TextOrElementOrDocument& aFrom,
        const ConvertCoordinateOptions& aOptions, CallerType aCallerType,
 diff --git a/dom/base/nsJSUtils.cpp b/dom/base/nsJSUtils.cpp
-index 1da84501bf3ce25b932ec3693f247cdb1a4fdf21..2305a1730e18ba7293a41772b9b7495b5aa66210 100644
+index 2b8e5f7f34ee91034ddd53c858937e0f67008645..7bb979dadfa1811593d4cc3fcb306f35b2b34093 100644
 --- a/dom/base/nsJSUtils.cpp
 +++ b/dom/base/nsJSUtils.cpp
 @@ -169,6 +169,11 @@ bool nsJSUtils::GetScopeChainForElement(
@@ -1381,7 +1383,7 @@ index 5c0d2f96a22c6928d6aee5a226032c0944ae7a54..5a7bb1f6cea1946eea143dca4e2f1e19
    ~Geolocation();
  
 diff --git a/dom/html/HTMLInputElement.cpp b/dom/html/HTMLInputElement.cpp
-index d53de983402c9e0fd2d1bd848563efc04edee616..c635674099390cf412a361430517c200fec5796a 100644
+index c8888eb6cfb0319e83d711d6958f8d03faf409d7..878a72a2aa005fd2ee7ac0290706629b66ddb837 100644
 --- a/dom/html/HTMLInputElement.cpp
 +++ b/dom/html/HTMLInputElement.cpp
 @@ -53,6 +53,7 @@
@@ -1406,10 +1408,10 @@ index d53de983402c9e0fd2d1bd848563efc04edee616..c635674099390cf412a361430517c200
      return NS_OK;
    }
 diff --git a/dom/interfaces/base/nsIDOMWindowUtils.idl b/dom/interfaces/base/nsIDOMWindowUtils.idl
-index 51e3288c4cc8f40309a7c75d36c236f6f21fdfb7..844d362d956884feb41181fe40504de497ada14b 100644
+index c16b813f29d8a519673129bb7debaaec0430145a..6f82922ac7e889e55beda7d43da3ebe6adeb7ca9 100644
 --- a/dom/interfaces/base/nsIDOMWindowUtils.idl
 +++ b/dom/interfaces/base/nsIDOMWindowUtils.idl
-@@ -372,7 +372,8 @@ interface nsIDOMWindowUtils : nsISupports {
+@@ -375,7 +375,8 @@ interface nsIDOMWindowUtils : nsISupports {
                           [optional] in boolean aIsDOMEventSynthesized,
                           [optional] in boolean aIsWidgetEventSynthesized,
                           [optional] in long aButtons,
@@ -1669,10 +1671,10 @@ index 2f71b284ee5f7e11f117c447834b48355784448c..ddcc545da1efec5784273b032efa00ad
     * returned quads are further translated relative to the window
     * origin -- which is not the layout origin. Further translation
 diff --git a/dom/workers/RuntimeService.cpp b/dom/workers/RuntimeService.cpp
-index 88e55560a914f1661b5302a924de519157c25dd9..b86513356488b48cb788acefaaa9905c38c2b05c 100644
+index 1422ee80d2ac3cf24304f3b2318ad0bc7da7efe7..1940994c96c2c714761d242f374973b08e81d51d 100644
 --- a/dom/workers/RuntimeService.cpp
 +++ b/dom/workers/RuntimeService.cpp
-@@ -977,7 +977,7 @@ void PrefLanguagesChanged(const char* /* aPrefName */, void* /* aClosure */) {
+@@ -976,7 +976,7 @@ void PrefLanguagesChanged(const char* /* aPrefName */, void* /* aClosure */) {
    AssertIsOnMainThread();
  
    nsTArray<nsString> languages;
@@ -1681,7 +1683,7 @@ index 88e55560a914f1661b5302a924de519157c25dd9..b86513356488b48cb788acefaaa9905c
  
    RuntimeService* runtime = RuntimeService::GetService();
    if (runtime) {
-@@ -1179,8 +1179,7 @@ bool RuntimeService::RegisterWorker(WorkerPrivate& aWorkerPrivate) {
+@@ -1178,8 +1178,7 @@ bool RuntimeService::RegisterWorker(WorkerPrivate& aWorkerPrivate) {
        }
  
        // The navigator overridden properties should have already been read.
@@ -1691,7 +1693,7 @@ index 88e55560a914f1661b5302a924de519157c25dd9..b86513356488b48cb788acefaaa9905c
        mNavigatorPropertiesLoaded = true;
      }
  
-@@ -1778,6 +1777,13 @@ void RuntimeService::PropagateStorageAccessPermissionGranted(
+@@ -1783,6 +1782,13 @@ void RuntimeService::PropagateStorageAccessPermissionGranted(
    }
  }
  
@@ -1705,7 +1707,7 @@ index 88e55560a914f1661b5302a924de519157c25dd9..b86513356488b48cb788acefaaa9905c
  template <typename Func>
  void RuntimeService::BroadcastAllWorkers(const Func& aFunc) {
    AssertIsOnMainThread();
-@@ -2193,6 +2199,14 @@ void PropagateStorageAccessPermissionGrantedToWorkers(
+@@ -2198,6 +2204,14 @@ void PropagateStorageAccessPermissionGrantedToWorkers(
    }
  }
  
@@ -1747,10 +1749,10 @@ index d10dabb5c5ff8e17851edf2bd2efc08e74584d8e..53c4070c5fde43b27fb8fbfdcf4c23d8
  
  bool IsWorkerGlobal(JSObject* global);
 diff --git a/dom/workers/WorkerPrivate.cpp b/dom/workers/WorkerPrivate.cpp
-index 96357690e6f056501bef4729291c0c280d43b8e3..6fbcad9a972d61ab1d2de295219c361288ffb381 100644
+index 957103c9baec027ed667ccea45cdde5f44961daf..2eb02b70b59c515d8c758cf576dac2b18c8df80e 100644
 --- a/dom/workers/WorkerPrivate.cpp
 +++ b/dom/workers/WorkerPrivate.cpp
-@@ -699,6 +699,18 @@ class UpdateContextOptionsRunnable final : public WorkerControlRunnable {
+@@ -695,6 +695,18 @@ class UpdateContextOptionsRunnable final : public WorkerControlRunnable {
    }
  };
  
@@ -1769,7 +1771,7 @@ index 96357690e6f056501bef4729291c0c280d43b8e3..6fbcad9a972d61ab1d2de295219c3612
  class UpdateLanguagesRunnable final : public WorkerRunnable {
    nsTArray<nsString> mLanguages;
  
-@@ -1951,6 +1963,16 @@ void WorkerPrivate::UpdateContextOptions(
+@@ -1925,6 +1937,16 @@ void WorkerPrivate::UpdateContextOptions(
    }
  }
  
@@ -1786,7 +1788,7 @@ index 96357690e6f056501bef4729291c0c280d43b8e3..6fbcad9a972d61ab1d2de295219c3612
  void WorkerPrivate::UpdateLanguages(const nsTArray<nsString>& aLanguages) {
    AssertIsOnParentThread();
  
-@@ -5123,6 +5145,15 @@ void WorkerPrivate::UpdateContextOptionsInternal(
+@@ -5086,6 +5108,15 @@ void WorkerPrivate::UpdateContextOptionsInternal(
    }
  }
  
@@ -2042,10 +2044,10 @@ index dac899f7558b26d6848da8b98ed8a93555c8751a..2a07d67fa1c2840b25085566e84dc3b2
        // No boxes to return
        return;
 diff --git a/layout/base/PresShell.cpp b/layout/base/PresShell.cpp
-index 014b655e374af3bf6f346febb76df4f7484e2e8d..cf62af15fd34fbcbb3d2bc3b00065eb5aee21d62 100644
+index 8cd1cee03620a33e3301373bb0ba3f1f0cfa062b..7100faf245bf35af3da20dba3dc49d4f65fcb8a5 100644
 --- a/layout/base/PresShell.cpp
 +++ b/layout/base/PresShell.cpp
-@@ -10885,7 +10885,9 @@ auto PresShell::ComputeActiveness() const -> Activeness {
+@@ -10901,7 +10901,9 @@ auto PresShell::ComputeActiveness() const -> Activeness {
      if (!browserChild->IsVisible()) {
        MOZ_LOG(gLog, LogLevel::Debug,
                (" > BrowserChild %p is not visible", browserChild));
@@ -2057,10 +2059,10 @@ index 014b655e374af3bf6f346febb76df4f7484e2e8d..cf62af15fd34fbcbb3d2bc3b00065eb5
  
      // If the browser is visible but just due to be preserving layers
 diff --git a/layout/style/GeckoBindings.h b/layout/style/GeckoBindings.h
-index 3bc4cd498dc22b7d3db097beb9988c68baf26437..77557e174283e8c151ad540f92ede87f88197c80 100644
+index 8b434ea8977e1c3a4a9238d00477dd012a170596..1980be6beff1b4dc7720eb9518ed2b265cc675e0 100644
 --- a/layout/style/GeckoBindings.h
 +++ b/layout/style/GeckoBindings.h
-@@ -575,6 +575,7 @@ void Gecko_MediaFeatures_GetDeviceSize(const mozilla::dom::Document*,
+@@ -567,6 +567,7 @@ void Gecko_MediaFeatures_GetDeviceSize(const mozilla::dom::Document*,
  
  float Gecko_MediaFeatures_GetResolution(const mozilla::dom::Document*);
  bool Gecko_MediaFeatures_PrefersReducedMotion(const mozilla::dom::Document*);
@@ -2101,10 +2103,10 @@ index f2723e654098ff27542e1eb16a536c11ad0af617..b0b480551ff7d895dfdeb5a980087485
  
  /* Use accelerated SIMD routines. */
 diff --git a/modules/libpref/init/all.js b/modules/libpref/init/all.js
-index 4e81c2325b0d4a73f6fe52f10a7a6ad593e806ce..541ac135bb854ecf951d4f4dab0aaed1fe8fc051 100644
+index 50434c8700f4e85c6b8de3f13e36423f9cfc916d..3484a503912754428fdfce6b92cb97f3745797ec 100644
 --- a/modules/libpref/init/all.js
 +++ b/modules/libpref/init/all.js
-@@ -4359,7 +4359,9 @@ pref("devtools.experiment.f12.shortcut_disabled", false);
+@@ -4348,7 +4348,9 @@ pref("devtools.experiment.f12.shortcut_disabled", false);
  // doesn't provide a way to lock the pref
  pref("dom.postMessage.sharedArrayBuffer.bypassCOOP_COEP.insecure.enabled", false);
  #else
@@ -2128,10 +2130,10 @@ index e869cd28d396aa87c522241d3e63d435ee8dbae6..2d307f089209721d88d231b03e862889
      /**
       * Set the status and reason for the forthcoming synthesized response.
 diff --git a/netwerk/protocol/http/InterceptedHttpChannel.cpp b/netwerk/protocol/http/InterceptedHttpChannel.cpp
-index 56eabba18f021719aa084b5bb616d3602d782a97..1408518cdba2db29e994963c4e21aead2aa573c6 100644
+index 019412c56ba24c06265d20a424dab4d4a850d04b..4ccb5e035fea85fe6b3393473cb620cbc9603de4 100644
 --- a/netwerk/protocol/http/InterceptedHttpChannel.cpp
 +++ b/netwerk/protocol/http/InterceptedHttpChannel.cpp
-@@ -662,6 +662,14 @@ void InterceptedHttpChannel::DoAsyncAbort(nsresult aStatus) {
+@@ -663,6 +663,14 @@ void InterceptedHttpChannel::DoAsyncAbort(nsresult aStatus) {
    Unused << AsyncAbort(aStatus);
  }
  
@@ -2235,10 +2237,10 @@ index 3862fe6830874c036592fd217cab7ad5f4cd3e27..3166b37db0e52f7f2972d2bcb7a72ed8
    readonly attribute boolean securityCheckDisabled;
  };
 diff --git a/services/settings/Utils.jsm b/services/settings/Utils.jsm
-index a8b0c67ce19d801d2f032d1b59110871a9859787..9d8d689bc4c4fb6aa00ff6c551cbab0dcda7d85d 100644
+index 23d6bf1a20bea134358347b43e8fc776a04617f3..12f96aece0b2c843c34815cafb80ff1b6b6528aa 100644
 --- a/services/settings/Utils.jsm
 +++ b/services/settings/Utils.jsm
-@@ -102,7 +102,7 @@ function _isUndefined(value) {
+@@ -103,7 +103,7 @@ function _isUndefined(value) {
  
  var Utils = {
    get SERVER_URL() {
@@ -2285,10 +2287,10 @@ index 4f7337926efbb086a2be97cdbcb3dca39e27c786..f2005cb726ff153d6b1011d6af0479db
      // ignored for Linux.
      const unsigned long CHROME_SUPPRESS_ANIMATION     = 0x01000000;
 diff --git a/toolkit/components/enterprisepolicies/EnterprisePoliciesParent.jsm b/toolkit/components/enterprisepolicies/EnterprisePoliciesParent.jsm
-index 5184d1dcb0618dc15abd28462985040236ddf643..bce45ad2d76098c16e0877fa46f71158c884ea5a 100644
+index aecb28d95de7cc84a3e2010264a056e178cb11be..79b729d99e5d693d13223401ef72c7020c10fb1a 100644
 --- a/toolkit/components/enterprisepolicies/EnterprisePoliciesParent.jsm
 +++ b/toolkit/components/enterprisepolicies/EnterprisePoliciesParent.jsm
-@@ -116,6 +116,12 @@ EnterprisePoliciesManager.prototype = {
+@@ -117,6 +117,12 @@ EnterprisePoliciesManager.prototype = {
        Services.prefs.clearUserPref(PREF_POLICIES_APPLIED);
      }
  
@@ -2330,10 +2332,10 @@ index 3e9672fdfe9ddab8acd0f8b18772aece92bb3b64..83454a9c27c96d72597445653beaa014
                                          int32_t aMaxSelfProgress,
                                          int32_t aCurTotalProgress,
 diff --git a/toolkit/components/windowwatcher/nsWindowWatcher.cpp b/toolkit/components/windowwatcher/nsWindowWatcher.cpp
-index 3983d580cd11a8241481876aaf8a924f4f083ad0..0dd75bab6249a4db25dea3cabefd4f8e3744caad 100644
+index 33ffbeb8e969eccd0c40effc693d9191aab15891..386c3e76fdff6b6e60917ebf2ecf7595598ac57f 100644
 --- a/toolkit/components/windowwatcher/nsWindowWatcher.cpp
 +++ b/toolkit/components/windowwatcher/nsWindowWatcher.cpp
-@@ -1815,7 +1815,11 @@ uint32_t nsWindowWatcher::CalculateChromeFlagsForContent(
+@@ -1814,7 +1814,11 @@ uint32_t nsWindowWatcher::CalculateChromeFlagsForContent(
  
    // Open a minimal popup.
    *aIsPopupRequested = true;
@@ -2347,10 +2349,10 @@ index 3983d580cd11a8241481876aaf8a924f4f083ad0..0dd75bab6249a4db25dea3cabefd4f8e
  
  /**
 diff --git a/toolkit/mozapps/update/UpdateService.jsm b/toolkit/mozapps/update/UpdateService.jsm
-index 393ff53b8f69aba56d7f4d849e18aaddb0b94f49..f29602b0c7c436dec335bb7d6033750f3499fbbe 100644
+index 285568a708854e5afb33268ccf8e7a2f3b4d4dcb..4667eb22474863c44e43e46f524b3362d14dcade 100644
 --- a/toolkit/mozapps/update/UpdateService.jsm
 +++ b/toolkit/mozapps/update/UpdateService.jsm
-@@ -3607,6 +3607,8 @@ UpdateService.prototype = {
+@@ -3608,6 +3608,8 @@ UpdateService.prototype = {
    },
  
    get disabledForTesting() {
@@ -2427,10 +2429,10 @@ index 9ca3975c99c8bff3829bce1cf49d1235910c3ab8..6606eb02fba53ea8bd401d07460b85b0
                  // nsDocumentViewer::LoadComplete that doesn't do various things
                  // that are not relevant here because this wasn't an actual
 diff --git a/uriloader/exthandler/nsExternalHelperAppService.cpp b/uriloader/exthandler/nsExternalHelperAppService.cpp
-index a66f215e577d29eb1db88899136ccf4eff34a960..67ea697e80608a3d5a3836b01334efe3141e70a1 100644
+index d77d78b9ecb73ef9bfd14d6bd42f4b8d6bda4723..c3e27edc5393702abafbdb9ab6a007c6309cf7f1 100644
 --- a/uriloader/exthandler/nsExternalHelperAppService.cpp
 +++ b/uriloader/exthandler/nsExternalHelperAppService.cpp
-@@ -113,6 +113,7 @@
+@@ -110,6 +110,7 @@
  
  #include "mozilla/Components.h"
  #include "mozilla/ClearOnShutdown.h"
@@ -2438,7 +2440,7 @@ index a66f215e577d29eb1db88899136ccf4eff34a960..67ea697e80608a3d5a3836b01334efe3
  #include "mozilla/Preferences.h"
  #include "mozilla/ipc/URIUtils.h"
  
-@@ -838,6 +839,12 @@ NS_IMETHODIMP nsExternalHelperAppService::ApplyDecodingForExtension(
+@@ -834,6 +835,12 @@ NS_IMETHODIMP nsExternalHelperAppService::ApplyDecodingForExtension(
    return NS_OK;
  }
  
@@ -2451,7 +2453,7 @@ index a66f215e577d29eb1db88899136ccf4eff34a960..67ea697e80608a3d5a3836b01334efe3
  nsresult nsExternalHelperAppService::GetFileTokenForPath(
      const char16_t* aPlatformAppPath, nsIFile** aFile) {
    nsDependentString platformAppPath(aPlatformAppPath);
-@@ -1448,7 +1455,12 @@ nsresult nsExternalAppHandler::SetUpTempFile(nsIChannel* aChannel) {
+@@ -1443,7 +1450,12 @@ nsresult nsExternalAppHandler::SetUpTempFile(nsIChannel* aChannel) {
    // Strip off the ".part" from mTempLeafName
    mTempLeafName.Truncate(mTempLeafName.Length() - ArrayLength(".part") + 1);
  
@@ -2464,7 +2466,7 @@ index a66f215e577d29eb1db88899136ccf4eff34a960..67ea697e80608a3d5a3836b01334efe3
    mSaver =
        do_CreateInstance(NS_BACKGROUNDFILESAVERSTREAMLISTENER_CONTRACTID, &rv);
    NS_ENSURE_SUCCESS(rv, rv);
-@@ -1639,7 +1651,36 @@ NS_IMETHODIMP nsExternalAppHandler::OnStartRequest(nsIRequest* request) {
+@@ -1634,7 +1646,36 @@ NS_IMETHODIMP nsExternalAppHandler::OnStartRequest(nsIRequest* request) {
      return NS_OK;
    }
  
@@ -2502,7 +2504,7 @@ index a66f215e577d29eb1db88899136ccf4eff34a960..67ea697e80608a3d5a3836b01334efe3
    if (NS_FAILED(rv)) {
      nsresult transferError = rv;
  
-@@ -1693,6 +1734,9 @@ NS_IMETHODIMP nsExternalAppHandler::OnStartRequest(nsIRequest* request) {
+@@ -1689,6 +1730,9 @@ NS_IMETHODIMP nsExternalAppHandler::OnStartRequest(nsIRequest* request) {
  
    bool alwaysAsk = true;
    mMimeInfo->GetAlwaysAskBeforeHandling(&alwaysAsk);
@@ -2512,7 +2514,7 @@ index a66f215e577d29eb1db88899136ccf4eff34a960..67ea697e80608a3d5a3836b01334efe3
    if (alwaysAsk) {
      // But we *don't* ask if this mimeInfo didn't come from
      // our user configuration datastore and the user has said
-@@ -2259,6 +2303,16 @@ nsExternalAppHandler::OnSaveComplete(nsIBackgroundFileSaver* aSaver,
+@@ -2254,6 +2298,16 @@ nsExternalAppHandler::OnSaveComplete(nsIBackgroundFileSaver* aSaver,
      NotifyTransfer(aStatus);
    }
  
@@ -2529,7 +2531,7 @@ index a66f215e577d29eb1db88899136ccf4eff34a960..67ea697e80608a3d5a3836b01334efe3
    return NS_OK;
  }
  
-@@ -2744,6 +2798,15 @@ NS_IMETHODIMP nsExternalAppHandler::Cancel(nsresult aReason) {
+@@ -2733,6 +2787,15 @@ NS_IMETHODIMP nsExternalAppHandler::Cancel(nsresult aReason) {
      }
    }
  
@@ -2546,10 +2548,10 @@ index a66f215e577d29eb1db88899136ccf4eff34a960..67ea697e80608a3d5a3836b01334efe3
    // OnStartRequest)
    mDialog = nullptr;
 diff --git a/uriloader/exthandler/nsExternalHelperAppService.h b/uriloader/exthandler/nsExternalHelperAppService.h
-index 2a1d67ffe2650d0d5f3e00bcb7f23deee8e76d0f..9e9731bc18de04fef382d0951a03793d83d14e14 100644
+index f8832bbde4042df9631794ca45886dcb02b60457..6a28695117997f1fd3753a75c94bc0e67e49d215 100644
 --- a/uriloader/exthandler/nsExternalHelperAppService.h
 +++ b/uriloader/exthandler/nsExternalHelperAppService.h
-@@ -244,6 +244,8 @@ class nsExternalHelperAppService : public nsIExternalHelperAppService,
+@@ -241,6 +241,8 @@ class nsExternalHelperAppService : public nsIExternalHelperAppService,
        mozilla::dom::BrowsingContext* aContentContext, bool aForceSave,
        nsIInterfaceRequestor* aWindowContext,
        nsIStreamListener** aStreamListener);
@@ -2558,7 +2560,7 @@ index 2a1d67ffe2650d0d5f3e00bcb7f23deee8e76d0f..9e9731bc18de04fef382d0951a03793d
  };
  
  /**
-@@ -446,6 +448,9 @@ class nsExternalAppHandler final : public nsIStreamListener,
+@@ -437,6 +439,9 @@ class nsExternalAppHandler final : public nsIStreamListener,
     * Upon successful return, both mTempFile and mSaver will be valid.
     */
    nsresult SetUpTempFile(nsIChannel* aChannel);
@@ -2569,7 +2571,7 @@ index 2a1d67ffe2650d0d5f3e00bcb7f23deee8e76d0f..9e9731bc18de04fef382d0951a03793d
     * When we download a helper app, we are going to retarget all load
     * notifications into our own docloader and load group instead of
 diff --git a/uriloader/exthandler/nsIExternalHelperAppService.idl b/uriloader/exthandler/nsIExternalHelperAppService.idl
-index 307e6196a89df52d0bccc3ebd1359f58e32de75d..c3692d0f76178ac3aeb1c77a0e973bfa22359346 100644
+index 3554c69aaced17631d8d1e4d9a000f0dd8b7ba9c..52d6b60707d076906e79160fef155eaaf999470c 100644
 --- a/uriloader/exthandler/nsIExternalHelperAppService.idl
 +++ b/uriloader/exthandler/nsIExternalHelperAppService.idl
 @@ -6,6 +6,8 @@
@@ -2639,7 +2641,7 @@ diff --git a/widget/cocoa/NativeKeyBindings.mm b/widget/cocoa/NativeKeyBindings.
 index d3e5983259053175584254e7ac01ca9ce024f33a..97f5b851c402fea5477c0ee57af451c62b016eec 100644
 --- a/widget/cocoa/NativeKeyBindings.mm
 +++ b/widget/cocoa/NativeKeyBindings.mm
-@@ -492,6 +492,13 @@ void NativeKeyBindings::GetEditCommandsForTests(NativeKeyBindingsType aType,
+@@ -492,6 +492,13 @@
        break;
      case KEY_NAME_INDEX_ArrowLeft:
        if (aEvent.IsAlt()) {
@@ -2653,7 +2655,7 @@ index d3e5983259053175584254e7ac01ca9ce024f33a..97f5b851c402fea5477c0ee57af451c6
          break;
        }
        if (aEvent.IsMeta() || (aEvent.IsControl() && aEvent.IsShift())) {
-@@ -512,6 +519,13 @@ void NativeKeyBindings::GetEditCommandsForTests(NativeKeyBindingsType aType,
+@@ -512,6 +519,13 @@
        break;
      case KEY_NAME_INDEX_ArrowRight:
        if (aEvent.IsAlt()) {
@@ -2667,7 +2669,7 @@ index d3e5983259053175584254e7ac01ca9ce024f33a..97f5b851c402fea5477c0ee57af451c6
          break;
        }
        if (aEvent.IsMeta() || (aEvent.IsControl() && aEvent.IsShift())) {
-@@ -532,6 +546,10 @@ void NativeKeyBindings::GetEditCommandsForTests(NativeKeyBindingsType aType,
+@@ -532,6 +546,10 @@
        break;
      case KEY_NAME_INDEX_ArrowUp:
        if (aEvent.IsControl()) {
@@ -2678,7 +2680,7 @@ index d3e5983259053175584254e7ac01ca9ce024f33a..97f5b851c402fea5477c0ee57af451c6
          break;
        }
        if (aEvent.IsMeta()) {
-@@ -541,7 +559,7 @@ void NativeKeyBindings::GetEditCommandsForTests(NativeKeyBindingsType aType,
+@@ -541,7 +559,7 @@
          instance->AppendEditCommandsForSelector(
              !aEvent.IsShift()
                  ? ToObjcSelectorPtr(@selector(moveToBeginningOfDocument:))
@@ -2687,7 +2689,7 @@ index d3e5983259053175584254e7ac01ca9ce024f33a..97f5b851c402fea5477c0ee57af451c6
              aCommands);
          break;
        }
-@@ -564,6 +582,10 @@ void NativeKeyBindings::GetEditCommandsForTests(NativeKeyBindingsType aType,
+@@ -564,6 +582,10 @@
        break;
      case KEY_NAME_INDEX_ArrowDown:
        if (aEvent.IsControl()) {
@@ -2890,6 +2892,21 @@ index 2b80eea70e58dd53c34edd9c5fa4415c42bcd632..72ecda7d8ddc7a9f87a954b547f8411e
   private:
    ~HeadlessWidget();
    bool mEnabled;
+diff --git a/widget/windows/nsAppShell.cpp b/widget/windows/nsAppShell.cpp
+index e2cf83f3d6ee0b120bb22f46aa873d3bd6436cd0..8ea269c8de520d3a9eed42f99f66ad28f5e63fbc 100644
+--- a/widget/windows/nsAppShell.cpp
++++ b/widget/windows/nsAppShell.cpp
+@@ -17,7 +17,9 @@
+ #include "WinIMEHandler.h"
+ #include "mozilla/widget/AudioSession.h"
+ #include "mozilla/BackgroundHangMonitor.h"
+-#include "mozilla/BackgroundTasks.h"
++#ifdef MOZ_BACKGROUNDTASKS
++#  include "mozilla/BackgroundTasks.h"
++#endif
+ #include "mozilla/Hal.h"
+ #include "nsIDOMWakeLockListener.h"
+ #include "nsIPowerManagerService.h"
 diff --git a/xpcom/reflect/xptinfo/xptinfo.h b/xpcom/reflect/xptinfo/xptinfo.h
 index 2456c2c2b58b27cd595880b547ed20fb687a1835..e967c089b2331c7cd36d34e511543fbc84320b7d 100644
 --- a/xpcom/reflect/xptinfo/xptinfo.h
diff --git a/browser_patches/get_xcode_version.js b/browser_patches/get_xcode_version.js
new file mode 100755
index 0000000000000000000000000000000000000000..29e2d55a2bd69df273d6727918765e1271c49b06
--- /dev/null
+++ b/browser_patches/get_xcode_version.js
@@ -0,0 +1,30 @@
+#!/usr/bin/env node
+
+const child_process = require('child_process');
+
+const XCODE_VERSIONS = {
+  "macos-10.15": {
+      webkit: '11.7',
+  },
+  "macos-11": {
+      webkit: '12.5', // WebKit strongly requires xcode 12.5 and not higher on MacOS 11
+     firefox: '13.2', // As of Oct 2021 building Firefox requires XCode 13
+      ffmpeg: '13.2',
+  },
+  "macos-12": {
+      webkit: '13.2', // WebKit requires xcode 13.2 to work on MacOS 12.2. 
+     firefox: '13.2', // As of Oct 2021 building Firefox requires XCode 13
+    chromium: '13.3', // As of Apr 2022 Chromium requires Xcode13.3
+      ffmpeg: '13.2',
+  },
+};
+
+const [major, minor, patch] = child_process.execSync(`sw_vers -productVersion`).toString().trim().split('.');
+const browserName = process.argv[2];
+const macosVersion = major === '10' ? `macos-${major}.${minor}` : `macos-${major}`;
+const versions = XCODE_VERSIONS[macosVersion];
+if (!versions || !versions[browserName.toLowerCase()])
+  throw new Error(`Compilation of ${browserName} is not supported on ${macosVersion}`);
+
+console.log(versions[browserName.toLowerCase()]);
+
diff --git a/browser_patches/prepare_checkout.sh b/browser_patches/prepare_checkout.sh
new file mode 100755
index 0000000000000000000000000000000000000000..2ec4a2d8a9e6c7831aaf333be56436b43a80643e
--- /dev/null
+++ b/browser_patches/prepare_checkout.sh
@@ -0,0 +1,270 @@
+#!/bin/bash
+set -e
+set +x
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname "$0")"
+SCRIPT_PATH=$(pwd -P)
+
+source "${SCRIPT_PATH}/utils.sh"
+
+REMOTE_BROWSER_UPSTREAM="browser_upstream"
+BUILD_BRANCH="playwright-build"
+
+if [[ ($1 == '--help') || ($1 == '-h') ]]; then
+  echo "usage: $(basename "$0") [firefox|firefox-beta|webkit] [custom_checkout_path]"
+  echo
+  echo "Prepares browser checkout. The checkout is a GIT repository that:"
+  echo "- has a '$REMOTE_BROWSER_UPSTREAM' remote pointing to a REMOTE_URL from UPSTREAM_CONFIG.sh"
+  echo "- has a '$BUILD_BRANCH' branch that is BASE_REVISION with all the patches applied."
+  echo
+  echo "You can optionally specify custom_checkout_path if you want to use some other browser checkout"
+  echo
+  exit 0
+fi
+
+if [[ $# == 0 ]]; then
+  echo "missing browser: 'firefox' or 'webkit'"
+  echo "try './$(basename "$0") --help' for more information"
+  exit 1
+fi
+
+function maybe_cmd {
+  if is_win; then
+    local args="$@"
+    /c/Windows/System32/cmd.exe "/c $args"
+  else
+    $@
+  fi
+}
+
+function prepare_chromium_checkout {
+  cd "${SCRIPT_PATH}"
+
+  if [[ $1 == "chromium" ]]; then
+    source "${SCRIPT_PATH}/chromium/UPSTREAM_CONFIG.sh"
+  elif [[ "$1" == "chromium-tot" ]]; then
+    source "${SCRIPT_PATH}/chromium-tip-of-tree/UPSTREAM_CONFIG.sh"
+  else
+    echo "ERROR: unknown type of checkout to prepare - $1"
+    exit 1
+  fi
+  source "${SCRIPT_PATH}/chromium/ensure_depot_tools.sh"
+
+  if [[ -z "${CR_CHECKOUT_PATH}" ]]; then
+    CR_CHECKOUT_PATH="$HOME/chromium"
+  fi
+
+  # Update Chromium checkout.
+  #
+  # This is based on https://chromium.googlesource.com/chromium/src/+/main/docs/linux/build_instructions.md#get-the-code
+  if [[ ! -d "${CR_CHECKOUT_PATH}" ]]; then
+    rm -rf "${CR_CHECKOUT_PATH}"
+    mkdir -p "${CR_CHECKOUT_PATH}"
+    cd "${CR_CHECKOUT_PATH}"
+    maybe_cmd fetch --nohooks chromium
+    cd src
+    if is_linux; then
+      ./build/install-build-deps.sh
+    fi
+    maybe_cmd gclient runhooks
+  fi
+  if [[ ! -d "${CR_CHECKOUT_PATH}/src" ]]; then
+    echo "ERROR: CR_CHECKOUT_PATH does not have src/ subfolder; is this a chromium checkout?"
+    exit 1
+  fi
+
+  cd "${CR_CHECKOUT_PATH}/src"
+  maybe_cmd gclient sync --with_branch_heads
+  git fetch origin
+  git checkout "${BRANCH_COMMIT}"
+  maybe_cmd gclient sync -D --with_branch_heads
+}
+
+# FRIENDLY_CHECKOUT_PATH is used only for logging.
+FRIENDLY_CHECKOUT_PATH="";
+CHECKOUT_PATH=""
+PATCHES_PATH=""
+BUILD_NUMBER=""
+WEBKIT_EXTRA_FOLDER_PATH=""
+FIREFOX_EXTRA_FOLDER_PATH=""
+if [[ ("$1" == "chromium") || ("$1" == "chromium/") || ("$1" == "cr") ]]; then
+  prepare_chromium_checkout chromium
+  exit 0
+elif [[ ("$1" == "chromium-tip-of-tree") || ("$1" == "chromium-tot") || ("$1" == "cr-tot") ]]; then
+  prepare_chromium_checkout chromium-tot
+  exit 0
+elif [[ ("$1" == "ffmpeg") || ("$1" == "ffmpeg/") ]]; then
+  echo "FYI: ffmpeg checkout is not supported. Use '//browser_patches/ffmpeg/build.sh' instead"
+  exit 0
+elif [[ ("$1" == "winldd") || ("$1" == "winldd/") ]]; then
+  echo "FYI: winldd source code is available right away"
+  exit 0
+elif [[ ("$1" == "firefox") || ("$1" == "firefox/") || ("$1" == "ff") ]]; then
+  if [[ -z "${FF_CHECKOUT_PATH}" ]]; then
+    FRIENDLY_CHECKOUT_PATH='$HOME/firefox';
+    CHECKOUT_PATH="$HOME/firefox"
+  else
+    echo "WARNING: using checkout path from FF_CHECKOUT_PATH env: ${FF_CHECKOUT_PATH}"
+    CHECKOUT_PATH="${FF_CHECKOUT_PATH}"
+    FRIENDLY_CHECKOUT_PATH="<FF_CHECKOUT_PATH>"
+  fi
+
+  PATCHES_PATH="$PWD/firefox/patches"
+  FIREFOX_EXTRA_FOLDER_PATH="$PWD/firefox/juggler"
+  BUILD_NUMBER=$(head -1 "$PWD/firefox/BUILD_NUMBER")
+  source "./firefox/UPSTREAM_CONFIG.sh"
+elif [[ ("$1" == "firefox-beta") || ("$1" == "ff-beta") ]]; then
+  # NOTE: firefox-beta re-uses firefox checkout.
+  if [[ -z "${FF_CHECKOUT_PATH}" ]]; then
+    FRIENDLY_CHECKOUT_PATH='$HOME/firefox';
+    CHECKOUT_PATH="$HOME/firefox"
+  else
+    echo "WARNING: using checkout path from FF_CHECKOUT_PATH env: ${FF_CHECKOUT_PATH}"
+    CHECKOUT_PATH="${FF_CHECKOUT_PATH}"
+    FRIENDLY_CHECKOUT_PATH="<FF_CHECKOUT_PATH>"
+  fi
+
+  PATCHES_PATH="$PWD/firefox-beta/patches"
+  FIREFOX_EXTRA_FOLDER_PATH="$PWD/firefox-beta/juggler"
+  BUILD_NUMBER=$(head -1 "$PWD/firefox-beta/BUILD_NUMBER")
+  source "./firefox-beta/UPSTREAM_CONFIG.sh"
+elif [[ ("$1" == "webkit") || ("$1" == "webkit/") || ("$1" == "wk") ]]; then
+  if [[ -z "${WK_CHECKOUT_PATH}" ]]; then
+    FRIENDLY_CHECKOUT_PATH='$HOME/webkit';
+    CHECKOUT_PATH="$HOME/webkit"
+  else
+    echo "WARNING: using checkout path from WK_CHECKOUT_PATH env: ${WK_CHECKOUT_PATH}"
+    CHECKOUT_PATH="${WK_CHECKOUT_PATH}"
+    FRIENDLY_CHECKOUT_PATH="<WK_CHECKOUT_PATH>"
+  fi
+
+  PATCHES_PATH="$PWD/webkit/patches"
+  WEBKIT_EXTRA_FOLDER_PATH="$PWD/webkit/embedder/Playwright"
+  BUILD_NUMBER=$(head -1 "$PWD/webkit/BUILD_NUMBER")
+  source "./webkit/UPSTREAM_CONFIG.sh"
+else
+  echo ERROR: unknown browser - "$1"
+  exit 1
+fi
+
+# if there's no checkout folder - checkout one.
+if ! [[ -d $CHECKOUT_PATH ]]; then
+  echo "-- $FRIENDLY_CHECKOUT_PATH is missing - checking out.."
+  if [[ -n "$CI" ]]; then
+    # In CI environment, we re-checkout constantly, so we do a shallow checkout to save time.
+    git clone --single-branch --depth 1 --branch "$BASE_BRANCH" "$REMOTE_URL" "$CHECKOUT_PATH"
+  else
+    # In non-CI environment, do a full checkout. This takes time,
+    # but liberates from the `git fetch --unshallow`.
+    git clone --single-branch --branch "$BASE_BRANCH" "$REMOTE_URL" "$CHECKOUT_PATH"
+  fi
+else
+  echo "-- checking $FRIENDLY_CHECKOUT_PATH folder - OK"
+fi
+
+# if folder exists but not a git repository - bail out.
+if ! [[ -d $CHECKOUT_PATH/.git ]]; then
+  echo "ERROR: $FRIENDLY_CHECKOUT_PATH is not a git repository! Remove it and re-run the script."
+  exit 1
+else
+  echo "-- checking $FRIENDLY_CHECKOUT_PATH is a git repo - OK"
+fi
+
+# ============== SETTING UP GIT REPOSITORY ==============
+cd "$CHECKOUT_PATH"
+
+# Bail out if git repo is dirty.
+if [[ -n $(git status -s --untracked-files=no) ]]; then
+  echo "ERROR: $FRIENDLY_CHECKOUT_PATH has dirty GIT state - commit everything and re-run the script."
+  exit 1
+fi
+
+# Setting up |$REMOTE_BROWSER_UPSTREAM| remote and fetch the $BASE_BRANCH
+if git remote get-url $REMOTE_BROWSER_UPSTREAM >/dev/null; then
+  echo "-- setting |$REMOTE_BROWSER_UPSTREAM| remote url to $REMOTE_URL"
+  git remote set-url $REMOTE_BROWSER_UPSTREAM "$REMOTE_URL"
+else
+  echo "-- adding |$REMOTE_BROWSER_UPSTREAM| remote to $REMOTE_URL"
+  git remote rename origin $REMOTE_BROWSER_UPSTREAM
+fi
+
+# Since we do a single-branch checkout by default, we might need to add a new remote base branch.
+if ! git show-branch "remotes/$REMOTE_BROWSER_UPSTREAM/${BASE_BRANCH}" 2>&1 >/dev/null; then
+  git remote set-branches --add "$REMOTE_BROWSER_UPSTREAM" "${BASE_BRANCH}"
+fi
+
+# if our remote branch does not contains "BASE_REVISION" - then fetch more stuff.
+if [[ -z $(git branch -r --contains "${BASE_REVISION}" --list "${REMOTE_BROWSER_UPSTREAM}/${BASE_BRANCH}") ]]; then
+  # Detach git head so that we can fetch into branch.
+  git checkout --detach >/dev/null 2>/dev/null
+
+  if [[ -z "$CI" ]]; then
+    # On non-CI, fetch everything.
+    git fetch "$REMOTE_BROWSER_UPSTREAM" "$BASE_BRANCH"
+  else
+    # On CI, fetch from REMOTE_BROWSER_UPSTREAM more and more commits
+    # until we find $BASE_REVISION.
+    # This technique allows us start with a shallow clone.
+
+    # Fetch 128 commits first, and then double the amount every iteration.
+    FETCH_DEPTH=128
+    SUCCESS="no"
+    while (( FETCH_DEPTH <= 8192 )); do
+      echo "Fetching ${FETCH_DEPTH} commits to find base revision..."
+      git fetch --depth "${FETCH_DEPTH}" "$REMOTE_BROWSER_UPSTREAM" "$BASE_BRANCH"
+      FETCH_DEPTH=$(( FETCH_DEPTH * 2 ));
+      if git cat-file -e "$BASE_REVISION"^{commit} >/dev/null; then
+        SUCCESS="yes"
+        break;
+      fi
+    done
+    if [[ "${SUCCESS}" == "no" ]]; then
+      echo "ERROR: $FRIENDLY_CHECKOUT_PATH/ does not include the BASE_REVISION (@$BASE_REVISION). Wrong revision number?"
+      exit 1
+    fi
+  fi
+fi
+
+echo "-- checking $FRIENDLY_CHECKOUT_PATH repo has BASE_REVISION (@$BASE_REVISION) commit - OK"
+
+# Check out the $BASE_REVISION
+git checkout "$BASE_REVISION"
+
+# Create a playwright-build branch and apply all the patches to it.
+if git show-ref --verify --quiet refs/heads/playwright-build; then
+  git branch -D playwright-build
+fi
+git checkout -b playwright-build
+echo "-- applying patches"
+git apply --index --whitespace=nowarn "$PATCHES_PATH"/*
+
+if [[ ! -z "${WEBKIT_EXTRA_FOLDER_PATH}" ]]; then
+  echo "-- adding WebKit embedders"
+  EMBEDDER_DIR="$PWD/Tools/Playwright"
+  # git status does not show empty directories, check it separately.
+  # XCode 13 and WebKit build on MacOS 12 now create empty folder here:
+  #   ./Tools/Playwright/Playwright.xcodeproj/project.xcworkspace/xcshareddata/swiftpm
+  # As an easy work-around, let's remove it.
+  if [[ -d $EMBEDDER_DIR ]]; then
+    rm -rf "$EMBEDDER_DIR"
+  fi
+  cp -r "${WEBKIT_EXTRA_FOLDER_PATH}" "$EMBEDDER_DIR"
+  git add "$EMBEDDER_DIR"
+elif [[ ! -z "${FIREFOX_EXTRA_FOLDER_PATH}" ]]; then
+  echo "-- adding juggler"
+  EMBEDDER_DIR="$PWD/juggler"
+  # git status does not show empty directories, check it separately.
+  # Remove for good if its empty but exists.
+  if [[ -d $EMBEDDER_DIR ]]; then
+    rm -rf "$EMBEDDER_DIR"
+  fi
+  cp -r "${FIREFOX_EXTRA_FOLDER_PATH}" "$EMBEDDER_DIR"
+  git add "$EMBEDDER_DIR"
+fi
+
+git commit -a --author="playwright-devops <devops@playwright.dev>" -m "chore($1): bootstrap build #$BUILD_NUMBER"
+
+echo
+echo
+echo "DONE. Browser is ready to be built."
diff --git a/browser_patches/repack-juggler.mjs b/browser_patches/repack-juggler.mjs
new file mode 100755
index 0000000000000000000000000000000000000000..9c21b5dd9e136d80439ad0a0ad3f27ad31ad352a
--- /dev/null
+++ b/browser_patches/repack-juggler.mjs
@@ -0,0 +1,341 @@
+#!/usr/bin/env node
+/**
+ * Copyright (c) Microsoft Corporation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import * as path from 'path';
+import * as URL from 'url';
+import * as fs from 'fs';
+import * as http from 'http';
+import * as https from 'https';
+import * as os from 'os';
+import * as util from 'util';
+import * as child_process from 'child_process';
+import AdmZip from 'adm-zip';
+
+const existsAsync = path => new Promise(resolve => fs.stat(path, err => resolve(!err)));
+
+const __filename = URL.fileURLToPath(import.meta.url);
+const __dirname = path.dirname(__filename);
+
+if (process.argv[2] === '--help' || process.argv[2] === '-h') {
+  console.log(`usage: ${path.basename(process.argv[1])} [firefox|ff|firefox-beta|ff-beta] [build number] [build platform]`);
+  console.log(``);
+  console.log(`Repackages Firefox with tip-of-tree Juggler implementation`);
+  process.exit(1);
+}
+
+let browserName = '';
+if (process.argv[2] === 'firefox' || process.argv[2] === 'ff') {
+  browserName = 'firefox';
+} else if (process.argv[2] === 'firefox-beta' || process.argv[2] === 'ff-beta') {
+  browserName = 'firefox-beta';
+} else {
+  console.error('ERROR: unknown firefox to repackage - either "firefox", "ff", "firefox-beta" or "ff-beta" is allowed as first argument');
+  process.exit(1);
+}
+
+// Path to jar.mn in the juggler
+const JARMN_PATH = path.join(__dirname, browserName, 'juggler', 'jar.mn');
+// Workdir for Firefox repackaging
+const BUILD_DIRECTORY = os.platform() === 'win32' ? path.join(__dirname, '__repackaged_firefox__') : `/tmp/repackaged-firefox`;
+// Information about currently downloaded build
+const BUILD_INFO_PATH = path.join(BUILD_DIRECTORY, 'build-info.json');
+// Backup OMNI.JA - the original one before repackaging.
+const OMNI_BACKUP_PATH = path.join(BUILD_DIRECTORY, 'omni.ja.backup');
+// Workdir to extract omni.ja
+const OMNI_EXTRACT_DIR = path.join(BUILD_DIRECTORY, 'omni');
+// Path inside omni.ja to juggler
+const OMNI_JUGGLER_DIR = path.join(OMNI_EXTRACT_DIR, 'chrome', 'juggler');
+
+const EXECUTABLE_PATHS = {
+  'ubuntu18.04': ['firefox', 'firefox'],
+  'ubuntu20.04': ['firefox', 'firefox'],
+  'mac10.14': ['firefox', 'Nightly.app', 'Contents', 'MacOS', 'firefox'],
+  'mac10.15': ['firefox', 'Nightly.app', 'Contents', 'MacOS', 'firefox'],
+  'mac11': ['firefox', 'Nightly.app', 'Contents', 'MacOS', 'firefox'],
+  'mac11-arm64': ['firefox', 'Nightly.app', 'Contents', 'MacOS', 'firefox'],
+  'win64': ['firefox', 'firefox.exe'],
+};
+
+const DOWNLOAD_URLS = {
+  'firefox': {
+    'ubuntu18.04': 'https://playwright.azureedge.net/builds/firefox/%s/firefox-ubuntu-18.04.zip',
+    'ubuntu20.04': 'https://playwright.azureedge.net/builds/firefox/%s/firefox-ubuntu-20.04.zip',
+    'mac10.14': 'https://playwright.azureedge.net/builds/firefox/%s/firefox-mac-11.zip',
+    'mac10.15': 'https://playwright.azureedge.net/builds/firefox/%s/firefox-mac-11.zip',
+    'mac11': 'https://playwright.azureedge.net/builds/firefox/%s/firefox-mac-11.zip',
+    'mac11-arm64': 'https://playwright.azureedge.net/builds/firefox/%s/firefox-mac-11-arm64.zip',
+    'win64': 'https://playwright.azureedge.net/builds/firefox/%s/firefox-win64.zip',
+  },
+  'firefox-beta': {
+    'ubuntu18.04': 'https://playwright.azureedge.net/builds/firefox-beta/%s/firefox-beta-ubuntu-18.04.zip',
+    'ubuntu20.04': 'https://playwright.azureedge.net/builds/firefox-beta/%s/firefox-beta-ubuntu-20.04.zip',
+    'mac10.14': 'https://playwright.azureedge.net/builds/firefox-beta/%s/firefox-beta-mac-11.zip',
+    'mac10.15': 'https://playwright.azureedge.net/builds/firefox-beta/%s/firefox-beta-mac-11.zip',
+    'mac11': 'https://playwright.azureedge.net/builds/firefox-beta/%s/firefox-beta-mac-11.zip',
+    'mac11-arm64': 'https://playwright.azureedge.net/builds/firefox-beta/%s/firefox-beta-mac-11-arm64.zip',
+    'win64': 'https://playwright.azureedge.net/builds/firefox-beta/%s/firefox-beta-win64.zip',
+  },
+};
+
+async function ensureFirefoxBuild(browserName, buildNumber, buildPlatform) {
+  if (!buildNumber)
+    buildNumber = (await fs.promises.readFile(path.join(__dirname, browserName, 'BUILD_NUMBER'), 'utf8')).split('\n').shift();
+  if (!buildPlatform)
+    buildPlatform = getHostPlatform();
+  const currentBuildInfo = await fs.promises.readFile(BUILD_INFO_PATH).then(text => JSON.parse(text)).catch(e => ({ buildPlatform: '', buildNumber: '', browserName: '' }));
+
+  if (currentBuildInfo.buildPlatform === buildPlatform && currentBuildInfo.buildNumber === buildNumber && currentBuildInfo.browserName === browserName)
+    return currentBuildInfo;
+  await fs.promises.rm(BUILD_DIRECTORY, { recursive: true }).catch(e => {});
+  await fs.promises.mkdir(BUILD_DIRECTORY);
+  const buildZipPath = path.join(BUILD_DIRECTORY, 'firefox.zip');
+
+  const urlTemplate = DOWNLOAD_URLS[browserName][buildPlatform];
+  if (!urlTemplate)
+    throw new Error(`ERROR: repack-juggler does not support ${buildPlatform}`);
+  const url = util.format(urlTemplate, buildNumber);
+  console.log(`Downloading ${browserName} r${buildNumber} for ${buildPlatform} - it might take a few minutes`);
+  let downloadedPercentage = 0;
+  await downloadFile(url, buildZipPath, (downloaded, total) => {
+    const percentage = Math.round(downloaded / total * 10) * 10;
+    if (percentage === downloadedPercentage)
+      return;
+    downloadedPercentage = percentage;
+    console.log(`Downloaded: ${downloadedPercentage}%`);
+  });
+
+  const zip = new AdmZip(buildZipPath);
+  zip.extractAllTo(BUILD_DIRECTORY, false /* overwrite */, true /* keepOriginalPermission */);
+
+  const buildInfo = { buildNumber, buildPlatform, browserName };
+  await fs.promises.writeFile(BUILD_INFO_PATH, JSON.stringify(buildInfo), 'utf8');
+  return buildInfo;
+}
+
+async function listFiles(aPath, files = []) {
+  const stat = await fs.promises.lstat(aPath);
+  if (stat.isDirectory()) {
+    const entries = await fs.promises.readdir(aPath);
+    await Promise.all(entries.map(entry => listFiles(path.join(aPath, entry), files)));
+  } else {
+    files.push(aPath);
+  }
+  return files;
+}
+
+async function repackageJuggler(browserName, buildInfo) {
+  const { buildNumber, buildPlatform } = buildInfo;
+
+  // Find all omni.ja files in the Firefox build.
+  const omniPaths = (await listFiles(BUILD_DIRECTORY)).filter(filePath => filePath.endsWith('omni.ja'));
+
+  // Iterate over all omni.ja files and find one that has juggler inside.
+  const omniWithJugglerPath = await (async () => {
+    for (const omniPath of omniPaths) {
+      const zip = new AdmZip(omniPath);
+      for (const zipEntry of zip.getEntries()) {
+        if (zipEntry.toString().includes('chrome/juggler'))
+          return omniPath;
+      }
+    }
+    return null;
+  })();
+
+  if (!omniWithJugglerPath) {
+    console.error('ERROR: did not find omni.ja file with baked in Juggler!');
+    process.exit(1);
+  } else {
+    if (!(await existsAsync(OMNI_BACKUP_PATH)))
+      await fs.promises.copyFile(omniWithJugglerPath, OMNI_BACKUP_PATH);
+  }
+
+  // Let's repackage omni folder!
+  await fs.promises.rm(OMNI_EXTRACT_DIR, { recursive: true }).catch(e => {});
+  await fs.promises.mkdir(OMNI_EXTRACT_DIR);
+
+  {
+    // Unzip omni
+    const zip = new AdmZip(OMNI_BACKUP_PATH);
+    zip.extractAllTo(OMNI_EXTRACT_DIR, false /* overwrite */, true /* keepOriginalPermission */);
+  }
+
+  // Remove current juggler directory
+  await fs.promises.rm(OMNI_JUGGLER_DIR, { recursive: true });
+  // Repopulate with tip-of-tree juggler files
+  const jarmn = await fs.promises.readFile(JARMN_PATH, 'utf8');
+  const jarLines = jarmn.split('\n').map(line => line.trim()).filter(line => line.startsWith('content/') && line.endsWith(')'));
+  for (const line of jarLines) {
+    const tokens = line.split(/\s+/);
+    const toPath = path.join(OMNI_JUGGLER_DIR, tokens[0]);
+    const fromPath = path.join(__dirname, browserName, 'juggler', tokens[1].slice(1, -1));
+    await fs.promises.mkdir(path.dirname(toPath), { recursive: true });
+    await fs.promises.copyFile(fromPath, toPath);
+  }
+
+  await fs.promises.unlink(omniWithJugglerPath);
+  {
+    const zip = new AdmZip();
+    zip.addLocalFolder(OMNI_EXTRACT_DIR);
+    zip.writeZip(omniWithJugglerPath);
+  }
+
+  const module = await import(URL.pathToFileURL(path.join(__dirname, browserName, 'install-preferences.js')));
+  await module.default.installFirefoxPreferences(path.join(BUILD_DIRECTORY, 'firefox'));
+
+  // Output executable path to be used in test.
+  console.log(`
+    browser: ${browserName}
+    buildNumber: ${buildNumber}
+    buildPlatform: ${buildPlatform}
+    executablePath: ${path.join(BUILD_DIRECTORY, ...EXECUTABLE_PATHS[buildPlatform])}
+  `);
+}
+
+
+function httpRequest(url, method, response) {
+  const options = URL.parse(url);
+  options.method = method;
+
+  const requestCallback = res => {
+    if (res.statusCode >= 300 && res.statusCode < 400 && res.headers.location)
+      httpRequest(res.headers.location, method, response);
+    else
+      response(res);
+  };
+  const request = options.protocol === 'https:' ?
+    https.request(options, requestCallback) :
+    http.request(options, requestCallback);
+  request.end();
+  return request;
+}
+
+function downloadFile(url, destinationPath, progressCallback) {
+  let downloadedBytes = 0;
+  let totalBytes = 0;
+
+  let fulfill, reject;
+  const promise = new Promise((x, y) => { fulfill = x; reject = y; });
+
+  const request = httpRequest(url, 'GET', response => {
+    if (response.statusCode !== 200) {
+      const error = new Error(`Download failed: server returned code ${response.statusCode}. URL: ${url}`);
+      // consume response data to free up memory
+      response.resume();
+      reject(error);
+      return;
+    }
+    const file = fs.createWriteStream(destinationPath);
+    file.on('finish', () => fulfill());
+    file.on('error', error => reject(error));
+    response.pipe(file);
+    totalBytes = parseInt(response.headers['content-length'], 10);
+    if (progressCallback)
+      response.on('data', onData);
+  });
+  request.on('error', error => reject(error));
+  return promise;
+
+  function onData(chunk) {
+    downloadedBytes += chunk.length;
+    progressCallback(downloadedBytes, totalBytes);
+  }
+}
+
+function getUbuntuVersionSync() {
+  if (os.platform() !== 'linux')
+    return '';
+  try {
+    let osReleaseText;
+    if (fs.existsSync('/etc/upstream-release/lsb-release'))
+      osReleaseText = fs.readFileSync('/etc/upstream-release/lsb-release', 'utf8');
+    else
+      osReleaseText = fs.readFileSync('/etc/os-release', 'utf8');
+    if (!osReleaseText)
+      return '';
+    return getUbuntuVersionInternal(osReleaseText);
+  } catch (e) {
+    return '';
+  }
+}
+
+function getUbuntuVersionInternal(osReleaseText) {
+  const fields = new Map();
+  for (const line of osReleaseText.split('\n')) {
+    const tokens = line.split('=');
+    const name = tokens.shift();
+    let value = tokens.join('=').trim();
+    if (value.startsWith('"') && value.endsWith('"'))
+      value = value.substring(1, value.length - 1);
+    if (!name)
+      continue;
+    fields.set(name.toLowerCase(), value);
+  }
+  // For Linux mint
+  if (fields.get('distrib_id') && fields.get('distrib_id').toLowerCase() === 'ubuntu')
+    return fields.get('distrib_release') || '';
+  if (!fields.get('name') || fields.get('name').toLowerCase() !== 'ubuntu')
+    return '';
+  return fields.get('version_id') || '';
+}
+
+function getHostPlatform() {
+  const platform = os.platform();
+  if (platform === 'darwin') {
+    const [major, minor] = child_process.execSync('sw_vers -productVersion', {
+      stdio: ['ignore', 'pipe', 'ignore']
+    }).toString('utf8').trim().split('.').map(x => parseInt(x, 10));
+    let arm64 = false;
+    // BigSur is the first version that might run on Apple Silicon.
+    if (major >= 11) {
+      arm64 = child_process.execSync('/usr/sbin/sysctl -in hw.optional.arm64', {
+        stdio: ['ignore', 'pipe', 'ignore']
+      }).toString().trim() === '1';
+    }
+    const LAST_STABLE_MAC_MAJOR_VERSION = 11;
+    // All new MacOS releases increase major version.
+    let macVersion = `${major}`;
+    if (major === 10) {
+      // Pre-BigSur MacOS was increasing minor version every release.
+      macVersion = `${major}.${minor}`;
+    } else if (major > LAST_STABLE_MAC_MAJOR_VERSION) {
+      // Best-effort support for MacOS beta versions.
+      macVersion = LAST_STABLE_MAC_MAJOR_VERSION + '';
+    }
+    const archSuffix = arm64 ? '-arm64' : '';
+    return `mac${macVersion}${archSuffix}`;
+  }
+  if (platform === 'linux') {
+    const ubuntuVersion = getUbuntuVersionSync();
+    if (parseInt(ubuntuVersion, 10) <= 19)
+      return 'ubuntu18.04';
+    return 'ubuntu20.04';
+  }
+  if (platform === 'win32')
+    return 'win64';
+  return platform;
+}
+
+async function main() {
+  const buildInfo = await ensureFirefoxBuild(browserName, process.argv[3], process.argv[4]).catch(e => {
+    console.log(e.message);
+    process.exit(1);
+  });
+  await repackageJuggler(browserName, buildInfo);
+}
+
+await main();
+
diff --git a/browser_patches/sanitize_and_compress_log.js b/browser_patches/sanitize_and_compress_log.js
new file mode 100755
index 0000000000000000000000000000000000000000..aa9f469a9a454d464c1e4cbf91f6e10652910eac
--- /dev/null
+++ b/browser_patches/sanitize_and_compress_log.js
@@ -0,0 +1,81 @@
+#!/usr/bin/env node
+/**
+ * Copyright (c) Microsoft Corporation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+const fs = require('fs');
+const zlib = require('zlib');
+const readline = require('readline');
+
+if (process.argv.length < 3) {
+  console.log('ERROR: output file path has to be specified!');
+  process.exit(1);
+}
+const OUTPUT_PATH = process.argv[2];
+
+// These env variable values should be removed from logs no matter what.
+const BLOCKLIST_ENV_KEYS = new Set([
+  'AZ_ACCOUNT_NAME',
+  'AZ_ACCOUNT_KEY',
+  'TELEGRAM_BOT_KEY',
+]);
+
+// These env variable values can stay in logs - they are harmless.
+const ALLOWLIST_ENV_KEYS = new Set([
+  'SHELL',
+  'TERM',
+  'USER',
+  'PWD',
+  'EDITOR',
+  'LANG',
+  'HOME',
+  'LOGNAME',
+  'COLORTERM',
+  'TMPDIR',
+]);
+
+const sanitizeEnv = Object.entries(process.env).filter(([key, value]) => {
+  if (BLOCKLIST_ENV_KEYS.has(key))
+    return true;
+  if (ALLOWLIST_ENV_KEYS.has(key))
+    return false;
+  // Sanitize all env variables that have `KEY` or `ACCOUNT` as a name.
+  if (key.toUpperCase().includes('KEY') || key.toUpperCase().includes('ACCOUNT'))
+    return true;
+  // We shouldn't try sanitizing env values that are too short.
+  if (value.trim().length < 7)
+    return false;
+  return true;
+});
+
+const rl = readline.createInterface({
+  input: process.stdin,
+  crlfDelay: Infinity,
+});
+
+const gzip = zlib.createGzip();
+gzip.pipe(fs.createWriteStream(OUTPUT_PATH));
+
+rl.on('line', line => {
+  for (const [key,  value] of sanitizeEnv)
+    line = line.split(value).join(`<${key}>`);
+  console.log(line);
+  gzip.write(line + '\n');
+});
+
+rl.on('close', () => {
+  gzip.end();
+});
+
diff --git a/browser_patches/send_telegram_message.js b/browser_patches/send_telegram_message.js
new file mode 100644
index 0000000000000000000000000000000000000000..c7f3ad78622fe0f0a7e00ec4d541b1b68d05859a
--- /dev/null
+++ b/browser_patches/send_telegram_message.js
@@ -0,0 +1,78 @@
+/**
+ * Copyright (c) Microsoft Corporation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+// @ts-check
+const https = require('https');
+
+const TELEGRAM_CHAT_ID = "-1001225613794";
+
+(async () => {
+  const { TELEGRAM_BOT_KEY } = process.env;
+  if (!TELEGRAM_BOT_KEY) {
+    console.log('environment variable \'TELEGRAM_BOT_KEY\' is not set');
+    return;
+  }
+
+  const text = process.argv[2];
+  if (!text) {
+    console.log('Text not set!');
+    console.log('Usage: node send_telegram_message.js <text>');
+    return;
+  }
+
+  await sendTelegramMessage(TELEGRAM_BOT_KEY, text);
+  console.log('Telegram message sent successfully!');
+})().catch(error => {
+  console.error(`Failed to send Telegram message. Error: ${error}`);
+})
+
+/**
+ * @param {string} apiKey 
+ * @param {string} text 
+ */
+async function sendTelegramMessage(apiKey, text) {
+  await new Promise((resolve, reject) => {
+    const request = https.request({
+      hostname: 'api.telegram.org',
+      path: `/bot${apiKey}/sendMessage`,
+      method: 'POST',
+      headers: {
+        'Content-Type': 'application/json',
+      },
+    }, res => {
+      let body = '';
+      res.on('data', chunk => body += chunk.toString());
+      res.on('end', () => {
+        if (res.statusCode !== 200)
+          reject(new Error(`Telegram API returned status code ${res.statusCode}. Body: ${body}`));
+        else
+          resolve(JSON.parse(body));
+      });
+      res.on('error', err => {
+        reject(err);
+      });
+    });
+    request.on('error',reject);
+    request.write(JSON.stringify({
+      disable_web_page_preview: true,
+      chat_id: TELEGRAM_CHAT_ID,
+      parse_mode: 'html',
+      text,
+      disable_notification: false,
+    }));
+    request.end();
+  });
+}
diff --git a/browser_patches/upload.sh b/browser_patches/upload.sh
new file mode 100755
index 0000000000000000000000000000000000000000..70c813e939fd9792d24289c495c8a454482db6d1
--- /dev/null
+++ b/browser_patches/upload.sh
@@ -0,0 +1,82 @@
+#!/bin/bash
+set -e
+set +x
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname "$0")"
+
+source "./utils.sh"
+
+if [[ ($1 == '--help') || ($1 == '-h') ]]; then
+  echo "usage: $(basename "$0") [BLOB-PATH] [--check|ZIP-PATH]"
+  echo
+  echo "Upload ZIP-PATH to BLOB-PATH in 'builds' container."
+  echo
+  echo "--check      pass |--check| as a second parameter instead of a zip-path to check for"
+  echo "             existence of BLOB-PATH"
+  echo
+  echo "NOTE: \$AZ_ACCOUNT_KEY (azure account name) and \$AZ_ACCOUNT_NAME (azure account name)"
+  echo "env variables are required to upload builds to CDN."
+  exit 0
+fi
+
+if [[ (-z $AZ_ACCOUNT_KEY) || (-z $AZ_ACCOUNT_NAME) ]]; then
+  echo "ERROR: Either \$AZ_ACCOUNT_KEY or \$AZ_ACCOUNT_NAME environment variable is missing."
+  echo "       'Azure Account Name' and 'Azure Account Key' secrets that are required"
+  echo "       to upload builds ot Azure CDN."
+  exit 1
+fi
+
+if [[ $# < 2 ]]; then
+  echo "not enought arguments!"
+  echo "try '$(basename "$0") --help' for more information"
+  exit 1
+fi
+
+BLOB_PATH="$1"
+ZIP_PATH="$2"
+
+if [[ ("$2" == '--check') ]]; then
+  EXISTS=$(az storage blob exists -c builds --account-key "$AZ_ACCOUNT_KEY" --account-name "$AZ_ACCOUNT_NAME" -n "$BLOB_PATH" --query "exists")
+  if [[ $EXISTS == "true" ]]; then
+    exit 0
+  else
+    exit 1
+  fi
+fi
+
+GENERATE_MD5_HASH=$(cat <<EOF
+  const crypto = require('crypto');
+  const fs = require('fs');
+  const buffer = fs.readFileSync(process.argv[1]);
+  console.log(crypto.createHash('md5').update(buffer).digest('base64'));
+EOF
+)
+
+MD5_HASH=$(node -e "${GENERATE_MD5_HASH}" "${ZIP_PATH}")
+echo "MD5 hash: ${MD5_HASH}"
+
+if ! [[ -f $ZIP_PATH ]]; then
+  echo "ERROR: ${ZIP_PATH} does not exist"
+  exit 1
+fi
+if [[ "${ZIP_PATH}" != *.zip && "${ZIP_PATH}" != *.gz ]]; then
+  echo "ERROR: ${ZIP_PATH} is not an archive (must have a .zip or .gz extension)"
+  exit 1
+fi
+if is_win; then
+  # Convert POSIX path to MSYS
+  WIN_PATH=$({ cd $(dirname "$ZIP_PATH") && pwd -W; } | sed 's|/|\\|g')
+  WIN_PATH="${WIN_PATH}\\$(basename "$ZIP_PATH")"
+  az storage blob upload -c builds --account-key "$AZ_ACCOUNT_KEY" --account-name "$AZ_ACCOUNT_NAME" -f "$WIN_PATH" -n "$BLOB_PATH" --content-md5 "${MD5_HASH}"
+else
+  az storage blob upload -c builds --account-key "$AZ_ACCOUNT_KEY" --account-name "$AZ_ACCOUNT_NAME" -f "$ZIP_PATH" -n "$BLOB_PATH" --content-md5 "${MD5_HASH}"
+fi
+
+ZIP_SIZE=$(node -e 'console.log(Math.round(require("fs").statSync(process.argv[1]).size / 1024 / 1024) + "MB")' "${ZIP_PATH}")
+
+echo "UPLOAD SUCCESSFUL!"
+echo "--  SRC: $ZIP_PATH"
+echo "-- SIZE: $ZIP_SIZE"
+echo "--  DST: $BLOB_PATH"
+
diff --git a/browser_patches/utils.sh b/browser_patches/utils.sh
new file mode 100644
index 0000000000000000000000000000000000000000..03268c19d230a6725d06a9adc735c10916e4f2d5
--- /dev/null
+++ b/browser_patches/utils.sh
@@ -0,0 +1,85 @@
+#!/bin/bash
+
+function getMacVersion() {
+  sw_vers -productVersion | grep -o '^\d\+.\d\+'
+}
+
+function selectXcodeVersionOrDie() {
+  XCODE_VERSION="$1"
+  if [[ -z "${XCODE_VERSION}" ]]; then
+    echo "selectXcodeOrDie expects xcode vesion to be given!"
+    exit 1
+  fi
+  XCODE_DIRECTORY="/Applications/Xcode${XCODE_VERSION}.app"
+  if ! [[ -d "${XCODE_DIRECTORY}" ]]; then
+    echo "ERROR: Xcode ${XCODE_VERSION} is required to compile!"
+    echo
+    echo "Either:"
+    echo
+    echo "- download required Xcode version from the developer.apple.com/downloads"
+    echo "  once downloaded, make sure to run the following:"
+    echo
+    echo "     $ cd ${XCODE_DIRECTORY}/Contents/Resources/Packages"
+    echo "     $ sudo installer -pkg XcodeSystemResources.pkg -target /"
+    echo
+    echo "- if you have some Xcode installation and want to try building with it:"
+    echo
+    echo "     $ ln -s /Applications/Xcode.app ${XCODE_DIRECTORY}"
+    exit 1
+  fi
+  # This line sets XCode for all nested bash processes.
+  export DEVELOPER_DIR="${XCODE_DIRECTORY}/Contents/Developer"
+  echo "-- using ${XCODE_DIRECTORY}"
+}
+
+# see https://docs.microsoft.com/en-us/visualstudio/install/tools-for-managing-visual-studio-instances?view=vs-2019
+function printMSVCRedistDir() {
+  local dll_file=$("C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -find '**\Redist\MSVC\*\x64\**\vcruntime140.dll')
+  local redist_dir=$(dirname "$dll_file" | tail -n 1)
+  if ! [[ -d $redist_dir ]]; then
+    echo "ERROR: cannot find MS VS C++ redistributable $redist_dir"
+    exit 1;
+  fi
+  echo "$redist_dir"
+}
+
+function is_win() {
+  if [[ "$(uname)" == MINGW* || "$(uname)" == MSYS* ]]; then
+    return 0;
+  else
+    return 1;
+  fi
+}
+
+function is_mac() {
+  if [[ "$(uname)" == "Darwin" ]]; then
+    return 0;
+  else
+    return 1;
+  fi
+}
+
+function is_linux() {
+  if [[ "$(uname)" != "Linux" ]]; then
+    return 1;
+  fi
+
+  # List of ID and VERSION_ID values for various distributions is available here:
+  # https://gist.github.com/aslushnikov/8ceddb8288e4cf9db3039c02e0f4fb75
+  if [[ -n "$1" ]]; then
+    local HOST_ID="$(bash -c 'source /etc/os-release && echo $ID')"
+    if [[ "$1" != "${HOST_ID}" ]]; then
+      return 1;
+    fi
+  fi
+
+  if [[ -n "$2" ]]; then
+    local HOST_VERSION="$(bash -c 'source /etc/os-release && echo $VERSION_ID')"
+    if [[ "$2" != "${HOST_VERSION}" ]]; then
+      return 1;
+    fi
+  fi
+
+  return 0;
+}
+
diff --git a/browser_patches/webkit/BUILD_NUMBER b/browser_patches/webkit/BUILD_NUMBER
new file mode 100644
index 0000000000000000000000000000000000000000..49b679c9fb3440e8aba92e53d7fafb0406847661
--- /dev/null
+++ b/browser_patches/webkit/BUILD_NUMBER
@@ -0,0 +1,2 @@
+1699
+Changed: yurys@chromium.org Mon 08 Aug 2022 12:23:32 PM PDT
diff --git a/browser_patches/webkit/EXPECTED_BUILDS b/browser_patches/webkit/EXPECTED_BUILDS
new file mode 100644
index 0000000000000000000000000000000000000000..5d69fe40d27ec1ebc92617f2cf4013fb391c68a8
--- /dev/null
+++ b/browser_patches/webkit/EXPECTED_BUILDS
@@ -0,0 +1,13 @@
+webkit-linux-universal.zip
+webkit-ubuntu-18.04.zip
+webkit-ubuntu-20.04.zip
+webkit-ubuntu-20.04-arm64.zip
+webkit-ubuntu-22.04.zip
+webkit-ubuntu-22.04-arm64.zip
+webkit-debian-11.zip
+webkit-mac-11.zip
+webkit-mac-11-arm64.zip
+webkit-mac-12.zip
+webkit-mac-12-arm64.zip
+webkit-win64.zip
+
diff --git a/browser_patches/webkit/UPSTREAM_CONFIG.sh b/browser_patches/webkit/UPSTREAM_CONFIG.sh
index a83035ec3194589c67a0d4643f8ced7356261309..e6a0a63d43ab5aee6a6accbfa8053b192af52ddc 100644
--- a/browser_patches/webkit/UPSTREAM_CONFIG.sh
+++ b/browser_patches/webkit/UPSTREAM_CONFIG.sh
@@ -1,3 +1,3 @@
 REMOTE_URL="https://github.com/WebKit/WebKit.git"
 BASE_BRANCH="main"
-BASE_REVISION="c888c485b787e204057b56d69536aae567ab8b3a"
+BASE_REVISION="df7f18952ccf0421dbdc7ee63587f59dbc7bd8ef"
diff --git a/browser_patches/webkit/archive.sh b/browser_patches/webkit/archive.sh
new file mode 100755
index 0000000000000000000000000000000000000000..f7be8ab94c904760069bd0fd9c74d75417e09d62
--- /dev/null
+++ b/browser_patches/webkit/archive.sh
@@ -0,0 +1,159 @@
+#!/bin/bash
+set -e
+set +x
+
+if [[ ("$1" == "-h") || ("$1" == "--help") ]]; then
+  echo "usage: $(basename "$0") [output-absolute-path] [--universal]"
+  echo
+  echo "Generate distributable .zip archive from ./checkout folder that was previously built."
+  echo
+  exit 0
+fi
+
+ZIP_PATH=$1
+if [[ $ZIP_PATH != /* ]]; then
+  echo "ERROR: path $ZIP_PATH is not absolute"
+  exit 1
+fi
+if [[ $ZIP_PATH != *.zip ]]; then
+  echo "ERROR: path $ZIP_PATH must have .zip extension"
+  exit 1
+fi
+if [[ -f $ZIP_PATH ]]; then
+  echo "ERROR: path $ZIP_PATH exists; can't do anything."
+  exit 1
+fi
+if ! [[ -d $(dirname "$ZIP_PATH") ]]; then
+  echo "ERROR: folder for path $($ZIP_PATH) does not exist."
+  exit 1
+fi
+
+IS_UNIVERSAL_BUILD=""
+if [[ $2 == "--universal" ]]; then
+  IS_UNIVERSAL_BUILD=1
+fi
+
+main() {
+  if [[ ! -z "${WK_CHECKOUT_PATH}" ]]; then
+    cd "${WK_CHECKOUT_PATH}"
+    echo "WARNING: checkout path from WK_CHECKOUT_PATH env: ${WK_CHECKOUT_PATH}"
+  else
+    cd "$HOME/webkit"
+  fi
+
+  set -x
+  if is_mac; then
+    createZipForMac
+  elif is_linux; then
+    createZipForLinux
+  elif is_win; then
+    createZipForWindows
+  else
+    echo "ERROR: cannot upload on this platform!" 1>&2
+    exit 1;
+  fi
+}
+
+
+createZipForLinux() {
+  # create a TMP directory to copy all necessary files
+  local tmpdir=$(mktemp -d -p "$(pwd)/WebKitBuild" -t webkit-deploy-XXXXXXXXXX)
+  mkdir -p "$tmpdir"
+
+  # copy runner
+  cp -t "$tmpdir" "$SCRIPTS_DIR"/pw_run.sh
+  # copy protocol
+  node "$SCRIPTS_DIR"/concat_protocol.js > "$tmpdir"/protocol.json
+
+  # Generate and unpack MiniBrowser bundles for each port
+  for port in gtk wpe; do
+    if [[ -n "${IS_UNIVERSAL_BUILD}" ]]; then
+      Tools/Scripts/generate-bundle \
+          --syslibs=bundle-all \
+          --bundle=MiniBrowser --release \
+          --platform=${port} --destination="${tmpdir}"
+    else
+      WEBKIT_OUTPUTDIR=$(pwd)/WebKitBuild/${port^^} \
+      Tools/Scripts/generate-bundle \
+          --bundle=MiniBrowser --release \
+          --platform=${port} --destination="${tmpdir}"
+    fi
+
+    unzip "${tmpdir}"/MiniBrowser_${port}_release.zip -d "${tmpdir}"/minibrowser-${port}
+    rm -f "${tmpdir}"/MiniBrowser_${port}_release.zip
+  done
+
+  cd "$tmpdir"
+
+  if [[ -n "${IS_UNIVERSAL_BUILD}" ]]; then
+    # De-duplicate common files: convert to relative symlinks identical files (same hash).
+    # We apply this algorithm only to unified build since in JHBuild WPE/Minibrowser
+    # and GTK/Minibrowser executables are identical and should not be symlinked.
+    rdfind -deterministic true -makesymlinks true -makehardlinks false -makeresultsfile false .
+    symlinks -rc .
+  fi
+
+  # zip resulting directory and cleanup TMP.
+  zip --symlinks -r "$ZIP_PATH" ./
+  cd -
+  rm -rf "$tmpdir"
+}
+
+createZipForWindows() {
+  # create a TMP directory to copy all necessary files
+  local tmpdir="/tmp/webkit-deploy-$(date +%s)"
+  mkdir -p "$tmpdir"
+
+  cp -t "$tmpdir" ./WebKitLibraries/win/bin64/*.dll
+  cd WebKitBuild/Release/bin64
+  cp -r -t "$tmpdir" WebKit.resources
+  cp -t "$tmpdir" JavaScriptCore.dll PlaywrightLib.dll WTF.dll WebKit2.dll libEGL.dll libGLESv2.dll
+  cp -t "$tmpdir" Playwright.exe WebKitNetworkProcess.exe WebKitWebProcess.exe
+  cd -
+  cd "$(printMSVCRedistDir)"
+  cp -t "$tmpdir" msvcp140.dll vcruntime140.dll vcruntime140_1.dll msvcp140_2.dll
+  cd -
+
+  # copy protocol
+  node "$SCRIPTS_DIR"/concat_protocol.js > "$tmpdir"/protocol.json
+  # tar resulting directory and cleanup TMP.
+  cd "$tmpdir"
+  zip -r "$ZIP_PATH" ./
+  cd -
+  rm -rf "$tmpdir"
+}
+
+createZipForMac() {
+  # create a TMP directory to copy all necessary files
+  local tmpdir=$(mktemp -d)
+
+  # copy all relevant files
+  ditto {./WebKitBuild/Release,"$tmpdir"}/com.apple.WebKit.GPU.xpc
+  ditto {./WebKitBuild/Release,"$tmpdir"}/com.apple.WebKit.Networking.xpc
+  ditto {./WebKitBuild/Release,"$tmpdir"}/com.apple.WebKit.WebContent.xpc
+  ditto {./WebKitBuild/Release,"$tmpdir"}/JavaScriptCore.framework
+  ditto {./WebKitBuild/Release,"$tmpdir"}/libANGLE-shared.dylib
+  ditto {./WebKitBuild/Release,"$tmpdir"}/libwebrtc.dylib
+  ditto {./WebKitBuild/Release,"$tmpdir"}/Playwright.app
+  ditto {./WebKitBuild/Release,"$tmpdir"}/WebCore.framework
+  ditto {./WebKitBuild/Release,"$tmpdir"}/WebInspectorUI.framework
+  ditto {./WebKitBuild/Release,"$tmpdir"}/WebKit.framework
+  ditto {./WebKitBuild/Release,"$tmpdir"}/WebKitLegacy.framework
+  ditto {"$SCRIPTS_DIR","$tmpdir"}/pw_run.sh
+  # copy protocol
+  node "$SCRIPTS_DIR"/concat_protocol.js > "$tmpdir"/protocol.json
+
+  # Remove all broken symlinks. @see https://github.com/microsoft/playwright/issues/5472
+  find "${tmpdir}" -type l ! -exec test -e {} \; -print | xargs rm
+
+  # zip resulting directory and cleanup TMP.
+  ditto -c -k "$tmpdir" "$ZIP_PATH"
+  rm -rf "$tmpdir"
+}
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname "$0")"
+SCRIPTS_DIR="$(pwd -P)"
+source "${SCRIPTS_DIR}/../utils.sh"
+
+main "$@"
diff --git a/browser_patches/webkit/build.sh b/browser_patches/webkit/build.sh
new file mode 100755
index 0000000000000000000000000000000000000000..70299f3e7f51063aa60d8ae11855d237e7a4697c
--- /dev/null
+++ b/browser_patches/webkit/build.sh
@@ -0,0 +1,157 @@
+#!/bin/bash
+set -e
+set +x
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname "$0")"
+SCRIPT_FOLDER="$(pwd -P)"
+source "${SCRIPT_FOLDER}/../utils.sh"
+
+# On Linux, Universal build uses Flatpak rather then JHBuild
+# and packs into a universal binary that can run on any linux
+# distribution.
+IS_UNIVERSAL_BUILD=""
+
+build_gtk() {
+  if [[ -z "${IS_UNIVERSAL_BUILD}" && ! -d "./WebKitBuild/GTK/DependenciesGTK" ]]; then
+    yes | WEBKIT_JHBUILD=1 \
+          WEBKIT_JHBUILD_MODULESET=minimal \
+          WEBKIT_OUTPUTDIR=$(pwd)/WebKitBuild/GTK \
+          DEBIAN_FRONTEND=noninteractive \
+          ./Tools/Scripts/update-webkitgtk-libs
+  fi
+  local CMAKE_ARGS=(
+    --cmakeargs=-DENABLE_INTROSPECTION=OFF
+    --cmakeargs=-DUSE_GSTREAMER_WEBRTC=FALSE
+  )
+  if [[ -n "${EXPORT_COMPILE_COMMANDS}" ]]; then
+    CMAKE_ARGS+=("--cmakeargs=-DCMAKE_EXPORT_COMPILE_COMMANDS=1")
+  fi
+  if [[ -n "${IS_UNIVERSAL_BUILD}" ]]; then
+    ./Tools/Scripts/build-webkit --gtk --release "${CMAKE_ARGS}" --touch-events --orientation-events --no-bubblewrap-sandbox "${CMAKE_ARGS[@]}" MiniBrowser
+  else
+    WEBKIT_JHBUILD=1 \
+    WEBKIT_JHBUILD_MODULESET=minimal \
+    WEBKIT_OUTPUTDIR=$(pwd)/WebKitBuild/GTK \
+    ./Tools/Scripts/build-webkit --gtk --release "${CMAKE_ARGS}" --touch-events --orientation-events --no-bubblewrap-sandbox "${CMAKE_ARGS[@]}" MiniBrowser
+  fi
+}
+
+build_wpe() {
+  if [[ -z "${IS_UNIVERSAL_BUILD}" && ! -d "./WebKitBuild/WPE/DependenciesWPE" ]]; then
+    yes | WEBKIT_JHBUILD=1 \
+          WEBKIT_JHBUILD_MODULESET=minimal \
+          WEBKIT_OUTPUTDIR=$(pwd)/WebKitBuild/WPE \
+          DEBIAN_FRONTEND=noninteractive \
+          ./Tools/Scripts/update-webkitwpe-libs
+  fi
+  local CMAKE_ARGS=(
+    --cmakeargs=-DENABLE_COG=OFF
+    --cmakeargs=-DENABLE_INTROSPECTION=OFF
+    --cmakeargs=-DENABLE_WEBXR=OFF
+    --cmakeargs=-DUSE_GSTREAMER_WEBRTC=FALSE
+  )
+  if [[ -n "${EXPORT_COMPILE_COMMANDS}" ]]; then
+    CMAKE_ARGS+=("--cmakeargs=-DCMAKE_EXPORT_COMPILE_COMMANDS=1")
+  fi
+
+  if [[ -n "${IS_UNIVERSAL_BUILD}" ]]; then
+    ./Tools/Scripts/build-webkit --wpe --release "${CMAKE_ARGS}" --touch-events --orientation-events --no-bubblewrap-sandbox "${CMAKE_ARGS[@]}" MiniBrowser
+  else
+    WEBKIT_JHBUILD=1 \
+    WEBKIT_JHBUILD_MODULESET=minimal \
+    WEBKIT_OUTPUTDIR=$(pwd)/WebKitBuild/WPE \
+    ./Tools/Scripts/build-webkit --wpe --release "${CMAKE_ARGS}" --touch-events --orientation-events --no-bubblewrap-sandbox "${CMAKE_ARGS[@]}" MiniBrowser
+  fi
+}
+
+ensure_linux_deps() {
+
+  if [[ -n "${IS_UNIVERSAL_BUILD}" ]]; then
+    SUDO="" ; [ $UID -ne 0 ] && SUDO="sudo"
+    # - flatpak drives the build
+    # - symlinks and rdfind are needed to de-duplicate files on the GTK+WPE bundle to reduce its size.
+    DEBIAN_FRONTEND=noninteractive ${SUDO} apt-get install -y flatpak symlinks rdfind
+  fi
+
+  yes | DEBIAN_FRONTEND=noninteractive ./Tools/gtk/install-dependencies
+  yes | DEBIAN_FRONTEND=noninteractive ./Tools/wpe/install-dependencies
+  if [[ -z "${IS_UNIVERSAL_BUILD}" ]]; then
+    # In non-universal build install JHBuild deps.
+    yes | DEBIAN_FRONTEND=noninteractive WEBKIT_JHBUILD=1 WEBKIT_JHBUILD_MODULESET=minimal WEBKIT_OUTPUTDIR=$(pwd)/WebKitBuild/WPE ./Tools/Scripts/update-webkitwpe-libs
+    yes | DEBIAN_FRONTEND=noninteractive WEBKIT_JHBUILD=1 WEBKIT_JHBUILD_MODULESET=minimal WEBKIT_OUTPUTDIR=$(pwd)/WebKitBuild/GTK ./Tools/Scripts/update-webkitgtk-libs
+  else
+    yes | ./Tools/Scripts/update-webkitwpe-libs
+    yes | ./Tools/Scripts/update-webkitgtk-libs
+  fi
+}
+
+if [[ ! -z "${WK_CHECKOUT_PATH}" ]]; then
+  cd "${WK_CHECKOUT_PATH}"
+  echo "WARNING: checkout path from WK_CHECKOUT_PATH env: ${WK_CHECKOUT_PATH}"
+else
+  cd "$HOME/webkit"
+fi
+
+if is_mac; then
+  selectXcodeVersionOrDie $(node "$SCRIPT_FOLDER/../get_xcode_version.js" webkit)
+  ./Tools/Scripts/build-webkit --release --touch-events --orientation-events
+elif is_linux; then
+  args=("$@")
+  IS_FULL=""
+  BUILD_GTK=""
+  BUILD_WPE=""
+  for ((i="${#args[@]}"-1; i >= 0; --i)); do
+      case ${args[i]} in
+          --full) IS_FULL="1"; unset args[i]; ;;
+          --gtk) BUILD_GTK="1"; unset args[i]; ;;
+          --wpe) BUILD_WPE="1"; unset args[i]; ;;
+          --universal) IS_UNIVERSAL_BUILD="1"; unset args[i]; ;;
+      esac
+  done
+
+  # if neither gtk nor wpe is requested then build both.
+  if [[ -z "${BUILD_GTK}" && -z "${BUILD_WPE}" ]]; then
+    BUILD_GTK="1"
+    BUILD_WPE="1"
+  fi
+
+  echo "== BUILD CONFIGURATION =="
+  if [[ -n "${IS_UNIVERSAL_BUILD}" ]]; then
+    echo "- universal build: YES"
+  else
+    echo "- universal build: NO"
+  fi
+  if [[ -n "${IS_FULL}" ]]; then
+    echo "- install dependencies: YES"
+  else
+    echo "- install dependencies: NO"
+  fi
+  if [[ -n "${BUILD_GTK}" ]]; then
+    echo "- build GTK: YES"
+  else
+    echo "- build GTK: NO"
+  fi
+  if [[ -n "${BUILD_WPE}" ]]; then
+    echo "- build WPE: YES"
+  else
+    echo "- build WPE: NO"
+  fi
+
+  if [[ -n "${IS_FULL}" ]]; then
+    ensure_linux_deps
+  fi
+
+  if [[ -n "${BUILD_WPE}" ]]; then
+    build_wpe
+  fi
+
+  if [[ -n "${BUILD_GTK}" ]]; then
+    build_gtk
+  fi
+elif is_win; then
+  /c/Windows/System32/cmd.exe "/c $(cygpath -w "${SCRIPT_FOLDER}"/buildwin.bat)"
+else
+  echo "ERROR: cannot upload on this platform!" 1>&2
+  exit 1;
+fi
diff --git a/browser_patches/webkit/buildwin.bat b/browser_patches/webkit/buildwin.bat
new file mode 100644
index 0000000000000000000000000000000000000000..d3e8dec042e85c268505216ffb87689621d83f16
--- /dev/null
+++ b/browser_patches/webkit/buildwin.bat
@@ -0,0 +1,5 @@
+set PATH=%WEBKIT_BUILD_PATH%
+set WEBKIT_LIBRARIES=%CD%\WebKitLibraries\win
+set WEBKIT_OUTPUTDIR=%CD%\WebKitBuild
+perl %CD%\Tools\Scripts\build-webkit --wincairo --release --no-ninja --touch-events --orientation-events --dark-mode-css --generate-project-only --cmakeargs="-DLIBVPX_PACKAGE_PATH=C:\vcpkg\packages\libvpx_x64-windows"
+%DEVENV% %CD%\WebKitBuild\Release\WebKit.sln /build "Release|x64"
diff --git a/browser_patches/webkit/clean.sh b/browser_patches/webkit/clean.sh
new file mode 100755
index 0000000000000000000000000000000000000000..fabc11297a4d79f2226e87f70ddd08257a1f6918
--- /dev/null
+++ b/browser_patches/webkit/clean.sh
@@ -0,0 +1,29 @@
+#!/bin/bash
+set -e
+set +x
+
+trap "cd $(pwd -P)" EXIT
+cd "$(dirname "$0")"
+
+source "../utils.sh"
+
+if [[ ! -z "${WK_CHECKOUT_PATH}" ]]; then
+  cd "${WK_CHECKOUT_PATH}"
+  echo "WARNING: checkout path from WK_CHECKOUT_PATH env: ${WK_CHECKOUT_PATH}"
+else
+  cd "$HOME/webkit"
+fi
+
+if is_mac; then
+  rm -rf ./WebKitBuild
+else
+  if [[ -d ./WebKitBuild ]]; then
+    rm -rf ./WebKitBuild/Release
+  fi
+  if [[ -d ./WebKitBuild/GTK ]]; then
+    rm -rf ./WebKitBuild/GTK/Release
+  fi
+  if [[ -d ./WebKitBuild/WPE ]]; then
+    rm -rf ./WebKitBuild/WPE/Release
+  fi
+fi
diff --git a/browser_patches/webkit/concat_protocol.js b/browser_patches/webkit/concat_protocol.js
new file mode 100644
index 0000000000000000000000000000000000000000..3e28fb6bb00a9922c3162bf07688ec0a72c20f98
--- /dev/null
+++ b/browser_patches/webkit/concat_protocol.js
@@ -0,0 +1,7 @@
+const fs = require('fs');
+const path = require('path');
+const checkoutPath = process.env.WK_CHECKOUT_PATH || path.join(process.env.HOME, 'webkit');
+const protocolDir = path.join(checkoutPath, './Source/JavaScriptCore/inspector/protocol');
+const files = fs.readdirSync(protocolDir).filter(f => f.endsWith('.json')).map(f => path.join(protocolDir, f));
+const json = files.map(file => JSON.parse(fs.readFileSync(file)));
+console.log(JSON.stringify(json));
diff --git a/browser_patches/webkit/patches/bootstrap.diff b/browser_patches/webkit/patches/bootstrap.diff
index f3aa2a9041e64189ce6206fdc8250c2b0c11b341..426925392ee9438287ba5b368248ceb7b34ce7f6 100644
--- a/browser_patches/webkit/patches/bootstrap.diff
+++ b/browser_patches/webkit/patches/bootstrap.diff
@@ -1,8 +1,8 @@
 diff --git a/Source/JavaScriptCore/CMakeLists.txt b/Source/JavaScriptCore/CMakeLists.txt
-index c2e1cda64b287749cb508203f8e0562dff62cec6..5799df8cc071219937a19d1a4d6893409dd6ae03 100644
+index b71df073763105a7a12865ba208ea44fe16dbcb1..df26de1579b2c0806c16b205736daf46df42ebe5 100644
 --- a/Source/JavaScriptCore/CMakeLists.txt
 +++ b/Source/JavaScriptCore/CMakeLists.txt
-@@ -1360,22 +1360,27 @@ set(JavaScriptCore_INSPECTOR_DOMAINS
+@@ -1358,22 +1358,27 @@ set(JavaScriptCore_INSPECTOR_DOMAINS
      ${JAVASCRIPTCORE_DIR}/inspector/protocol/CSS.json
      ${JAVASCRIPTCORE_DIR}/inspector/protocol/Canvas.json
      ${JAVASCRIPTCORE_DIR}/inspector/protocol/Console.json
@@ -31,10 +31,10 @@ index c2e1cda64b287749cb508203f8e0562dff62cec6..5799df8cc071219937a19d1a4d689340
      ${JAVASCRIPTCORE_DIR}/inspector/protocol/ServiceWorker.json
      ${JAVASCRIPTCORE_DIR}/inspector/protocol/Target.json
 diff --git a/Source/JavaScriptCore/DerivedSources.make b/Source/JavaScriptCore/DerivedSources.make
-index a1ee4b4a0563f2bb0fa07080da0f5b1c10bb6767..79cdd20c34092dd9cc8026128e6aba3bfac9e50a 100644
+index 92652ba9bcd53553ab52166b633a4f0d6263d324..da5c253e67adb8edec7df6af84fa65743972b63c 100644
 --- a/Source/JavaScriptCore/DerivedSources.make
 +++ b/Source/JavaScriptCore/DerivedSources.make
-@@ -291,22 +291,27 @@ INSPECTOR_DOMAINS := \
+@@ -290,22 +290,27 @@ INSPECTOR_DOMAINS := \
      $(JavaScriptCore)/inspector/protocol/CSS.json \
      $(JavaScriptCore)/inspector/protocol/Canvas.json \
      $(JavaScriptCore)/inspector/protocol/Console.json \
@@ -541,7 +541,7 @@ index e81573fd0fffaaf6fd2af36635c78fcdf8608c69..c8cde6cfcde9612624f12e21bd9fa56b
      // FrontendChannel
      FrontendChannel::ConnectionType connectionType() const;
 diff --git a/Source/JavaScriptCore/inspector/protocol/DOM.json b/Source/JavaScriptCore/inspector/protocol/DOM.json
-index 4c067acbce3e95883082561e24b2fe6febd9f61e..7923364429b32dbc1851177119201601ec200107 100644
+index 6b283d7f5f1804b921a0ffd175ddf5e66eed9fd1..e1a2a96bfed11a3186d59871132b3c7993e8fd4d 100644
 --- a/Source/JavaScriptCore/inspector/protocol/DOM.json
 +++ b/Source/JavaScriptCore/inspector/protocol/DOM.json
 @@ -80,6 +80,16 @@
@@ -578,7 +578,7 @@ index 4c067acbce3e95883082561e24b2fe6febd9f61e..7923364429b32dbc1851177119201601
          }
      ],
      "commands": [
-@@ -560,7 +580,9 @@
+@@ -559,7 +579,9 @@
              "description": "Resolves JavaScript node object for given node id.",
              "targetTypes": ["page"],
              "parameters": [
@@ -589,7 +589,7 @@ index 4c067acbce3e95883082561e24b2fe6febd9f61e..7923364429b32dbc1851177119201601
                  { "name": "objectGroup", "type": "string", "optional": true, "description": "Symbolic group name that can be used to release multiple objects." }
              ],
              "returns": [
-@@ -627,6 +649,46 @@
+@@ -626,6 +648,46 @@
              "parameters": [
                  { "name": "allow", "type": "boolean" }
              ]
@@ -983,7 +983,7 @@ index 96af27ece2ac200e11c4311b3ca0d9d3b5a048da..3168f7806fcbdabec07acc5e304bae1e
      ],
      "events": [
 diff --git a/Source/JavaScriptCore/inspector/protocol/Page.json b/Source/JavaScriptCore/inspector/protocol/Page.json
-index 1c97ad011c5ec183a5866bb98319badd5ec9442f..7a40d1c730b870a58f810cf3118b5004c8021017 100644
+index 1c97ad011c5ec183a5866bb98319badd5ec9442f..658937fdc58425b9a164d9bc368a9e61ed836918 100644
 --- a/Source/JavaScriptCore/inspector/protocol/Page.json
 +++ b/Source/JavaScriptCore/inspector/protocol/Page.json
 @@ -21,7 +21,14 @@
@@ -1002,7 +1002,7 @@ index 1c97ad011c5ec183a5866bb98319badd5ec9442f..7a40d1c730b870a58f810cf3118b5004
              ]
          },
          {
-@@ -49,6 +56,18 @@
+@@ -49,6 +56,12 @@
              "enum": ["Light", "Dark"],
              "description": "Page appearance name."
          },
@@ -1011,17 +1011,11 @@ index 1c97ad011c5ec183a5866bb98319badd5ec9442f..7a40d1c730b870a58f810cf3118b5004
 +            "type": "string",
 +            "enum": ["Reduce", "NoPreference"],
 +            "description": "Page reduced-motion media query override."
-+        },
-+        {
-+            "id": "ForcedColors",
-+            "type": "string",
-+            "enum": ["Active", "None"],
-+            "description": "Page forced-colors media query override."
 +        },
          {
              "id": "Frame",
              "type": "object",
-@@ -112,6 +131,51 @@
+@@ -112,6 +125,51 @@
                  { "name": "secure", "type": "boolean", "description": "True if cookie is secure." },
                  { "name": "sameSite", "$ref": "CookieSameSitePolicy", "description": "Cookie Same-Site policy." }
              ]
@@ -1073,7 +1067,7 @@ index 1c97ad011c5ec183a5866bb98319badd5ec9442f..7a40d1c730b870a58f810cf3118b5004
          }
      ],
      "commands": [
-@@ -131,6 +195,14 @@
+@@ -131,6 +189,14 @@
                  { "name": "revalidateAllResources", "type": "boolean", "optional": true, "description": "If true, all cached subresources will be revalidated when the main resource loads. Otherwise, only expired cached subresources will be revalidated (the default behavior for most WebKit clients)." }
              ]
          },
@@ -1088,7 +1082,7 @@ index 1c97ad011c5ec183a5866bb98319badd5ec9442f..7a40d1c730b870a58f810cf3118b5004
          {
              "name": "navigate",
              "description": "Navigates current page to the given URL.",
-@@ -147,6 +219,14 @@
+@@ -147,6 +213,14 @@
                  { "name": "value", "type": "string", "optional": true, "description": "Value to override the user agent with. If this value is not provided, the override is removed. Overrides are removed when Web Inspector closes/disconnects." }
              ]
          },
@@ -1103,7 +1097,7 @@ index 1c97ad011c5ec183a5866bb98319badd5ec9442f..7a40d1c730b870a58f810cf3118b5004
          {
              "name": "overrideSetting",
              "description": "Allows the frontend to override the inspected page's settings.",
-@@ -204,7 +284,8 @@
+@@ -204,7 +278,8 @@
              "name": "setBootstrapScript",
              "targetTypes": ["page"],
              "parameters": [
@@ -1113,7 +1107,7 @@ index 1c97ad011c5ec183a5866bb98319badd5ec9442f..7a40d1c730b870a58f810cf3118b5004
              ]
          },
          {
-@@ -270,6 +351,36 @@
+@@ -270,6 +345,28 @@
                  { "name": "appearance", "$ref": "Appearance", "optional": true }
              ]
          },
@@ -1126,14 +1120,6 @@ index 1c97ad011c5ec183a5866bb98319badd5ec9442f..7a40d1c730b870a58f810cf3118b5004
 +            ]
 +        },
 +        {
-+            "name": "setForcedColors",
-+            "description": "Forces the forced-colors media query for the page.",
-+            "targetTypes": ["page"],
-+            "parameters": [
-+                { "name": "forcedColors", "$ref": "ForcedColors", "optional": true }
-+            ]
-+        },
-+        {
 +            "name": "setTimeZone",
 +            "description": "Enables time zone emulation.",
 +            "parameters": [
@@ -1150,7 +1136,7 @@ index 1c97ad011c5ec183a5866bb98319badd5ec9442f..7a40d1c730b870a58f810cf3118b5004
          {
              "name": "snapshotNode",
              "description": "Capture a snapshot of the specified node that does not include unrelated layers.",
-@@ -290,7 +401,8 @@
+@@ -290,7 +387,8 @@
                  { "name": "y", "type": "integer", "description": "Y coordinate" },
                  { "name": "width", "type": "integer", "description": "Rectangle width" },
                  { "name": "height", "type": "integer", "description": "Rectangle height" },
@@ -1160,7 +1146,7 @@ index 1c97ad011c5ec183a5866bb98319badd5ec9442f..7a40d1c730b870a58f810cf3118b5004
              ],
              "returns": [
                  { "name": "dataURL", "type": "string", "description": "Base64-encoded image data (PNG)." }
-@@ -308,12 +420,92 @@
+@@ -308,12 +406,92 @@
          {
              "name": "setScreenSizeOverride",
              "description": "Overrides screen size exposed to DOM and used in media queries for testing with provided values.",
@@ -1254,7 +1240,7 @@ index 1c97ad011c5ec183a5866bb98319badd5ec9442f..7a40d1c730b870a58f810cf3118b5004
          }
      ],
      "events": [
-@@ -321,14 +513,16 @@
+@@ -321,14 +499,16 @@
              "name": "domContentEventFired",
              "targetTypes": ["page"],
              "parameters": [
@@ -1273,7 +1259,7 @@ index 1c97ad011c5ec183a5866bb98319badd5ec9442f..7a40d1c730b870a58f810cf3118b5004
              ]
          },
          {
-@@ -338,6 +532,14 @@
+@@ -338,6 +518,14 @@
                  { "name": "frame", "$ref": "Frame", "description": "Frame object." }
              ]
          },
@@ -1288,7 +1274,7 @@ index 1c97ad011c5ec183a5866bb98319badd5ec9442f..7a40d1c730b870a58f810cf3118b5004
          {
              "name": "frameDetached",
              "description": "Fired when frame has been detached from its parent.",
-@@ -377,6 +579,22 @@
+@@ -377,6 +565,22 @@
                  { "name": "frameId", "$ref": "Network.FrameId", "description": "Id of the frame that has cleared its scheduled navigation." }
              ]
          },
@@ -1311,7 +1297,7 @@ index 1c97ad011c5ec183a5866bb98319badd5ec9442f..7a40d1c730b870a58f810cf3118b5004
          {
              "name": "defaultAppearanceDidChange",
              "description": "Fired when page's default appearance changes, even if there is a forced appearance.",
-@@ -385,6 +603,42 @@
+@@ -385,6 +589,42 @@
              "parameters": [
                  { "name": "appearance", "$ref": "Appearance", "description": "Name of the appearance that is active (not considering any forced appearance.)" }
              ]
@@ -1860,13 +1846,13 @@ index 0d42c17c6a85b2a9f6af319431332f7f8a709188..8899c8e85b11db81d1da14c7f2781488
      Source/third_party/opus/src/celt
      Source/third_party/opus/src/include
 diff --git a/Source/ThirdParty/libwebrtc/Configurations/libwebrtc.mac.exp b/Source/ThirdParty/libwebrtc/Configurations/libwebrtc.mac.exp
-index 0a36256d0da1126ff93c39f189e76a2f5f282094..db1fe9fab24f4480b0e067c9022f731d717d98b6 100644
+index 4157c0a95fa332ac85a295814fda2fb61f3da434..f77a990c1a52f3ab2943a02a4375bb71d91c1656 100644
 --- a/Source/ThirdParty/libwebrtc/Configurations/libwebrtc.mac.exp
 +++ b/Source/ThirdParty/libwebrtc/Configurations/libwebrtc.mac.exp
-@@ -339,3 +339,24 @@ __ZN6webrtc25CreateTaskQueueGcdFactoryEv
+@@ -338,3 +338,24 @@ __ZN6webrtc32createPixelBufferFromFrameBufferERNS_16VideoFrameBufferERKNSt3__18f
+ __ZN6webrtc25CreateTaskQueueGcdFactoryEv
  __ZN6webrtc27CreatePeerConnectionFactoryEPN3rtc6ThreadES2_S2_NS0_13scoped_refptrINS_17AudioDeviceModuleEEENS3_INS_19AudioEncoderFactoryEEENS3_INS_19AudioDecoderFactoryEEENSt3__110unique_ptrINS_19VideoEncoderFactoryENSA_14default_deleteISC_EEEENSB_INS_19VideoDecoderFactoryENSD_ISG_EEEENS3_INS_10AudioMixerEEENS3_INS_15AudioProcessingEEEPNS_19AudioFrameProcessorENSB_INS_16TaskQueueFactoryENSD_ISP_EEEE
  __ZN6webrtc16convertBGRAToYUVEP10__CVBufferS1_
- __ZNK7cricket9Candidate16ToStringInternalEb
 +__ZN8mkvmuxer11SegmentInfo15set_writing_appEPKc
 +__ZN8mkvmuxer11SegmentInfo4InitEv
 +__ZN8mkvmuxer7Segment10OutputCuesEb
@@ -2093,7 +2079,7 @@ index e4b94b59216277aae01696e6d4846abf8f287dce..8cbe085788ba582ee4615faef20769b6
  			isa = XCConfigurationList;
  			buildConfigurations = (
 diff --git a/Source/WTF/Scripts/Preferences/WebPreferences.yaml b/Source/WTF/Scripts/Preferences/WebPreferences.yaml
-index 909094b0ff2cc7273f3d4ac96cf4498f0d0c6e50..51958e6eba239952f834978515b6a3c72a2a52dd 100644
+index a5b4d51f561db15f1b65c5ce06bfd543abe2acbb..fcd47eee3d2b5e48958d90e93ec46b686acc334b 100644
 --- a/Source/WTF/Scripts/Preferences/WebPreferences.yaml
 +++ b/Source/WTF/Scripts/Preferences/WebPreferences.yaml
 @@ -977,7 +977,7 @@ InspectorStartsAttached:
@@ -2124,10 +2110,10 @@ index 909094b0ff2cc7273f3d4ac96cf4498f0d0c6e50..51958e6eba239952f834978515b6a3c7
    type: bool
    humanReadableName: "Private Click Measurement"
 diff --git a/Source/WTF/Scripts/Preferences/WebPreferencesExperimental.yaml b/Source/WTF/Scripts/Preferences/WebPreferencesExperimental.yaml
-index 3b939d4dc4783e89183439a8a245b0311f0957d1..1258e9d46afb9e008009dd60f23f1f74ec79159c 100644
+index a8d409cc3083fc4d9bd91e9e34effc020802c40d..77c0e4de37cf97549c91eee7630f997acd06edb6 100644
 --- a/Source/WTF/Scripts/Preferences/WebPreferencesExperimental.yaml
 +++ b/Source/WTF/Scripts/Preferences/WebPreferencesExperimental.yaml
-@@ -539,7 +539,7 @@ CrossOriginOpenerPolicyEnabled:
+@@ -527,7 +527,7 @@ CrossOriginOpenerPolicyEnabled:
      WebKitLegacy:
        default: false
      WebKit:
@@ -2136,7 +2122,7 @@ index 3b939d4dc4783e89183439a8a245b0311f0957d1..1258e9d46afb9e008009dd60f23f1f74
      WebCore:
        default: false
  
-@@ -872,6 +872,7 @@ IsThirdPartyCookieBlockingDisabled:
+@@ -836,6 +836,7 @@ IsThirdPartyCookieBlockingDisabled:
      WebCore:
        default: false
  
@@ -2144,7 +2130,7 @@ index 3b939d4dc4783e89183439a8a245b0311f0957d1..1258e9d46afb9e008009dd60f23f1f74
  LazyIframeLoadingEnabled:
    type: bool
    humanReadableName: "Lazy iframe loading"
-@@ -880,9 +881,9 @@ LazyIframeLoadingEnabled:
+@@ -844,9 +845,9 @@ LazyIframeLoadingEnabled:
      WebKitLegacy:
        default: true
      WebKit:
@@ -2156,7 +2142,7 @@ index 3b939d4dc4783e89183439a8a245b0311f0957d1..1258e9d46afb9e008009dd60f23f1f74
  
  LazyImageLoadingEnabled:
    type: bool
-@@ -941,9 +942,9 @@ MaskWebGLStringsEnabled:
+@@ -905,9 +906,9 @@ MaskWebGLStringsEnabled:
      WebKitLegacy:
        default: true
      WebKit:
@@ -2168,7 +2154,7 @@ index 3b939d4dc4783e89183439a8a245b0311f0957d1..1258e9d46afb9e008009dd60f23f1f74
  
  # FIXME: This is on by default in WebKit2. Perhaps we should consider turning it on for WebKitLegacy as well.
  MediaCapabilitiesExtensionsEnabled:
-@@ -1462,7 +1463,7 @@ SpeechRecognitionEnabled:
+@@ -1402,7 +1403,7 @@ SpeechRecognitionEnabled:
      WebKitLegacy:
        default: false
      WebKit:
@@ -2177,7 +2163,7 @@ index 3b939d4dc4783e89183439a8a245b0311f0957d1..1258e9d46afb9e008009dd60f23f1f74
        default: false
      WebCore:
        default: false
-@@ -1577,6 +1578,7 @@ UseGPUProcessForDisplayCapture:
+@@ -1517,6 +1518,7 @@ UseGPUProcessForDisplayCapture:
      WebKit:
        default: true
  
@@ -2185,7 +2171,7 @@ index 3b939d4dc4783e89183439a8a245b0311f0957d1..1258e9d46afb9e008009dd60f23f1f74
  UseGPUProcessForWebGLEnabled:
    type: bool
    humanReadableName: "GPU Process: WebGL"
-@@ -1587,7 +1589,7 @@ UseGPUProcessForWebGLEnabled:
+@@ -1527,7 +1529,7 @@ UseGPUProcessForWebGLEnabled:
        default: false
      WebKit:
        "ENABLE(GPU_PROCESS_BY_DEFAULT) && PLATFORM(IOS_FAMILY) && !HAVE(UIKIT_WEBKIT_INTERNALS)": true
@@ -2195,7 +2181,7 @@ index 3b939d4dc4783e89183439a8a245b0311f0957d1..1258e9d46afb9e008009dd60f23f1f74
      WebCore:
        "ENABLE(GPU_PROCESS_BY_DEFAULT) && PLATFORM(IOS_FAMILY) && !HAVE(UIKIT_WEBKIT_INTERNALS)": true
 diff --git a/Source/WTF/Scripts/Preferences/WebPreferencesInternal.yaml b/Source/WTF/Scripts/Preferences/WebPreferencesInternal.yaml
-index 4ab12fa7bb55377e66167b4f5686abfce6b3e297..27fa81ae823bc360964422bfea153f9253867075 100644
+index 300442b8d77f136580f2f1798675fc5dfec3f10a..8deb58b1de178c6343c42d2632d1ccfabbc68ac4 100644
 --- a/Source/WTF/Scripts/Preferences/WebPreferencesInternal.yaml
 +++ b/Source/WTF/Scripts/Preferences/WebPreferencesInternal.yaml
 @@ -979,6 +979,7 @@ UseCGDisplayListsForDOMRendering:
@@ -2216,7 +2202,7 @@ index 4ab12fa7bb55377e66167b4f5686abfce6b3e297..27fa81ae823bc360964422bfea153f92
  
  UseGPUProcessForMediaEnabled:
 diff --git a/Source/WTF/wtf/PlatformEnable.h b/Source/WTF/wtf/PlatformEnable.h
-index 8863f57db1e6a6c21b61fe7598a39806d1be4028..30ebe6a4609540551c64fd0d7ec49a6afda54338 100644
+index 1db561ba6e2db93225956abb259db78e0c024351..b86aaa95fca156ef7d58023c396d54e144f1d6fb 100644
 --- a/Source/WTF/wtf/PlatformEnable.h
 +++ b/Source/WTF/wtf/PlatformEnable.h
 @@ -416,7 +416,7 @@
@@ -2238,10 +2224,10 @@ index 8863f57db1e6a6c21b61fe7598a39806d1be4028..30ebe6a4609540551c64fd0d7ec49a6a
  
  #if !defined(ENABLE_TOUCH_ACTION_REGIONS)
 diff --git a/Source/WTF/wtf/PlatformEnableCocoa.h b/Source/WTF/wtf/PlatformEnableCocoa.h
-index 37a6ac6ffce784d6663dcbe08b948eb63e22e572..c7921895e3700e28a4d625647f5beb825877a265 100644
+index 1ef19df97cc65686046fce039176d1c9d774af9a..797164f3bfa80d0d22d1b263d913b80bb5de9a51 100644
 --- a/Source/WTF/wtf/PlatformEnableCocoa.h
 +++ b/Source/WTF/wtf/PlatformEnableCocoa.h
-@@ -255,7 +255,7 @@
+@@ -247,7 +247,7 @@
  #define ENABLE_DATA_DETECTION 1
  #endif
  
@@ -2251,10 +2237,10 @@ index 37a6ac6ffce784d6663dcbe08b948eb63e22e572..c7921895e3700e28a4d625647f5beb82
  #endif
  
 diff --git a/Source/WTF/wtf/PlatformHave.h b/Source/WTF/wtf/PlatformHave.h
-index 19d254d65173b8d0c373bb800cd0d09dae119c9f..27e9d7283d9250643c55a27a80cb0ca851d45ae5 100644
+index d70f3608e994ce06dead2af85f6e354e6cf16ca9..79c810db427a2b277fec97a0580e302c8bedb2ed 100644
 --- a/Source/WTF/wtf/PlatformHave.h
 +++ b/Source/WTF/wtf/PlatformHave.h
-@@ -422,7 +422,7 @@
+@@ -426,7 +426,7 @@
  #define HAVE_FOUNDATION_WITH_SAME_SITE_COOKIE_SUPPORT 1
  #endif
  
@@ -2263,7 +2249,7 @@ index 19d254d65173b8d0c373bb800cd0d09dae119c9f..27e9d7283d9250643c55a27a80cb0ca8
  #define HAVE_OS_DARK_MODE_SUPPORT 1
  #endif
  
-@@ -1302,7 +1302,8 @@
+@@ -1301,7 +1301,8 @@
  #endif
  
  #if PLATFORM(MAC)
@@ -2274,10 +2260,10 @@ index 19d254d65173b8d0c373bb800cd0d09dae119c9f..27e9d7283d9250643c55a27a80cb0ca8
  
  #if (!defined(HAVE_LOCKDOWN_MODE_PDF_ADDITIONS) && \
 diff --git a/Source/WebCore/DerivedSources.make b/Source/WebCore/DerivedSources.make
-index 3fed02ead342e0beaf5297ea2f1af76d7f64325e..8e02fef515ebecc187c8668cec9ba5c745eec029 100644
+index 8e0fa01deda72cb7abde61793297f8073077f93a..441d7c0fca693c5c187f1d129e7d5bdcaa280f14 100644
 --- a/Source/WebCore/DerivedSources.make
 +++ b/Source/WebCore/DerivedSources.make
-@@ -995,6 +995,10 @@ JS_BINDING_IDLS := \
+@@ -986,6 +986,10 @@ JS_BINDING_IDLS := \
      $(WebCore)/dom/Slotable.idl \
      $(WebCore)/dom/StaticRange.idl \
      $(WebCore)/dom/StringCallback.idl \
@@ -2288,7 +2274,7 @@ index 3fed02ead342e0beaf5297ea2f1af76d7f64325e..8e02fef515ebecc187c8668cec9ba5c7
      $(WebCore)/dom/Text.idl \
      $(WebCore)/dom/TextDecoder.idl \
      $(WebCore)/dom/TextDecoderStream.idl \
-@@ -1543,9 +1547,6 @@ JS_BINDING_IDLS := \
+@@ -1534,9 +1538,6 @@ JS_BINDING_IDLS := \
  ADDITIONAL_BINDING_IDLS = \
      DocumentTouch.idl \
      GestureEvent.idl \
@@ -2313,23 +2299,11 @@ index a0f3a2f50826db31cf7d6c133e4dfc47bac27528..a09ba013dc815b3f14f67ce799c2edb4
              return false;
      }
  
-diff --git a/Source/WebCore/Modules/speech/SpeechSynthesisErrorEventInit.h b/Source/WebCore/Modules/speech/SpeechSynthesisErrorEventInit.h
-index 2472c255319384d9f7361130f2db186b82875e9c..c9f8884711ef948a2d426b1afb21d12cf9e47848 100644
---- a/Source/WebCore/Modules/speech/SpeechSynthesisErrorEventInit.h
-+++ b/Source/WebCore/Modules/speech/SpeechSynthesisErrorEventInit.h
-@@ -28,6 +28,7 @@
- #if ENABLE(SPEECH_SYNTHESIS)
- 
- #include "SpeechSynthesisEventInit.h"
-+#include "SpeechSynthesisErrorCode.h"
- 
- namespace WebCore {
- 
 diff --git a/Source/WebCore/Modules/speech/cocoa/WebSpeechRecognizerTask.mm b/Source/WebCore/Modules/speech/cocoa/WebSpeechRecognizerTask.mm
 index a941d76a4f748718df1e3cff2a6c5e0827f48891..f62db5a27ac0e4c12430e7d19e60c83d768ace22 100644
 --- a/Source/WebCore/Modules/speech/cocoa/WebSpeechRecognizerTask.mm
 +++ b/Source/WebCore/Modules/speech/cocoa/WebSpeechRecognizerTask.mm
-@@ -198,6 +198,7 @@ NS_ASSUME_NONNULL_BEGIN
+@@ -198,6 +198,7 @@ - (void)sendEndIfNeeded
  
  - (void)speechRecognizer:(SFSpeechRecognizer *)speechRecognizer availabilityDidChange:(BOOL)available
  {
@@ -2337,7 +2311,7 @@ index a941d76a4f748718df1e3cff2a6c5e0827f48891..f62db5a27ac0e4c12430e7d19e60c83d
      ASSERT(isMainThread());
  
      if (available || !_task)
-@@ -211,6 +212,7 @@ NS_ASSUME_NONNULL_BEGIN
+@@ -211,6 +212,7 @@ - (void)speechRecognizer:(SFSpeechRecognizer *)speechRecognizer availabilityDidC
  
  - (void)speechRecognitionTask:(SFSpeechRecognitionTask *)task didHypothesizeTranscription:(SFTranscription *)transcription
  {
@@ -2345,7 +2319,7 @@ index a941d76a4f748718df1e3cff2a6c5e0827f48891..f62db5a27ac0e4c12430e7d19e60c83d
      ASSERT(isMainThread());
  
      [self sendSpeechStartIfNeeded];
-@@ -219,6 +221,7 @@ NS_ASSUME_NONNULL_BEGIN
+@@ -219,6 +221,7 @@ - (void)speechRecognitionTask:(SFSpeechRecognitionTask *)task didHypothesizeTran
  
  - (void)speechRecognitionTask:(SFSpeechRecognitionTask *)task didFinishRecognition:(SFSpeechRecognitionResult *)recognitionResult
  {
@@ -2353,7 +2327,7 @@ index a941d76a4f748718df1e3cff2a6c5e0827f48891..f62db5a27ac0e4c12430e7d19e60c83d
      ASSERT(isMainThread());
      [self callbackWithTranscriptions:recognitionResult.transcriptions isFinal:YES];
  
-@@ -230,6 +233,7 @@ NS_ASSUME_NONNULL_BEGIN
+@@ -230,6 +233,7 @@ - (void)speechRecognitionTask:(SFSpeechRecognitionTask *)task didFinishRecogniti
  
  - (void)speechRecognitionTaskWasCancelled:(SFSpeechRecognitionTask *)task
  {
@@ -2362,7 +2336,7 @@ index a941d76a4f748718df1e3cff2a6c5e0827f48891..f62db5a27ac0e4c12430e7d19e60c83d
  
      [self sendSpeechEndIfNeeded];
 diff --git a/Source/WebCore/PlatformWPE.cmake b/Source/WebCore/PlatformWPE.cmake
-index 7fc5555344b50da4ca98634b93afda82d27723fb..1557731c79df84aecc9d17297dc0107fe96c02a7 100644
+index 9604d21ceb51ab8d20a337c8dbe52c4059043d2c..86a9eec09c4ac457bdd4567eeab570210c1beec3 100644
 --- a/Source/WebCore/PlatformWPE.cmake
 +++ b/Source/WebCore/PlatformWPE.cmake
 @@ -49,6 +49,7 @@ list(APPEND WebCore_PRIVATE_FRAMEWORK_HEADERS
@@ -2374,10 +2348,10 @@ index 7fc5555344b50da4ca98634b93afda82d27723fb..1557731c79df84aecc9d17297dc0107f
  
  set(CSS_VALUE_PLATFORM_DEFINES "HAVE_OS_DARK_MODE_SUPPORT=1")
 diff --git a/Source/WebCore/SourcesCocoa.txt b/Source/WebCore/SourcesCocoa.txt
-index 9d1777db8db0f19e0bf93f027878d882e0b4e268..97c4a6ac951e302086d8e91ad431bcea26607e09 100644
+index f7180ed1d61cfa31b6d2efecd5b6f8a012fef8c2..bc9e0fa2695c53e2efa17f82a820b5d25dab841b 100644
 --- a/Source/WebCore/SourcesCocoa.txt
 +++ b/Source/WebCore/SourcesCocoa.txt
-@@ -641,3 +641,9 @@ platform/graphics/angle/GraphicsContextGLANGLE.cpp @no-unify
+@@ -640,3 +640,9 @@ platform/graphics/angle/GraphicsContextGLANGLE.cpp @no-unify
  platform/graphics/cocoa/ANGLEUtilitiesCocoa.cpp @no-unify
  platform/graphics/cocoa/GraphicsContextGLCocoa.mm @no-unify
  platform/graphics/cv/GraphicsContextGLCVCocoa.cpp @no-unify
@@ -2403,7 +2377,7 @@ index a2504495796d1d625afd0092ffd21739be30470f..64be77d2ed6ef550e1f7d6779516187b
 +JSSpeechSynthesisEventInit.cpp
 +// Playwright: end.
 diff --git a/Source/WebCore/SourcesWPE.txt b/Source/WebCore/SourcesWPE.txt
-index fe289785470b37d3bb774c1891a829f5fffa7562..8ef19ee128531a523f72cb6fe5f7b386200a5497 100644
+index 3351067102d0e96e185ec0e6ac01bf7273346de3..4ba7934bb5ec781525bb732dbe0736ee67d415be 100644
 --- a/Source/WebCore/SourcesWPE.txt
 +++ b/Source/WebCore/SourcesWPE.txt
 @@ -43,6 +43,8 @@ editing/libwpe/EditorLibWPE.cpp
@@ -2415,7 +2389,7 @@ index fe289785470b37d3bb774c1891a829f5fffa7562..8ef19ee128531a523f72cb6fe5f7b386
  page/linux/ResourceUsageOverlayLinux.cpp
  page/linux/ResourceUsageThreadLinux.cpp
  
-@@ -96,8 +98,19 @@ platform/text/LocaleICU.cpp
+@@ -93,8 +95,19 @@ platform/text/LocaleICU.cpp
  
  platform/unix/LoggingUnix.cpp
  
@@ -2448,10 +2422,10 @@ index a5938677622935e2c6ca3ed76c3a12d0eb7e04a7..cea2a0e330cfdf01b172b3f6acc60acb
  __ZN7WebCore14DocumentLoaderD2Ev
  __ZN7WebCore14DocumentLoader17clearMainResourceEv
 diff --git a/Source/WebCore/WebCore.xcodeproj/project.pbxproj b/Source/WebCore/WebCore.xcodeproj/project.pbxproj
-index 92762a6dca95eb30c8f9ff80201b909f610d5559..2a34779040a21f18ee125fd83a7901c98e71c64e 100644
+index 874e7f94bfeeccfc82875a348cd6bd9779ad7d6b..ee833911db5c5391de1bf827ec46e052f6e7598c 100644
 --- a/Source/WebCore/WebCore.xcodeproj/project.pbxproj
 +++ b/Source/WebCore/WebCore.xcodeproj/project.pbxproj
-@@ -5599,6 +5599,13 @@
+@@ -5578,6 +5578,13 @@
  		EDE3A5000C7A430600956A37 /* ColorMac.h in Headers */ = {isa = PBXBuildFile; fileRef = EDE3A4FF0C7A430600956A37 /* ColorMac.h */; settings = {ATTRIBUTES = (Private, ); }; };
  		EDEC98030AED7E170059137F /* WebCorePrefix.h in Headers */ = {isa = PBXBuildFile; fileRef = EDEC98020AED7E170059137F /* WebCorePrefix.h */; };
  		EFCC6C8F20FE914400A2321B /* CanvasActivityRecord.h in Headers */ = {isa = PBXBuildFile; fileRef = EFCC6C8D20FE914000A2321B /* CanvasActivityRecord.h */; settings = {ATTRIBUTES = (Private, ); }; };
@@ -2465,7 +2439,7 @@ index 92762a6dca95eb30c8f9ff80201b909f610d5559..2a34779040a21f18ee125fd83a7901c9
  		F12171F616A8CF0B000053CA /* WebVTTElement.h in Headers */ = {isa = PBXBuildFile; fileRef = F12171F416A8BC63000053CA /* WebVTTElement.h */; };
  		F32BDCD92363AACA0073B6AE /* UserGestureEmulationScope.h in Headers */ = {isa = PBXBuildFile; fileRef = F32BDCD72363AACA0073B6AE /* UserGestureEmulationScope.h */; };
  		F344C7141125B82C00F26EEE /* InspectorFrontendClient.h in Headers */ = {isa = PBXBuildFile; fileRef = F344C7121125B82C00F26EEE /* InspectorFrontendClient.h */; settings = {ATTRIBUTES = (Private, ); }; };
-@@ -18111,6 +18118,14 @@
+@@ -18041,6 +18048,14 @@
  		EDEC98020AED7E170059137F /* WebCorePrefix.h */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.c.h; path = WebCorePrefix.h; sourceTree = "<group>"; tabWidth = 4; usesTabs = 0; };
  		EFB7287B2124C73D005C2558 /* CanvasActivityRecord.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = CanvasActivityRecord.cpp; sourceTree = "<group>"; };
  		EFCC6C8D20FE914000A2321B /* CanvasActivityRecord.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = CanvasActivityRecord.h; sourceTree = "<group>"; };
@@ -2480,7 +2454,7 @@ index 92762a6dca95eb30c8f9ff80201b909f610d5559..2a34779040a21f18ee125fd83a7901c9
  		F12171F316A8BC63000053CA /* WebVTTElement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = WebVTTElement.cpp; sourceTree = "<group>"; };
  		F12171F416A8BC63000053CA /* WebVTTElement.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WebVTTElement.h; sourceTree = "<group>"; };
  		F32BDCD52363AAC90073B6AE /* UserGestureEmulationScope.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = UserGestureEmulationScope.cpp; sourceTree = "<group>"; };
-@@ -24856,6 +24871,11 @@
+@@ -24768,6 +24783,11 @@
  				BC4A5324256055590028C592 /* TextDirectionSubmenuInclusionBehavior.h */,
  				2D4F96F11A1ECC240098BF88 /* TextIndicator.cpp */,
  				2D4F96F21A1ECC240098BF88 /* TextIndicator.h */,
@@ -2492,7 +2466,7 @@ index 92762a6dca95eb30c8f9ff80201b909f610d5559..2a34779040a21f18ee125fd83a7901c9
  				F48570A42644C76D00C05F71 /* TranslationContextMenuInfo.h */,
  				F4E1965F21F26E4E00285078 /* UndoItem.cpp */,
  				2ECDBAD521D8906300F00ECD /* UndoItem.h */,
-@@ -30712,6 +30732,8 @@
+@@ -30597,6 +30617,8 @@
  				29E4D8DF16B0940F00C84704 /* PlatformSpeechSynthesizer.h */,
  				1AD8F81A11CAB9E900E93E54 /* PlatformStrategies.cpp */,
  				1AD8F81911CAB9E900E93E54 /* PlatformStrategies.h */,
@@ -2501,7 +2475,7 @@ index 92762a6dca95eb30c8f9ff80201b909f610d5559..2a34779040a21f18ee125fd83a7901c9
  				0FD7C21D23CE41E30096D102 /* PlatformWheelEvent.cpp */,
  				935C476A09AC4D4F00A6AAB4 /* PlatformWheelEvent.h */,
  				BCBB8AB513F1AFB000734DF0 /* PODInterval.h */,
-@@ -33072,6 +33094,7 @@
+@@ -32942,6 +32964,7 @@
  				AD6E71AB1668899D00320C13 /* DocumentSharedObjectPool.h */,
  				6BDB5DC1227BD3B800919770 /* DocumentStorageAccess.cpp */,
  				6BDB5DC0227BD3B800919770 /* DocumentStorageAccess.h */,
@@ -2509,7 +2483,7 @@ index 92762a6dca95eb30c8f9ff80201b909f610d5559..2a34779040a21f18ee125fd83a7901c9
  				7CE7FA5B1EF882300060C9D6 /* DocumentTouch.cpp */,
  				7CE7FA591EF882300060C9D6 /* DocumentTouch.h */,
  				A8185F3209765765005826D9 /* DocumentType.cpp */,
-@@ -37393,6 +37416,8 @@
+@@ -37246,6 +37269,8 @@
  				1AD8F81B11CAB9E900E93E54 /* PlatformStrategies.h in Headers */,
  				0F7D07331884C56C00B4AF86 /* PlatformTextTrack.h in Headers */,
  				074E82BB18A69F0E007EF54C /* PlatformTimeRanges.h in Headers */,
@@ -2518,7 +2492,7 @@ index 92762a6dca95eb30c8f9ff80201b909f610d5559..2a34779040a21f18ee125fd83a7901c9
  				CDD08ABD277E542600EA3755 /* PlatformTrackConfiguration.h in Headers */,
  				CD1F9B022700323D00617EB6 /* PlatformVideoColorPrimaries.h in Headers */,
  				CD1F9B01270020B700617EB6 /* PlatformVideoColorSpace.h in Headers */,
-@@ -38546,6 +38571,7 @@
+@@ -38392,6 +38417,7 @@
  				0F54DD081881D5F5003EEDBB /* Touch.h in Headers */,
  				71B7EE0D21B5C6870031C1EF /* TouchAction.h in Headers */,
  				0F54DD091881D5F5003EEDBB /* TouchEvent.h in Headers */,
@@ -2526,7 +2500,7 @@ index 92762a6dca95eb30c8f9ff80201b909f610d5559..2a34779040a21f18ee125fd83a7901c9
  				0F54DD0A1881D5F5003EEDBB /* TouchList.h in Headers */,
  				070334D71459FFD5008D8D45 /* TrackBase.h in Headers */,
  				BE88E0C21715CE2600658D98 /* TrackListBase.h in Headers */,
-@@ -39491,6 +39517,7 @@
+@@ -39335,6 +39361,7 @@
  				1ABA76CA11D20E50004C201C /* CSSPropertyNames.cpp in Sources */,
  				2D22830323A8470700364B7E /* CursorMac.mm in Sources */,
  				5CBD59592280E926002B22AA /* CustomHeaderFields.cpp in Sources */,
@@ -2534,7 +2508,7 @@ index 92762a6dca95eb30c8f9ff80201b909f610d5559..2a34779040a21f18ee125fd83a7901c9
  				7CE6CBFD187F394900D46BF5 /* FormatConverter.cpp in Sources */,
  				5130F2F624AEA60A00E1D0A0 /* GameControllerSoftLink.mm in Sources */,
  				51A4BB0A1954D61600FA5C2E /* Gamepad.cpp in Sources */,
-@@ -39568,6 +39595,9 @@
+@@ -39412,6 +39439,9 @@
  				C1692DD223D23ABD006E88F7 /* SystemBattery.mm in Sources */,
  				CE88EE262414467B007F29C2 /* TextAlternativeWithRange.mm in Sources */,
  				51DF6D800B92A18E00C2DC85 /* ThreadCheck.mm in Sources */,
@@ -2545,7 +2519,7 @@ index 92762a6dca95eb30c8f9ff80201b909f610d5559..2a34779040a21f18ee125fd83a7901c9
  				538EC8021F96AF81004D22A8 /* UnifiedSource1.cpp in Sources */,
  				538EC8051F96AF81004D22A8 /* UnifiedSource2-mm.mm in Sources */,
 diff --git a/Source/WebCore/accessibility/AccessibilityObject.cpp b/Source/WebCore/accessibility/AccessibilityObject.cpp
-index 12f2f786ac833ec6b856b163342c166341cad932..38b335492530db8eec03686e5d2d5b745e1a0c6c 100644
+index fef2076253c6e059114860dc04b208f53bc3df42..ec5cc2c3cf55fb178b9e5259fb487f80c5b23456 100644
 --- a/Source/WebCore/accessibility/AccessibilityObject.cpp
 +++ b/Source/WebCore/accessibility/AccessibilityObject.cpp
 @@ -61,6 +61,7 @@
@@ -2556,7 +2530,7 @@ index 12f2f786ac833ec6b856b163342c166341cad932..38b335492530db8eec03686e5d2d5b74
  #include "LocalizedStrings.h"
  #include "MathMLNames.h"
  #include "NodeList.h"
-@@ -3758,9 +3759,14 @@ AccessibilityObjectInclusion AccessibilityObject::defaultObjectInclusion() const
+@@ -3762,9 +3763,14 @@ AccessibilityObjectInclusion AccessibilityObject::defaultObjectInclusion() const
      if (roleValue() == AccessibilityRole::ApplicationDialog)
          return AccessibilityObjectInclusion::IncludeObject;
  
@@ -2574,7 +2548,7 @@ index 12f2f786ac833ec6b856b163342c166341cad932..38b335492530db8eec03686e5d2d5b74
  {
      AXComputedObjectAttributeCache* attributeCache = nullptr;
 diff --git a/Source/WebCore/accessibility/AccessibilityObjectInterface.h b/Source/WebCore/accessibility/AccessibilityObjectInterface.h
-index 8aaa2178da795e5586abd0792b43a0671714c34d..51ed0a4b014f32bc90d299656eba206ec1f8ccd3 100644
+index ac383692edc6a32a3a40d58fa4f3953372e14a0c..398c271d1016fae5126f3e1c526eacb1e2145f03 100644
 --- a/Source/WebCore/accessibility/AccessibilityObjectInterface.h
 +++ b/Source/WebCore/accessibility/AccessibilityObjectInterface.h
 @@ -57,7 +57,7 @@ typedef const struct __AXTextMarkerRange* AXTextMarkerRangeRef;
@@ -2586,7 +2560,7 @@ index 8aaa2178da795e5586abd0792b43a0671714c34d..51ed0a4b014f32bc90d299656eba206e
  #endif
  
  namespace PAL {
-@@ -1516,6 +1516,8 @@ private:
+@@ -1558,6 +1558,8 @@ private:
      COMPtr<AccessibilityObjectWrapper> m_wrapper;
  #elif USE(ATSPI)
      RefPtr<AccessibilityObjectAtspi> m_wrapper;
@@ -2596,10 +2570,10 @@ index 8aaa2178da795e5586abd0792b43a0671714c34d..51ed0a4b014f32bc90d299656eba206e
      virtual void detachPlatformWrapper(AccessibilityDetachmentType) = 0;
  };
 diff --git a/Source/WebCore/bindings/js/WebCoreBuiltinNames.h b/Source/WebCore/bindings/js/WebCoreBuiltinNames.h
-index 472716d33f0c0f105b1c81a06fba0e60a4260d76..383837148b8b7a5eb39bba73bb505a0f7b0a0a7c 100644
+index 9dd8961100cc0f5bd89fcc4f96e742b065d9657b..39ab8b145c45b526536825407cf66676c99e3586 100644
 --- a/Source/WebCore/bindings/js/WebCoreBuiltinNames.h
 +++ b/Source/WebCore/bindings/js/WebCoreBuiltinNames.h
-@@ -158,6 +158,8 @@ namespace WebCore {
+@@ -157,6 +157,8 @@ namespace WebCore {
      macro(DecompressionStreamDecoder) \
      macro(DecompressionStreamTransform) \
      macro(DelayNode) \
@@ -2609,24 +2583,10 @@ index 472716d33f0c0f105b1c81a06fba0e60a4260d76..383837148b8b7a5eb39bba73bb505a0f
      macro(DynamicsCompressorNode) \
      macro(ExtendableEvent) \
 diff --git a/Source/WebCore/css/MediaQueryEvaluator.cpp b/Source/WebCore/css/MediaQueryEvaluator.cpp
-index 871eb7cc9333921c4848b909786de27d4b2827b5..937637c8eed766ceedb0a698376c8c92ebf93d13 100644
+index 3e369b2c47c069a48c1b42920de187e15ffdef52..a2b4e87bf6531192559197947e642e8ba745ff3d 100644
 --- a/Source/WebCore/css/MediaQueryEvaluator.cpp
 +++ b/Source/WebCore/css/MediaQueryEvaluator.cpp
-@@ -489,8 +489,12 @@ static bool scanEvaluate(CSSValue* value, const CSSToLengthConversionData&, Fram
-     return primitiveValue->valueID() == CSSValueProgressive;
- }
- 
--static bool forcedColorsEvaluate(CSSValue* value, const CSSToLengthConversionData&, Frame&, MediaFeaturePrefix)
-+static bool forcedColorsEvaluate(CSSValue* value, const CSSToLengthConversionData&, Frame& frame, MediaFeaturePrefix)
- {
-+    std::optional<bool> forcedColorsOverride = frame.page()->useForcedColorsOverride();
-+    if (forcedColorsOverride)
-+        return downcast<CSSPrimitiveValue>(*value).valueID() == (forcedColorsOverride.value() ? CSSValueActive : CSSValueNone);
-+
-     auto* primitiveValue = dynamicDowncast<CSSPrimitiveValue>(value);
-     if (!primitiveValue)
-         return false;
-@@ -874,7 +878,11 @@ static bool prefersContrastEvaluate(CSSValue* value, const CSSToLengthConversion
+@@ -878,7 +878,11 @@ static bool prefersContrastEvaluate(CSSValue* value, const CSSToLengthConversion
  static bool prefersReducedMotionEvaluate(CSSValue* value, const CSSToLengthConversionData&, Frame& frame, MediaFeaturePrefix)
  {
      bool userPrefersReducedMotion = false;
@@ -2639,7 +2599,7 @@ index 871eb7cc9333921c4848b909786de27d4b2827b5..937637c8eed766ceedb0a698376c8c92
      switch (frame.settings().forcedPrefersReducedMotionAccessibilityValue()) {
      case ForcedAccessibilityValue::On:
          userPrefersReducedMotion = true;
-@@ -887,6 +895,7 @@ static bool prefersReducedMotionEvaluate(CSSValue* value, const CSSToLengthConve
+@@ -891,6 +895,7 @@ static bool prefersReducedMotionEvaluate(CSSValue* value, const CSSToLengthConve
  #endif
          break;
      }
@@ -2680,18 +2640,6 @@ index fbcdea3855b8a42ab5f69ba06839b78857abb1f1..a5686a98b117836df7656d4360056be8
      static Ref<DataTransfer> createForDragStartEvent(const Document&);
      static Ref<DataTransfer> createForDrop(const Document&, std::unique_ptr<Pasteboard>&&, OptionSet<DragOperation>, bool draggingFiles);
      static Ref<DataTransfer> createForUpdatingDropTarget(const Document&, std::unique_ptr<Pasteboard>&&, OptionSet<DragOperation>, bool draggingFiles);
-diff --git a/Source/WebCore/dom/DeviceMotionEvent.h b/Source/WebCore/dom/DeviceMotionEvent.h
-index 8a3c4fc3c6ed07ecfe53d4c64f4298edc5669ca9..6022cd9eced0b147118d20a4c86e8e6605d00e7d 100644
---- a/Source/WebCore/dom/DeviceMotionEvent.h
-+++ b/Source/WebCore/dom/DeviceMotionEvent.h
-@@ -26,6 +26,7 @@
- #pragma once
- 
- #include "DeviceOrientationOrMotionPermissionState.h"
-+#include "Document.h"
- #include "Event.h"
- #include "IDLTypes.h"
- 
 diff --git a/Source/WebCore/dom/DeviceMotionEvent.idl b/Source/WebCore/dom/DeviceMotionEvent.idl
 index ea39a33a6250b4d10b20802f98aa9a5d57e63a7b..300a763508d311fd7b34cb3df3cc93080bb52930 100644
 --- a/Source/WebCore/dom/DeviceMotionEvent.idl
@@ -2982,10 +2930,10 @@ index 4d5a3859ec6a46d07d45c80a3b5870ee2ef13d36..75eb55a024a6ae3892a4fedc535bf6a6
  
  } // namespace WebCore
 diff --git a/Source/WebCore/inspector/InspectorInstrumentation.cpp b/Source/WebCore/inspector/InspectorInstrumentation.cpp
-index 0d5cb92ec4cbb0e7ad8b755b3b8f684996bbc40f..45d9f9d236bce99be5fd2f77253db90855ee7a6d 100644
+index 3fe459d4ee185f9c1ab157c61d651fe2ed6ebedf..82ec00871a74db0fc0cb898c77aab32fb0407fc0 100644
 --- a/Source/WebCore/inspector/InspectorInstrumentation.cpp
 +++ b/Source/WebCore/inspector/InspectorInstrumentation.cpp
-@@ -576,6 +576,13 @@ void InspectorInstrumentation::applyUserAgentOverrideImpl(InstrumentingAgents& i
+@@ -572,6 +572,13 @@ void InspectorInstrumentation::applyUserAgentOverrideImpl(InstrumentingAgents& i
          pageAgent->applyUserAgentOverride(userAgent);
  }
  
@@ -2999,7 +2947,7 @@ index 0d5cb92ec4cbb0e7ad8b755b3b8f684996bbc40f..45d9f9d236bce99be5fd2f77253db908
  void InspectorInstrumentation::applyEmulatedMediaImpl(InstrumentingAgents& instrumentingAgents, String& media)
  {
      if (auto* pageAgent = instrumentingAgents.enabledPageAgent())
-@@ -655,6 +662,12 @@ void InspectorInstrumentation::didFailLoadingImpl(InstrumentingAgents& instrumen
+@@ -651,6 +658,12 @@ void InspectorInstrumentation::didFailLoadingImpl(InstrumentingAgents& instrumen
          consoleAgent->didFailLoading(identifier, error); // This should come AFTER resource notification, front-end relies on this.
  }
  
@@ -3012,7 +2960,7 @@ index 0d5cb92ec4cbb0e7ad8b755b3b8f684996bbc40f..45d9f9d236bce99be5fd2f77253db908
  void InspectorInstrumentation::willLoadXHRSynchronouslyImpl(InstrumentingAgents& instrumentingAgents)
  {
      if (auto* networkAgent = instrumentingAgents.enabledNetworkAgent())
-@@ -687,20 +700,17 @@ void InspectorInstrumentation::didReceiveScriptResponseImpl(InstrumentingAgents&
+@@ -683,20 +696,17 @@ void InspectorInstrumentation::didReceiveScriptResponseImpl(InstrumentingAgents&
  
  void InspectorInstrumentation::domContentLoadedEventFiredImpl(InstrumentingAgents& instrumentingAgents, Frame& frame)
  {
@@ -3036,7 +2984,7 @@ index 0d5cb92ec4cbb0e7ad8b755b3b8f684996bbc40f..45d9f9d236bce99be5fd2f77253db908
  }
  
  void InspectorInstrumentation::frameDetachedFromParentImpl(InstrumentingAgents& instrumentingAgents, Frame& frame)
-@@ -781,12 +791,6 @@ void InspectorInstrumentation::frameDocumentUpdatedImpl(InstrumentingAgents& ins
+@@ -777,12 +787,6 @@ void InspectorInstrumentation::frameDocumentUpdatedImpl(InstrumentingAgents& ins
          pageDOMDebuggerAgent->frameDocumentUpdated(frame);
  }
  
@@ -3049,7 +2997,7 @@ index 0d5cb92ec4cbb0e7ad8b755b3b8f684996bbc40f..45d9f9d236bce99be5fd2f77253db908
  void InspectorInstrumentation::frameStartedLoadingImpl(InstrumentingAgents& instrumentingAgents, Frame& frame)
  {
      if (frame.isMainFrame()) {
-@@ -823,6 +827,12 @@ void InspectorInstrumentation::frameClearedScheduledNavigationImpl(Instrumenting
+@@ -819,6 +823,12 @@ void InspectorInstrumentation::frameClearedScheduledNavigationImpl(Instrumenting
          inspectorPageAgent->frameClearedScheduledNavigation(frame);
  }
  
@@ -3062,7 +3010,7 @@ index 0d5cb92ec4cbb0e7ad8b755b3b8f684996bbc40f..45d9f9d236bce99be5fd2f77253db908
  #if ENABLE(DARK_MODE_CSS) || HAVE(OS_DARK_MODE_SUPPORT)
  void InspectorInstrumentation::defaultAppearanceDidChangeImpl(InstrumentingAgents& instrumentingAgents, bool useDarkAppearance)
  {
-@@ -1005,6 +1015,12 @@ void InspectorInstrumentation::consoleStopRecordingCanvasImpl(InstrumentingAgent
+@@ -1001,6 +1011,12 @@ void InspectorInstrumentation::consoleStopRecordingCanvasImpl(InstrumentingAgent
          canvasAgent->consoleStopRecordingCanvas(context);
  }
  
@@ -3075,7 +3023,7 @@ index 0d5cb92ec4cbb0e7ad8b755b3b8f684996bbc40f..45d9f9d236bce99be5fd2f77253db908
  void InspectorInstrumentation::didOpenDatabaseImpl(InstrumentingAgents& instrumentingAgents, Database& database)
  {
      if (auto* databaseAgent = instrumentingAgents.enabledDatabaseAgent())
-@@ -1305,6 +1321,36 @@ void InspectorInstrumentation::renderLayerDestroyedImpl(InstrumentingAgents& ins
+@@ -1301,6 +1317,36 @@ void InspectorInstrumentation::renderLayerDestroyedImpl(InstrumentingAgents& ins
          layerTreeAgent->renderLayerDestroyed(renderLayer);
  }
  
@@ -3112,7 +3060,7 @@ index 0d5cb92ec4cbb0e7ad8b755b3b8f684996bbc40f..45d9f9d236bce99be5fd2f77253db908
  InstrumentingAgents& InspectorInstrumentation::instrumentingAgents(WorkerOrWorkletGlobalScope& globalScope)
  {
      return globalScope.inspectorController().m_instrumentingAgents;
-@@ -1316,6 +1362,13 @@ InstrumentingAgents& InspectorInstrumentation::instrumentingAgents(Page& page)
+@@ -1312,6 +1358,13 @@ InstrumentingAgents& InspectorInstrumentation::instrumentingAgents(Page& page)
      return page.inspectorController().m_instrumentingAgents.get();
  }
  
@@ -3387,7 +3335,7 @@ index 07103c35e0a9193a010a85cf2ea8017b2ad59212..338d158be5a6f35adc6817dc94d6084b
  class UserGestureEmulationScope {
      WTF_MAKE_NONCOPYABLE(UserGestureEmulationScope);
 diff --git a/Source/WebCore/inspector/agents/InspectorDOMAgent.cpp b/Source/WebCore/inspector/agents/InspectorDOMAgent.cpp
-index d86256ff04f0eda3d9ed4d23ff8f66f2db26f742..af198fa8d839eb9a2af9b1a0cefec056383d5750 100644
+index f71765fd92ec340a8a34cf280671296e7f855890..f91b86c0fe3c7eab81f81ec4ca0746cf3d5b22c1 100644
 --- a/Source/WebCore/inspector/agents/InspectorDOMAgent.cpp
 +++ b/Source/WebCore/inspector/agents/InspectorDOMAgent.cpp
 @@ -62,12 +62,16 @@
@@ -3483,7 +3431,7 @@ index d86256ff04f0eda3d9ed4d23ff8f66f2db26f742..af198fa8d839eb9a2af9b1a0cefec056
  Document* InspectorDOMAgent::assertDocument(Protocol::ErrorString& errorString, Protocol::DOM::NodeId nodeId)
  {
      Node* node = assertNode(errorString, nodeId);
-@@ -1444,16 +1479,7 @@ Protocol::ErrorStringOr<void> InspectorDOMAgent::highlightSelector(Ref<JSON::Obj
+@@ -1442,16 +1477,7 @@ Protocol::ErrorStringOr<void> InspectorDOMAgent::highlightSelector(Ref<JSON::Obj
  Protocol::ErrorStringOr<void> InspectorDOMAgent::highlightNode(Ref<JSON::Object>&& highlightInspectorObject, std::optional<Protocol::DOM::NodeId>&& nodeId, const Protocol::Runtime::RemoteObjectId& objectId)
  {
      Protocol::ErrorString errorString;
@@ -3501,7 +3449,7 @@ index d86256ff04f0eda3d9ed4d23ff8f66f2db26f742..af198fa8d839eb9a2af9b1a0cefec056
      if (!node)
          return makeUnexpected(errorString);
  
-@@ -1691,15 +1717,141 @@ Protocol::ErrorStringOr<void> InspectorDOMAgent::setInspectedNode(Protocol::DOM:
+@@ -1689,15 +1715,141 @@ Protocol::ErrorStringOr<void> InspectorDOMAgent::setInspectedNode(Protocol::DOM:
      return { };
  }
  
@@ -3647,7 +3595,7 @@ index d86256ff04f0eda3d9ed4d23ff8f66f2db26f742..af198fa8d839eb9a2af9b1a0cefec056
      if (!object)
          return makeUnexpected("Missing injected script for given nodeId"_s);
  
-@@ -2956,7 +3108,7 @@ Protocol::ErrorStringOr<Protocol::DOM::NodeId> InspectorDOMAgent::pushNodeByPath
+@@ -2952,7 +3104,7 @@ Protocol::ErrorStringOr<Protocol::DOM::NodeId> InspectorDOMAgent::pushNodeByPath
      return makeUnexpected("Missing node for given path"_s);
  }
  
@@ -3656,7 +3604,7 @@ index d86256ff04f0eda3d9ed4d23ff8f66f2db26f742..af198fa8d839eb9a2af9b1a0cefec056
  {
      Document* document = &node->document();
      if (auto* templateHost = document->templateDocumentHost())
-@@ -2965,12 +3117,18 @@ RefPtr<Protocol::Runtime::RemoteObject> InspectorDOMAgent::resolveNode(Node* nod
+@@ -2961,12 +3113,18 @@ RefPtr<Protocol::Runtime::RemoteObject> InspectorDOMAgent::resolveNode(Node* nod
      if (!frame)
          return nullptr;
  
@@ -3678,7 +3626,7 @@ index d86256ff04f0eda3d9ed4d23ff8f66f2db26f742..af198fa8d839eb9a2af9b1a0cefec056
  }
  
  Node* InspectorDOMAgent::scriptValueAsNode(JSC::JSValue value)
-@@ -2993,4 +3151,57 @@ Protocol::ErrorStringOr<void> InspectorDOMAgent::setAllowEditingUserAgentShadowT
+@@ -2989,4 +3147,57 @@ Protocol::ErrorStringOr<void> InspectorDOMAgent::setAllowEditingUserAgentShadowT
      return { };
  }
  
@@ -3737,7 +3685,7 @@ index d86256ff04f0eda3d9ed4d23ff8f66f2db26f742..af198fa8d839eb9a2af9b1a0cefec056
 +
  } // namespace WebCore
 diff --git a/Source/WebCore/inspector/agents/InspectorDOMAgent.h b/Source/WebCore/inspector/agents/InspectorDOMAgent.h
-index 14dd53be7d293dfde8826724fa73d74ef00c03c4..7a63a353015c85ad72db824bf62657d5904de6e9 100644
+index 262829afb3c7151464de876368db47bf733e7f2e..fdcc8c44f3d24f13003b3eed3f2af79c9746896f 100644
 --- a/Source/WebCore/inspector/agents/InspectorDOMAgent.h
 +++ b/Source/WebCore/inspector/agents/InspectorDOMAgent.h
 @@ -57,6 +57,7 @@ namespace WebCore {
@@ -3928,7 +3876,7 @@ index c6ebcc9d7e399a35f71350c9374df0f2107c518b..3bfa03ae7f27d9128fe207c1de1bfea9
      // InspectorInstrumentation
      void willRecalculateStyle();
 diff --git a/Source/WebCore/inspector/agents/InspectorPageAgent.cpp b/Source/WebCore/inspector/agents/InspectorPageAgent.cpp
-index a6e415a9bf47e0f4c98b9f375b3195df287fe67b..15c5da138b47e518bea8b744d05c2e844b2e893d 100644
+index a6e415a9bf47e0f4c98b9f375b3195df287fe67b..2dbdbdee399a1f31b1d71024c916834be24f1729 100644
 --- a/Source/WebCore/inspector/agents/InspectorPageAgent.cpp
 +++ b/Source/WebCore/inspector/agents/InspectorPageAgent.cpp
 @@ -32,20 +32,28 @@
@@ -4360,7 +4308,7 @@ index a6e415a9bf47e0f4c98b9f375b3195df287fe67b..15c5da138b47e518bea8b744d05c2e84
  
      IntRect rectangle(x, y, width, height);
      auto snapshot = snapshotFrameRect(m_inspectedPage.mainFrame(), rectangle, WTFMove(options));
-@@ -1100,6 +1273,67 @@ Protocol::ErrorStringOr<String> InspectorPageAgent::snapshotRect(int x, int y, i
+@@ -1100,6 +1273,47 @@ Protocol::ErrorStringOr<String> InspectorPageAgent::snapshotRect(int x, int y, i
      return snapshot->toDataURL("image/png"_s, std::nullopt, PreserveResolution::Yes);
  }
  
@@ -4384,26 +4332,6 @@ index a6e415a9bf47e0f4c98b9f375b3195df287fe67b..15c5da138b47e518bea8b744d05c2e84
 +    return { };
 +}
 +
-+Protocol::ErrorStringOr<void> InspectorPageAgent::setForcedColors(std::optional<Protocol::Page::ForcedColors>&& forcedColors)
-+{
-+    if (!forcedColors) {
-+        m_inspectedPage.setUseForcedColorsOverride(std::nullopt);
-+        return { };
-+    }
-+
-+    switch (*forcedColors) {
-+        case Protocol::Page::ForcedColors::Active:
-+            m_inspectedPage.setUseForcedColorsOverride(true);
-+            return { };
-+        case Protocol::Page::ForcedColors::None:
-+            m_inspectedPage.setUseForcedColorsOverride(false);
-+            return { };
-+    }
-+
-+    ASSERT_NOT_REACHED();
-+    return { };
-+}
-+
 +Protocol::ErrorStringOr<void> InspectorPageAgent::setTimeZone(const String& timeZone)
 +{
 +    bool success = WTF::setTimeZoneOverride(timeZone);
@@ -4428,7 +4356,7 @@ index a6e415a9bf47e0f4c98b9f375b3195df287fe67b..15c5da138b47e518bea8b744d05c2e84
  #if ENABLE(WEB_ARCHIVE) && USE(CF)
  Protocol::ErrorStringOr<String> InspectorPageAgent::archive()
  {
-@@ -1112,7 +1346,6 @@ Protocol::ErrorStringOr<String> InspectorPageAgent::archive()
+@@ -1112,7 +1326,6 @@ Protocol::ErrorStringOr<String> InspectorPageAgent::archive()
  }
  #endif
  
@@ -4436,7 +4364,7 @@ index a6e415a9bf47e0f4c98b9f375b3195df287fe67b..15c5da138b47e518bea8b744d05c2e84
  Protocol::ErrorStringOr<void> InspectorPageAgent::setScreenSizeOverride(std::optional<int>&& width, std::optional<int>&& height)
  {
      if (width.has_value() != height.has_value())
-@@ -1127,6 +1360,636 @@ Protocol::ErrorStringOr<void> InspectorPageAgent::setScreenSizeOverride(std::opt
+@@ -1127,6 +1340,632 @@ Protocol::ErrorStringOr<void> InspectorPageAgent::setScreenSizeOverride(std::opt
      m_inspectedPage.mainFrame().setOverrideScreenSize(FloatSize(width.value_or(0), height.value_or(0)));
      return { };
  }
@@ -4821,10 +4749,8 @@ index a6e415a9bf47e0f4c98b9f375b3195df287fe67b..15c5da138b47e518bea8b744d05c2e84
 +        axNode->setMultiline(multiline);
 +    if (axObject->isMultiSelectable())
 +        axNode->setMultiselectable(axObject->isMultiSelectable());
-+    /* FIXME(dpino): Build error after 253506@main.
 +    if (axObject->supportsReadOnly() && !axObject->canSetValueAttribute() && axObject->isEnabled())
 +        axNode->setReadonly(true);
-+    */
 +    if (axObject->supportsRequiredAttribute())
 +        axNode->setRequired(axObject->isRequired());
 +    if (axObject->isSelected())
@@ -4864,10 +4790,8 @@ index a6e415a9bf47e0f4c98b9f375b3195df287fe67b..15c5da138b47e518bea8b744d05c2e84
 +        axNode->setValuemin(axObject->minValueForRange());
 +    if (axObject->maxValueForRange() != 0)
 +        axNode->setValuemax(axObject->maxValueForRange());
-+    /* FIXME(dpino): Build error after 253506@main.
 +    if (axObject->supportsAutoComplete())
 +        axNode->setAutocomplete(axObject->autoCompleteValue());
-+    */
 +    if (axObject->hasPopup())
 +        axNode->setHaspopup(axObject->popupValue());
 +
@@ -5074,7 +4998,7 @@ index a6e415a9bf47e0f4c98b9f375b3195df287fe67b..15c5da138b47e518bea8b744d05c2e84
  
  } // namespace WebCore
 diff --git a/Source/WebCore/inspector/agents/InspectorPageAgent.h b/Source/WebCore/inspector/agents/InspectorPageAgent.h
-index 6d94ad131257d8d7cdb05898fd3f42e0c72766bf..06d6cc40ad9bd914fa77197b1910aa60e61c19f0 100644
+index 6d94ad131257d8d7cdb05898fd3f42e0c72766bf..6a85dba5cac19bf0adc93e0015ad223a2c60b5ad 100644
 --- a/Source/WebCore/inspector/agents/InspectorPageAgent.h
 +++ b/Source/WebCore/inspector/agents/InspectorPageAgent.h
 @@ -32,19 +32,26 @@
@@ -5132,12 +5056,11 @@ index 6d94ad131257d8d7cdb05898fd3f42e0c72766bf..06d6cc40ad9bd914fa77197b1910aa60
      Inspector::Protocol::ErrorStringOr<Ref<JSON::ArrayOf<Inspector::Protocol::GenericTypes::SearchMatch>>> searchInResource(const Inspector::Protocol::Network::FrameId&, const String& url, const String& query, std::optional<bool>&& caseSensitive, std::optional<bool>&& isRegex, const Inspector::Protocol::Network::RequestId&);
      Inspector::Protocol::ErrorStringOr<Ref<JSON::ArrayOf<Inspector::Protocol::Page::SearchResult>>> searchInResources(const String&, std::optional<bool>&& caseSensitive, std::optional<bool>&& isRegex);
  #if !PLATFORM(IOS_FAMILY)
-@@ -115,35 +126,56 @@ public:
+@@ -115,35 +126,55 @@ public:
  #if ENABLE(DARK_MODE_CSS) || HAVE(OS_DARK_MODE_SUPPORT)
      Inspector::Protocol::ErrorStringOr<void> setForcedAppearance(std::optional<Inspector::Protocol::Page::Appearance>&&);
  #endif
 +    Inspector::Protocol::ErrorStringOr<void> setForcedReducedMotion(std::optional<Inspector::Protocol::Page::ReducedMotion>&&);
-+    Inspector::Protocol::ErrorStringOr<void> setForcedColors(std::optional<Inspector::Protocol::Page::ForcedColors>&&);
 +    Inspector::Protocol::ErrorStringOr<void> setTimeZone(const String&);
 +    Inspector::Protocol::ErrorStringOr<void> setTouchEmulationEnabled(bool);
      Inspector::Protocol::ErrorStringOr<String> snapshotNode(Inspector::Protocol::DOM::NodeId);
@@ -5195,7 +5118,7 @@ index 6d94ad131257d8d7cdb05898fd3f42e0c72766bf..06d6cc40ad9bd914fa77197b1910aa60
  
      Frame* frameForId(const Inspector::Protocol::Network::FrameId&);
      WEBCORE_EXPORT String frameId(Frame*);
-@@ -152,6 +184,7 @@ public:
+@@ -152,6 +183,7 @@ public:
  
  private:
      double timestamp();
@@ -5203,7 +5126,7 @@ index 6d94ad131257d8d7cdb05898fd3f42e0c72766bf..06d6cc40ad9bd914fa77197b1910aa60
  
      static bool mainResourceContent(Frame*, bool withBase64Encode, String* result);
      static bool dataContent(const uint8_t* data, unsigned size, const String& textEncodingName, bool withBase64Encode, String* result);
-@@ -163,18 +196,20 @@ private:
+@@ -163,18 +195,20 @@ private:
      RefPtr<Inspector::PageBackendDispatcher> m_backendDispatcher;
  
      Page& m_inspectedPage;
@@ -5486,21 +5409,10 @@ index 21e33e46bdb1af8434527747e3c308cbe53f60f0..c17c4de17f439c04d27caa532771934c
  protected:
      static SameSiteInfo sameSiteInfo(const Document&, IsForDOMCookieAccess = IsForDOMCookieAccess::No);
 diff --git a/Source/WebCore/loader/DocumentLoader.cpp b/Source/WebCore/loader/DocumentLoader.cpp
-index e601aa9c6d3b04df2e9ffb341626013778e4c9d7..bb1f35d83d64500eb70e16e9bcd3149094601908 100644
+index 836f2fc09e41d60ddcabe328dd98b44f18297870..f121992cafa7e944b2cec6be72ea0404c11d6521 100644
 --- a/Source/WebCore/loader/DocumentLoader.cpp
 +++ b/Source/WebCore/loader/DocumentLoader.cpp
-@@ -728,8 +728,10 @@ void DocumentLoader::willSendRequest(ResourceRequest&& newRequest, const Resourc
-     if (!didReceiveRedirectResponse)
-         return completionHandler(WTFMove(newRequest));
- 
-+    InspectorInstrumentation::willCheckNavigationPolicy(*m_frame);
-     auto navigationPolicyCompletionHandler = [this, protectedThis = Ref { *this }, protectedFrame = Ref { *m_frame }, completionHandler = WTFMove(completionHandler)] (ResourceRequest&& request, WeakPtr<FormState>&&, NavigationPolicyDecision navigationPolicyDecision) mutable {
-         m_waitingForNavigationPolicy = false;
-+        InspectorInstrumentation::didCheckNavigationPolicy(protectedFrame.get(), navigationPolicyDecision != NavigationPolicyDecision::ContinueLoad);
-         switch (navigationPolicyDecision) {
-         case NavigationPolicyDecision::IgnoreLoad:
-         case NavigationPolicyDecision::StopAllLoads:
-@@ -1510,8 +1512,6 @@ void DocumentLoader::detachFromFrame()
+@@ -1510,8 +1510,6 @@ void DocumentLoader::detachFromFrame()
      if (!m_frame)
          return;
  
@@ -5510,7 +5422,7 @@ index e601aa9c6d3b04df2e9ffb341626013778e4c9d7..bb1f35d83d64500eb70e16e9bcd31490
  }
  
 diff --git a/Source/WebCore/loader/DocumentLoader.h b/Source/WebCore/loader/DocumentLoader.h
-index 74431bab05725f9673833ea4a37938013ffa578e..ccf7fb599d98d64f599ca0d750abbaf879efc7b2 100644
+index 4287ac055edca73b3ca4c2d58b53a34a59f255e2..6f38d54ef3b333b5935ffd7484e10da91788fed4 100644
 --- a/Source/WebCore/loader/DocumentLoader.h
 +++ b/Source/WebCore/loader/DocumentLoader.h
 @@ -181,9 +181,13 @@ public:
@@ -5528,10 +5440,10 @@ index 74431bab05725f9673833ea4a37938013ffa578e..ccf7fb599d98d64f599ca0d750abbaf8
      DocumentWriter& writer() const { return m_writer; }
  
 diff --git a/Source/WebCore/loader/FrameLoader.cpp b/Source/WebCore/loader/FrameLoader.cpp
-index fd0a865aa9ca1e34eeae0cb522e0c03c4a72d774..9cecc4a144300f0d60aa7ed8d35372884721b8c9 100644
+index 82aefcbc0f2a94eaac020656fe422f5d176120ec..341eb0456e8947b847d626f3ba72d5fa45fb970a 100644
 --- a/Source/WebCore/loader/FrameLoader.cpp
 +++ b/Source/WebCore/loader/FrameLoader.cpp
-@@ -1174,6 +1174,7 @@ void FrameLoader::loadInSameDocument(URL url, RefPtr<SerializedScriptValue> stat
+@@ -1173,6 +1173,7 @@ void FrameLoader::loadInSameDocument(URL url, RefPtr<SerializedScriptValue> stat
      }
  
      m_client->dispatchDidNavigateWithinPage();
@@ -5539,7 +5451,7 @@ index fd0a865aa9ca1e34eeae0cb522e0c03c4a72d774..9cecc4a144300f0d60aa7ed8d3537288
  
      m_frame.document()->statePopped(stateObject ? stateObject.releaseNonNull() : SerializedScriptValue::nullValue());
      m_client->dispatchDidPopStateWithinPage();
-@@ -1610,6 +1611,8 @@ void FrameLoader::loadWithDocumentLoader(DocumentLoader* loader, FrameLoadType t
+@@ -1609,6 +1610,8 @@ void FrameLoader::loadWithDocumentLoader(DocumentLoader* loader, FrameLoadType t
      const String& httpMethod = loader->request().httpMethod();
  
      if (shouldPerformFragmentNavigation(isFormSubmission, httpMethod, policyChecker().loadType(), newURL)) {
@@ -5548,7 +5460,7 @@ index fd0a865aa9ca1e34eeae0cb522e0c03c4a72d774..9cecc4a144300f0d60aa7ed8d3537288
          RefPtr<DocumentLoader> oldDocumentLoader = m_documentLoader;
          NavigationAction action { *m_frame.document(), loader->request(), InitiatedByMainFrame::Unknown, policyChecker().loadType(), isFormSubmission };
          action.setIsRequestFromClientOrUserInput(loader->isRequestFromClientOrUserInput());
-@@ -1639,7 +1642,9 @@ void FrameLoader::loadWithDocumentLoader(DocumentLoader* loader, FrameLoadType t
+@@ -1638,7 +1641,9 @@ void FrameLoader::loadWithDocumentLoader(DocumentLoader* loader, FrameLoadType t
      }
  
      RELEASE_ASSERT(!isBackForwardLoadType(policyChecker().loadType()) || history().provisionalItem());
@@ -5558,7 +5470,7 @@ index fd0a865aa9ca1e34eeae0cb522e0c03c4a72d774..9cecc4a144300f0d60aa7ed8d3537288
          continueLoadAfterNavigationPolicy(request, formState.get(), navigationPolicyDecision, allowNavigationToInvalidURL);
          completionHandler();
      }, PolicyDecisionMode::Asynchronous);
-@@ -2806,12 +2811,17 @@ String FrameLoader::userAgent(const URL& url) const
+@@ -2805,12 +2810,17 @@ String FrameLoader::userAgent(const URL& url) const
  
  String FrameLoader::navigatorPlatform() const
  {
@@ -5578,7 +5490,7 @@ index fd0a865aa9ca1e34eeae0cb522e0c03c4a72d774..9cecc4a144300f0d60aa7ed8d3537288
  }
  
  void FrameLoader::dispatchOnloadEvents()
-@@ -3222,6 +3232,8 @@ void FrameLoader::receivedMainResourceError(const ResourceError& error)
+@@ -3221,6 +3231,8 @@ void FrameLoader::receivedMainResourceError(const ResourceError& error)
      checkCompleted();
      if (m_frame.page())
          checkLoadComplete();
@@ -5587,7 +5499,7 @@ index fd0a865aa9ca1e34eeae0cb522e0c03c4a72d774..9cecc4a144300f0d60aa7ed8d3537288
  }
  
  void FrameLoader::continueFragmentScrollAfterNavigationPolicy(const ResourceRequest& request, bool shouldContinue)
-@@ -4030,9 +4042,6 @@ String FrameLoader::referrer() const
+@@ -3997,9 +4009,6 @@ String FrameLoader::referrer() const
  
  void FrameLoader::dispatchDidClearWindowObjectsInAllWorlds()
  {
@@ -5597,7 +5509,7 @@ index fd0a865aa9ca1e34eeae0cb522e0c03c4a72d774..9cecc4a144300f0d60aa7ed8d3537288
      Vector<Ref<DOMWrapperWorld>> worlds;
      ScriptController::getAllWorlds(worlds);
      for (auto& world : worlds)
-@@ -4041,13 +4050,13 @@ void FrameLoader::dispatchDidClearWindowObjectsInAllWorlds()
+@@ -4008,13 +4017,13 @@ void FrameLoader::dispatchDidClearWindowObjectsInAllWorlds()
  
  void FrameLoader::dispatchDidClearWindowObjectInWorld(DOMWrapperWorld& world)
  {
@@ -5630,10 +5542,10 @@ index 29d2e3f46140aaa51160e6a28562f370e371eb21..676ddc9369050c19454fbf5faffac2b2
      virtual bool shouldPerformSecurityChecks() const { return false; }
      virtual bool havePerformedSecurityChecks(const ResourceResponse&) const { return false; }
 diff --git a/Source/WebCore/loader/PolicyChecker.cpp b/Source/WebCore/loader/PolicyChecker.cpp
-index 8079a61388ccbdc52d585ba2d1568b8d5312e718..caceb12b5460454293c820bd1ebcd7fa9017610d 100644
+index 61edc972ce354589380535f8c02a39b902d626aa..5eb8f591778112b22205fd910dff18b9ddb46a92 100644
 --- a/Source/WebCore/loader/PolicyChecker.cpp
 +++ b/Source/WebCore/loader/PolicyChecker.cpp
-@@ -47,6 +47,7 @@
+@@ -46,6 +46,7 @@
  #include "HTMLFormElement.h"
  #include "HTMLFrameOwnerElement.h"
  #include "HTMLPlugInElement.h"
@@ -5706,7 +5618,7 @@ index 58fbc5e15aff1ab5c04952f056d48575c9c68498..2a638ab7da4557ec9be2c5e655f0666d
  
      static bool pageAtRuleSupportEnabled() { return shared().m_pageAtRuleSupportEnabled; }
 diff --git a/Source/WebCore/page/EventHandler.cpp b/Source/WebCore/page/EventHandler.cpp
-index 2bf547f813052776110c63bc11bb0226c7973bed..a2f4332b8237fe68d980383ac75f825afd7af986 100644
+index 1cfb3665021ce207ea3b52ae970373416f466666..ca6977e66fb7a65a50b8be69fe9b154a2b60e3a9 100644
 --- a/Source/WebCore/page/EventHandler.cpp
 +++ b/Source/WebCore/page/EventHandler.cpp
 @@ -142,6 +142,7 @@
@@ -5793,7 +5705,7 @@ index 2bf547f813052776110c63bc11bb0226c7973bed..a2f4332b8237fe68d980383ac75f825a
              && m_frame.selection().isRange()
              && event.event().button() != RightButton) {
          VisibleSelection newSelection;
-@@ -2052,10 +2054,8 @@ bool EventHandler::handleMouseMoveEvent(const PlatformMouseEvent& platformMouseE
+@@ -2054,10 +2056,8 @@ bool EventHandler::handleMouseMoveEvent(const PlatformMouseEvent& platformMouseE
      
      swallowEvent = !dispatchMouseEvent(eventNames().mousemoveEvent, mouseEvent.targetNode(), 0, platformMouseEvent, FireMouseOverOut::Yes);
  
@@ -5804,7 +5716,7 @@ index 2bf547f813052776110c63bc11bb0226c7973bed..a2f4332b8237fe68d980383ac75f825a
  
      return swallowEvent;
  }
-@@ -4140,7 +4140,14 @@ bool EventHandler::handleDrag(const MouseEventWithHitTestResults& event, CheckDr
+@@ -4142,7 +4142,14 @@ bool EventHandler::handleDrag(const MouseEventWithHitTestResults& event, CheckDr
      if (!m_frame.document())
          return false;
  
@@ -5820,7 +5732,7 @@ index 2bf547f813052776110c63bc11bb0226c7973bed..a2f4332b8237fe68d980383ac75f825a
      auto hasNonDefaultPasteboardData = HasNonDefaultPasteboardData::No;
      
      if (dragState().shouldDispatchEvents) {
-@@ -4617,7 +4624,8 @@ bool EventHandler::handleTouchEvent(const PlatformTouchEvent& event)
+@@ -4619,7 +4626,8 @@ bool EventHandler::handleTouchEvent(const PlatformTouchEvent& event)
              allTouchReleased = false;
      }
  
@@ -5830,7 +5742,7 @@ index 2bf547f813052776110c63bc11bb0226c7973bed..a2f4332b8237fe68d980383ac75f825a
          PlatformTouchPoint::State pointState = point.state();
          LayoutPoint pagePoint = documentPointForWindowPoint(m_frame, point.pos());
  
-@@ -4744,6 +4752,9 @@ bool EventHandler::handleTouchEvent(const PlatformTouchEvent& event)
+@@ -4746,6 +4754,9 @@ bool EventHandler::handleTouchEvent(const PlatformTouchEvent& event)
              changedTouches[pointState].m_touches->append(WTFMove(touch));
              changedTouches[pointState].m_targets.add(touchTarget);
          }
@@ -5841,7 +5753,7 @@ index 2bf547f813052776110c63bc11bb0226c7973bed..a2f4332b8237fe68d980383ac75f825a
      m_touchPressed = touches->length() > 0;
      if (allTouchReleased)
 diff --git a/Source/WebCore/page/EventHandler.h b/Source/WebCore/page/EventHandler.h
-index e3c31cf0b58886e9081b44612aa44476cf9fd0cc..5d0d3444f16953a50b7d3f3a1ca494f3a0dfde7c 100644
+index 556cab9e978d31d23563fd5d5325bdb2470c2213..a232efeaf334b58301154dd93eb406d89f8995d2 100644
 --- a/Source/WebCore/page/EventHandler.h
 +++ b/Source/WebCore/page/EventHandler.h
 @@ -136,9 +136,7 @@ public:
@@ -5899,7 +5811,7 @@ index e3c31cf0b58886e9081b44612aa44476cf9fd0cc..5d0d3444f16953a50b7d3f3a1ca494f3
      bool m_mouseDownMayStartDrag { false };
      bool m_dragMayStartSelectionInstead { false };
 diff --git a/Source/WebCore/page/Frame.cpp b/Source/WebCore/page/Frame.cpp
-index 2d1133a87e56315d531f8d6e72c6c6a4c86c126b..571265e1b7ec906af8217cfaa008a99391e8a745 100644
+index 2d1133a87e56315d531f8d6e72c6c6a4c86c126b..2466bbe96bf75cfa9d6337b6db283ccb044a58e6 100644
 --- a/Source/WebCore/page/Frame.cpp
 +++ b/Source/WebCore/page/Frame.cpp
 @@ -39,6 +39,7 @@
@@ -5918,14 +5830,14 @@ index 2d1133a87e56315d531f8d6e72c6c6a4c86c126b..571265e1b7ec906af8217cfaa008a993
  #include "NodeTraversal.h"
  #include "Page.h"
  #include "ProcessWarming.h"
-@@ -189,6 +191,7 @@ Frame::Frame(Page& page, HTMLFrameOwnerElement* ownerElement, UniqueRef<FrameLoa
- 
+@@ -190,6 +192,7 @@ Frame::Frame(Page& page, HTMLFrameOwnerElement* ownerElement, UniqueRef<FrameLoa
  void Frame::init()
  {
-+    InspectorInstrumentation::frameAttached(this);
      m_loader->init();
++    InspectorInstrumentation::frameAttached(this);
  }
  
+ Ref<Frame> Frame::create(Page* page, HTMLFrameOwnerElement* ownerElement, UniqueRef<FrameLoaderClient>&& client)
 @@ -373,7 +376,7 @@ void Frame::orientationChanged()
  int Frame::orientation() const
  {
@@ -6439,7 +6351,7 @@ index a782c3be51ca113a52482c5a10583c8fa64724ef..1d82dff81be5c5492efb3bfe77d2f259
      if (stateObjectType == StateObjectType::Push) {
          frame->loader().history().pushState(WTFMove(data), title, fullURL.string());
 diff --git a/Source/WebCore/page/Page.cpp b/Source/WebCore/page/Page.cpp
-index 0e42a6dcd65bbb96e163a7508849145d3332be83..447ab395d74072b5a7bf47a6f830d27abd2decbf 100644
+index 271bb6a513cc60d6bba38d7bf19c1bc5a5e19252..ac1055c156cec06cbdb655b7c35590fcaf045500 100644
 --- a/Source/WebCore/page/Page.cpp
 +++ b/Source/WebCore/page/Page.cpp
 @@ -486,6 +486,37 @@ void Page::setOverrideViewportArguments(const std::optional<ViewportArguments>&
@@ -6480,7 +6392,7 @@ index 0e42a6dcd65bbb96e163a7508849145d3332be83..447ab395d74072b5a7bf47a6f830d27a
  ScrollingCoordinator* Page::scrollingCoordinator()
  {
      if (!m_scrollingCoordinator && m_settings->scrollingCoordinatorEnabled()) {
-@@ -1375,10 +1406,6 @@ void Page::didCommitLoad()
+@@ -1366,10 +1397,6 @@ void Page::didCommitLoad()
      m_isEditableRegionEnabled = false;
  #endif
  
@@ -6491,7 +6403,7 @@ index 0e42a6dcd65bbb96e163a7508849145d3332be83..447ab395d74072b5a7bf47a6f830d27a
      resetSeenPlugins();
      resetSeenMediaEngines();
  
-@@ -3420,6 +3447,26 @@ void Page::setUseDarkAppearanceOverride(std::optional<bool> valueOverride)
+@@ -3423,6 +3450,16 @@ void Page::setUseDarkAppearanceOverride(std::optional<bool> valueOverride)
  #endif
  }
  
@@ -6504,25 +6416,15 @@ index 0e42a6dcd65bbb96e163a7508849145d3332be83..447ab395d74072b5a7bf47a6f830d27a
 +
 +    appearanceDidChange();
 +}
-+
-+void Page::setUseForcedColorsOverride(std::optional<bool> valueOverride)
-+{
-+    if (valueOverride == m_useForcedColorsOverride)
-+        return;
-+
-+    m_useForcedColorsOverride = valueOverride;
-+
-+    appearanceDidChange();
-+}
 +
  void Page::setFullscreenInsets(const FloatBoxExtent& insets)
  {
      if (insets == m_fullscreenInsets)
 diff --git a/Source/WebCore/page/Page.h b/Source/WebCore/page/Page.h
-index 680b1008ce574f1f50f61940a6647a74019063d5..7a252304e48e522b5c082494b22f447f3a0092c6 100644
+index 145b6d63b2abaa48f33badd19235b25ccddc7f13..d3a1177c63e7033481d420cd2c168aa0a178c973 100644
 --- a/Source/WebCore/page/Page.h
 +++ b/Source/WebCore/page/Page.h
-@@ -285,6 +285,9 @@ public:
+@@ -282,6 +282,9 @@ public:
      const std::optional<ViewportArguments>& overrideViewportArguments() const { return m_overrideViewportArguments; }
      WEBCORE_EXPORT void setOverrideViewportArguments(const std::optional<ViewportArguments>&);
  
@@ -6532,7 +6434,7 @@ index 680b1008ce574f1f50f61940a6647a74019063d5..7a252304e48e522b5c082494b22f447f
      static void refreshPlugins(bool reload);
      WEBCORE_EXPORT PluginData& pluginData();
      void clearPluginData();
-@@ -339,6 +342,10 @@ public:
+@@ -336,6 +339,10 @@ public:
      DragCaretController& dragCaretController() const { return *m_dragCaretController; }
  #if ENABLE(DRAG_SUPPORT)
      DragController& dragController() const { return *m_dragController; }
@@ -6543,19 +6445,17 @@ index 680b1008ce574f1f50f61940a6647a74019063d5..7a252304e48e522b5c082494b22f447f
  #endif
      FocusController& focusController() const { return *m_focusController; }
  #if ENABLE(CONTEXT_MENUS)
-@@ -506,6 +513,10 @@ public:
+@@ -503,6 +510,8 @@ public:
      WEBCORE_EXPORT void effectiveAppearanceDidChange(bool useDarkAppearance, bool useElevatedUserInterfaceLevel);
      bool defaultUseDarkAppearance() const { return m_useDarkAppearance; }
      void setUseDarkAppearanceOverride(std::optional<bool>);
 +    std::optional<bool> useReducedMotionOverride() const { return m_useReducedMotionOverride; }
 +    void setUseReducedMotionOverride(std::optional<bool>);
-+    std::optional<bool> useForcedColorsOverride() const { return m_useForcedColorsOverride; }
-+    void setUseForcedColorsOverride(std::optional<bool>);
  
  #if ENABLE(TEXT_AUTOSIZING)
      float textAutosizingWidth() const { return m_textAutosizingWidth; }
-@@ -913,6 +924,11 @@ public:
-     WEBCORE_EXPORT void setInteractionRegionsEnabled(bool);
+@@ -912,6 +921,11 @@ public:
+     bool shouldBuildInteractionRegions() const;
  #endif
  
 +#if ENABLE(ORIENTATION_EVENTS)
@@ -6566,7 +6466,7 @@ index 680b1008ce574f1f50f61940a6647a74019063d5..7a252304e48e522b5c082494b22f447f
  #if ENABLE(DEVICE_ORIENTATION) && PLATFORM(IOS_FAMILY)
      DeviceOrientationUpdateProvider* deviceOrientationUpdateProvider() const { return m_deviceOrientationUpdateProvider.get(); }
  #endif
-@@ -1034,6 +1050,9 @@ private:
+@@ -1034,6 +1048,9 @@ private:
  
  #if ENABLE(DRAG_SUPPORT)
      const std::unique_ptr<DragController> m_dragController;
@@ -6576,16 +6476,15 @@ index 680b1008ce574f1f50f61940a6647a74019063d5..7a252304e48e522b5c082494b22f447f
  #endif
      const std::unique_ptr<FocusController> m_focusController;
  #if ENABLE(CONTEXT_MENUS)
-@@ -1113,6 +1132,8 @@ private:
+@@ -1113,6 +1130,7 @@ private:
      bool m_useElevatedUserInterfaceLevel { false };
      bool m_useDarkAppearance { false };
      std::optional<bool> m_useDarkAppearanceOverride;
 +    std::optional<bool> m_useReducedMotionOverride;
-+    std::optional<bool> m_useForcedColorsOverride;
  
  #if ENABLE(TEXT_AUTOSIZING)
      float m_textAutosizingWidth { 0 };
-@@ -1288,6 +1309,11 @@ private:
+@@ -1290,6 +1308,11 @@ private:
  #endif
  
      std::optional<ViewportArguments> m_overrideViewportArguments;
@@ -6709,7 +6608,7 @@ index a204ceb7d50a08631dd6e90cd11a2202571e4d76..af8cce6a1732fd7455ff362961e0ebcd
  }
  
 diff --git a/Source/WebCore/page/csp/ContentSecurityPolicy.cpp b/Source/WebCore/page/csp/ContentSecurityPolicy.cpp
-index 3cb3184dc359d5a6ad9159e5991e2309d0d0099b..4aaff93ba52e9ec097540e5a57140dca1bda2ec5 100644
+index 72d375593b3158f64dd58abf83f4ef4c9f9e2860..51cc084891e19ad626f84fdf02f5e2f4195e76d2 100644
 --- a/Source/WebCore/page/csp/ContentSecurityPolicy.cpp
 +++ b/Source/WebCore/page/csp/ContentSecurityPolicy.cpp
 @@ -298,6 +298,8 @@ bool ContentSecurityPolicy::allowContentSecurityPolicySourceStarToMatchAnyProtoc
@@ -7027,7 +6926,7 @@ index 44799e0b2a93cbcf25f4315d62a3d95896c02f3d..29277223448a0936a16f975970ab60d7
  #endif
  
 diff --git a/Source/WebCore/platform/ScrollableArea.h b/Source/WebCore/platform/ScrollableArea.h
-index 59c42302727cdb400f4832d09ad1ece583d84aa5..b44626f26509dd6978495560d087ddb289392bed 100644
+index 15e75c74d437b962dfffcafa9c086491064e1f15..2b4b682b087c645cdfd02997658e07a423bb9c2d 100644
 --- a/Source/WebCore/platform/ScrollableArea.h
 +++ b/Source/WebCore/platform/ScrollableArea.h
 @@ -103,7 +103,7 @@ public:
@@ -7259,81 +7158,6 @@ index b60f9a64bacc8282860da6de299b75aeb295b9b5..55bd017c03c6478ca334bd5ef164160f
  
  namespace WebCore {
  
-diff --git a/Source/WebCore/platform/graphics/gstreamer/GStreamerCommon.cpp b/Source/WebCore/platform/graphics/gstreamer/GStreamerCommon.cpp
-index 761a1b18570e48c1769d894781475d2771bb9173..396b72f62a027210582e2b53df4d5606952f781d 100644
---- a/Source/WebCore/platform/graphics/gstreamer/GStreamerCommon.cpp
-+++ b/Source/WebCore/platform/graphics/gstreamer/GStreamerCommon.cpp
-@@ -108,6 +108,55 @@ void webkitGstVideoFormatInfoComponent(const GstVideoFormatInfo* info, guint pla
- }
- #endif
- 
-+#if !GST_CHECK_VERSION(1, 18, 0)
-+GstClockTime gst_element_get_current_clock_time(GstElement * element)
-+{
-+  GstClock *clock = NULL;
-+  GstClockTime ret;
-+
-+  g_return_val_if_fail (GST_IS_ELEMENT (element), GST_CLOCK_TIME_NONE);
-+
-+  clock = gst_element_get_clock (element);
-+
-+  if (!clock) {
-+    GST_DEBUG_OBJECT (element, "Element has no clock");
-+    return GST_CLOCK_TIME_NONE;
-+  }
-+
-+  ret = gst_clock_get_time (clock);
-+  gst_object_unref (clock);
-+
-+  return ret;
-+}
-+
-+GstClockTime webkitGstElementGetCurrentRunningTime(GstElement * element)
-+{
-+  GstClockTime base_time, clock_time;
-+
-+  g_return_val_if_fail (GST_IS_ELEMENT (element), GST_CLOCK_TIME_NONE);
-+
-+  base_time = gst_element_get_base_time (element);
-+
-+  if (!GST_CLOCK_TIME_IS_VALID (base_time)) {
-+    GST_DEBUG_OBJECT (element, "Could not determine base time");
-+    return GST_CLOCK_TIME_NONE;
-+  }
-+
-+  clock_time = gst_element_get_current_clock_time (element);
-+
-+  if (!GST_CLOCK_TIME_IS_VALID (clock_time)) {
-+    return GST_CLOCK_TIME_NONE;
-+  }
-+
-+  if (clock_time < base_time) {
-+    GST_DEBUG_OBJECT (element, "Got negative current running time");
-+    return GST_CLOCK_TIME_NONE;
-+  }
-+
-+  return clock_time - base_time;
-+}
-+#endif
-+
- #if ENABLE(VIDEO)
- bool getVideoSizeAndFormatFromCaps(const GstCaps* caps, WebCore::IntSize& size, GstVideoFormat& format, int& pixelAspectRatioNumerator, int& pixelAspectRatioDenominator, int& stride)
- {
-diff --git a/Source/WebCore/platform/graphics/gstreamer/GStreamerCommon.h b/Source/WebCore/platform/graphics/gstreamer/GStreamerCommon.h
-index ddfdee52fffb5e9c9ab68c4503df8b26a4c288e5..fc52dd2034f072fa084584018d45873f4152c5e9 100644
---- a/Source/WebCore/platform/graphics/gstreamer/GStreamerCommon.h
-+++ b/Source/WebCore/platform/graphics/gstreamer/GStreamerCommon.h
-@@ -60,8 +60,10 @@ inline bool webkitGstCheckVersion(guint major, guint minor, guint micro)
- #if !GST_CHECK_VERSION(1, 18, 0)
- #define GST_VIDEO_MAX_COMPONENTS 4
- void webkitGstVideoFormatInfoComponent(const GstVideoFormatInfo*, guint, gint components[GST_VIDEO_MAX_COMPONENTS]);
-+GstClockTime webkitGstElementGetCurrentRunningTime(GstElement * element);
- 
- #define gst_video_format_info_component webkitGstVideoFormatInfoComponent
-+#define gst_element_get_current_running_time webkitGstElementGetCurrentRunningTime
- #endif
- 
- #define GST_VIDEO_CAPS_TYPE_PREFIX  "video/"
 diff --git a/Source/WebCore/platform/graphics/opengl/GraphicsContextGLOpenGLBase.cpp b/Source/WebCore/platform/graphics/opengl/GraphicsContextGLOpenGLBase.cpp
 index ce40cc903f98688cbd2da28c0f0ed6660ce38b52..808e5e68f6abafc3a200f6c2d7cd12c9f34be473 100644
 --- a/Source/WebCore/platform/graphics/opengl/GraphicsContextGLOpenGLBase.cpp
@@ -8457,7 +8281,7 @@ index 1c91f93595ab4362409762530880878e3804c2b8..8848c9d880f341d4a0de089ff0ddc1d0
  {
      GUniquePtr<SoupCookie> targetCookie(cookie.toSoupCookie());
 diff --git a/Source/WebCore/platform/win/ClipboardUtilitiesWin.cpp b/Source/WebCore/platform/win/ClipboardUtilitiesWin.cpp
-index e3b1ba835135de598a653c823872ff4f01bec4b9..84ae88e1245572de6770c7aa1345da14af99b8fb 100644
+index fdde3ee4f109b35c5b6766450a5aa3fd56619199..6d960bee81c15d0415c04616bb7715390a9a83e6 100644
 --- a/Source/WebCore/platform/win/ClipboardUtilitiesWin.cpp
 +++ b/Source/WebCore/platform/win/ClipboardUtilitiesWin.cpp
 @@ -39,6 +39,7 @@
@@ -9090,7 +8914,7 @@ index 2081154f90fac8f7b9f7c6061cf5dc6da1af44b5..e7c6071a6f2e05e76e0fd1cb4661ebd3
  
      void SetHTTPCookieAcceptPolicy(enum:uint8_t WebCore::HTTPCookieAcceptPolicy policy) -> ()
 diff --git a/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp b/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp
-index 82af7442b68c025cdcc75674f6e579ff91b96847..ad576043d7c156efc03a6e0f1489be6b2b41c976 100644
+index 24e9d0eecb5730ad96c625b114b9c7360adcac52..e0b0218bbf37222fc581d19d6ec3f688445aa9c5 100644
 --- a/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp
 +++ b/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.cpp
 @@ -83,6 +83,11 @@
@@ -9132,7 +8956,7 @@ index 82af7442b68c025cdcc75674f6e579ff91b96847..ad576043d7c156efc03a6e0f1489be6b
  void NetworkConnectionToWebProcess::removeStorageAccessForFrame(FrameIdentifier frameID, PageIdentifier pageID)
  {
 diff --git a/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.h b/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.h
-index aee16bae32d2fc033f6bbc152c481189591b7a10..0970fdde3709f68e424b532bc25bd8ba193706ff 100644
+index 35deb0171bee03d36acd1abad195e9450a54d6fc..90c118158c336763c98132abdded326d9339d8ff 100644
 --- a/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.h
 +++ b/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.h
 @@ -312,6 +312,8 @@ private:
@@ -9145,7 +8969,7 @@ index aee16bae32d2fc033f6bbc152c481189591b7a10..0970fdde3709f68e424b532bc25bd8ba
      void removeStorageAccessForFrame(WebCore::FrameIdentifier, WebCore::PageIdentifier);
  
 diff --git a/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.messages.in b/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.messages.in
-index 8323aa8c7a6a488ad651528eecd7a1fa3eae9610..6a620d6ffdc7812b638a299dcaf1b3b0d3a7e014 100644
+index 77597632a0e3f5dbac4ed45312c401496cf2387d..c3861e47242b15234101ca02a83f2766c8220de2 100644
 --- a/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.messages.in
 +++ b/Source/WebKit/NetworkProcess/NetworkConnectionToWebProcess.messages.in
 @@ -66,6 +66,8 @@ messages -> NetworkConnectionToWebProcess LegacyReceiver {
@@ -9158,10 +8982,10 @@ index 8323aa8c7a6a488ad651528eecd7a1fa3eae9610..6a620d6ffdc7812b638a299dcaf1b3b0
      RemoveStorageAccessForFrame(WebCore::FrameIdentifier frameID, WebCore::PageIdentifier pageID);
      LogUserInteraction(WebCore::RegistrableDomain domain)
 diff --git a/Source/WebKit/NetworkProcess/NetworkProcess.cpp b/Source/WebKit/NetworkProcess/NetworkProcess.cpp
-index a85a915ce9223070249618944691ae5f4a701126..3d5560f75f064bba89861789cb7fda4288f67e4f 100644
+index 6e7eba1d92be4f7346ff35cc26e7e6bfdc0f2de9..ade95eb859048a14d2b191e8138dbd5a50003201 100644
 --- a/Source/WebKit/NetworkProcess/NetworkProcess.cpp
 +++ b/Source/WebKit/NetworkProcess/NetworkProcess.cpp
-@@ -531,6 +531,12 @@ void NetworkProcess::destroySession(PAL::SessionID sessionID)
+@@ -529,6 +529,12 @@ void NetworkProcess::destroySession(PAL::SessionID sessionID)
      m_sessionsControlledByAutomation.remove(sessionID);
  }
  
@@ -9217,7 +9041,7 @@ index 72b4a17928321402f4234e0fa60f92659d6617a1..fd0a7b05935a13caf102b69ee9ac3548
      ClearPrevalentResource(PAL::SessionID sessionID, WebCore::RegistrableDomain resourceDomain) -> ()
      ClearUserInteraction(PAL::SessionID sessionID, WebCore::RegistrableDomain resourceDomain) -> ()
 diff --git a/Source/WebKit/NetworkProcess/NetworkSession.h b/Source/WebKit/NetworkProcess/NetworkSession.h
-index 95d1403c8368d6409ce67559164218c2877884c4..e09bfcacefef60e42fbe386e35e501de9a4a2548 100644
+index b60aeda86f298c1501a659af54a6416c04d66afc..ec6a7eeefc50d7fb6a3e32d235546eb5994b0b8c 100644
 --- a/Source/WebKit/NetworkProcess/NetworkSession.h
 +++ b/Source/WebKit/NetworkProcess/NetworkSession.h
 @@ -192,6 +192,9 @@ public:
@@ -9239,10 +9063,10 @@ index 95d1403c8368d6409ce67559164218c2877884c4..e09bfcacefef60e42fbe386e35e501de
      HashSet<Ref<NetworkResourceLoader>> m_keptAliveLoads;
  
 diff --git a/Source/WebKit/NetworkProcess/cocoa/NetworkSessionCocoa.mm b/Source/WebKit/NetworkProcess/cocoa/NetworkSessionCocoa.mm
-index 2b18ee764e7a00159de3f64028a48021c3988a8a..e8461857b83572c42246b99b255389115d58afba 100644
+index d8eeb6c27a92134728ffada573a1f140e303c727..9ddddb0796cc00d7eea060b11919711446a39586 100644
 --- a/Source/WebKit/NetworkProcess/cocoa/NetworkSessionCocoa.mm
 +++ b/Source/WebKit/NetworkProcess/cocoa/NetworkSessionCocoa.mm
-@@ -720,7 +720,7 @@ void NetworkSessionCocoa::setClientAuditToken(const WebCore::AuthenticationChall
+@@ -720,7 +720,7 @@ - (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didRece
  
      if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]) {
          sessionCocoa->setClientAuditToken(challenge);
@@ -9296,12 +9120,12 @@ index d1fac29ff7fb628b8994642eb9b7a35cad9ad37f..5f2068c1d6deff4792d974714d75b204
  
          if (m_state != State::Suspended) {
 diff --git a/Source/WebKit/NetworkProcess/curl/NetworkSessionCurl.cpp b/Source/WebKit/NetworkProcess/curl/NetworkSessionCurl.cpp
-index 80d8eada3319bec0d8c359af1db319bef87683cf..c71439dee81dc379e827f92de1ff12fa9118684a 100644
+index 892d1b2541e218047c33e88a207aa56e36b7e6bc..04bf128418cce29926d53c1af682485f4162ba03 100644
 --- a/Source/WebKit/NetworkProcess/curl/NetworkSessionCurl.cpp
 +++ b/Source/WebKit/NetworkProcess/curl/NetworkSessionCurl.cpp
 @@ -61,7 +61,7 @@ NetworkSessionCurl::~NetworkSessionCurl()
  
- std::unique_ptr<WebSocketTask> NetworkSessionCurl::createWebSocketTask(WebPageProxyIdentifier, NetworkSocketChannel& channel, const WebCore::ResourceRequest& request, const String& protocol, const WebCore::ClientOrigin&, bool, bool)
+ std::unique_ptr<WebSocketTask> NetworkSessionCurl::createWebSocketTask(WebPageProxyIdentifier, NetworkSocketChannel& channel, const WebCore::ResourceRequest& request, const String& protocol, const WebCore::ClientOrigin&, bool)
  {
 -    return makeUnique<WebSocketTask>(channel, request, protocol);
 +    return makeUnique<WebSocketTask>(channel, request, protocol, ignoreCertificateErrors());
@@ -9366,7 +9190,7 @@ index fb70fe2e30abc45508eac1ff7b6fa5b576c22917..6d6404a9fdacf1f5c5f108b860e0e577
      if (!error)
          return true;
 diff --git a/Source/WebKit/NetworkProcess/soup/NetworkSessionSoup.cpp b/Source/WebKit/NetworkProcess/soup/NetworkSessionSoup.cpp
-index 8893772d3dd02b38124e8eefae5199274b3b9148..76939e34e7f9d69814fed6b5eb320f57313dc03c 100644
+index ddb157400854dd30878a15879cd3b8c2c13f436f..9e952998a139b84ccb80f7e756343e4b1a49efcc 100644
 --- a/Source/WebKit/NetworkProcess/soup/NetworkSessionSoup.cpp
 +++ b/Source/WebKit/NetworkProcess/soup/NetworkSessionSoup.cpp
 @@ -109,6 +109,11 @@ static gboolean webSocketAcceptCertificateCallback(GTlsConnection* connection, G
@@ -9394,7 +9218,7 @@ index 8893772d3dd02b38124e8eefae5199274b3b9148..76939e34e7f9d69814fed6b5eb320f57
 +    g_signal_connect(connection, "accept-certificate", G_CALLBACK(webSocketAcceptCertificateCallbackIgnoreTLSErrors), soupMessage);
 +}
 +
- std::unique_ptr<WebSocketTask> NetworkSessionSoup::createWebSocketTask(WebPageProxyIdentifier, NetworkSocketChannel& channel, const ResourceRequest& request, const String& protocol, const ClientOrigin&, bool, bool)
+ std::unique_ptr<WebSocketTask> NetworkSessionSoup::createWebSocketTask(WebPageProxyIdentifier, NetworkSocketChannel& channel, const ResourceRequest& request, const String& protocol, const ClientOrigin&, bool)
  {
      GRefPtr<SoupMessage> soupMessage = request.createSoupMessage(blobRegistry());
 @@ -127,14 +141,21 @@ std::unique_ptr<WebSocketTask> NetworkSessionSoup::createWebSocketTask(WebPagePr
@@ -9427,10 +9251,10 @@ index 8893772d3dd02b38124e8eefae5199274b3b9148..76939e34e7f9d69814fed6b5eb320f57
      }
      return makeUnique<WebSocketTask>(channel, request, soupSession(), soupMessage.get(), protocol);
 diff --git a/Source/WebKit/PlatformGTK.cmake b/Source/WebKit/PlatformGTK.cmake
-index 1d029fd29c4e3fded98e80dd30f48532ad45b844..d6e9cf9f2259b3d0aaf0ed7f551e8a5db5d02e7c 100644
+index c8b445abe3f464e8d327642e80ac900b565f93d3..b1792226c39d05ec9961581a00b58a92da615b73 100644
 --- a/Source/WebKit/PlatformGTK.cmake
 +++ b/Source/WebKit/PlatformGTK.cmake
-@@ -494,6 +494,9 @@ list(APPEND WebKit_SYSTEM_INCLUDE_DIRECTORIES
+@@ -488,6 +488,9 @@ list(APPEND WebKit_SYSTEM_INCLUDE_DIRECTORIES
      ${GSTREAMER_PBUTILS_INCLUDE_DIRS}
      ${GTK_INCLUDE_DIRS}
      ${LIBSOUP_INCLUDE_DIRS}
@@ -9440,7 +9264,7 @@ index 1d029fd29c4e3fded98e80dd30f48532ad45b844..d6e9cf9f2259b3d0aaf0ed7f551e8a5d
  )
  
  if (USE_WPE_RENDERER)
-@@ -535,6 +538,9 @@ if (USE_LIBWEBRTC)
+@@ -541,6 +544,9 @@ if (USE_LIBWEBRTC)
      list(APPEND WebKit_SYSTEM_INCLUDE_DIRECTORIES
          "${THIRDPARTY_DIR}/libwebrtc/Source/"
          "${THIRDPARTY_DIR}/libwebrtc/Source/webrtc"
@@ -9450,9 +9274,9 @@ index 1d029fd29c4e3fded98e80dd30f48532ad45b844..d6e9cf9f2259b3d0aaf0ed7f551e8a5d
      )
  endif ()
  
-@@ -565,6 +571,12 @@ GENERATE_API_HEADERS(WebKit2WebExtension_HEADER_TEMPLATES
-     "-DUSE(GTK4)=$<BOOL:${USE_GTK4}>"
- )
+@@ -555,6 +561,12 @@ if (ENABLE_MEDIA_STREAM)
+     )
+ endif ()
  
 +# Playwright begin
 +list(APPEND WebKit_PRIVATE_INCLUDE_DIRECTORIES
@@ -9464,26 +9288,26 @@ index 1d029fd29c4e3fded98e80dd30f48532ad45b844..d6e9cf9f2259b3d0aaf0ed7f551e8a5d
  set(WebKit2GTK_ENUM_GENERATION_HEADERS ${WebKit2GTK_INSTALLED_HEADERS})
  list(REMOVE_ITEM WebKit2GTK_ENUM_GENERATION_HEADERS ${WebKit2Gtk_DERIVED_SOURCES_DIR}/webkit/WebKitEnumTypes.h)
 diff --git a/Source/WebKit/PlatformWPE.cmake b/Source/WebKit/PlatformWPE.cmake
-index 8375a0623af77204b3fa5d2fd68af3658164c4c7..6e5d6a9dfe7da8b0f4b7acb65acb4c3849968d87 100644
+index 8126927e398ac903e7c3a7200cdb67894a8c4ed7..7dc4ee3c07733ab2c7a39c57499408fba81eed19 100644
 --- a/Source/WebKit/PlatformWPE.cmake
 +++ b/Source/WebKit/PlatformWPE.cmake
-@@ -226,6 +226,7 @@ set(WPE_API_INSTALLED_HEADERS
-     ${DERIVED_SOURCES_WPE_API_DIR}/WebKitEnumTypes.h
-     ${DERIVED_SOURCES_WPE_API_DIR}/WebKitVersion.h
-     ${WEBKIT_DIR}/UIProcess/API/wpe/WebKitColor.h
+@@ -197,6 +197,7 @@ set(WPE_API_INSTALLED_HEADERS
+     ${WEBKIT_DIR}/UIProcess/API/wpe/WebKitOptionMenuItem.h
+     ${WEBKIT_DIR}/UIProcess/API/wpe/WebKitPermissionRequest.h
+     ${WEBKIT_DIR}/UIProcess/API/wpe/WebKitPlugin.h
 +    ${WEBKIT_DIR}/UIProcess/API/wpe/WebKitPointerLockPermissionRequest.h
+     ${WEBKIT_DIR}/UIProcess/API/wpe/WebKitPolicyDecision.h
      ${WEBKIT_DIR}/UIProcess/API/wpe/WebKitRectangle.h
-     ${WEBKIT_DIR}/UIProcess/API/wpe/WebKitWebViewBackend.h
-     ${WEBKIT_DIR}/UIProcess/API/wpe/webkit.h
-@@ -349,6 +350,7 @@ list(APPEND WebKit_INCLUDE_DIRECTORIES
+     ${WEBKIT_DIR}/UIProcess/API/wpe/WebKitResponsePolicyDecision.h
+@@ -325,6 +326,7 @@ list(APPEND WebKit_INCLUDE_DIRECTORIES
+     "${WEBKIT_DIR}/UIProcess/CoordinatedGraphics"
      "${WEBKIT_DIR}/UIProcess/Inspector/glib"
-     "${WEBKIT_DIR}/UIProcess/Notifications/glib/"
      "${WEBKIT_DIR}/UIProcess/geoclue"
 +    "${WEBKIT_DIR}/UIProcess/glib"
      "${WEBKIT_DIR}/UIProcess/gstreamer"
      "${WEBKIT_DIR}/UIProcess/linux"
      "${WEBKIT_DIR}/UIProcess/soup"
-@@ -370,8 +372,17 @@ list(APPEND WebKit_SYSTEM_INCLUDE_DIRECTORIES
+@@ -346,8 +348,17 @@ list(APPEND WebKit_SYSTEM_INCLUDE_DIRECTORIES
      ${GIO_UNIX_INCLUDE_DIRS}
      ${GLIB_INCLUDE_DIRS}
      ${LIBSOUP_INCLUDE_DIRS}
@@ -9698,10 +9522,10 @@ index f2f3979fcac9dfd97d0e0ead600fe35eb8defd40..ac91412e1a96bdf521b1890a66e465dc
      NSEvent* nativeEvent() const { return m_nativeEvent.get(); }
  #elif PLATFORM(GTK)
 diff --git a/Source/WebKit/Shared/WebCoreArgumentCoders.cpp b/Source/WebKit/Shared/WebCoreArgumentCoders.cpp
-index 39baefe9fd496ea8a4943612c5df57a09ec3b34c..feee88d36c6d6604e69125780c73fbe11931fcf6 100644
+index 45f31504c0945236135bb476517d02a742c07ecb..2cd05dd4bda73f8e44e456ef3a8ce3af87875aca 100644
 --- a/Source/WebKit/Shared/WebCoreArgumentCoders.cpp
 +++ b/Source/WebKit/Shared/WebCoreArgumentCoders.cpp
-@@ -125,6 +125,10 @@
+@@ -123,6 +123,10 @@
  #include <WebCore/TextRecognitionResult.h>
  #endif
  
@@ -9712,7 +9536,7 @@ index 39baefe9fd496ea8a4943612c5df57a09ec3b34c..feee88d36c6d6604e69125780c73fbe1
  // FIXME: Seems like we could use std::tuple to cut down the code below a lot!
  
  namespace IPC {
-@@ -1299,6 +1303,9 @@ void ArgumentCoder<WindowFeatures>::encode(Encoder& encoder, const WindowFeature
+@@ -1297,6 +1301,9 @@ void ArgumentCoder<WindowFeatures>::encode(Encoder& encoder, const WindowFeature
      encoder << windowFeatures.resizable;
      encoder << windowFeatures.fullscreen;
      encoder << windowFeatures.dialog;
@@ -9722,7 +9546,7 @@ index 39baefe9fd496ea8a4943612c5df57a09ec3b34c..feee88d36c6d6604e69125780c73fbe1
  }
  
  bool ArgumentCoder<WindowFeatures>::decode(Decoder& decoder, WindowFeatures& windowFeatures)
-@@ -1327,6 +1334,12 @@ bool ArgumentCoder<WindowFeatures>::decode(Decoder& decoder, WindowFeatures& win
+@@ -1325,6 +1332,12 @@ bool ArgumentCoder<WindowFeatures>::decode(Decoder& decoder, WindowFeatures& win
          return false;
      if (!decoder.decode(windowFeatures.dialog))
          return false;
@@ -9735,7 +9559,7 @@ index 39baefe9fd496ea8a4943612c5df57a09ec3b34c..feee88d36c6d6604e69125780c73fbe1
      return true;
  }
  
-@@ -1340,6 +1353,11 @@ void ArgumentCoder<DragData>::encode(Encoder& encoder, const DragData& dragData)
+@@ -1338,6 +1351,11 @@ void ArgumentCoder<DragData>::encode(Encoder& encoder, const DragData& dragData)
  #if PLATFORM(COCOA)
      encoder << dragData.pasteboardName();
      encoder << dragData.fileNames();
@@ -9747,7 +9571,7 @@ index 39baefe9fd496ea8a4943612c5df57a09ec3b34c..feee88d36c6d6604e69125780c73fbe1
  #endif
      encoder << dragData.dragDestinationActionMask();
      encoder << dragData.pageID();
-@@ -1363,9 +1381,16 @@ bool ArgumentCoder<DragData>::decode(Decoder& decoder, DragData& dragData)
+@@ -1361,9 +1379,16 @@ bool ArgumentCoder<DragData>::decode(Decoder& decoder, DragData& dragData)
      if (!decoder.decode(applicationFlags))
          return false;
  
@@ -9765,7 +9589,7 @@ index 39baefe9fd496ea8a4943612c5df57a09ec3b34c..feee88d36c6d6604e69125780c73fbe1
      if (!decoder.decode(pasteboardName))
          return false;
  
-@@ -1381,8 +1406,14 @@ bool ArgumentCoder<DragData>::decode(Decoder& decoder, DragData& dragData)
+@@ -1379,8 +1404,14 @@ bool ArgumentCoder<DragData>::decode(Decoder& decoder, DragData& dragData)
      if (!decoder.decode(pageID))
          return false;
  
@@ -10259,7 +10083,7 @@ index 90df093a49c09dc670dfea55077c77d889dd1c1b..6ffd51532e29b941b8dc10f545b7f5b8
      return WebTouchEvent();
  }
 diff --git a/Source/WebKit/Sources.txt b/Source/WebKit/Sources.txt
-index 69195152333b0deb19654ea685ef86b313bbb192..d7521c5e0fa48a7bc9facad0895f7debebc674ad 100644
+index 67f054b35749b05c22000ea70e7ab88440aafeae..fc3636bf931c38e29cff11caf5ff3fc6f862c851 100644
 --- a/Source/WebKit/Sources.txt
 +++ b/Source/WebKit/Sources.txt
 @@ -399,11 +399,14 @@ Shared/XR/XRDeviceProxy.cpp
@@ -10293,8 +10117,8 @@ index 69195152333b0deb19654ea685ef86b313bbb192..d7521c5e0fa48a7bc9facad0895f7deb
 +UIProcess/WebPageInspectorInputAgent.cpp
  UIProcess/WebPageProxy.cpp
  UIProcess/WebPasteboardProxy.cpp
- UIProcess/WebPermissionControllerProxy.cpp
-@@ -580,7 +586,11 @@ UIProcess/Inspector/WebInspectorUtilities.cpp
+ UIProcess/WebPreferences.cpp
+@@ -579,7 +585,11 @@ UIProcess/Inspector/WebInspectorUtilities.cpp
  UIProcess/Inspector/WebPageDebuggable.cpp
  UIProcess/Inspector/WebPageInspectorController.cpp
  
@@ -10307,10 +10131,10 @@ index 69195152333b0deb19654ea685ef86b313bbb192..d7521c5e0fa48a7bc9facad0895f7deb
  UIProcess/Media/AudioSessionRoutingArbitratorProxy.cpp
  UIProcess/Media/MediaUsageManager.cpp
 diff --git a/Source/WebKit/SourcesCocoa.txt b/Source/WebKit/SourcesCocoa.txt
-index 42fb8d187014366a1e54a0658d3005c5444ae754..ec4b0b9642f64ea2bc04ca29d3941624ef555e3b 100644
+index 301152947b0142d898f184c78d832dcf73259a6c..43816baf94beeecad4c1e93a00fdd63a467e81be 100644
 --- a/Source/WebKit/SourcesCocoa.txt
 +++ b/Source/WebKit/SourcesCocoa.txt
-@@ -283,6 +283,7 @@ UIProcess/API/Cocoa/_WKApplicationManifest.mm
+@@ -281,6 +281,7 @@ UIProcess/API/Cocoa/_WKApplicationManifest.mm
  UIProcess/API/Cocoa/_WKAttachment.mm
  UIProcess/API/Cocoa/_WKAutomationSession.mm
  UIProcess/API/Cocoa/_WKAutomationSessionConfiguration.mm
@@ -10318,7 +10142,7 @@ index 42fb8d187014366a1e54a0658d3005c5444ae754..ec4b0b9642f64ea2bc04ca29d3941624
  UIProcess/API/Cocoa/_WKContentRuleListAction.mm
  UIProcess/API/Cocoa/_WKContextMenuElementInfo.mm
  UIProcess/API/Cocoa/_WKCustomHeaderFields.mm @no-unify
-@@ -461,6 +462,7 @@ UIProcess/Inspector/ios/WKInspectorHighlightView.mm
+@@ -458,6 +459,7 @@ UIProcess/Inspector/ios/WKInspectorHighlightView.mm
  UIProcess/Inspector/ios/WKInspectorNodeSearchGestureRecognizer.mm
  
  UIProcess/Inspector/mac/RemoteWebInspectorUIProxyMac.mm
@@ -10327,7 +10151,7 @@ index 42fb8d187014366a1e54a0658d3005c5444ae754..ec4b0b9642f64ea2bc04ca29d3941624
  UIProcess/Inspector/mac/WKInspectorResourceURLSchemeHandler.mm
  UIProcess/Inspector/mac/WKInspectorViewController.mm
 diff --git a/Source/WebKit/SourcesGTK.txt b/Source/WebKit/SourcesGTK.txt
-index 1ce5369aaedcfe904f2a02d7ca9492b34cfa05e1..ff8cec3c01b41e8ec328c9b55fe98bd9c3936819 100644
+index c8d48a081abcb7cdb6ce4f7229e4ac64e5ecefbc..428636b072e631bdf02833720bd806cb8bbca3ed 100644
 --- a/Source/WebKit/SourcesGTK.txt
 +++ b/Source/WebKit/SourcesGTK.txt
 @@ -129,6 +129,7 @@ UIProcess/API/glib/WebKitAuthenticationRequest.cpp @no-unify
@@ -10338,7 +10162,7 @@ index 1ce5369aaedcfe904f2a02d7ca9492b34cfa05e1..ff8cec3c01b41e8ec328c9b55fe98bd9
  UIProcess/API/glib/WebKitContextMenuClient.cpp @no-unify
  UIProcess/API/glib/WebKitCookieManager.cpp @no-unify
  UIProcess/API/glib/WebKitCredential.cpp @no-unify
-@@ -250,6 +251,7 @@ UIProcess/WebsiteData/unix/WebsiteDataStoreUnix.cpp
+@@ -248,6 +249,7 @@ UIProcess/WebsiteData/unix/WebsiteDataStoreUnix.cpp
  
  UIProcess/cairo/BackingStoreCairo.cpp @no-unify
  
@@ -10346,7 +10170,7 @@ index 1ce5369aaedcfe904f2a02d7ca9492b34cfa05e1..ff8cec3c01b41e8ec328c9b55fe98bd9
  UIProcess/glib/WebPageProxyGLib.cpp
  UIProcess/glib/WebProcessPoolGLib.cpp
  UIProcess/glib/WebProcessProxyGLib.cpp
-@@ -267,6 +269,7 @@ UIProcess/gtk/ClipboardGtk4.cpp @no-unify
+@@ -265,6 +267,7 @@ UIProcess/gtk/ClipboardGtk4.cpp @no-unify
  UIProcess/gtk/WebDateTimePickerGtk.cpp
  UIProcess/gtk/GtkSettingsManager.cpp
  UIProcess/gtk/HardwareAccelerationManager.cpp
@@ -10354,7 +10178,7 @@ index 1ce5369aaedcfe904f2a02d7ca9492b34cfa05e1..ff8cec3c01b41e8ec328c9b55fe98bd9
  UIProcess/gtk/KeyBindingTranslator.cpp
  UIProcess/gtk/PointerLockManager.cpp @no-unify
  UIProcess/gtk/PointerLockManagerWayland.cpp @no-unify
-@@ -279,6 +282,8 @@ UIProcess/gtk/WaylandCompositor.cpp @no-unify
+@@ -277,6 +280,8 @@ UIProcess/gtk/WaylandCompositor.cpp @no-unify
  UIProcess/gtk/WebColorPickerGtk.cpp
  UIProcess/gtk/WebContextMenuProxyGtk.cpp
  UIProcess/gtk/WebDataListSuggestionsDropdownGtk.cpp
@@ -10364,7 +10188,7 @@ index 1ce5369aaedcfe904f2a02d7ca9492b34cfa05e1..ff8cec3c01b41e8ec328c9b55fe98bd9
  UIProcess/gtk/WebPasteboardProxyGtk.cpp
  UIProcess/gtk/WebPopupMenuProxyGtk.cpp
 diff --git a/Source/WebKit/SourcesWPE.txt b/Source/WebKit/SourcesWPE.txt
-index 79fa705d8250c9cfe487502e6aaa6ecb08a326d3..7624ff72a451b9892da3c883e12333f1a75ddf3a 100644
+index 24962250ca5c823c8679a94455bfb303b01e72c0..9783d5f1bb82aa307c1cfdf6ca4861abb8f653e0 100644
 --- a/Source/WebKit/SourcesWPE.txt
 +++ b/Source/WebKit/SourcesWPE.txt
 @@ -87,6 +87,7 @@ Shared/glib/ProcessExecutablePathGLib.cpp
@@ -10399,7 +10223,7 @@ index 79fa705d8250c9cfe487502e6aaa6ecb08a326d3..7624ff72a451b9892da3c883e12333f1
  UIProcess/API/wpe/WebKitInputMethodContextWPE.cpp @no-unify
  UIProcess/API/wpe/WebKitPopupMenu.cpp @no-unify
  UIProcess/API/wpe/WebKitRectangle.cpp @no-unify
-@@ -208,6 +212,7 @@ UIProcess/Gamepad/wpe/UIGamepadProviderWPE.cpp
+@@ -206,6 +210,7 @@ UIProcess/CoordinatedGraphics/DrawingAreaProxyCoordinatedGraphics.cpp
  
  UIProcess/geoclue/GeoclueGeolocationProvider.cpp
  
@@ -10407,7 +10231,7 @@ index 79fa705d8250c9cfe487502e6aaa6ecb08a326d3..7624ff72a451b9892da3c883e12333f1
  UIProcess/glib/WebPageProxyGLib.cpp
  UIProcess/glib/WebProcessPoolGLib.cpp
  UIProcess/glib/WebProcessProxyGLib.cpp
-@@ -235,6 +240,11 @@ UIProcess/linux/MemoryPressureMonitor.cpp
+@@ -231,6 +236,11 @@ UIProcess/linux/MemoryPressureMonitor.cpp
  
  UIProcess/soup/WebProcessPoolSoup.cpp
  
@@ -10419,7 +10243,7 @@ index 79fa705d8250c9cfe487502e6aaa6ecb08a326d3..7624ff72a451b9892da3c883e12333f1
  UIProcess/wpe/WebPageProxyWPE.cpp
  
  WebProcess/GPU/graphics/gbm/RemoteGraphicsContextGLProxyGBM.cpp
-@@ -265,6 +275,8 @@ WebProcess/WebCoreSupport/glib/WebEditorClientGLib.cpp
+@@ -261,6 +271,8 @@ WebProcess/WebCoreSupport/glib/WebEditorClientGLib.cpp
  
  WebProcess/WebCoreSupport/soup/WebFrameNetworkingContext.cpp
  
@@ -10659,7 +10483,7 @@ index 67c2480832991ff512fd49b0195cc195e85794e2..619c8a85bd1bdb14a593f15fa02ae90b
  #import <WebCore/Credential.h>
  #import <WebCore/RegistrationDatabase.h>
  #import <WebCore/ServiceWorkerClientData.h>
-@@ -234,6 +235,11 @@ static WallTime toSystemClockTime(NSDate *date)
+@@ -234,6 +235,11 @@ - (void)removeDataOfTypes:(NSSet *)dataTypes modifiedSince:(NSDate *)date comple
      });
  }
  
@@ -10838,7 +10662,7 @@ diff --git a/Source/WebKit/UIProcess/API/Cocoa/_WKProcessPoolConfiguration.mm b/
 index 2e235bb880c638a0e74256b6d66cb0244ea0a3f1..3471eebb47e860f7c2071d0e7f2691c9f0a6355d 100644
 --- a/Source/WebKit/UIProcess/API/Cocoa/_WKProcessPoolConfiguration.mm
 +++ b/Source/WebKit/UIProcess/API/Cocoa/_WKProcessPoolConfiguration.mm
-@@ -257,6 +257,16 @@
+@@ -257,6 +257,16 @@ - (BOOL)processSwapsOnNavigation
      return _processPoolConfiguration->processSwapsOnNavigation();
  }
  
@@ -11109,10 +10933,10 @@ index 64c90f9f25fc44911e819ab94fa973bf0b82a0e4..8d8c739fb903b71f7881801cb41901f2
      bool canRunBeforeUnloadConfirmPanel() const final { return true; }
  
 diff --git a/Source/WebKit/UIProcess/API/glib/WebKitWebContext.cpp b/Source/WebKit/UIProcess/API/glib/WebKitWebContext.cpp
-index 6bb6767869af7b7b3ac1ff2bb935432d9e4b6ffd..04ae9eea575c9150aededb4af9d8b07a387be665 100644
+index 3c6482c9fa52135d6aa0ceee148a02c02c4b080c..97860d7823c9f6367f2ead31735b1eeed8b1c9bb 100644
 --- a/Source/WebKit/UIProcess/API/glib/WebKitWebContext.cpp
 +++ b/Source/WebKit/UIProcess/API/glib/WebKitWebContext.cpp
-@@ -406,10 +406,19 @@ static void webkitWebContextSetProperty(GObject* object, guint propID, const GVa
+@@ -404,10 +404,19 @@ static void webkitWebContextSetProperty(GObject* object, guint propID, const GVa
      }
  }
  
@@ -11132,7 +10956,7 @@ index 6bb6767869af7b7b3ac1ff2bb935432d9e4b6ffd..04ae9eea575c9150aededb4af9d8b07a
      GUniquePtr<char> bundleFilename(g_build_filename(injectedBundleDirectory(), INJECTED_BUNDLE_FILENAME, nullptr));
  
      WebKitWebContext* webContext = WEBKIT_WEB_CONTEXT(object);
-@@ -462,6 +471,8 @@ static void webkitWebContextConstructed(GObject* object)
+@@ -460,6 +469,8 @@ static void webkitWebContextConstructed(GObject* object)
  
  static void webkitWebContextDispose(GObject* object)
  {
@@ -11151,10 +10975,10 @@ index 78d1578f94793e9e59a3d4d2b33e79ea8530fa04..493cdadac3873508b3efa3048638e73a
  #endif
 +int webkitWebContextExistingCount();
 diff --git a/Source/WebKit/UIProcess/API/glib/WebKitWebView.cpp b/Source/WebKit/UIProcess/API/glib/WebKitWebView.cpp
-index d105f15d8d6851ded0397723a74a5d283abc5e51..24936b79ba4a3a51c94235c9717a2efd1164b590 100644
+index f331430f4df7cea72a0d7477fa7f36bc8eaf2079..fb218d4df7d269b2d62c4040e60cba6aaa21e2e8 100644
 --- a/Source/WebKit/UIProcess/API/glib/WebKitWebView.cpp
 +++ b/Source/WebKit/UIProcess/API/glib/WebKitWebView.cpp
-@@ -33,6 +33,7 @@
+@@ -32,6 +32,7 @@
  #include "WebCertificateInfo.h"
  #include "WebContextMenuItem.h"
  #include "WebContextMenuItemData.h"
@@ -11162,7 +10986,7 @@ index d105f15d8d6851ded0397723a74a5d283abc5e51..24936b79ba4a3a51c94235c9717a2efd
  #include "WebKitAuthenticationRequestPrivate.h"
  #include "WebKitBackForwardListPrivate.h"
  #include "WebKitContextMenuClient.h"
-@@ -52,6 +53,7 @@
+@@ -51,6 +52,7 @@
  #include "WebKitJavascriptResultPrivate.h"
  #include "WebKitNavigationClient.h"
  #include "WebKitNotificationPrivate.h"
@@ -11170,7 +10994,7 @@ index d105f15d8d6851ded0397723a74a5d283abc5e51..24936b79ba4a3a51c94235c9717a2efd
  #include "WebKitPrivate.h"
  #include "WebKitResponsePolicyDecision.h"
  #include "WebKitScriptDialogPrivate.h"
-@@ -86,7 +88,6 @@
+@@ -85,7 +87,6 @@
  
  #if PLATFORM(GTK)
  #include "WebKitInputMethodContextImplGtk.h"
@@ -11178,7 +11002,7 @@ index d105f15d8d6851ded0397723a74a5d283abc5e51..24936b79ba4a3a51c94235c9717a2efd
  #include "WebKitPrintOperationPrivate.h"
  #include "WebKitWebInspectorPrivate.h"
  #include "WebKitWebViewBasePrivate.h"
-@@ -130,6 +131,7 @@ enum {
+@@ -133,6 +134,7 @@ enum {
      CLOSE,
  
      SCRIPT_DIALOG,
@@ -11186,7 +11010,7 @@ index d105f15d8d6851ded0397723a74a5d283abc5e51..24936b79ba4a3a51c94235c9717a2efd
  
      DECIDE_POLICY,
      PERMISSION_REQUEST,
-@@ -468,6 +470,9 @@ void WebKitWebViewClient::handleDownloadRequest(WKWPE::View&, DownloadProxy& dow
+@@ -471,6 +473,9 @@ void WebKitWebViewClient::handleDownloadRequest(WKWPE::View&, DownloadProxy& dow
  
  void WebKitWebViewClient::frameDisplayed(WKWPE::View&)
  {
@@ -11196,7 +11020,7 @@ index d105f15d8d6851ded0397723a74a5d283abc5e51..24936b79ba4a3a51c94235c9717a2efd
      {
          SetForScope inFrameDisplayedGuard(m_webView->priv->inFrameDisplayed, true);
          for (const auto& callback : m_webView->priv->frameDisplayedCallbacks) {
-@@ -498,6 +503,7 @@ void WebKitWebViewClient::didReceiveUserMessage(WKWPE::View&, UserMessage&& mess
+@@ -501,6 +506,7 @@ void WebKitWebViewClient::didReceiveUserMessage(WKWPE::View&, UserMessage&& mess
  {
      webkitWebViewDidReceiveUserMessage(m_webView, WTFMove(message), WTFMove(completionHandler));
  }
@@ -11204,7 +11028,7 @@ index d105f15d8d6851ded0397723a74a5d283abc5e51..24936b79ba4a3a51c94235c9717a2efd
  #endif
  
  static gboolean webkitWebViewLoadFail(WebKitWebView* webView, WebKitLoadEvent, const char* failingURI, GError* error)
-@@ -549,7 +555,7 @@ static gboolean webkitWebViewDecidePolicy(WebKitWebView*, WebKitPolicyDecision*
+@@ -552,7 +558,7 @@ static gboolean webkitWebViewDecidePolicy(WebKitWebView*, WebKitPolicyDecision*
  
  static gboolean webkitWebViewPermissionRequest(WebKitWebView*, WebKitPermissionRequest* request)
  {
@@ -11213,7 +11037,7 @@ index d105f15d8d6851ded0397723a74a5d283abc5e51..24936b79ba4a3a51c94235c9717a2efd
      if (WEBKIT_IS_POINTER_LOCK_PERMISSION_REQUEST(request)) {
          webkit_permission_request_allow(request);
          return TRUE;
-@@ -1791,6 +1797,15 @@ static void webkit_web_view_class_init(WebKitWebViewClass* webViewClass)
+@@ -1849,6 +1855,15 @@ static void webkit_web_view_class_init(WebKitWebViewClass* webViewClass)
          G_TYPE_BOOLEAN, 1,
          WEBKIT_TYPE_SCRIPT_DIALOG);
  
@@ -11229,7 +11053,7 @@ index d105f15d8d6851ded0397723a74a5d283abc5e51..24936b79ba4a3a51c94235c9717a2efd
      /**
       * WebKitWebView::decide-policy:
       * @web_view: the #WebKitWebView on which the signal is emitted
-@@ -2634,6 +2649,23 @@ void webkitWebViewRunJavaScriptBeforeUnloadConfirm(WebKitWebView* webView, const
+@@ -2692,6 +2707,23 @@ void webkitWebViewRunJavaScriptBeforeUnloadConfirm(WebKitWebView* webView, const
      webkit_script_dialog_unref(webView->priv->currentScriptDialog);
  }
  
@@ -11483,10 +11307,10 @@ index 7c08a13e10c75677452b74f52be2b447a5edaa13..56cf11581d453e8234f0957828083ee7
  };
  
 diff --git a/Source/WebKit/UIProcess/API/wpe/WPEView.cpp b/Source/WebKit/UIProcess/API/wpe/WPEView.cpp
-index fb4ca2944d6b71834f6bd7b2707af451950cdad5..f8f0b07f1f5593be7ed0a1b040b3fa71b8aed3f0 100644
+index 2e034517065800329d351bc0dd911a8d99f0eca5..4c4dc72c124e8af0a9f62914de8636a2ff95b936 100644
 --- a/Source/WebKit/UIProcess/API/wpe/WPEView.cpp
 +++ b/Source/WebKit/UIProcess/API/wpe/WPEView.cpp
-@@ -74,7 +74,9 @@ View::View(struct wpe_view_backend* backend, const API::PageConfiguration& baseC
+@@ -64,7 +64,9 @@ View::View(struct wpe_view_backend* backend, const API::PageConfiguration& baseC
      if (preferences) {
          preferences->setAcceleratedCompositingEnabled(true);
          preferences->setForceCompositingMode(true);
@@ -11859,7 +11683,7 @@ index c2221efc00618c2ec4d20a88c59840767bd52ff5..71f1cd7e07c705a7c830ff5c4f7d7f98
  #include <wpe/WebKitContextMenuActions.h>
  #include <wpe/WebKitContextMenuItem.h>
 diff --git a/Source/WebKit/UIProcess/AuxiliaryProcessProxy.cpp b/Source/WebKit/UIProcess/AuxiliaryProcessProxy.cpp
-index 27b741df36e254eb0c65e353b3d716f0c69fcc8d..a8ae9bae269b4bbf13cff5f2fc8f669aca78b8cf 100644
+index e660f7ef5f3a4395180284ea7788a8cdaf00cb8e..3fa42bad166933b032478650add698ead0220148 100644
 --- a/Source/WebKit/UIProcess/AuxiliaryProcessProxy.cpp
 +++ b/Source/WebKit/UIProcess/AuxiliaryProcessProxy.cpp
 @@ -123,7 +123,11 @@ void AuxiliaryProcessProxy::getLaunchOptions(ProcessLauncher::LaunchOptions& lau
@@ -11875,7 +11699,7 @@ index 27b741df36e254eb0c65e353b3d716f0c69fcc8d..a8ae9bae269b4bbf13cff5f2fc8f669a
      platformGetLaunchOptions(launchOptions);
  }
 diff --git a/Source/WebKit/UIProcess/AuxiliaryProcessProxy.h b/Source/WebKit/UIProcess/AuxiliaryProcessProxy.h
-index 876b7fd4e1c1abcfa55fe0942506d4f0fc79bb41..f6fb35b10bcfbaf5278b89a96159432e3bb33f20 100644
+index ed26655cceb69694641c4a3a81fb082b7067180f..2d557296f0a1667c5e8fed0b2ff06d9fe33a7012 100644
 --- a/Source/WebKit/UIProcess/AuxiliaryProcessProxy.h
 +++ b/Source/WebKit/UIProcess/AuxiliaryProcessProxy.h
 @@ -181,12 +181,15 @@ protected:
@@ -11892,9 +11716,9 @@ index 876b7fd4e1c1abcfa55fe0942506d4f0fc79bb41..f6fb35b10bcfbaf5278b89a96159432e
  
      void populateOverrideLanguagesLaunchOptions(ProcessLauncher::LaunchOptions&) const;
 -    Vector<String> platformOverrideLanguages() const;
-     void platformStartConnectionTerminationWatchdog();
  
      ResponsivenessTimer m_responsivenessTimer;
+     Vector<PendingMessage> m_pendingMessages;
 diff --git a/Source/WebKit/UIProcess/BackingStore.h b/Source/WebKit/UIProcess/BackingStore.h
 index d3a707a6b440421565144a56e586fa2723fe41c3..6e2492539efdf476452873f069bdaa34163f4a30 100644
 --- a/Source/WebKit/UIProcess/BackingStore.h
@@ -12116,7 +11940,7 @@ index a0a646412aa6ab10cb6b505cd35164dfa3a56200..e7ab24857b612bd48bba044bb43c6d93
  {
      if (!m_uiDelegate)
 diff --git a/Source/WebKit/UIProcess/Cocoa/WebPageProxyCocoa.mm b/Source/WebKit/UIProcess/Cocoa/WebPageProxyCocoa.mm
-index 0674c7d1d8d468d4450c1331f58961492e4764c3..1d944382049ceb41414bce54bf5b9d0754e8f67e 100644
+index 2859ca0b2f7df0c162e4060cd0d60a7829c9f048..81af89730d8033481728f657f6fbdcb99c17fbba 100644
 --- a/Source/WebKit/UIProcess/Cocoa/WebPageProxyCocoa.mm
 +++ b/Source/WebKit/UIProcess/Cocoa/WebPageProxyCocoa.mm
 @@ -37,6 +37,7 @@
@@ -12195,10 +12019,10 @@ index 0674c7d1d8d468d4450c1331f58961492e4764c3..1d944382049ceb41414bce54bf5b9d07
  #if PLATFORM(IOS_FAMILY)
  
 diff --git a/Source/WebKit/UIProcess/Cocoa/WebProcessPoolCocoa.mm b/Source/WebKit/UIProcess/Cocoa/WebProcessPoolCocoa.mm
-index b86d5e91351454f7ea0c4b133eb5992fcecc3f99..fe4d5d641ac7e0f7e4dfd884ff9bb4bdfa3e18b3 100644
+index 6029a621d06c859016f11064b1cd6d4e27e05d89..5000a7444fd57eae17237bb937ad6453b9ce20d3 100644
 --- a/Source/WebKit/UIProcess/Cocoa/WebProcessPoolCocoa.mm
 +++ b/Source/WebKit/UIProcess/Cocoa/WebProcessPoolCocoa.mm
-@@ -380,7 +380,7 @@ void WebProcessPool::platformInitializeWebProcess(const WebProcessProxy& process
+@@ -366,7 +366,7 @@ void WebProcessPool::platformInitializeWebProcess(const WebProcessProxy& process
      auto screenProperties = WebCore::collectScreenProperties();
      parameters.screenProperties = WTFMove(screenProperties);
  #if PLATFORM(MAC)
@@ -12207,7 +12031,7 @@ index b86d5e91351454f7ea0c4b133eb5992fcecc3f99..fe4d5d641ac7e0f7e4dfd884ff9bb4bd
  #endif
      
  #if PLATFORM(IOS) && HAVE(AGX_COMPILER_SERVICE)
-@@ -656,8 +656,8 @@ void WebProcessPool::registerNotificationObservers()
+@@ -634,8 +634,8 @@ void WebProcessPool::registerNotificationObservers()
      }];
  
      m_scrollerStyleNotificationObserver = [[NSNotificationCenter defaultCenter] addObserverForName:NSPreferredScrollerStyleDidChangeNotification object:nil queue:[NSOperationQueue currentQueue] usingBlock:^(NSNotification *notification) {
@@ -12218,6 +12042,55 @@ index b86d5e91351454f7ea0c4b133eb5992fcecc3f99..fe4d5d641ac7e0f7e4dfd884ff9bb4bd
      }];
  
      m_activationObserver = [[NSNotificationCenter defaultCenter] addObserverForName:NSApplicationDidBecomeActiveNotification object:NSApp queue:[NSOperationQueue currentQueue] usingBlock:^(NSNotification *notification) {
+diff --git a/Source/WebKit/UIProcess/Cocoa/WebViewImpl.h b/Source/WebKit/UIProcess/Cocoa/WebViewImpl.h
+index e59ceef97131b7d5d1f60e8c0b192b4866aa49cd..ce4e17e0500f25768b51484ce167a5a3fa3465f1 100644
+--- a/Source/WebKit/UIProcess/Cocoa/WebViewImpl.h
++++ b/Source/WebKit/UIProcess/Cocoa/WebViewImpl.h
+@@ -509,6 +509,9 @@ public:
+     void provideDataForPasteboard(NSPasteboard *, NSString *type);
+     NSArray *namesOfPromisedFilesDroppedAtDestination(NSURL *dropDestination);
+ 
++// Paywright begin
++    RetainPtr<CGImageRef> takeSnapshotForAutomation();
++// Paywright end
+     RefPtr<ViewSnapshot> takeViewSnapshot();
+     void saveBackForwardSnapshotForCurrentItem();
+     void saveBackForwardSnapshotForItem(WebBackForwardListItem&);
+diff --git a/Source/WebKit/UIProcess/Cocoa/WebViewImpl.mm b/Source/WebKit/UIProcess/Cocoa/WebViewImpl.mm
+index f653e7a68678330a7e7012b021f3123296caa4c1..82973b44b3216987c93839249a398ae12463caed 100644
+--- a/Source/WebKit/UIProcess/Cocoa/WebViewImpl.mm
++++ b/Source/WebKit/UIProcess/Cocoa/WebViewImpl.mm
+@@ -2783,6 +2783,11 @@ WebCore::DestinationColorSpace WebViewImpl::colorSpace()
+         if (!m_colorSpace)
+             m_colorSpace = [NSColorSpace sRGBColorSpace];
+     }
++    // Playwright begin
++    // window.colorSpace is sometimes null on popup windows in headless mode
++    if (!m_colorSpace)
++        return WebCore::DestinationColorSpace::SRGB();
++    // Playwright end
+ 
+     ASSERT(m_colorSpace);
+     return WebCore::DestinationColorSpace { [m_colorSpace CGColorSpace] };
+@@ -4770,6 +4775,18 @@ static RetainPtr<CGImageRef> takeWindowSnapshot(CGSWindowID windowID, bool captu
+     return adoptCF(CGWindowListCreateImage(CGRectNull, kCGWindowListOptionIncludingWindow, windowID, imageOptions));
+ }
+ 
++// Paywright begin
++RetainPtr<CGImageRef> WebViewImpl::takeSnapshotForAutomation() {
++    NSWindow *window = [m_view window];
++
++    CGSWindowID windowID = (CGSWindowID)window.windowNumber;
++    if (!windowID || !window.isVisible)
++        return nullptr;
++
++    return takeWindowSnapshot(windowID, true);
++}
++// Paywright end
++
+ RefPtr<ViewSnapshot> WebViewImpl::takeViewSnapshot()
+ {
+     NSWindow *window = [m_view window];
 diff --git a/Source/WebKit/UIProcess/CoordinatedGraphics/DrawingAreaProxyCoordinatedGraphics.cpp b/Source/WebKit/UIProcess/CoordinatedGraphics/DrawingAreaProxyCoordinatedGraphics.cpp
 index 32c82b899b301c957c5632c09e0ae321cf64e961..71cabafb96edd24d63f21f7fcc0a841cf8e72deb 100644
 --- a/Source/WebKit/UIProcess/CoordinatedGraphics/DrawingAreaProxyCoordinatedGraphics.cpp
@@ -16833,7 +16706,7 @@ index 0000000000000000000000000000000000000000..48c9ccc420c1b4ae3259e1d5ba17fd8f
 +
 +} // namespace WebKit
 diff --git a/Source/WebKit/UIProcess/WebPageProxy.cpp b/Source/WebKit/UIProcess/WebPageProxy.cpp
-index f114801f439bb4b8362d27ec656c57d8c2f0770b..8c428f1e44f26bfd7414588e610d9e6e2e630be1 100644
+index c13f8a1a2ed0a6502403af436ed87de31ca8df89..6efcbd91fdf105c826dcfef4f6d29f25c635c37e 100644
 --- a/Source/WebKit/UIProcess/WebPageProxy.cpp
 +++ b/Source/WebKit/UIProcess/WebPageProxy.cpp
 @@ -246,6 +246,9 @@
@@ -17241,7 +17114,7 @@ index f114801f439bb4b8362d27ec656c57d8c2f0770b..8c428f1e44f26bfd7414588e610d9e6e
  
      // Since runBeforeUnloadConfirmPanel() can spin a nested run loop we need to turn off the responsiveness timer and the tryClose timer.
      m_process->stopResponsivenessTimer();
-@@ -7743,6 +7919,8 @@ void WebPageProxy::didReceiveEvent(uint32_t opaqueType, bool handled)
+@@ -7738,6 +7914,8 @@ void WebPageProxy::didReceiveEvent(uint32_t opaqueType, bool handled)
              if (auto* automationSession = process().processPool().automationSession())
                  automationSession->mouseEventsFlushedForPage(*this);
              didFinishProcessingAllPendingMouseEvents();
@@ -17250,7 +17123,7 @@ index f114801f439bb4b8362d27ec656c57d8c2f0770b..8c428f1e44f26bfd7414588e610d9e6e
          }
          break;
      }
-@@ -7757,10 +7935,13 @@ void WebPageProxy::didReceiveEvent(uint32_t opaqueType, bool handled)
+@@ -7752,10 +7930,13 @@ void WebPageProxy::didReceiveEvent(uint32_t opaqueType, bool handled)
              pageClient().wheelEventWasNotHandledByWebCore(oldestProcessedEvent);
          }
  
@@ -17267,7 +17140,7 @@ index f114801f439bb4b8362d27ec656c57d8c2f0770b..8c428f1e44f26bfd7414588e610d9e6e
          break;
      }
  
-@@ -7769,7 +7950,6 @@ void WebPageProxy::didReceiveEvent(uint32_t opaqueType, bool handled)
+@@ -7764,7 +7945,6 @@ void WebPageProxy::didReceiveEvent(uint32_t opaqueType, bool handled)
      case WebEvent::RawKeyDown:
      case WebEvent::Char: {
          LOG(KeyHandling, "WebPageProxy::didReceiveEvent: %s (queue empty %d)", webKeyboardEventTypeString(type), m_keyEventQueue.isEmpty());
@@ -17275,7 +17148,7 @@ index f114801f439bb4b8362d27ec656c57d8c2f0770b..8c428f1e44f26bfd7414588e610d9e6e
          MESSAGE_CHECK(m_process, !m_keyEventQueue.isEmpty());
          auto event = m_keyEventQueue.takeFirst();
          MESSAGE_CHECK(m_process, type == event.type());
-@@ -7788,7 +7968,6 @@ void WebPageProxy::didReceiveEvent(uint32_t opaqueType, bool handled)
+@@ -7783,7 +7963,6 @@ void WebPageProxy::didReceiveEvent(uint32_t opaqueType, bool handled)
          // The call to doneWithKeyEvent may close this WebPage.
          // Protect against this being destroyed.
          Ref<WebPageProxy> protect(*this);
@@ -17283,7 +17156,7 @@ index f114801f439bb4b8362d27ec656c57d8c2f0770b..8c428f1e44f26bfd7414588e610d9e6e
          pageClient().doneWithKeyEvent(event, handled);
          if (!handled)
              m_uiClient->didNotHandleKeyEvent(this, event);
-@@ -7797,6 +7976,7 @@ void WebPageProxy::didReceiveEvent(uint32_t opaqueType, bool handled)
+@@ -7792,6 +7971,7 @@ void WebPageProxy::didReceiveEvent(uint32_t opaqueType, bool handled)
          if (!canProcessMoreKeyEvents) {
              if (auto* automationSession = process().processPool().automationSession())
                  automationSession->keyboardEventsFlushedForPage(*this);
@@ -17291,7 +17164,7 @@ index f114801f439bb4b8362d27ec656c57d8c2f0770b..8c428f1e44f26bfd7414588e610d9e6e
          }
          break;
      }
-@@ -8130,7 +8310,10 @@ void WebPageProxy::dispatchProcessDidTerminate(ProcessTerminationReason reason)
+@@ -8125,7 +8305,10 @@ void WebPageProxy::dispatchProcessDidTerminate(ProcessTerminationReason reason)
  {
      WEBPAGEPROXY_RELEASE_LOG_ERROR(Loading, "dispatchProcessDidTerminate: reason=%{public}s", processTerminationReasonToString(reason));
  
@@ -17303,7 +17176,7 @@ index f114801f439bb4b8362d27ec656c57d8c2f0770b..8c428f1e44f26bfd7414588e610d9e6e
      if (m_loaderClient)
          handledByClient = reason != ProcessTerminationReason::RequestedByClient && m_loaderClient->processDidCrash(*this);
      else
-@@ -8464,6 +8647,7 @@ static Span<const ASCIILiteral> gpuMachServices()
+@@ -8459,6 +8642,7 @@ static Span<const ASCIILiteral> gpuMachServices()
  
  WebPageCreationParameters WebPageProxy::creationParameters(WebProcessProxy& process, DrawingAreaProxy& drawingArea, RefPtr<API::WebsitePolicies>&& websitePolicies)
  {
@@ -17311,7 +17184,7 @@ index f114801f439bb4b8362d27ec656c57d8c2f0770b..8c428f1e44f26bfd7414588e610d9e6e
      WebPageCreationParameters parameters;
  
      parameters.processDisplayName = configuration().processDisplayName();
-@@ -8657,6 +8841,8 @@ WebPageCreationParameters WebPageProxy::creationParameters(WebProcessProxy& proc
+@@ -8652,6 +8836,8 @@ WebPageCreationParameters WebPageProxy::creationParameters(WebProcessProxy& proc
  
      parameters.httpsUpgradeEnabled = preferences().upgradeKnownHostsToHTTPSEnabled() ? m_configuration->httpsUpgradeEnabled() : false;
  
@@ -17320,7 +17193,7 @@ index f114801f439bb4b8362d27ec656c57d8c2f0770b..8c428f1e44f26bfd7414588e610d9e6e
  #if PLATFORM(IOS)
      // FIXME: This is also being passed over the to WebProcess via the PreferencesStore.
      parameters.allowsDeprecatedSynchronousXMLHttpRequestDuringUnload = allowsDeprecatedSynchronousXMLHttpRequestDuringUnload();
-@@ -8729,6 +8915,14 @@ void WebPageProxy::gamepadActivity(const Vector<GamepadData>& gamepadDatas, Even
+@@ -8724,6 +8910,14 @@ void WebPageProxy::gamepadActivity(const Vector<GamepadData>& gamepadDatas, Even
  
  void WebPageProxy::didReceiveAuthenticationChallengeProxy(Ref<AuthenticationChallengeProxy>&& authenticationChallenge, NegotiatedLegacyTLS negotiatedLegacyTLS)
  {
@@ -17335,7 +17208,7 @@ index f114801f439bb4b8362d27ec656c57d8c2f0770b..8c428f1e44f26bfd7414588e610d9e6e
      if (negotiatedLegacyTLS == NegotiatedLegacyTLS::Yes) {
          m_navigationClient->shouldAllowLegacyTLS(*this, authenticationChallenge.get(), [this, protectedThis = Ref { *this }, authenticationChallenge] (bool shouldAllowLegacyTLS) {
              if (shouldAllowLegacyTLS)
-@@ -8822,6 +9016,15 @@ void WebPageProxy::requestGeolocationPermissionForFrame(GeolocationIdentifier ge
+@@ -8817,6 +9011,15 @@ void WebPageProxy::requestGeolocationPermissionForFrame(GeolocationIdentifier ge
              request->deny();
      };
  
@@ -17352,7 +17225,7 @@ index f114801f439bb4b8362d27ec656c57d8c2f0770b..8c428f1e44f26bfd7414588e610d9e6e
      // and make it one UIClient call that calls the completionHandler with false
      // if there is no delegate instead of returning the completionHandler
 diff --git a/Source/WebKit/UIProcess/WebPageProxy.h b/Source/WebKit/UIProcess/WebPageProxy.h
-index fb40ca2963e67f3e39fbc552f9d5c45ce01b6cc0..ffafbe89a52870233cce27da61ab66bcb745cf23 100644
+index b6243ccfe83e2e044ea0a3ec644dc10119c168d0..78a567c9e22d20731cd124da30b6ac3f50077bd2 100644
 --- a/Source/WebKit/UIProcess/WebPageProxy.h
 +++ b/Source/WebKit/UIProcess/WebPageProxy.h
 @@ -39,6 +39,7 @@
@@ -17451,8 +17324,8 @@ index fb40ca2963e67f3e39fbc552f9d5c45ce01b6cc0..ffafbe89a52870233cce27da61ab66bc
 +    bool cancelDragIfNeeded();
  #if PLATFORM(COCOA)
      void startDrag(const WebCore::DragItem&, const ShareableBitmap::Handle& dragImageHandle);
-     void setPromisedDataForImage(const String& pasteboardName, const SharedMemory::Handle& imageHandle, const String& filename, const String& extension,
-         const String& title, const String& url, const String& visibleURL, const SharedMemory::Handle& archiveHandle, const String& originIdentifier);
+     void setPromisedDataForImage(const String& pasteboardName, const SharedMemory::IPCHandle& imageHandle, const String& filename, const String& extension,
+         const String& title, const String& url, const String& visibleURL, const SharedMemory::IPCHandle& archiveHandle, const String& originIdentifier);
 +    void releaseInspectorDragPasteboard();
  #endif
 -#if PLATFORM(GTK)
@@ -17474,7 +17347,7 @@ index fb40ca2963e67f3e39fbc552f9d5c45ce01b6cc0..ffafbe89a52870233cce27da61ab66bc
  #endif
  
  #if ENABLE(WEB_CRYPTO)
-@@ -2767,6 +2796,7 @@ private:
+@@ -2760,6 +2789,7 @@ private:
      String m_overrideContentSecurityPolicy;
  
      RefPtr<WebInspectorUIProxy> m_inspector;
@@ -17482,7 +17355,7 @@ index fb40ca2963e67f3e39fbc552f9d5c45ce01b6cc0..ffafbe89a52870233cce27da61ab66bc
  
  #if PLATFORM(COCOA)
      WeakObjCPtr<WKWebView> m_cocoaView;
-@@ -3041,6 +3071,20 @@ private:
+@@ -3034,6 +3064,20 @@ private:
      unsigned m_currentDragNumberOfFilesToBeAccepted { 0 };
      WebCore::IntRect m_currentDragCaretRect;
      WebCore::IntRect m_currentDragCaretEditableElementRect;
@@ -17503,7 +17376,7 @@ index fb40ca2963e67f3e39fbc552f9d5c45ce01b6cc0..ffafbe89a52870233cce27da61ab66bc
  #endif
  
      PageLoadState m_pageLoadState;
-@@ -3255,6 +3299,9 @@ private:
+@@ -3248,6 +3292,9 @@ private:
          RefPtr<API::Object> messageBody;
      };
      Vector<InjectedBundleMessage> m_pendingInjectedBundleMessages;
@@ -17514,7 +17387,7 @@ index fb40ca2963e67f3e39fbc552f9d5c45ce01b6cc0..ffafbe89a52870233cce27da61ab66bc
  #if PLATFORM(IOS_FAMILY) && ENABLE(DEVICE_ORIENTATION)
      std::unique_ptr<WebDeviceOrientationUpdateProviderProxy> m_webDeviceOrientationUpdateProviderProxy;
 diff --git a/Source/WebKit/UIProcess/WebPageProxy.messages.in b/Source/WebKit/UIProcess/WebPageProxy.messages.in
-index 941f874a3f7be45275d18cf9495d91800839d32b..37ceecb165f5b568d4d4b1a4974c96b072c492cc 100644
+index 98967f6eda918d3e0da553e5a88e035db9cfb23e..a34a228d4244ce59d8079d26d032605802644958 100644
 --- a/Source/WebKit/UIProcess/WebPageProxy.messages.in
 +++ b/Source/WebKit/UIProcess/WebPageProxy.messages.in
 @@ -29,6 +29,7 @@ messages -> WebPageProxy {
@@ -17533,9 +17406,9 @@ index 941f874a3f7be45275d18cf9495d91800839d32b..37ceecb165f5b568d4d4b1a4974c96b0
      PluginScaleFactorDidChange(double zoomFactor)
      PluginZoomFactorDidChange(double zoomFactor)
  
-@@ -305,10 +307,12 @@ messages -> WebPageProxy {
+@@ -304,10 +306,12 @@ messages -> WebPageProxy {
      StartDrag(struct WebCore::DragItem dragItem, WebKit::ShareableBitmap::Handle dragImage)
-     SetPromisedDataForImage(String pasteboardName, WebKit::SharedMemory::Handle imageHandle, String filename, String extension, String title, String url, String visibleURL, WebKit::SharedMemory::Handle archiveHandle, String originIdentifier)
+     SetPromisedDataForImage(String pasteboardName, WebKit::SharedMemory::IPCHandle imageHandle, String filename, String extension, String title, String url, String visibleURL, WebKit::SharedMemory::IPCHandle archiveHandle, String originIdentifier)
  #endif
 -#if PLATFORM(GTK) && ENABLE(DRAG_SUPPORT)
 +#if (PLATFORM(GTK) || PLATFORM(WPE)) && ENABLE(DRAG_SUPPORT)
@@ -17615,10 +17488,10 @@ index 7f9db2b972eef69cbbb7ed9185381bf2a3dcffe5..ab985444d3485303f5226883c7b2e890
  
      parameters.urlSchemesRegisteredAsEmptyDocument = copyToVector(m_schemesToRegisterAsEmptyDocument);
 diff --git a/Source/WebKit/UIProcess/WebProcessProxy.cpp b/Source/WebKit/UIProcess/WebProcessProxy.cpp
-index 331ee8054f7c8a8ddccd2b3aa7a8e67c285abf38..46d70ced9730a4a62f55ae833049e27a9356ec0a 100644
+index e6233b1ec6514964e1f906a56955efad94ce3707..6acb5d3cf0914e54d3975402c3b3a18c2b03c557 100644
 --- a/Source/WebKit/UIProcess/WebProcessProxy.cpp
 +++ b/Source/WebKit/UIProcess/WebProcessProxy.cpp
-@@ -148,6 +148,11 @@ HashMap<ProcessIdentifier, WebProcessProxy*>& WebProcessProxy::allProcesses()
+@@ -147,6 +147,11 @@ HashMap<ProcessIdentifier, WebProcessProxy*>& WebProcessProxy::allProcesses()
      return map;
  }
  
@@ -17630,7 +17503,7 @@ index 331ee8054f7c8a8ddccd2b3aa7a8e67c285abf38..46d70ced9730a4a62f55ae833049e27a
  WebProcessProxy* WebProcessProxy::processForIdentifier(ProcessIdentifier identifier)
  {
      return allProcesses().get(identifier);
-@@ -409,6 +414,26 @@ void WebProcessProxy::getLaunchOptions(ProcessLauncher::LaunchOptions& launchOpt
+@@ -416,6 +421,26 @@ void WebProcessProxy::getLaunchOptions(ProcessLauncher::LaunchOptions& launchOpt
      if (WebKit::isInspectorProcessPool(processPool()))
          launchOptions.extraInitializationData.add<HashTranslatorASCIILiteral>("inspector-process"_s, "1"_s);
  
@@ -17658,10 +17531,10 @@ index 331ee8054f7c8a8ddccd2b3aa7a8e67c285abf38..46d70ced9730a4a62f55ae833049e27a
  
      if (isPrewarmed())
 diff --git a/Source/WebKit/UIProcess/WebProcessProxy.h b/Source/WebKit/UIProcess/WebProcessProxy.h
-index f59e7a215781099f804acfe44f406375057b758f..a699aba91f5cbf35702f2109b01065881202bf30 100644
+index abffeea475cd298870eb3f3c385e9b411c88113a..7b4fa6254fd2a384645c574a3df3f51e711506e9 100644
 --- a/Source/WebKit/UIProcess/WebProcessProxy.h
 +++ b/Source/WebKit/UIProcess/WebProcessProxy.h
-@@ -147,6 +147,7 @@ public:
+@@ -146,6 +146,7 @@ public:
      ~WebProcessProxy();
  
      static void forWebPagesWithOrigin(PAL::SessionID, const WebCore::SecurityOriginData&, const Function<void(WebPageProxy&)>&);
@@ -17670,10 +17543,10 @@ index f59e7a215781099f804acfe44f406375057b758f..a699aba91f5cbf35702f2109b0106588
      WebConnection* webConnection() const { return m_webConnection.get(); }
  
 diff --git a/Source/WebKit/UIProcess/WebsiteData/WebsiteDataStore.cpp b/Source/WebKit/UIProcess/WebsiteData/WebsiteDataStore.cpp
-index 71ca21d2b7acf40c785af5755bfc1e7c13d5752c..fe3a0e9fac65f8a1197db74fb7d885f15acf1a86 100644
+index 17829d15c9dc0ae5a6fbde29c13854364f175dcb..881bcf0f8b92963e1e10ac81835ca9017ba2fa77 100644
 --- a/Source/WebKit/UIProcess/WebsiteData/WebsiteDataStore.cpp
 +++ b/Source/WebKit/UIProcess/WebsiteData/WebsiteDataStore.cpp
-@@ -1972,6 +1972,12 @@ void WebsiteDataStore::originDirectoryForTesting(URL&& origin, URL&& topOrigin,
+@@ -1969,6 +1969,12 @@ void WebsiteDataStore::originDirectoryForTesting(URL&& origin, URL&& topOrigin,
      networkProcess().websiteDataOriginDirectoryForTesting(m_sessionID, WTFMove(origin), WTFMove(topOrigin), type, WTFMove(completionHandler));
  }
  
@@ -17687,7 +17560,7 @@ index 71ca21d2b7acf40c785af5755bfc1e7c13d5752c..fe3a0e9fac65f8a1197db74fb7d885f1
  void WebsiteDataStore::hasAppBoundSession(CompletionHandler<void(bool)>&& completionHandler) const
  {
 diff --git a/Source/WebKit/UIProcess/WebsiteData/WebsiteDataStore.h b/Source/WebKit/UIProcess/WebsiteData/WebsiteDataStore.h
-index 14bba73989a561da8a7347a7fe15217347bc0f7b..ca8dd3f3a58221d7f13c37087c6a57c9f60bbc33 100644
+index 0973a59b6e4e93c3876fe75ca9615bb8b17e4518..5cfcea47cddfadfc2e85bbc94e7665ddf6f31a8e 100644
 --- a/Source/WebKit/UIProcess/WebsiteData/WebsiteDataStore.h
 +++ b/Source/WebKit/UIProcess/WebsiteData/WebsiteDataStore.h
 @@ -89,6 +89,7 @@ class SecKeyProxyStore;
@@ -18766,7 +18639,7 @@ index 0ff5b643de021c6c959412fe25c293fac673fb9b..39bd77283931909133ef9834b40aabae
      void getContextMenuItem(const WebContextMenuItemData&, CompletionHandler<void(NSMenuItem *)>&&);
      void getContextMenuFromItems(const Vector<WebContextMenuItemData>&, CompletionHandler<void(NSMenu *)>&&);
 diff --git a/Source/WebKit/UIProcess/mac/WebContextMenuProxyMac.mm b/Source/WebKit/UIProcess/mac/WebContextMenuProxyMac.mm
-index 941292c53d9a136c3f5d8f64bd7d18ea24e13067..00b0366cd82d5891ae2e5560417ad9bdea777517 100644
+index c887bf039915f555679279b05b25c8340b52fb82..b825b7177f20d9bed1d2a13c3700b7995c95c499 100644
 --- a/Source/WebKit/UIProcess/mac/WebContextMenuProxyMac.mm
 +++ b/Source/WebKit/UIProcess/mac/WebContextMenuProxyMac.mm
 @@ -465,6 +465,12 @@ void WebContextMenuProxyMac::getShareMenuItem(CompletionHandler<void(NSMenuItem
@@ -18834,10 +18707,10 @@ index 0000000000000000000000000000000000000000..6113f4cd60a5d72b8ead61176cb43200
 +} // namespace WebKit
 diff --git a/Source/WebKit/UIProcess/mac/WebPageInspectorInputAgentMac.mm b/Source/WebKit/UIProcess/mac/WebPageInspectorInputAgentMac.mm
 new file mode 100644
-index 0000000000000000000000000000000000000000..b91811b37f892e10ec3ad50693e514682c75e91d
+index 0000000000000000000000000000000000000000..cf8417ab83cdd06b24420838119d68cd4073dd76
 --- /dev/null
 +++ b/Source/WebKit/UIProcess/mac/WebPageInspectorInputAgentMac.mm
-@@ -0,0 +1,130 @@
+@@ -0,0 +1,127 @@
 +/*
 + * Copyright (C) 2019 Microsoft Corporation.
 + *
@@ -18896,9 +18769,9 @@ index 0000000000000000000000000000000000000000..b91811b37f892e10ec3ad50693e51468
 +    NSWindow *window = m_page.platformWindow();
 +    NSInteger windowNumber = window.windowNumber;
 +
-+    NSEventType downEventType;
-+    NSEventType dragEventType;
-+    NSEventType upEventType;
++    NSEventType downEventType = (NSEventType)0;
++    NSEventType dragEventType = (NSEventType)0;
++    NSEventType upEventType = (NSEventType)0;
 +
 +    if (!button || button == "none"_s) {
 +        downEventType = NSEventTypeMouseMoved;
@@ -18914,28 +18787,25 @@ index 0000000000000000000000000000000000000000..b91811b37f892e10ec3ad50693e51468
 +        upEventType = NSEventTypeOtherMouseUp;
 +    } else if (button == "right"_s) {
 +        downEventType = NSEventTypeRightMouseDown;
-+        dragEventType = NSEventTypeRightMouseDragged;
 +        upEventType = NSEventTypeRightMouseUp;
-+    } else {
-+        return;
 +    }
 +
 +    NSInteger eventNumber = 0;
 +
-+    NSEvent* event;
++    NSEvent* event = nil;
 +    if (type == "move"_s) {
 +        event = [NSEvent mouseEventWithType:dragEventType location:locationInWindow modifierFlags:modifiers timestamp:timestamp windowNumber:windowNumber context:nil eventNumber:eventNumber clickCount:clickCount pressure:0.0f];
 +    } else if (type == "down"_s) {
 +        event = [NSEvent mouseEventWithType:downEventType location:locationInWindow modifierFlags:modifiers timestamp:timestamp windowNumber:windowNumber context:nil eventNumber:eventNumber clickCount:clickCount pressure:WebCore::ForceAtClick];
 +    } else if (type == "up"_s) {
 +        event = [NSEvent mouseEventWithType:upEventType location:locationInWindow modifierFlags:modifiers timestamp:timestamp windowNumber:windowNumber context:nil eventNumber:eventNumber clickCount:clickCount pressure:0.0f];
-+    } else {
-+        return;
 +    }
 +
-+    NativeWebMouseEvent nativeEvent(event, nil, [window contentView]);
-+    nativeEvent.playwrightSetButtons(buttons);
-+    m_page.handleMouseEvent(nativeEvent);
++    if (event) {
++        NativeWebMouseEvent nativeEvent(event, nil, [window contentView]);
++        nativeEvent.playwrightSetButtons(buttons);
++        m_page.handleMouseEvent(nativeEvent);
++    }
 +}
 +
 +void WebPageInspectorInputAgent::platformDispatchKeyEvent(WebKeyboardEvent::Type type, const String& text, const String& unmodifiedText, const String& key, const String& code, const String& keyIdentifier, int windowsVirtualKeyCode, int nativeVirtualKeyCode, bool isAutoRepeat, bool isKeypad, bool isSystemKey, OptionSet<WebEvent::Modifier> modifiers, Vector<String>& commands, WallTime timestamp)
@@ -18968,55 +18838,6 @@ index 0000000000000000000000000000000000000000..b91811b37f892e10ec3ad50693e51468
 +}
 +
 +} // namespace WebKit
-diff --git a/Source/WebKit/UIProcess/mac/WebViewImpl.h b/Source/WebKit/UIProcess/mac/WebViewImpl.h
-index 9806df0d14e074cd678bf3ef923eac86a46c5275..30910188c04d4aa90b135d4a379a10d21236e28d 100644
---- a/Source/WebKit/UIProcess/mac/WebViewImpl.h
-+++ b/Source/WebKit/UIProcess/mac/WebViewImpl.h
-@@ -510,6 +510,9 @@ public:
-     void provideDataForPasteboard(NSPasteboard *, NSString *type);
-     NSArray *namesOfPromisedFilesDroppedAtDestination(NSURL *dropDestination);
- 
-+// Paywright begin
-+    RetainPtr<CGImageRef> takeSnapshotForAutomation();
-+// Paywright end
-     RefPtr<ViewSnapshot> takeViewSnapshot();
-     void saveBackForwardSnapshotForCurrentItem();
-     void saveBackForwardSnapshotForItem(WebBackForwardListItem&);
-diff --git a/Source/WebKit/UIProcess/mac/WebViewImpl.mm b/Source/WebKit/UIProcess/mac/WebViewImpl.mm
-index 3bc2628559f9a178345310319aec86b6604bb1b1..02496603e2fe99b99ec07024def183cfb69c5b54 100644
---- a/Source/WebKit/UIProcess/mac/WebViewImpl.mm
-+++ b/Source/WebKit/UIProcess/mac/WebViewImpl.mm
-@@ -2313,6 +2313,11 @@ WebCore::DestinationColorSpace WebViewImpl::colorSpace()
-         if (!m_colorSpace)
-             m_colorSpace = [NSColorSpace sRGBColorSpace];
-     }
-+    // Playwright begin
-+    // window.colorSpace is sometimes null on popup windows in headless mode
-+    if (!m_colorSpace)
-+        return WebCore::DestinationColorSpace::SRGB();
-+    // Playwright end
- 
-     ASSERT(m_colorSpace);
-     return WebCore::DestinationColorSpace { [m_colorSpace CGColorSpace] };
-@@ -4300,6 +4305,18 @@ static RetainPtr<CGImageRef> takeWindowSnapshot(CGSWindowID windowID, bool captu
-     return adoptCF(CGWindowListCreateImage(CGRectNull, kCGWindowListOptionIncludingWindow, windowID, imageOptions));
- }
- 
-+// Paywright begin
-+RetainPtr<CGImageRef> WebViewImpl::takeSnapshotForAutomation() {
-+    NSWindow *window = [m_view window];
-+
-+    CGSWindowID windowID = (CGSWindowID)window.windowNumber;
-+    if (!windowID || !window.isVisible)
-+        return nullptr;
-+
-+    return takeWindowSnapshot(windowID, true);
-+}
-+// Paywright end
-+
- RefPtr<ViewSnapshot> WebViewImpl::takeViewSnapshot()
- {
-     NSWindow *window = [m_view window];
 diff --git a/Source/WebKit/UIProcess/win/InspectorPlaywrightAgentClientWin.cpp b/Source/WebKit/UIProcess/win/InspectorPlaywrightAgentClientWin.cpp
 new file mode 100644
 index 0000000000000000000000000000000000000000..dd7fe0604188bb025f361f1c44685e38bbf935ca
@@ -19777,10 +19598,10 @@ index 0000000000000000000000000000000000000000..c3d7cacea987ba2b094d5022c670705e
 + 
 +} // namespace WebKit
 diff --git a/Source/WebKit/WebKit.xcodeproj/project.pbxproj b/Source/WebKit/WebKit.xcodeproj/project.pbxproj
-index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3366dbd58 100644
+index 266417ad4c010baacb11763f5c5519266fedc028..28eeb16dc17c415247f7385a292d6f5bb68e1445 100644
 --- a/Source/WebKit/WebKit.xcodeproj/project.pbxproj
 +++ b/Source/WebKit/WebKit.xcodeproj/project.pbxproj
-@@ -1248,6 +1248,7 @@
+@@ -1249,6 +1249,7 @@
  		5CABDC8722C40FED001EDE8E /* APIMessageListener.h in Headers */ = {isa = PBXBuildFile; fileRef = 5CABDC8322C40FA7001EDE8E /* APIMessageListener.h */; };
  		5CADDE05215046BD0067D309 /* WKWebProcess.h in Headers */ = {isa = PBXBuildFile; fileRef = 5C74300E21500492004BFA17 /* WKWebProcess.h */; settings = {ATTRIBUTES = (Private, ); }; };
  		5CAECB6627465AE400AB78D0 /* UnifiedSource115.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 5CAECB5E27465AE300AB78D0 /* UnifiedSource115.cpp */; };
@@ -19788,7 +19609,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  		5CAF7AA726F93AB00003F19E /* adattributiond.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 5CAF7AA526F93A950003F19E /* adattributiond.cpp */; };
  		5CAFDE452130846300B1F7E1 /* _WKInspector.h in Headers */ = {isa = PBXBuildFile; fileRef = 5CAFDE422130843500B1F7E1 /* _WKInspector.h */; settings = {ATTRIBUTES = (Private, ); }; };
  		5CAFDE472130846A00B1F7E1 /* _WKInspectorInternal.h in Headers */ = {isa = PBXBuildFile; fileRef = 5CAFDE442130843600B1F7E1 /* _WKInspectorInternal.h */; };
-@@ -2227,6 +2228,18 @@
+@@ -2225,6 +2226,18 @@
  		DF0C5F28252ECB8E00D921DB /* WKDownload.h in Headers */ = {isa = PBXBuildFile; fileRef = DF0C5F24252ECB8D00D921DB /* WKDownload.h */; settings = {ATTRIBUTES = (Public, ); }; };
  		DF0C5F2A252ECB8E00D921DB /* WKDownloadDelegate.h in Headers */ = {isa = PBXBuildFile; fileRef = DF0C5F26252ECB8E00D921DB /* WKDownloadDelegate.h */; settings = {ATTRIBUTES = (Public, ); }; };
  		DF0C5F2B252ED44000D921DB /* WKDownloadInternal.h in Headers */ = {isa = PBXBuildFile; fileRef = DF0C5F25252ECB8E00D921DB /* WKDownloadInternal.h */; };
@@ -19807,7 +19628,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  		DF462E0F23F22F5500EFF35F /* WKHTTPCookieStorePrivate.h in Headers */ = {isa = PBXBuildFile; fileRef = DF462E0E23F22F5300EFF35F /* WKHTTPCookieStorePrivate.h */; settings = {ATTRIBUTES = (Private, ); }; };
  		DF462E1223F338BE00EFF35F /* WKContentWorldPrivate.h in Headers */ = {isa = PBXBuildFile; fileRef = DF462E1123F338AD00EFF35F /* WKContentWorldPrivate.h */; settings = {ATTRIBUTES = (Private, ); }; };
  		DF84CEE4249AA24D009096F6 /* WKPDFHUDView.mm in Sources */ = {isa = PBXBuildFile; fileRef = DF84CEE2249AA21F009096F6 /* WKPDFHUDView.mm */; };
-@@ -2289,6 +2302,8 @@
+@@ -2287,6 +2300,8 @@
  		E5BEF6822130C48000F31111 /* WebDataListSuggestionsDropdownIOS.h in Headers */ = {isa = PBXBuildFile; fileRef = E5BEF6802130C47F00F31111 /* WebDataListSuggestionsDropdownIOS.h */; };
  		E5CB07DC20E1678F0022C183 /* WKFormColorControl.h in Headers */ = {isa = PBXBuildFile; fileRef = E5CB07DA20E1678F0022C183 /* WKFormColorControl.h */; };
  		E5CBA76427A318E100DF7858 /* UnifiedSource120.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E5CBA75F27A3187800DF7858 /* UnifiedSource120.cpp */; };
@@ -19816,7 +19637,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  		E5CBA76527A318E100DF7858 /* UnifiedSource118.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E5CBA76127A3187900DF7858 /* UnifiedSource118.cpp */; };
  		E5CBA76627A318E100DF7858 /* UnifiedSource116.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E5CBA76327A3187B00DF7858 /* UnifiedSource116.cpp */; };
  		E5CBA76727A318E100DF7858 /* UnifiedSource119.cpp in Sources */ = {isa = PBXBuildFile; fileRef = E5CBA76027A3187900DF7858 /* UnifiedSource119.cpp */; };
-@@ -2305,6 +2320,9 @@
+@@ -2303,6 +2318,9 @@
  		EBA8D3B627A5E33F00CB7900 /* MockPushServiceConnection.mm in Sources */ = {isa = PBXBuildFile; fileRef = EBA8D3B027A5E33F00CB7900 /* MockPushServiceConnection.mm */; };
  		EBA8D3B727A5E33F00CB7900 /* PushServiceConnection.mm in Sources */ = {isa = PBXBuildFile; fileRef = EBA8D3B127A5E33F00CB7900 /* PushServiceConnection.mm */; };
  		ED82A7F2128C6FAF004477B3 /* WKBundlePageOverlay.h in Headers */ = {isa = PBXBuildFile; fileRef = 1A22F0FF1289FCD90085E74F /* WKBundlePageOverlay.h */; settings = {ATTRIBUTES = (Private, ); }; };
@@ -19834,7 +19655,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  		5CAF7AA426F93A750003F19E /* adattributiond */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = adattributiond; sourceTree = BUILT_PRODUCTS_DIR; };
  		5CAF7AA526F93A950003F19E /* adattributiond.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = adattributiond.cpp; sourceTree = "<group>"; };
  		5CAF7AA626F93AA50003F19E /* adattributiond.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; path = adattributiond.xcconfig; sourceTree = "<group>"; };
-@@ -7010,6 +7029,19 @@
+@@ -6997,6 +7016,19 @@
  		DF0C5F24252ECB8D00D921DB /* WKDownload.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WKDownload.h; sourceTree = "<group>"; };
  		DF0C5F25252ECB8E00D921DB /* WKDownloadInternal.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WKDownloadInternal.h; sourceTree = "<group>"; };
  		DF0C5F26252ECB8E00D921DB /* WKDownloadDelegate.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WKDownloadDelegate.h; sourceTree = "<group>"; };
@@ -19854,7 +19675,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  		DF462E0E23F22F5300EFF35F /* WKHTTPCookieStorePrivate.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WKHTTPCookieStorePrivate.h; sourceTree = "<group>"; };
  		DF462E1123F338AD00EFF35F /* WKContentWorldPrivate.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WKContentWorldPrivate.h; sourceTree = "<group>"; };
  		DF58C6311371AC5800F9A37C /* NativeWebWheelEvent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NativeWebWheelEvent.h; sourceTree = "<group>"; };
-@@ -7139,6 +7171,8 @@
+@@ -7126,6 +7158,8 @@
  		E5CB07DA20E1678F0022C183 /* WKFormColorControl.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; name = WKFormColorControl.h; path = ios/forms/WKFormColorControl.h; sourceTree = "<group>"; };
  		E5CB07DB20E1678F0022C183 /* WKFormColorControl.mm */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.objcpp; name = WKFormColorControl.mm; path = ios/forms/WKFormColorControl.mm; sourceTree = "<group>"; };
  		E5CBA75F27A3187800DF7858 /* UnifiedSource120.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = UnifiedSource120.cpp; path = "DerivedSources/WebKit/unified-sources/UnifiedSource120.cpp"; sourceTree = BUILT_PRODUCTS_DIR; };
@@ -19863,7 +19684,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  		E5CBA76027A3187900DF7858 /* UnifiedSource119.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = UnifiedSource119.cpp; path = "DerivedSources/WebKit/unified-sources/UnifiedSource119.cpp"; sourceTree = BUILT_PRODUCTS_DIR; };
  		E5CBA76127A3187900DF7858 /* UnifiedSource118.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = UnifiedSource118.cpp; path = "DerivedSources/WebKit/unified-sources/UnifiedSource118.cpp"; sourceTree = BUILT_PRODUCTS_DIR; };
  		E5CBA76227A3187900DF7858 /* UnifiedSource117.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = UnifiedSource117.cpp; path = "DerivedSources/WebKit/unified-sources/UnifiedSource117.cpp"; sourceTree = BUILT_PRODUCTS_DIR; };
-@@ -7161,6 +7195,14 @@
+@@ -7147,6 +7181,14 @@
  		ECA680D31E6904B500731D20 /* ExtraPrivateSymbolsForTAPI.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ExtraPrivateSymbolsForTAPI.h; sourceTree = "<group>"; };
  		ECBFC1DB1E6A4D66000300C7 /* ExtraPublicSymbolsForTAPI.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = ExtraPublicSymbolsForTAPI.h; sourceTree = "<group>"; };
  		F036978715F4BF0500C3A80E /* WebColorPicker.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = WebColorPicker.cpp; sourceTree = "<group>"; };
@@ -19878,7 +19699,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  		F409BA171E6E64B3009DA28E /* WKDragDestinationAction.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WKDragDestinationAction.h; sourceTree = "<group>"; };
  		F40D1B68220BDC0F00B49A01 /* WebAutocorrectionContext.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; name = WebAutocorrectionContext.h; path = ios/WebAutocorrectionContext.h; sourceTree = "<group>"; };
  		F41056612130699A0092281D /* APIAttachmentCocoa.mm */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.objcpp; path = APIAttachmentCocoa.mm; sourceTree = "<group>"; };
-@@ -7295,6 +7337,7 @@
+@@ -7281,6 +7323,7 @@
  				52A69BEA286CFFAC00893E8F /* CryptoTokenKit.framework in Frameworks */,
  				3766F9EE189A1241003CF19B /* JavaScriptCore.framework in Frameworks */,
  				3766F9F1189A1254003CF19B /* libicucore.dylib in Frameworks */,
@@ -19886,7 +19707,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  				3766F9EF189A1244003CF19B /* QuartzCore.framework in Frameworks */,
  				37694525184FC6B600CDE21F /* Security.framework in Frameworks */,
  				37BEC4DD1948FC6A008B4286 /* WebCore.framework in Frameworks */,
-@@ -9440,6 +9483,7 @@
+@@ -9427,6 +9470,7 @@
  				99788ACA1F421DCA00C08000 /* _WKAutomationSessionConfiguration.mm */,
  				990D28A81C6404B000986977 /* _WKAutomationSessionDelegate.h */,
  				990D28AF1C65203900986977 /* _WKAutomationSessionInternal.h */,
@@ -19894,7 +19715,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  				5C4609E222430E4C009943C2 /* _WKContentRuleListAction.h */,
  				5C4609E322430E4D009943C2 /* _WKContentRuleListAction.mm */,
  				5C4609E422430E4D009943C2 /* _WKContentRuleListActionInternal.h */,
-@@ -10536,6 +10580,7 @@
+@@ -10520,6 +10564,7 @@
  				E34B110C27C46BC6006D2F2E /* libWebCoreTestShim.dylib */,
  				E34B110F27C46D09006D2F2E /* libWebCoreTestSupport.dylib */,
  				DDE992F4278D06D900F60D26 /* libWebKitAdditions.a */,
@@ -19902,7 +19723,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  				57A9FF15252C6AEF006A2040 /* libWTF.a */,
  				5750F32A2032D4E500389347 /* LocalAuthentication.framework */,
  				570DAAB0230273D200E8FC04 /* NearField.framework */,
-@@ -11073,6 +11118,12 @@
+@@ -11055,6 +11100,12 @@
  			children = (
  				9197940423DBC4BB00257892 /* InspectorBrowserAgent.cpp */,
  				9197940323DBC4BB00257892 /* InspectorBrowserAgent.h */,
@@ -19915,7 +19736,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  			);
  			path = Agents;
  			sourceTree = "<group>";
-@@ -11081,6 +11132,7 @@
+@@ -11063,6 +11114,7 @@
  			isa = PBXGroup;
  			children = (
  				A5D3504D1D78F0D2005124A9 /* RemoteWebInspectorUIProxyMac.mm */,
@@ -19923,7 +19744,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  				1CA8B935127C774E00576C2B /* WebInspectorUIProxyMac.mm */,
  				99A7ACE326012919006D57FD /* WKInspectorResourceURLSchemeHandler.h */,
  				99A7ACE42601291A006D57FD /* WKInspectorResourceURLSchemeHandler.mm */,
-@@ -11624,6 +11676,7 @@
+@@ -11606,6 +11658,7 @@
  				E1513C65166EABB200149FCB /* AuxiliaryProcessProxy.h */,
  				46A2B6061E5675A200C3DEDA /* BackgroundProcessResponsivenessTimer.cpp */,
  				46A2B6071E5675A200C3DEDA /* BackgroundProcessResponsivenessTimer.h */,
@@ -19931,7 +19752,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  				4659F25E275FF6B200BBB369 /* CaptivePortalModeObserver.h */,
  				07297F9C1C1711EA003F0735 /* DeviceIdHashSaltStorage.cpp */,
  				07297F9D1C17BBEA223F0735 /* DeviceIdHashSaltStorage.h */,
-@@ -11641,6 +11694,8 @@
+@@ -11623,6 +11676,8 @@
  				2DD5A72A1EBF09A7009BA597 /* HiddenPageThrottlingAutoIncreasesCounter.h */,
  				839A2F2F1E2067390039057E /* HighPerformanceGraphicsUsageSampler.cpp */,
  				839A2F301E2067390039057E /* HighPerformanceGraphicsUsageSampler.h */,
@@ -19940,7 +19761,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  				5CEABA2B2333251400797797 /* LegacyGlobalSettings.cpp */,
  				5CEABA2A2333247700797797 /* LegacyGlobalSettings.h */,
  				31607F3819627002009B87DA /* LegacySessionStateCoding.h */,
-@@ -11672,6 +11727,7 @@
+@@ -11654,6 +11709,7 @@
  				1A0C227D2451130A00ED614D /* QuickLookThumbnailingSoftLink.mm */,
  				1AEE57232409F142002005D6 /* QuickLookThumbnailLoader.h */,
  				1AEE57242409F142002005D6 /* QuickLookThumbnailLoader.mm */,
@@ -19948,7 +19769,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  				BC111B08112F5E3C00337BAB /* ResponsivenessTimer.cpp */,
  				1A30066C1110F4F70031937C /* ResponsivenessTimer.h */,
  				5CA98549210BEB5A0057EB6B /* SafeBrowsingWarning.h */,
-@@ -11772,6 +11828,8 @@
+@@ -11754,6 +11810,8 @@
  				BC7B6204129A0A6700D174A4 /* WebPageGroup.h */,
  				2D9EA3101A96D9EB002D2807 /* WebPageInjectedBundleClient.cpp */,
  				2D9EA30E1A96CBFF002D2807 /* WebPageInjectedBundleClient.h */,
@@ -19957,7 +19778,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  				BC111B0B112F5E4F00337BAB /* WebPageProxy.cpp */,
  				BC032DCB10F4389F0058C15A /* WebPageProxy.h */,
  				BCBD38FA125BAB9A00D2C29F /* WebPageProxy.messages.in */,
-@@ -11927,6 +11985,7 @@
+@@ -11906,6 +11964,7 @@
  				BC646C1911DD399F006455B0 /* WKBackForwardListItemRef.h */,
  				BC646C1611DD399F006455B0 /* WKBackForwardListRef.cpp */,
  				BC646C1711DD399F006455B0 /* WKBackForwardListRef.h */,
@@ -19965,7 +19786,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  				BCB9E24A1120E15C00A137E0 /* WKContext.cpp */,
  				BCB9E2491120E15C00A137E0 /* WKContext.h */,
  				1AE52F9319201F6B00A1FA37 /* WKContextConfigurationRef.cpp */,
-@@ -12514,6 +12573,9 @@
+@@ -12493,6 +12552,9 @@
  				C18173602058424700DFDA65 /* DisplayLink.h */,
  				31ABA79C215AF9E000C90E31 /* HighPerformanceGPUManager.h */,
  				31ABA79D215AF9E000C90E31 /* HighPerformanceGPUManager.mm */,
@@ -19975,7 +19796,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  				1AFDE65B1954E8D500C48FFA /* LegacySessionStateCoding.cpp */,
  				0FCB4E5818BBE3D9000FCFC9 /* PageClientImplMac.h */,
  				0FCB4E5918BBE3D9000FCFC9 /* PageClientImplMac.mm */,
-@@ -12540,6 +12602,8 @@
+@@ -12519,6 +12581,8 @@
  				E568B92120A3AC6A00E3C856 /* WebDataListSuggestionsDropdownMac.mm */,
  				E55CD20124D09F1F0042DB9C /* WebDateTimePickerMac.h */,
  				E55CD20224D09F1F0042DB9C /* WebDateTimePickerMac.mm */,
@@ -19984,7 +19805,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  				BC857E8512B71EBB00EDEB2E /* WebPageProxyMac.mm */,
  				BC5750951268F3C6006F0F12 /* WebPopupMenuProxyMac.h */,
  				BC5750961268F3C6006F0F12 /* WebPopupMenuProxyMac.mm */,
-@@ -13729,6 +13793,7 @@
+@@ -13703,6 +13767,7 @@
  				99788ACB1F421DDA00C08000 /* _WKAutomationSessionConfiguration.h in Headers */,
  				990D28AC1C6420CF00986977 /* _WKAutomationSessionDelegate.h in Headers */,
  				990D28B11C65208D00986977 /* _WKAutomationSessionInternal.h in Headers */,
@@ -19992,7 +19813,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  				5C4609E7224317B4009943C2 /* _WKContentRuleListAction.h in Headers */,
  				5C4609E8224317BB009943C2 /* _WKContentRuleListActionInternal.h in Headers */,
  				1A5704F81BE01FF400874AF1 /* _WKContextMenuElementInfo.h in Headers */,
-@@ -13977,6 +14042,7 @@
+@@ -13951,6 +14016,7 @@
  				E170876C16D6CA6900F99226 /* BlobRegistryProxy.h in Headers */,
  				4F601432155C5AA2001FBDE0 /* BlockingResponseMap.h in Headers */,
  				1A5705111BE410E600874AF1 /* BlockSPI.h in Headers */,
@@ -20000,7 +19821,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  				BC3065FA1259344E00E71278 /* CacheModel.h in Headers */,
  				41897ED81F415D8A0016FA42 /* CacheStorageEngine.h in Headers */,
  				41FABD2A1F4DE001006A6C97 /* CacheStorageEngineCache.h in Headers */,
-@@ -14244,7 +14310,11 @@
+@@ -14218,7 +14284,11 @@
  				2DD45ADE1E5F8972006C355F /* InputViewUpdateDeferrer.h in Headers */,
  				CE550E152283752200D28791 /* InsertTextOptions.h in Headers */,
  				9197940523DBC4BB00257892 /* InspectorBrowserAgent.h in Headers */,
@@ -20012,7 +19833,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  				A5E391FD2183C1F800C8FB31 /* InspectorTargetProxy.h in Headers */,
  				51E9049C27BCB9D400929E7E /* InstallCoordinationSPI.h in Headers */,
  				C5BCE5DF1C50766A00CDE3FA /* InteractionInformationAtPosition.h in Headers */,
-@@ -14462,6 +14532,7 @@
+@@ -14436,6 +14506,7 @@
  				CDAC20CA23FC2F750021DEE3 /* RemoteCDMInstanceSession.h in Headers */,
  				CDAC20C923FC2F750021DEE3 /* RemoteCDMInstanceSessionIdentifier.h in Headers */,
  				F451C0FE2703B263002BA03B /* RemoteDisplayListRecorderProxy.h in Headers */,
@@ -20020,7 +19841,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  				2D47B56D1810714E003A3AEE /* RemoteLayerBackingStore.h in Headers */,
  				2DDF731518E95060004F5A66 /* RemoteLayerBackingStoreCollection.h in Headers */,
  				1AB16AEA164B3A8800290D62 /* RemoteLayerTreeContext.h in Headers */,
-@@ -14520,6 +14591,7 @@
+@@ -14494,6 +14565,7 @@
  				E1E552C516AE065F004ED653 /* SandboxInitializationParameters.h in Headers */,
  				E36FF00327F36FBD004BE21A /* SandboxStateVariables.h in Headers */,
  				7BAB111025DD02B3008FC479 /* ScopedActiveMessageReceiveQueue.h in Headers */,
@@ -20028,7 +19849,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  				E4D54D0421F1D72D007E3C36 /* ScrollingTreeFrameScrollingNodeRemoteIOS.h in Headers */,
  				0F931C1C18C5711900DBA7C3 /* ScrollingTreeOverflowScrollingNodeIOS.h in Headers */,
  				0F931C1C18C5711900DBB8D4 /* ScrollingTreeScrollingNodeDelegateIOS.h in Headers */,
-@@ -14867,6 +14939,8 @@
+@@ -14842,6 +14914,8 @@
  				2D9EA30F1A96CBFF002D2807 /* WebPageInjectedBundleClient.h in Headers */,
  				9197940823DBC4CB00257892 /* WebPageInspectorAgentBase.h in Headers */,
  				A513F5402154A5D700662841 /* WebPageInspectorController.h in Headers */,
@@ -20037,7 +19858,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  				A543E30C215C8A8D00279CD9 /* WebPageInspectorTarget.h in Headers */,
  				A543E30D215C8A9000279CD9 /* WebPageInspectorTargetController.h in Headers */,
  				A543E307215AD13700279CD9 /* WebPageInspectorTargetFrontendChannel.h in Headers */,
-@@ -16824,6 +16898,8 @@
+@@ -16773,6 +16847,8 @@
  				51E9049727BCB3D900929E7E /* ICAppBundle.mm in Sources */,
  				2749F6442146561B008380BF /* InjectedBundleNodeHandle.cpp in Sources */,
  				2749F6452146561E008380BF /* InjectedBundleRangeHandle.cpp in Sources */,
@@ -20046,7 +19867,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  				C14D37FE24ACE086007FF014 /* LaunchServicesDatabaseManager.mm in Sources */,
  				C1710CF724AA643200D7C112 /* LaunchServicesDatabaseObserver.mm in Sources */,
  				2984F588164BA095004BC0C6 /* LegacyCustomProtocolManagerMessageReceiver.cpp in Sources */,
-@@ -17158,6 +17234,8 @@
+@@ -17107,6 +17183,8 @@
  				E3816B3D27E2463A005EAFC0 /* WebMockContentFilterManager.cpp in Sources */,
  				31BA924D148831260062EDB5 /* WebNotificationManagerMessageReceiver.cpp in Sources */,
  				2DF6FE52212E110900469030 /* WebPage.cpp in Sources */,
@@ -20056,7 +19877,7 @@ index 167e10d3322a79c90146f37c9803f03b562f5450..9792e6cec5ad3f3954d1cf54e916e6e3
  				BCBD3914125BB1A800D2C29F /* WebPageProxyMessageReceiver.cpp in Sources */,
  				7CE9CE101FA0767A000177DE /* WebPageUpdatePreferences.cpp in Sources */,
 diff --git a/Source/WebKit/WebProcess/Network/WebLoaderStrategy.cpp b/Source/WebKit/WebProcess/Network/WebLoaderStrategy.cpp
-index cfbf657d8abdaed554fb53ba2a5002f93beba884..8f65caa1eeb0fca3d48d03a4f985e788b8a34bbc 100644
+index a9b58676edfe1774b6e40585b1bb77f12fd225cd..e31e74fbe3828006932b05f3d3f3f96f4d385cb9 100644
 --- a/Source/WebKit/WebProcess/Network/WebLoaderStrategy.cpp
 +++ b/Source/WebKit/WebProcess/Network/WebLoaderStrategy.cpp
 @@ -232,6 +232,11 @@ void WebLoaderStrategy::scheduleLoad(ResourceLoader& resourceLoader, CachedResou
@@ -20071,7 +19892,7 @@ index cfbf657d8abdaed554fb53ba2a5002f93beba884..8f65caa1eeb0fca3d48d03a4f985e788
  #if ENABLE(PDFJS)
      if (tryLoadingUsingPDFJSHandler(resourceLoader, trackingParameters))
          return;
-@@ -331,7 +336,8 @@ static void addParametersShared(const Frame* frame, NetworkResourceLoadParameter
+@@ -324,7 +329,8 @@ static void addParametersShared(const Frame* frame, NetworkResourceLoadParameter
      }
  }
  
@@ -20081,7 +19902,7 @@ index cfbf657d8abdaed554fb53ba2a5002f93beba884..8f65caa1eeb0fca3d48d03a4f985e788
  {
      auto identifier = resourceLoader.identifier();
      ASSERT(identifier);
-@@ -347,7 +353,7 @@ void WebLoaderStrategy::scheduleLoadFromNetworkProcess(ResourceLoader& resourceL
+@@ -340,7 +346,7 @@ void WebLoaderStrategy::scheduleLoadFromNetworkProcess(ResourceLoader& resourceL
              RunLoop::main().dispatch([resourceLoader = Ref { resourceLoader }, error = blockedError(request)] {
                  resourceLoader->didFail(error);
              });
@@ -20090,7 +19911,7 @@ index cfbf657d8abdaed554fb53ba2a5002f93beba884..8f65caa1eeb0fca3d48d03a4f985e788
          }
      }
  
-@@ -357,7 +363,6 @@ void WebLoaderStrategy::scheduleLoadFromNetworkProcess(ResourceLoader& resourceL
+@@ -350,7 +356,6 @@ void WebLoaderStrategy::scheduleLoadFromNetworkProcess(ResourceLoader& resourceL
  
      LOG(NetworkScheduling, "(WebProcess) WebLoaderStrategy::scheduleLoad, url '%s' will be scheduled with the NetworkProcess with priority %d, storedCredentialsPolicy %i", resourceLoader.url().string().latin1().data(), static_cast<int>(resourceLoader.request().priority()), (int)storedCredentialsPolicy);
  
@@ -20098,7 +19919,7 @@ index cfbf657d8abdaed554fb53ba2a5002f93beba884..8f65caa1eeb0fca3d48d03a4f985e788
      loadParameters.identifier = identifier;
      loadParameters.webPageProxyID = trackingParameters.webPageProxyID;
      loadParameters.webPageID = trackingParameters.pageID;
-@@ -442,14 +447,11 @@ void WebLoaderStrategy::scheduleLoadFromNetworkProcess(ResourceLoader& resourceL
+@@ -435,14 +440,11 @@ void WebLoaderStrategy::scheduleLoadFromNetworkProcess(ResourceLoader& resourceL
  
      if (loadParameters.options.mode != FetchOptions::Mode::Navigate) {
          ASSERT(loadParameters.sourceOrigin);
@@ -20116,7 +19937,7 @@ index cfbf657d8abdaed554fb53ba2a5002f93beba884..8f65caa1eeb0fca3d48d03a4f985e788
  
      loadParameters.isMainFrameNavigation = resourceLoader.frame() && resourceLoader.frame()->isMainFrame() && resourceLoader.options().mode == FetchOptions::Mode::Navigate;
      if (loadParameters.isMainFrameNavigation && document)
-@@ -481,6 +483,17 @@ void WebLoaderStrategy::scheduleLoadFromNetworkProcess(ResourceLoader& resourceL
+@@ -474,6 +476,17 @@ void WebLoaderStrategy::scheduleLoadFromNetworkProcess(ResourceLoader& resourceL
      }
  
      ASSERT((loadParameters.webPageID && loadParameters.webFrameID) || loadParameters.clientCredentialPolicy == ClientCredentialPolicy::CannotAskClientForCredentials);
@@ -20134,7 +19955,7 @@ index cfbf657d8abdaed554fb53ba2a5002f93beba884..8f65caa1eeb0fca3d48d03a4f985e788
  
      std::optional<NetworkResourceLoadIdentifier> existingNetworkResourceLoadIdentifierToResume;
      if (loadParameters.isMainFrameNavigation)
-@@ -495,7 +508,7 @@ void WebLoaderStrategy::scheduleLoadFromNetworkProcess(ResourceLoader& resourceL
+@@ -488,7 +501,7 @@ void WebLoaderStrategy::scheduleLoadFromNetworkProcess(ResourceLoader& resourceL
      }
  
      auto loader = WebResourceLoader::create(resourceLoader, trackingParameters);
@@ -20143,7 +19964,7 @@ index cfbf657d8abdaed554fb53ba2a5002f93beba884..8f65caa1eeb0fca3d48d03a4f985e788
  }
  
  void WebLoaderStrategy::scheduleInternallyFailedLoad(WebCore::ResourceLoader& resourceLoader)
-@@ -902,7 +915,7 @@ void WebLoaderStrategy::didFinishPreconnection(WebCore::ResourceLoaderIdentifier
+@@ -895,7 +908,7 @@ void WebLoaderStrategy::didFinishPreconnection(WebCore::ResourceLoaderIdentifier
  
  bool WebLoaderStrategy::isOnLine() const
  {
@@ -20152,7 +19973,7 @@ index cfbf657d8abdaed554fb53ba2a5002f93beba884..8f65caa1eeb0fca3d48d03a4f985e788
  }
  
  void WebLoaderStrategy::addOnlineStateChangeListener(Function<void(bool)>&& listener)
-@@ -922,6 +935,11 @@ void WebLoaderStrategy::isResourceLoadFinished(CachedResource& resource, Complet
+@@ -915,6 +928,11 @@ void WebLoaderStrategy::isResourceLoadFinished(CachedResource& resource, Complet
  
  void WebLoaderStrategy::setOnLineState(bool isOnLine)
  {
@@ -20164,7 +19985,7 @@ index cfbf657d8abdaed554fb53ba2a5002f93beba884..8f65caa1eeb0fca3d48d03a4f985e788
      if (m_isOnLine == isOnLine)
          return;
  
-@@ -930,6 +948,12 @@ void WebLoaderStrategy::setOnLineState(bool isOnLine)
+@@ -923,6 +941,12 @@ void WebLoaderStrategy::setOnLineState(bool isOnLine)
          listener(isOnLine);
  }
  
@@ -20302,7 +20123,7 @@ index 72cd56ea4c03966283a24b77ac8a754fff98723a..2e181bcb2e151bbf0153d66aa3093ce9
  
  void WebFrameLoaderClient::didRestoreFromBackForwardCache()
 diff --git a/Source/WebKit/WebProcess/WebCoreSupport/mac/WebDragClientMac.mm b/Source/WebKit/WebProcess/WebCoreSupport/mac/WebDragClientMac.mm
-index cf573ccd65a64982e3dccd4a4e81a50d69310891..722b0aa00685d5e3865370c0d6170ba4115d2ad6 100644
+index f8f925e1d72b6b64a9c5530073b0dc0ad675a4da..fefe472498045a872b344fb3ad73d736c5e7f2f3 100644
 --- a/Source/WebKit/WebProcess/WebCoreSupport/mac/WebDragClientMac.mm
 +++ b/Source/WebKit/WebProcess/WebCoreSupport/mac/WebDragClientMac.mm
 @@ -126,7 +126,8 @@ static WebCore::CachedImage* cachedImage(Element& element)
@@ -20664,10 +20485,10 @@ index f127d64d005ab7b93875591b94a5899205e91579..df0de26e4dc449a0fbf93e7037444df4
      uint64_t m_navigationID;
  };
 diff --git a/Source/WebKit/WebProcess/WebPage/WebPage.cpp b/Source/WebKit/WebProcess/WebPage/WebPage.cpp
-index bcfd5062b0ee4077f18c69eb31a70384700ba093..47cfbc5171198c0c046427e957d4dc472765ca5c 100644
+index 19ba39144862b90138535cb165519999802faf62..880ec33c555a9b7663e83b115fb92b2a9f4ed575 100644
 --- a/Source/WebKit/WebProcess/WebPage/WebPage.cpp
 +++ b/Source/WebKit/WebProcess/WebPage/WebPage.cpp
-@@ -948,6 +948,9 @@ WebPage::WebPage(PageIdentifier pageID, WebPageCreationParameters&& parameters)
+@@ -944,6 +944,9 @@ WebPage::WebPage(PageIdentifier pageID, WebPageCreationParameters&& parameters)
          ProcessCapabilities::setCanUseAcceleratedBuffers(false);
      }
  
@@ -20677,7 +20498,7 @@ index bcfd5062b0ee4077f18c69eb31a70384700ba093..47cfbc5171198c0c046427e957d4dc47
      updateThrottleState();
  }
  
-@@ -1725,6 +1728,22 @@ void WebPage::platformDidReceiveLoadParameters(const LoadParameters& loadParamet
+@@ -1719,6 +1722,22 @@ void WebPage::platformDidReceiveLoadParameters(const LoadParameters& loadParamet
  }
  #endif
  
@@ -20700,7 +20521,7 @@ index bcfd5062b0ee4077f18c69eb31a70384700ba093..47cfbc5171198c0c046427e957d4dc47
  void WebPage::loadRequest(LoadParameters&& loadParameters)
  {
      WEBPAGE_RELEASE_LOG(Loading, "loadRequest: navigationID=%" PRIu64 ", shouldTreatAsContinuingLoad=%u, lastNavigationWasAppInitiated=%d, existingNetworkResourceLoadIdentifierToResume=%" PRIu64, loadParameters.navigationID, static_cast<unsigned>(loadParameters.shouldTreatAsContinuingLoad), loadParameters.request.isAppInitiated(), valueOrDefault(loadParameters.existingNetworkResourceLoadIdentifierToResume).toUInt64());
-@@ -2001,17 +2020,13 @@ void WebPage::setSize(const WebCore::IntSize& viewSize)
+@@ -1995,17 +2014,13 @@ void WebPage::setSize(const WebCore::IntSize& viewSize)
      view->resize(viewSize);
      m_drawingArea->setNeedsDisplay();
  
@@ -20719,7 +20540,7 @@ index bcfd5062b0ee4077f18c69eb31a70384700ba093..47cfbc5171198c0c046427e957d4dc47
  
      // Viewport properties have no impact on zero sized fixed viewports.
      if (m_viewSize.isEmpty())
-@@ -2028,20 +2043,18 @@ void WebPage::sendViewportAttributesChanged(const ViewportArguments& viewportArg
+@@ -2022,20 +2037,18 @@ void WebPage::sendViewportAttributesChanged(const ViewportArguments& viewportArg
  
      ViewportAttributes attr = computeViewportAttributes(viewportArguments, minimumLayoutFallbackWidth, deviceWidth, deviceHeight, 1, m_viewSize);
  
@@ -20747,7 +20568,7 @@ index bcfd5062b0ee4077f18c69eb31a70384700ba093..47cfbc5171198c0c046427e957d4dc47
  
  #if USE(COORDINATED_GRAPHICS)
      m_drawingArea->didChangeViewportAttributes(WTFMove(attr));
-@@ -2049,7 +2062,6 @@ void WebPage::sendViewportAttributesChanged(const ViewportArguments& viewportArg
+@@ -2043,7 +2056,6 @@ void WebPage::sendViewportAttributesChanged(const ViewportArguments& viewportArg
      send(Messages::WebPageProxy::DidChangeViewportProperties(attr));
  #endif
  }
@@ -20755,7 +20576,7 @@ index bcfd5062b0ee4077f18c69eb31a70384700ba093..47cfbc5171198c0c046427e957d4dc47
  
  void WebPage::scrollMainFrameIfNotAtMaxScrollPosition(const IntSize& scrollOffset)
  {
-@@ -2334,6 +2346,7 @@ void WebPage::scaleView(double scale)
+@@ -2328,6 +2340,7 @@ void WebPage::scaleView(double scale)
      }
  
      m_page->setViewScaleFactor(scale);
@@ -20763,7 +20584,7 @@ index bcfd5062b0ee4077f18c69eb31a70384700ba093..47cfbc5171198c0c046427e957d4dc47
      scalePage(pageScale, scrollPositionAtNewScale);
  }
  
-@@ -2513,17 +2526,13 @@ void WebPage::viewportPropertiesDidChange(const ViewportArguments& viewportArgum
+@@ -2507,17 +2520,13 @@ void WebPage::viewportPropertiesDidChange(const ViewportArguments& viewportArgum
          viewportConfigurationChanged();
  #endif
  
@@ -20782,7 +20603,7 @@ index bcfd5062b0ee4077f18c69eb31a70384700ba093..47cfbc5171198c0c046427e957d4dc47
  }
  
  void WebPage::listenForLayoutMilestones(OptionSet<WebCore::LayoutMilestone> milestones)
-@@ -3412,6 +3421,104 @@ void WebPage::touchEvent(const WebTouchEvent& touchEvent)
+@@ -3406,6 +3415,104 @@ void WebPage::touchEvent(const WebTouchEvent& touchEvent)
  
      send(Messages::WebPageProxy::DidReceiveEvent(static_cast<uint32_t>(touchEvent.type()), handled));
  }
@@ -20887,7 +20708,7 @@ index bcfd5062b0ee4077f18c69eb31a70384700ba093..47cfbc5171198c0c046427e957d4dc47
  #endif
  
  void WebPage::cancelPointer(WebCore::PointerID pointerId, const WebCore::IntPoint& documentPoint)
-@@ -3488,6 +3595,11 @@ void WebPage::sendMessageToTargetBackend(const String& targetId, const String& m
+@@ -3482,6 +3589,11 @@ void WebPage::sendMessageToTargetBackend(const String& targetId, const String& m
      m_inspectorTargetController->sendMessageToTargetBackend(targetId, message);
  }
  
@@ -20899,7 +20720,7 @@ index bcfd5062b0ee4077f18c69eb31a70384700ba093..47cfbc5171198c0c046427e957d4dc47
  void WebPage::insertNewlineInQuotedContent()
  {
      Ref frame = CheckedRef(m_page->focusController())->focusedOrMainFrame();
-@@ -3728,6 +3840,7 @@ void WebPage::didCompletePageTransition()
+@@ -3722,6 +3834,7 @@ void WebPage::didCompletePageTransition()
  void WebPage::show()
  {
      send(Messages::WebPageProxy::ShowPage());
@@ -20907,7 +20728,7 @@ index bcfd5062b0ee4077f18c69eb31a70384700ba093..47cfbc5171198c0c046427e957d4dc47
  }
  
  void WebPage::setIsTakingSnapshotsForApplicationSuspension(bool isTakingSnapshotsForApplicationSuspension)
-@@ -4615,7 +4728,7 @@ NotificationPermissionRequestManager* WebPage::notificationPermissionRequestMana
+@@ -4606,7 +4719,7 @@ NotificationPermissionRequestManager* WebPage::notificationPermissionRequestMana
  
  #if ENABLE(DRAG_SUPPORT)
  
@@ -20916,7 +20737,7 @@ index bcfd5062b0ee4077f18c69eb31a70384700ba093..47cfbc5171198c0c046427e957d4dc47
  void WebPage::performDragControllerAction(DragControllerAction action, const IntPoint& clientPosition, const IntPoint& globalPosition, OptionSet<DragOperation> draggingSourceOperationMask, SelectionData&& selectionData, OptionSet<DragApplicationFlags> flags)
  {
      if (!m_page) {
-@@ -7037,6 +7150,9 @@ Ref<DocumentLoader> WebPage::createDocumentLoader(Frame& frame, const ResourceRe
+@@ -7028,6 +7141,9 @@ Ref<DocumentLoader> WebPage::createDocumentLoader(Frame& frame, const ResourceRe
              WebsitePoliciesData::applyToDocumentLoader(WTFMove(*m_pendingWebsitePolicies), documentLoader);
              m_pendingWebsitePolicies = std::nullopt;
          }
@@ -20927,7 +20748,7 @@ index bcfd5062b0ee4077f18c69eb31a70384700ba093..47cfbc5171198c0c046427e957d4dc47
  
      return documentLoader;
 diff --git a/Source/WebKit/WebProcess/WebPage/WebPage.h b/Source/WebKit/WebProcess/WebPage/WebPage.h
-index a8d6317c7628f3fe499ef7708da81f48a0b4988c..76f57f4cf23838ef85c11fb6e9b12ded0a9f18cf 100644
+index 1a5899890f00a8a3b75ab341e8655255380443a2..f556782065300a1cb009e7c9f17c13184eda8e30 100644
 --- a/Source/WebKit/WebProcess/WebPage/WebPage.h
 +++ b/Source/WebKit/WebProcess/WebPage/WebPage.h
 @@ -118,6 +118,10 @@
@@ -20973,7 +20794,7 @@ index a8d6317c7628f3fe499ef7708da81f48a0b4988c..76f57f4cf23838ef85c11fb6e9b12ded
  
      void insertNewlineInQuotedContent();
  
-@@ -1669,6 +1677,7 @@ private:
+@@ -1663,6 +1671,7 @@ private:
      // Actions
      void tryClose(CompletionHandler<void(bool)>&&);
      void platformDidReceiveLoadParameters(const LoadParameters&);
@@ -20981,7 +20802,7 @@ index a8d6317c7628f3fe499ef7708da81f48a0b4988c..76f57f4cf23838ef85c11fb6e9b12ded
      void loadRequest(LoadParameters&&);
      NO_RETURN void loadRequestWaitingForProcessLaunch(LoadParameters&&, URL&&, WebPageProxyIdentifier, bool);
      void loadData(LoadParameters&&);
-@@ -1706,6 +1715,7 @@ private:
+@@ -1700,6 +1709,7 @@ private:
      void updatePotentialTapSecurityOrigin(const WebTouchEvent&, bool wasHandled);
  #elif ENABLE(TOUCH_EVENTS)
      void touchEvent(const WebTouchEvent&);
@@ -20989,7 +20810,7 @@ index a8d6317c7628f3fe499ef7708da81f48a0b4988c..76f57f4cf23838ef85c11fb6e9b12ded
  #endif
  
      void cancelPointer(WebCore::PointerID, const WebCore::IntPoint&);
-@@ -1851,9 +1861,7 @@ private:
+@@ -1845,9 +1855,7 @@ private:
      void addLayerForFindOverlay(CompletionHandler<void(WebCore::GraphicsLayer::PlatformLayerID)>&&);
      void removeLayerForFindOverlay(CompletionHandler<void()>&&);
  
@@ -20999,7 +20820,7 @@ index a8d6317c7628f3fe499ef7708da81f48a0b4988c..76f57f4cf23838ef85c11fb6e9b12ded
  
      void didChangeSelectedIndexForActivePopupMenu(int32_t newIndex);
      void setTextForActivePopupMenu(int32_t index);
-@@ -2394,6 +2402,7 @@ private:
+@@ -2388,6 +2396,7 @@ private:
      UserActivity m_userActivity;
  
      uint64_t m_pendingNavigationID { 0 };
@@ -21008,7 +20829,7 @@ index a8d6317c7628f3fe499ef7708da81f48a0b4988c..76f57f4cf23838ef85c11fb6e9b12ded
  
      bool m_mainFrameProgressCompleted { false };
 diff --git a/Source/WebKit/WebProcess/WebPage/WebPage.messages.in b/Source/WebKit/WebProcess/WebPage/WebPage.messages.in
-index 74ee4497373c9b9cca4b5894a31efffe777177d8..7cf743d4738b5993c8951caea2ccfc21804e9709 100644
+index 7957aada242c91f7242629a6a07da55119579df4..267ecbe285854b78a723f66e6d09ee4d51691988 100644
 --- a/Source/WebKit/WebProcess/WebPage/WebPage.messages.in
 +++ b/Source/WebKit/WebProcess/WebPage/WebPage.messages.in
 @@ -144,6 +144,7 @@ GenerateSyntheticEditingCommand(enum:uint8_t WebKit::SyntheticEditingCommandType
@@ -21060,7 +20881,7 @@ index 74ee4497373c9b9cca4b5894a31efffe777177d8..7cf743d4738b5993c8951caea2ccfc21
      RequestDragStart(WebCore::IntPoint clientPosition, WebCore::IntPoint globalPosition, OptionSet<WebCore::DragSourceAction> allowedActionsMask)
      RequestAdditionalItemsForDragSession(WebCore::IntPoint clientPosition, WebCore::IntPoint globalPosition, OptionSet<WebCore::DragSourceAction> allowedActionsMask)
 diff --git a/Source/WebKit/WebProcess/WebPage/mac/WebPageMac.mm b/Source/WebKit/WebProcess/WebPage/mac/WebPageMac.mm
-index 958c5dce4f2cfa0aca1926c9181f01284570f57e..d7c3ce51ac62c345893fb72eedcc9535c7f08726 100644
+index 39c9d791a5bf414f936eab72bf1e76d6c564ee8b..92d3b94d1e31b57b5d39437441d7edddca217b11 100644
 --- a/Source/WebKit/WebProcess/WebPage/mac/WebPageMac.mm
 +++ b/Source/WebKit/WebProcess/WebPage/mac/WebPageMac.mm
 @@ -801,21 +801,37 @@ String WebPage::platformUserAgent(const URL&) const
@@ -21152,10 +20973,10 @@ index c77ff78cd3cd9627d1ae7b930c81457094645200..88746359159a76b169b7e6dcbee4fb34
  }
  
 diff --git a/Source/WebKit/WebProcess/WebProcess.cpp b/Source/WebKit/WebProcess/WebProcess.cpp
-index 2f9a8a39375f65b66d986cf924168c92cff190e8..8d759fca6afe1e8d63a604dd08bdaec98561c0aa 100644
+index 7c7c67927f8adca07c25b4577a74acf617ef066f..a6d2154628eb07617c6aea939736a026c8b0f5a9 100644
 --- a/Source/WebKit/WebProcess/WebProcess.cpp
 +++ b/Source/WebKit/WebProcess/WebProcess.cpp
-@@ -93,6 +93,7 @@
+@@ -92,6 +92,7 @@
  #include "WebsiteData.h"
  #include "WebsiteDataStoreParameters.h"
  #include "WebsiteDataType.h"
@@ -21163,7 +20984,7 @@ index 2f9a8a39375f65b66d986cf924168c92cff190e8..8d759fca6afe1e8d63a604dd08bdaec9
  #include <JavaScriptCore/JSLock.h>
  #include <JavaScriptCore/MemoryStatistics.h>
  #include <JavaScriptCore/WasmFaultSignalHandler.h>
-@@ -370,6 +371,8 @@ void WebProcess::initializeProcess(const AuxiliaryProcessInitializationParameter
+@@ -367,6 +368,8 @@ void WebProcess::initializeProcess(const AuxiliaryProcessInitializationParameter
      
      platformInitializeProcess(parameters);
      updateCPULimit();
@@ -21188,10 +21009,10 @@ index 8987c3964a9308f2454759de7f8972215a3ae416..bcac0afeb94ed8123d1f9fb0b932c849
              SetProcessDPIAware();
          return true;
 diff --git a/Source/WebKitLegacy/mac/WebView/WebHTMLView.mm b/Source/WebKitLegacy/mac/WebView/WebHTMLView.mm
-index ef4dbe919eed91caaea49292fa3926b7ec2be0e6..5332a0ad8cbe859c905f5a5995fa8c95617cea45 100644
+index 81093dca5a3f4cf8fa7a71551b9d7b11d7513d9e..0e62bc13f72397239c80bfbc3a272286d1fcb39f 100644
 --- a/Source/WebKitLegacy/mac/WebView/WebHTMLView.mm
 +++ b/Source/WebKitLegacy/mac/WebView/WebHTMLView.mm
-@@ -4200,7 +4200,7 @@ static BOOL currentScrollIsBlit(NSView *clipView)
+@@ -4205,7 +4205,7 @@ - (void)mouseDown:(WebEvent *)event
      _private->handlingMouseDownEvent = NO;
  }
  
@@ -21201,10 +21022,10 @@ index ef4dbe919eed91caaea49292fa3926b7ec2be0e6..5332a0ad8cbe859c905f5a5995fa8c95
  - (void)touch:(WebEvent *)event
  {
 diff --git a/Source/WebKitLegacy/mac/WebView/WebView.mm b/Source/WebKitLegacy/mac/WebView/WebView.mm
-index 48cc5be9887a698f2bae9261598c08b55705cff8..55904a59760c3a1f987e07db8f5d40d5efa66368 100644
+index e9f03c5136ad79870b8bdfa63f496e0b334238e1..bc82c7bd0b0778c2a16c4db2570bc3e27245f101 100644
 --- a/Source/WebKitLegacy/mac/WebView/WebView.mm
 +++ b/Source/WebKitLegacy/mac/WebView/WebView.mm
-@@ -4035,7 +4035,7 @@ IGNORE_WARNINGS_END
+@@ -4038,7 +4038,7 @@ + (void)_doNotStartObservingNetworkReachability
  }
  #endif // PLATFORM(IOS_FAMILY)
  
@@ -21213,7 +21034,7 @@ index 48cc5be9887a698f2bae9261598c08b55705cff8..55904a59760c3a1f987e07db8f5d40d5
  
  - (NSArray *)_touchEventRegions
  {
-@@ -4077,7 +4077,7 @@ IGNORE_WARNINGS_END
+@@ -4080,7 +4080,7 @@ - (NSArray *)_touchEventRegions
      }).autorelease();
  }
  
@@ -21222,6 +21043,24 @@ index 48cc5be9887a698f2bae9261598c08b55705cff8..55904a59760c3a1f987e07db8f5d40d5
  
  // For backwards compatibility with the WebBackForwardList API, we honor both
  // a per-WebView and a per-preferences setting for whether to use the back/forward cache.
+diff --git a/Source/bmalloc/libpas/src/libpas/pas_utils_prefix.h b/Source/bmalloc/libpas/src/libpas/pas_utils_prefix.h
+index 3ed076da2777bda665bb9df0ca9ac4e31166834e..c7f55f9f7fb06e03128f251e41674938f6c351c3 100644
+--- a/Source/bmalloc/libpas/src/libpas/pas_utils_prefix.h
++++ b/Source/bmalloc/libpas/src/libpas/pas_utils_prefix.h
+@@ -58,8 +58,13 @@ __PAS_BEGIN_EXTERN_C;
+ #if defined(PAS_LIBMALLOC) && PAS_LIBMALLOC
+ #define __PAS_API __attribute__((visibility("hidden")))
+ #else
++// Playwright: Linkage fails in Ubuntu 18.04.
++#if defined(__GNUC__) && __GNUC__ == 8
++#define __PAS_API
++#else
+ #define __PAS_API __attribute__((visibility("default")))
+ #endif
++#endif
+ 
+ #if defined(PAS_BMALLOC) && PAS_BMALLOC
+ #define __PAS_BAPI __attribute__((visibility("default")))
 diff --git a/Source/cmake/FindLibVPX.cmake b/Source/cmake/FindLibVPX.cmake
 new file mode 100644
 index 0000000000000000000000000000000000000000..dd6a53e2d57318489b7e49dd7373706d5d9dc387
@@ -21254,7 +21093,7 @@ index 0000000000000000000000000000000000000000..dd6a53e2d57318489b7e49dd7373706d
 +    LIBVPX_LIBRARIES
 +)
 diff --git a/Source/cmake/OptionsGTK.cmake b/Source/cmake/OptionsGTK.cmake
-index 6279a0d3435db9ac91f7705be3f8d40a6b3187a1..a77f548e0c421607f7c20cddfb7c9fe24e3655ac 100644
+index 9f83a2ce06da0656de69fd18ea6e4bc8065b81bd..870528b5e0f00bacd29578c614cb528bff790752 100644
 --- a/Source/cmake/OptionsGTK.cmake
 +++ b/Source/cmake/OptionsGTK.cmake
 @@ -11,8 +11,13 @@ if (${CMAKE_VERSION} VERSION_LESS "3.20" AND NOT ${CMAKE_GENERATOR} STREQUAL "Ni
@@ -21271,7 +21110,7 @@ index 6279a0d3435db9ac91f7705be3f8d40a6b3187a1..a77f548e0c421607f7c20cddfb7c9fe2
  find_package(Cairo 1.14.0 REQUIRED)
  find_package(Fontconfig 2.8.0 REQUIRED)
  find_package(Freetype 2.4.2 REQUIRED)
-@@ -33,6 +38,10 @@ find_package(EGL)
+@@ -32,6 +37,10 @@ find_package(EGL)
  find_package(OpenGL)
  find_package(OpenGLES2)
  
@@ -21282,7 +21121,7 @@ index 6279a0d3435db9ac91f7705be3f8d40a6b3187a1..a77f548e0c421607f7c20cddfb7c9fe2
  include(GStreamerDefinitions)
  
  SET_AND_EXPOSE_TO_BUILD(USE_CAIRO TRUE)
-@@ -66,15 +75,15 @@ WEBKIT_OPTION_DEFINE(ENABLE_QUARTZ_TARGET "Whether to enable support for the Qua
+@@ -65,16 +74,16 @@ WEBKIT_OPTION_DEFINE(ENABLE_QUARTZ_TARGET "Whether to enable support for the Qua
  WEBKIT_OPTION_DEFINE(ENABLE_WAYLAND_TARGET "Whether to enable support for the Wayland windowing target." PUBLIC ON)
  WEBKIT_OPTION_DEFINE(ENABLE_X11_TARGET "Whether to enable support for the X11 windowing target." PUBLIC ON)
  WEBKIT_OPTION_DEFINE(USE_ANGLE_WEBGL "Whether to use ANGLE as WebGL backend." PUBLIC OFF)
@@ -21293,6 +21132,7 @@ index 6279a0d3435db9ac91f7705be3f8d40a6b3187a1..a77f548e0c421607f7c20cddfb7c9fe2
 +WEBKIT_OPTION_DEFINE(USE_JPEGXL "Whether to enable support for JPEG-XL images." PUBLIC OFF)
  WEBKIT_OPTION_DEFINE(USE_LCMS "Whether to enable support for image color management using libcms2." PUBLIC ON)
  WEBKIT_OPTION_DEFINE(USE_LIBHYPHEN "Whether to enable the default automatic hyphenation implementation." PUBLIC ON)
+ WEBKIT_OPTION_DEFINE(USE_LIBNOTIFY "Whether to enable the default web notification implementation." PUBLIC ON)
  WEBKIT_OPTION_DEFINE(USE_LIBSECRET "Whether to enable the persistent credential storage using libsecret." PUBLIC ON)
  WEBKIT_OPTION_DEFINE(USE_OPENGL_OR_ES "Whether to use OpenGL or ES." PUBLIC ON)
  WEBKIT_OPTION_DEFINE(USE_OPENJPEG "Whether to enable support for JPEG2000 images." PUBLIC ON)
@@ -21360,7 +21200,7 @@ index 6279a0d3435db9ac91f7705be3f8d40a6b3187a1..a77f548e0c421607f7c20cddfb7c9fe2
  SET_AND_EXPOSE_TO_BUILD(HAVE_OS_DARK_MODE_SUPPORT 1)
  
 diff --git a/Source/cmake/OptionsWPE.cmake b/Source/cmake/OptionsWPE.cmake
-index 88d2a536009f74c54d74717819e94adf5c316089..15a022fa1cca72d482beec584313e2cea6b1680d 100644
+index 0078b2ff6b0e267f1fb5c02d6e3b331db3013703..be378fe3aa6b3137f9a1c63ebd346304274b7d67 100644
 --- a/Source/cmake/OptionsWPE.cmake
 +++ b/Source/cmake/OptionsWPE.cmake
 @@ -9,8 +9,13 @@ if (${CMAKE_VERSION} VERSION_LESS "3.20" AND NOT ${CMAKE_GENERATOR} STREQUAL "Ni
@@ -21377,7 +21217,7 @@ index 88d2a536009f74c54d74717819e94adf5c316089..15a022fa1cca72d482beec584313e2ce
  find_package(Cairo 1.14.0 REQUIRED)
  find_package(Fontconfig 2.8.0 REQUIRED)
  find_package(Freetype 2.4.2 REQUIRED)
-@@ -42,7 +47,7 @@ include(GStreamerDefinitions)
+@@ -41,7 +46,7 @@ include(GStreamerDefinitions)
  # changing the value of the option.
  WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_ACCESSIBILITY PUBLIC ON)
  WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_ENCRYPTED_MEDIA PUBLIC ${ENABLE_EXPERIMENTAL_FEATURES})
@@ -21386,7 +21226,7 @@ index 88d2a536009f74c54d74717819e94adf5c316089..15a022fa1cca72d482beec584313e2ce
  WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEBDRIVER PUBLIC ON)
  WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEB_CRYPTO PUBLIC ON)
  WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_XSLT PUBLIC ON)
-@@ -64,10 +69,10 @@ WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INTELLIGENT_TRACKING_PREVENTION PRIVATE
+@@ -63,10 +68,10 @@ WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INTELLIGENT_TRACKING_PREVENTION PRIVATE
  WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_LAYER_BASED_SVG_ENGINE PRIVATE ON)
  WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_LAYOUT_FORMATTING_CONTEXT PRIVATE ${ENABLE_EXPERIMENTAL_FEATURES})
  WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MEDIA_CONTROLS_CONTEXT_MENUS PRIVATE ON)
@@ -21399,7 +21239,7 @@ index 88d2a536009f74c54d74717819e94adf5c316089..15a022fa1cca72d482beec584313e2ce
  WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MHTML PRIVATE ON)
  WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MODERN_MEDIA_CONTROLS PRIVATE ON)
  WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_NETSCAPE_PLUGIN_API PRIVATE OFF)
-@@ -78,7 +83,7 @@ WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_OFFSCREEN_CANVAS_IN_WORKERS PRIVATE ${EN
+@@ -77,25 +82,43 @@ WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_OFFSCREEN_CANVAS_IN_WORKERS PRIVATE ${EN
  WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_PERIODIC_MEMORY_MONITOR PRIVATE ON)
  WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_SERVICE_WORKER PRIVATE ON)
  WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_SHAREABLE_RESOURCE PRIVATE ON)
@@ -21408,9 +21248,7 @@ index 88d2a536009f74c54d74717819e94adf5c316089..15a022fa1cca72d482beec584313e2ce
  WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_TOUCH_EVENTS PRIVATE ON)
  WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEB_RTC PRIVATE ${ENABLE_EXPERIMENTAL_FEATURES})
  WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEBGL2 PRIVATE ON)
-@@ -88,19 +93,36 @@ if (WPE_VERSION VERSION_GREATER_EQUAL 1.13.90)
-     WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_GAMEPAD PUBLIC ON)
- endif ()
+ WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEBXR PRIVATE ${ENABLE_EXPERIMENTAL_FEATURES})
  
 +# Playwright
 +WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_APPLICATION_MANIFEST PRIVATE ON)
@@ -21420,6 +21258,7 @@ index 88d2a536009f74c54d74717819e94adf5c316089..15a022fa1cca72d482beec584313e2ce
 +WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_DOWNLOAD_ATTRIBUTE PRIVATE ON)
 +WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_DRAG_SUPPORT PRIVATE ON)
 +WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_DEVICE_ORIENTATION PRIVATE ON)
++WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_GAMEPAD PRIVATE ON)
 +WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INPUT_TYPE_COLOR PRIVATE ON)
 +WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INPUT_TYPE_DATE PRIVATE ON)
 +WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_INPUT_TYPE_DATETIMELOCAL PRIVATE ON)
@@ -21502,7 +21341,7 @@ index 00ac7921bf6903d047585063cc374231397f236b..038ddb5f9adeda2f950e4631f4390fc9
      WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_NETSCAPE_PLUGIN_API PRIVATE OFF)
  else ()
 diff --git a/Source/cmake/OptionsWinCairo.cmake b/Source/cmake/OptionsWinCairo.cmake
-index bdf462125f056ecb241f79dbb0ff79dbefa40291..9844ea22e138c715b8142cd1771f99131b1155c3 100644
+index 62b4bc6e91b180abe8ca0f749ce76bf1aba98d4d..23216d79747d514c53e965618d5bf7ade8beb659 100644
 --- a/Source/cmake/OptionsWinCairo.cmake
 +++ b/Source/cmake/OptionsWinCairo.cmake
 @@ -37,20 +37,42 @@ if (OpenJPEG_FOUND)
@@ -21551,9 +21390,9 @@ index bdf462125f056ecb241f79dbb0ff79dbefa40291..9844ea22e138c715b8142cd1771f9913
  SET_AND_EXPOSE_TO_BUILD(USE_CURL ON)
  SET_AND_EXPOSE_TO_BUILD(USE_GRAPHICS_LAYER_TEXTURE_MAPPER ON)
  SET_AND_EXPOSE_TO_BUILD(USE_GRAPHICS_LAYER_WC ON)
-@@ -74,11 +96,7 @@ set(CMAKE_REQUIRED_LIBRARIES "${OPENSSL_LIBRARIES}")
- WEBKIT_CHECK_HAVE_SYMBOL(USE_BORINGSSL OPENSSL_IS_BORINGSSL openssl/ssl.h)
- cmake_pop_check_state()
+@@ -67,11 +89,7 @@ SET_AND_EXPOSE_TO_BUILD(ENABLE_DEVELOPER_MODE ${DEVELOPER_MODE})
+ 
+ SET_AND_EXPOSE_TO_BUILD(HAVE_OS_DARK_MODE_SUPPORT 1)
  
 -# CoreFoundation is required when building WebKitLegacy
 -if (ENABLE_WEBKIT_LEGACY)
@@ -22123,7 +21962,7 @@ index 9ee1f886d0148827da93466dece71d1eec5307cc..ee7d59af6b1ea62f6d4a61a19bf60a8f
  set(WebKitTestRunnerInjectedBundle_IDL_FILES
      "${WebKitTestRunner_DIR}/InjectedBundle/Bindings/AccessibilityController.idl"
 diff --git a/Tools/WebKitTestRunner/TestController.cpp b/Tools/WebKitTestRunner/TestController.cpp
-index a453d896f4ae544a03daf15c091885463869086f..c7e84d3831dcbfde0ccf4508336b6fbe93d733a8 100644
+index f7fd40ab596fe75ecbf773d94d1e3a09ba313903..19dc94ff4d78afc32766d2ec5d5878aa7bbb8033 100644
 --- a/Tools/WebKitTestRunner/TestController.cpp
 +++ b/Tools/WebKitTestRunner/TestController.cpp
 @@ -891,6 +891,7 @@ void TestController::createWebViewWithOptions(const TestOptions& options)
@@ -22191,10 +22030,10 @@ index b0a503013185f29feeca47e4313b27e349973c02..ee1f87780a99b2b626b1ada984d63109
 +
  } // namespace WTR
 diff --git a/Tools/glib/dependencies/apt b/Tools/glib/dependencies/apt
-index 8635ebd88f92175c6cec4781ae3934193afec484..552dbf544180132ee7a72e364bf52582ac6884fa 100644
+index c3898e86e8c3e018400dd11b0722bfa01b6cb561..7f9221377839579a9c6bf57a84c7cb164691a1f4 100644
 --- a/Tools/glib/dependencies/apt
 +++ b/Tools/glib/dependencies/apt
-@@ -1,11 +1,11 @@
+@@ -1,17 +1,17 @@
  #!/usr/bin/env bash
  
 -# If the package $1 is available, prints it. Otherwise prints $2.
@@ -22208,9 +22047,16 @@ index 8635ebd88f92175c6cec4781ae3934193afec484..552dbf544180132ee7a72e364bf52582
          echo $2
      fi
  }
-@@ -66,9 +66,11 @@ PACKAGES=(
-     $(aptIfExists libwpe-1.0-dev)
-     $(aptIfExists libwpebackend-fdo-1.0-dev)
+ 
+ aptIfExists() {
+-    local ret=$(apt show "$1" 2>/dev/null)
++    ret=$(apt show "$1" 2>/dev/null)
+     if [[ $? -ne 0 ]]; then
+         return
+     fi
+@@ -57,9 +57,11 @@ PACKAGES=(
+     libwebp-dev
+     libwoff-dev
      libxml2-utils
 +    libxcb-glx0-dev
      libxslt1-dev
@@ -22221,13 +22067,14 @@ index 8635ebd88f92175c6cec4781ae3934193afec484..552dbf544180132ee7a72e364bf52582
  
      # These are dependencies necessary for running tests.
 diff --git a/Tools/gtk/dependencies/apt b/Tools/gtk/dependencies/apt
-index 04cfec1eca7818035ca2de7dd4f2efcc9434741f..9435d01ef9ad3eaec226ed6abbd6151214f132f9 100644
+index 8edc8d8119c729959fec7e4ddf762e2aeeb5f1f0..5c93e4c8f3ef2c8978f4e9b9290e713fe2e68797 100644
 --- a/Tools/gtk/dependencies/apt
 +++ b/Tools/gtk/dependencies/apt
-@@ -35,6 +35,7 @@ PACKAGES+=(
+@@ -34,7 +34,7 @@ PACKAGES+=(
+     libxtst-dev
      nasm
-     unifdef
      xfonts-utils
+-    $(aptIfExists libenchant-dev)
 +    $(aptIfElse libenchant-dev libenchant-2-dev)
  
      # These are dependencies necessary for running tests.
@@ -22557,10 +22404,10 @@ index 8660306662de6faabab78662034958811e3e4a67..979c470d97950007ad990564eba18de9
        location = "group:Source/bmalloc/bmalloc.xcodeproj">
     </FileRef>
 diff --git a/WebKit.xcworkspace/xcshareddata/xcschemes/Everything up to WebKit + Tools.xcscheme b/WebKit.xcworkspace/xcshareddata/xcschemes/Everything up to WebKit + Tools.xcscheme
-index 4e712c4128ced91a4f7b93c543e4b231ec23e348..853d3d2f6b311c0fe009bf3ef5ab4d1d3c1d331e 100644
+index 1e41cbcb9a7faa6757cdf62027a236b1449c9d5f..3fbcb4663cad440849307e2f9ecfde2518db0f6e 100644
 --- a/WebKit.xcworkspace/xcshareddata/xcschemes/Everything up to WebKit + Tools.xcscheme	
 +++ b/WebKit.xcworkspace/xcshareddata/xcschemes/Everything up to WebKit + Tools.xcscheme	
-@@ -188,6 +188,20 @@
+@@ -202,6 +202,20 @@
                 ReferencedContainer = "container:Tools/MobileMiniBrowser/MobileMiniBrowser.xcodeproj">
              </BuildableReference>
           </BuildActionEntry>
diff --git a/browser_patches/webkit/pw_run_debug.sh b/browser_patches/webkit/pw_run_debug.sh
new file mode 100755
index 0000000000000000000000000000000000000000..0e41b28a8ec5264b6ad2b14d61db0a36d1191da6
--- /dev/null
+++ b/browser_patches/webkit/pw_run_debug.sh
@@ -0,0 +1,45 @@
+#!/bin/bash
+
+function runOSX() {
+  # if script is run as-is
+  if [ -d $SCRIPT_PATH/checkout/WebKitBuild/Debug/MiniBrowser.app ]; then
+    DYLIB_PATH="$SCRIPT_PATH/checkout/WebKitBuild/Debug"
+  elif [ -d $SCRIPT_PATH/MiniBrowser.app ]; then
+    DYLIB_PATH="$SCRIPT_PATH"
+  elif [ -d $SCRIPT_PATH/WebKitBuild/Debug/MiniBrowser.app ]; then
+    DYLIB_PATH="$SCRIPT_PATH/WebKitBuild/Debug"
+  else
+    echo "Cannot find a MiniBrowser.app in neither location" 1>&2
+    exit 1
+  fi
+  MINIBROWSER="$DYLIB_PATH/MiniBrowser.app/Contents/MacOS/MiniBrowser"
+  DYLD_FRAMEWORK_PATH=$DYLIB_PATH DYLD_LIBRARY_PATH=$DYLIB_PATH $MINIBROWSER "$@"
+}
+
+function runLinux() {
+  # if script is run as-is
+  if [ -d $SCRIPT_PATH/checkout/WebKitBuild/GTK ]; then
+    LD_PATH="$SCRIPT_PATH/checkout/WebKitBuild/GTK/DependenciesGTK/Root/lib:$SCRIPT_PATH/checkout/WebKitBuild/GTK/Debug/bin"
+    MINIBROWSER="$SCRIPT_PATH/checkout/WebKitBuild/GTK/Debug/bin/MiniBrowser"
+  elif [ -f $SCRIPT_PATH/MiniBrowser ]; then
+    LD_PATH="$SCRIPT_PATH"
+    MINIBROWSER="$SCRIPT_PATH/MiniBrowser"
+  elif [ -d $SCRIPT_PATH/WebKitBuild/GTK ]; then
+    LD_PATH="$SCRIPT_PATH/WebKitBuild/GTK/DependenciesGTK/Root/lib:$SCRIPT_PATH/WebKitBuild/GTK/Debug/bin"
+    MINIBROWSER="$SCRIPT_PATH/WebKitBuild/GTK/Debug/bin/MiniBrowser"
+  else
+    echo "Cannot find a MiniBrowser.app in neither location" 1>&2
+    exit 1
+  fi
+  LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$LD_PATH $MINIBROWSER "$@"
+}
+
+SCRIPT_PATH="$(cd "$(dirname "$0")" ; pwd -P)"
+if [ "$(uname)" == "Darwin" ]; then
+  runOSX "$@"
+elif [ "$(uname)" == "Linux" ]; then
+  runLinux "$@"
+else
+  echo "ERROR: cannot run on this platform!" 1>&2
+  exit 1;
+fi
diff --git a/browser_patches/webkit/upstream_status.md b/browser_patches/webkit/upstream_status.md
new file mode 100644
index 0000000000000000000000000000000000000000..6c16dc531c4390bfa740e7f8913a65970c3c7f3c
--- /dev/null
+++ b/browser_patches/webkit/upstream_status.md
@@ -0,0 +1,20 @@
+### WebKit patches under review
+
+- [203870](https://bugs.webkit.org/show_bug.cgi?id=203870) Web Inspector: introduce browser inspector
+
+### WebKit patches landed
+
+- [207446](https://bugs.webkit.org/show_bug.cgi?id=207446) Web Inspector: request interception
+- [212528](https://bugs.webkit.org/show_bug.cgi?id=212528) [Win] Allow compiling with the TOUCH_EVENTS enabled
+- [208964](https://bugs.webkit.org/show_bug.cgi?id=208964) [Curl] sort out MS vs Seconds confusion in Cookies 
+- [207529](https://bugs.webkit.org/show_bug.cgi?id=207529) [WPE][WebDriver] MiniBrowser should react to close session commands
+- [207450](https://bugs.webkit.org/show_bug.cgi?id=207450) [Curl] Implement NetworkStorageSession::get/set/deleteCookie
+- [207448](https://bugs.webkit.org/show_bug.cgi?id=207448) Web Inspector: encode binary web socket frames using base64
+- [207404](https://bugs.webkit.org/show_bug.cgi?id=207420) [Geoclue] Avoid usage of provider in callbacks after it has been destroyed
+- [207404](https://bugs.webkit.org/show_bug.cgi?id=207404) Ephemeral session data leaks between processes
+- [207449](https://bugs.webkit.org/show_bug.cgi?id=207449) [WK2][Soup] Implement NetworkStorageSession::getAllCookies
+- [201922](https://bugs.webkit.org/show_bug.cgi?id=201922) WebStorageNamespaceProvider / StorageNamespaceImpl no longer need SessionIDs
+- [200272](https://bugs.webkit.org/show_bug.cgi?id=200272) Web Inspector: Debugger: support emulateUserGesture parameter in Debugger.evaluateOnCallFrame
+- [200223](https://bugs.webkit.org/show_bug.cgi?id=200223) [GTK] Compilation errors when GL is disabled
+- [196280](https://bugs.webkit.org/show_bug.cgi?id=196280) Web Inspector: Crash when interacting with Template Content in Console
+- [137131](https://bugs.webkit.org/show_bug.cgi?id=137131) Web Inspector: tests under LayoutTests/inspector/debugger are flaky
diff --git a/docs/src/api-testing-csharp.md b/docs/src/api-testing-csharp.md
index 52a616d5ac2891997d8748b6b4ccfc096f835c33..ad2ec13605a4d8ad8709cc57acce1b5fe7fc5b38 100644
--- a/docs/src/api-testing-csharp.md
+++ b/docs/src/api-testing-csharp.md
@@ -39,40 +39,42 @@ using Microsoft.Playwright.NUnit;
 using Microsoft.Playwright;
 using NUnit.Framework;
 
-namespace PlaywrightTests;
-
-public class TestGitHubAPI : PlaywrightTest
+namespace PlaywrightTests
 {
-    static string API_TOKEN = Environment.GetEnvironmentVariable("GITHUB_API_TOKEN");
-
-    private IAPIRequestContext Request = null;
 
-    [SetUp]
-    public async Task SetUpAPITesting()
+    public class TestGitHubAPI : PlaywrightTest
     {
-        await CreateAPIRequestContext();
-    }
+        static string API_TOKEN = Environment.GetEnvironmentVariable("GITHUB_API_TOKEN");
 
-    private async Task CreateAPIRequestContext()
-    {
-        var headers = new Dictionary<string, string>();
-        // We set this header per GitHub guidelines.
-        headers.Add("Accept", "application/vnd.github.v3+json");
-        // Add authorization token to all requests.
-        // Assuming personal access token available in the environment.
-        headers.Add("Authorization", "token " + API_TOKEN);
-
-        Request = await this.Playwright.APIRequest.NewContextAsync(new() {
-            // All requests we send go to this API endpoint.
-            BaseURL = "https://api.github.com",
-            ExtraHTTPHeaders = headers,
-        });
-    }
+        private IAPIRequestContext Request = null;
 
-    [TearDown]
-    public async Task TearDownAPITesting()
-    {
-        await Request.DisposeAsync();
+        [SetUp]
+        public async Task SetUpAPITesting()
+        {
+            await CreateAPIRequestContext();
+        }
+
+        private async Task CreateAPIRequestContext()
+        {
+            var headers = new Dictionary<string, string>();
+            // We set this header per GitHub guidelines.
+            headers.Add("Accept", "application/vnd.github.v3+json");
+            // Add authorization token to all requests.
+            // Assuming personal access token available in the environment.
+            headers.Add("Authorization", "token " + API_TOKEN);
+
+            Request = await this.Playwright.APIRequest.NewContextAsync(new() {
+                // All requests we send go to this API endpoint.
+                BaseURL = "https://api.github.com",
+                ExtraHTTPHeaders = headers,
+            });
+        }
+
+        [TearDown]
+        public async Task TearDownAPITesting()
+        {
+            await Request.DisposeAsync();
+        }
     }
 }
 ```
@@ -89,74 +91,75 @@ using Microsoft.Playwright.NUnit;
 using Microsoft.Playwright;
 using NUnit.Framework;
 
-namespace PlaywrightTests;
-
-[TestFixture]
-public class TestGitHubAPI : PlaywrightTest
+namespace PlaywrightTests
 {
-    static string REPO = "test-repo-2";
-    static string USER = Environment.GetEnvironmentVariable("GITHUB_USER");
-    static string API_TOKEN = Environment.GetEnvironmentVariable("GITHUB_API_TOKEN");
 
-    private IAPIRequestContext Request = null;
-
-    [PlaywrightTest]
-    public async Task ShouldCreateBugReport()
+    public class TestGitHubAPI : PlaywrightTest
     {
-        var data = new Dictionary<string, string>();
-        data.Add("title", "[Bug] report 1");
-        data.Add("body", "Bug description");
-        var newIssue = await Request.PostAsync("/repos/" + USER + "/" + REPO + "/issues", new() { DataObject = data });
-        Assert.True(newIssue.Ok);
-
-        var issues = await Request.GetAsync("/repos/" + USER + "/" + REPO + "/issues");
-        Assert.True(issues.Ok);
-        var issuesJsonResponse = await issues.JsonAsync();
-        JsonElement? issue = null;
-        foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())
+        static string REPO = "test-repo-2";
+        static string USER = Environment.GetEnvironmentVariable("GITHUB_USER");
+        static string API_TOKEN = Environment.GetEnvironmentVariable("GITHUB_API_TOKEN");
+
+        private IAPIRequestContext Request = null;
+
+        [Test]
+        public async Task ShouldCreateBugReport()
         {
-            if (issueObj.TryGetProperty("title", out var title) == true)
+            var data = new Dictionary<string, string>();
+            data.Add("title", "[Bug] report 1");
+            data.Add("body", "Bug description");
+            var newIssue = await Request.PostAsync("/repos/" + USER + "/" + REPO + "/issues", new() { DataObject = data });
+            Assert.True(newIssue.Ok);
+
+            var issues = await Request.GetAsync("/repos/" + USER + "/" + REPO + "/issues");
+            Assert.True(issues.Ok);
+            var issuesJsonResponse = await issues.JsonAsync();
+            JsonElement? issue = null;
+            foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())
             {
-                if (title.GetString() == "[Bug] report 1")
+                if (issueObj.TryGetProperty("title", out var title) == true)
                 {
-                    issue = issueObj;
+                    if (title.GetString() == "[Bug] report 1")
+                    {
+                        issue = issueObj;
+                    }
                 }
             }
+            Assert.NotNull(issue);
+            Assert.AreEqual("Bug description", issue?.GetProperty("body").GetString());
         }
-        Assert.NotNull(issue);
-        Assert.AreEqual("Bug description", issue?.GetProperty("body").GetString());
-    }
 
-    [PlaywrightTest]
-    public async Task ShouldCreateFeatureRequests()
-    {
-        var data = new Dictionary<string, string>();
-        data.Add("title", "[Feature] request 1");
-        data.Add("body", "Feature description");
-        var newIssue = await Request.PostAsync("/repos/" + USER + "/" + REPO + "/issues", new() { DataObject = data });
-        Assert.True(newIssue.Ok);
-
-        var issues = await Request.GetAsync("/repos/" + USER + "/" + REPO + "/issues");
-        Assert.True(issues.Ok);
-        var issuesJsonResponse = await issues.JsonAsync();
-        var issuesJson = (await issues.JsonAsync())?.EnumerateArray();
-
-        JsonElement? issue = null;
-        foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())
+        [Test]
+        public async Task ShouldCreateFeatureRequests()
         {
-            if (issueObj.TryGetProperty("title", out var title) == true)
+            var data = new Dictionary<string, string>();
+            data.Add("title", "[Feature] request 1");
+            data.Add("body", "Feature description");
+            var newIssue = await Request.PostAsync("/repos/" + USER + "/" + REPO + "/issues", new() { DataObject = data });
+            Assert.True(newIssue.Ok);
+
+            var issues = await Request.GetAsync("/repos/" + USER + "/" + REPO + "/issues");
+            Assert.True(issues.Ok);
+            var issuesJsonResponse = await issues.JsonAsync();
+            var issuesJson = (await issues.JsonAsync())?.EnumerateArray();
+
+            JsonElement? issue = null;
+            foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())
             {
-                if (title.GetString() == "[Feature] request 1")
+                if (issueObj.TryGetProperty("title", out var title) == true)
                 {
-                    issue = issueObj;
+                    if (title.GetString() == "[Feature] request 1")
+                    {
+                        issue = issueObj;
+                    }
                 }
             }
+            Assert.NotNull(issue);
+            Assert.AreEqual("Feature description", issue?.GetProperty("body").GetString());
         }
-        Assert.NotNull(issue);
-        Assert.AreEqual("Feature description", issue?.GetProperty("body").GetString());
-    }
 
-    // ...
+        // ...
+    }
 }
 ```
 
@@ -213,120 +216,121 @@ using Microsoft.Playwright.NUnit;
 using Microsoft.Playwright;
 using NUnit.Framework;
 
-namespace PlaywrightTests;
-
-[TestFixture]
-public class TestGitHubAPI : PlaywrightTest
+namespace PlaywrightTests
 {
-    static string REPO = "test-repo-2";
-    static string USER = Environment.GetEnvironmentVariable("GITHUB_USER");
-    static string API_TOKEN = Environment.GetEnvironmentVariable("GITHUB_API_TOKEN");
-
-    private IAPIRequestContext Request = null;
 
-    [PlaywrightTest]
-    public async Task ShouldCreateBugReport()
+    public class TestGitHubAPI : PlaywrightTest
     {
-        var data = new Dictionary<string, string>();
-        data.Add("title", "[Bug] report 1");
-        data.Add("body", "Bug description");
-        var newIssue = await Request.PostAsync("/repos/" + USER + "/" + REPO + "/issues", new() { DataObject = data });
-        Assert.True(newIssue.Ok);
-
-        var issues = await Request.GetAsync("/repos/" + USER + "/" + REPO + "/issues");
-        Assert.True(issues.Ok);
-        var issuesJsonResponse = await issues.JsonAsync();
-        JsonElement? issue = null;
-        foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())
+        static string REPO = "test-repo-2";
+        static string USER = Environment.GetEnvironmentVariable("GITHUB_USER");
+        static string API_TOKEN = Environment.GetEnvironmentVariable("GITHUB_API_TOKEN");
+
+        private IAPIRequestContext Request = null;
+
+        [Test]
+        public async Task ShouldCreateBugReport()
         {
-            if (issueObj.TryGetProperty("title", out var title) == true)
+            var data = new Dictionary<string, string>();
+            data.Add("title", "[Bug] report 1");
+            data.Add("body", "Bug description");
+            var newIssue = await Request.PostAsync("/repos/" + USER + "/" + REPO + "/issues", new() { DataObject = data });
+            Assert.True(newIssue.Ok);
+
+            var issues = await Request.GetAsync("/repos/" + USER + "/" + REPO + "/issues");
+            Assert.True(issues.Ok);
+            var issuesJsonResponse = await issues.JsonAsync();
+            JsonElement? issue = null;
+            foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())
             {
-                if (title.GetString() == "[Bug] report 1")
+                if (issueObj.TryGetProperty("title", out var title) == true)
                 {
-                    issue = issueObj;
+                    if (title.GetString() == "[Bug] report 1")
+                    {
+                        issue = issueObj;
+                    }
                 }
             }
+            Assert.NotNull(issue);
+            Assert.AreEqual("Bug description", issue?.GetProperty("body").GetString());
         }
-        Assert.NotNull(issue);
-        Assert.AreEqual("Bug description", issue?.GetProperty("body").GetString());
-    }
 
-    [PlaywrightTest]
-    public async Task ShouldCreateFeatureRequests()
-    {
-        var data = new Dictionary<string, string>();
-        data.Add("title", "[Feature] request 1");
-        data.Add("body", "Feature description");
-        var newIssue = await Request.PostAsync("/repos/" + USER + "/" + REPO + "/issues", new() { DataObject = data });
-        Assert.True(newIssue.Ok);
-
-        var issues = await Request.GetAsync("/repos/" + USER + "/" + REPO + "/issues");
-        Assert.True(issues.Ok);
-        var issuesJsonResponse = await issues.JsonAsync();
-        var issuesJson = (await issues.JsonAsync())?.EnumerateArray();
-
-        JsonElement? issue = null;
-        foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())
+        [Test]
+        public async Task ShouldCreateFeatureRequests()
         {
-            if (issueObj.TryGetProperty("title", out var title) == true)
+            var data = new Dictionary<string, string>();
+            data.Add("title", "[Feature] request 1");
+            data.Add("body", "Feature description");
+            var newIssue = await Request.PostAsync("/repos/" + USER + "/" + REPO + "/issues", new() { DataObject = data });
+            Assert.True(newIssue.Ok);
+
+            var issues = await Request.GetAsync("/repos/" + USER + "/" + REPO + "/issues");
+            Assert.True(issues.Ok);
+            var issuesJsonResponse = await issues.JsonAsync();
+            var issuesJson = (await issues.JsonAsync())?.EnumerateArray();
+
+            JsonElement? issue = null;
+            foreach (JsonElement issueObj in issuesJsonResponse?.EnumerateArray())
             {
-                if (title.GetString() == "[Feature] request 1")
+                if (issueObj.TryGetProperty("title", out var title) == true)
                 {
-                    issue = issueObj;
+                    if (title.GetString() == "[Feature] request 1")
+                    {
+                        issue = issueObj;
+                    }
                 }
             }
+            Assert.NotNull(issue);
+            Assert.AreEqual("Feature description", issue?.GetProperty("body").GetString());
         }
-        Assert.NotNull(issue);
-        Assert.AreEqual("Feature description", issue?.GetProperty("body").GetString());
-    }
 
-    [SetUp]
-    public async Task SetUpAPITesting()
-    {
-        await CreateAPIRequestContext();
-        await CreateTestRepository();
-    }
+        [SetUp]
+        public async Task SetUpAPITesting()
+        {
+            await CreateAPIRequestContext();
+            await CreateTestRepository();
+        }
 
-    private async Task CreateAPIRequestContext()
-    {
-        var headers = new Dictionary<string, string>();
-        // We set this header per GitHub guidelines.
-        headers.Add("Accept", "application/vnd.github.v3+json");
-        // Add authorization token to all requests.
-        // Assuming personal access token available in the environment.
-        headers.Add("Authorization", "token " + API_TOKEN);
-
-        Request = await this.Playwright.APIRequest.NewContextAsync(new()
+        private async Task CreateAPIRequestContext()
         {
-            // All requests we send go to this API endpoint.
-            BaseURL = "https://api.github.com",
-            ExtraHTTPHeaders = headers,
-        });
-    }
+            var headers = new Dictionary<string, string>();
+            // We set this header per GitHub guidelines.
+            headers.Add("Accept", "application/vnd.github.v3+json");
+            // Add authorization token to all requests.
+            // Assuming personal access token available in the environment.
+            headers.Add("Authorization", "token " + API_TOKEN);
+
+            Request = await this.Playwright.APIRequest.NewContextAsync(new()
+            {
+                // All requests we send go to this API endpoint.
+                BaseURL = "https://api.github.com",
+                ExtraHTTPHeaders = headers,
+            });
+        }
 
-    private async Task CreateTestRepository()
-    {
-        var resp = await Request.PostAsync("/user/repos", new()
+        private async Task CreateTestRepository()
         {
-            DataObject = new Dictionary<string, string>()
+            var resp = await Request.PostAsync("/user/repos", new()
             {
-                ["name"] = REPO,
-            },
-        });
-        Assert.True(resp.Ok);
-    }
+                DataObject = new Dictionary<string, string>()
+                {
+                    ["name"] = REPO,
+                },
+            });
+            Assert.True(resp.Ok);
+        }
 
-    [TearDown]
-    public async Task TearDownAPITesting()
-    {
-        await DeleteTestRepository();
-        await Request.DisposeAsync();
-    }
+        [TearDown]
+        public async Task TearDownAPITesting()
+        {
+            await DeleteTestRepository();
+            await Request.DisposeAsync();
+        }
 
-    private async Task DeleteTestRepository()
-    {
-        var resp = await Request.DeleteAsync("/repos/" + USER + "/" + REPO);
-        Assert.True(resp.Ok);
+        private async Task DeleteTestRepository()
+        {
+            var resp = await Request.DeleteAsync("/repos/" + USER + "/" + REPO);
+            Assert.True(resp.Ok);
+        }
     }
 }
 ```
@@ -337,7 +341,7 @@ The following test creates a new issue via API and then navigates to the list of
 project to check that it appears at the top of the list. The check is performed using [LocatorAssertions].
 
 ```csharp
-  [PlaywrightTest]
+  [Test]
   public async Task LastCreatedIssueShouldBeFirstInTheList()
   {
       var data = new Dictionary<string, string>();
@@ -360,7 +364,7 @@ The following test creates a new issue via user interface in the browser and the
 it was created:
 
 ```csharp
-  [PlaywrightTest]
+  [Test]
   public async Task LastCreatedIssueShouldBeOnTheServer()
   {
       await Page.GotoAsync("https://github.com/" + USER + "/" + REPO + "/issues");
diff --git a/docs/src/api/class-apirequestcontext.md b/docs/src/api/class-apirequestcontext.md
index 033189c8a500f53ad9e92b9d5a5338bb8af978e6..6812837b400bdec830bd4c8dd89e486845eba784 100644
--- a/docs/src/api/class-apirequestcontext.md
+++ b/docs/src/api/class-apirequestcontext.md
@@ -143,9 +143,9 @@ context cookies from the response. The method will automatically follow redirect
 * since: v1.16
 ### option: APIRequestContext.delete.params = %%-csharp-fetch-option-params-%%
 * since: v1.16
-### option: APIRequestContext.delete.headers = %%-js-python-csharp-fetch-option-headers-%%
+### option: APIRequestContext.delete.headers = %%-js-python-fetch-option-headers-%%
 * since: v1.16
-### option: APIRequestContext.delete.data = %%-js-python-csharp-fetch-option-data-%%
+### option: APIRequestContext.delete.data = %%-js-python-fetch-option-data-%%
 * since: v1.17
 ### option: APIRequestContext.delete.form = %%-js-python-fetch-option-form-%%
 * since: v1.17
@@ -155,14 +155,12 @@ context cookies from the response. The method will automatically follow redirect
 * since: v1.17
 ### option: APIRequestContext.delete.multipart = %%-csharp-fetch-option-multipart-%%
 * since: v1.17
-### option: APIRequestContext.delete.timeout = %%-js-python-csharp-fetch-option-timeout-%%
+### option: APIRequestContext.delete.timeout = %%-js-python-fetch-option-timeout-%%
 * since: v1.16
-### option: APIRequestContext.delete.failOnStatusCode = %%-js-python-csharp-fetch-option-failonstatuscode-%%
+### option: APIRequestContext.delete.failOnStatusCode = %%-js-python-fetch-option-failonstatuscode-%%
 * since: v1.16
-### option: APIRequestContext.delete.ignoreHTTPSErrors = %%-js-python-csharp-fetch-option-ignorehttpserrors-%%
+### option: APIRequestContext.delete.ignoreHTTPSErrors = %%-js-python-fetch-option-ignorehttpserrors-%%
 * since: v1.16
-### option: APIRequestContext.delete.maxRedirects = %%-js-python-csharp-fetch-option-maxredirects-%%
-* since: v1.26
 
 ## async method: APIRequestContext.dispose
 * since: v1.16
@@ -198,9 +196,9 @@ Target URL or Request to get all parameters from.
 If set changes the fetch method (e.g. [PUT](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT) or
 [POST](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST)). If not specified, GET method is used.
 
-### option: APIRequestContext.fetch.headers = %%-js-python-csharp-fetch-option-headers-%%
+### option: APIRequestContext.fetch.headers = %%-js-python-fetch-option-headers-%%
 * since: v1.16
-### option: APIRequestContext.fetch.data = %%-js-python-csharp-fetch-option-data-%%
+### option: APIRequestContext.fetch.data = %%-js-python-fetch-option-data-%%
 * since: v1.16
 ### option: APIRequestContext.fetch.form = %%-js-python-fetch-option-form-%%
 * since: v1.16
@@ -210,14 +208,12 @@ If set changes the fetch method (e.g. [PUT](https://developer.mozilla.org/en-US/
 * since: v1.16
 ### option: APIRequestContext.fetch.multipart = %%-csharp-fetch-option-multipart-%%
 * since: v1.16
-### option: APIRequestContext.fetch.timeout = %%-js-python-csharp-fetch-option-timeout-%%
+### option: APIRequestContext.fetch.timeout = %%-js-python-fetch-option-timeout-%%
 * since: v1.16
-### option: APIRequestContext.fetch.failOnStatusCode = %%-js-python-csharp-fetch-option-failonstatuscode-%%
+### option: APIRequestContext.fetch.failOnStatusCode = %%-js-python-fetch-option-failonstatuscode-%%
 * since: v1.16
-### option: APIRequestContext.fetch.ignoreHTTPSErrors = %%-js-python-csharp-fetch-option-ignorehttpserrors-%%
+### option: APIRequestContext.fetch.ignoreHTTPSErrors = %%-js-python-fetch-option-ignorehttpserrors-%%
 * since: v1.16
-### option: APIRequestContext.fetch.maxRedirects = %%-js-python-csharp-fetch-option-maxredirects-%%
-* since: v1.26
 
 ## async method: APIRequestContext.get
 * since: v1.16
@@ -235,16 +231,14 @@ context cookies from the response. The method will automatically follow redirect
 * since: v1.16
 ### option: APIRequestContext.get.params = %%-csharp-fetch-option-params-%%
 * since: v1.16
-### option: APIRequestContext.get.headers = %%-js-python-csharp-fetch-option-headers-%%
+### option: APIRequestContext.get.headers = %%-js-python-fetch-option-headers-%%
 * since: v1.16
-### option: APIRequestContext.get.timeout = %%-js-python-csharp-fetch-option-timeout-%%
+### option: APIRequestContext.get.timeout = %%-js-python-fetch-option-timeout-%%
 * since: v1.16
-### option: APIRequestContext.get.failOnStatusCode = %%-js-python-csharp-fetch-option-failonstatuscode-%%
+### option: APIRequestContext.get.failOnStatusCode = %%-js-python-fetch-option-failonstatuscode-%%
 * since: v1.16
-### option: APIRequestContext.get.ignoreHTTPSErrors = %%-js-python-csharp-fetch-option-ignorehttpserrors-%%
+### option: APIRequestContext.get.ignoreHTTPSErrors = %%-js-python-fetch-option-ignorehttpserrors-%%
 * since: v1.16
-### option: APIRequestContext.get.maxRedirects = %%-js-python-csharp-fetch-option-maxredirects-%%
-* since: v1.26
 
 ## async method: APIRequestContext.head
 * since: v1.16
@@ -262,16 +256,14 @@ context cookies from the response. The method will automatically follow redirect
 * since: v1.16
 ### option: APIRequestContext.head.params = %%-csharp-fetch-option-params-%%
 * since: v1.16
-### option: APIRequestContext.head.headers = %%-js-python-csharp-fetch-option-headers-%%
+### option: APIRequestContext.head.headers = %%-js-python-fetch-option-headers-%%
 * since: v1.16
-### option: APIRequestContext.head.timeout = %%-js-python-csharp-fetch-option-timeout-%%
+### option: APIRequestContext.head.timeout = %%-js-python-fetch-option-timeout-%%
 * since: v1.16
-### option: APIRequestContext.head.failOnStatusCode = %%-js-python-csharp-fetch-option-failonstatuscode-%%
+### option: APIRequestContext.head.failOnStatusCode = %%-js-python-fetch-option-failonstatuscode-%%
 * since: v1.16
-### option: APIRequestContext.head.ignoreHTTPSErrors = %%-js-python-csharp-fetch-option-ignorehttpserrors-%%
+### option: APIRequestContext.head.ignoreHTTPSErrors = %%-js-python-fetch-option-ignorehttpserrors-%%
 * since: v1.16
-### option: APIRequestContext.head.maxRedirects = %%-js-python-csharp-fetch-option-maxredirects-%%
-* since: v1.26
 
 ## async method: APIRequestContext.patch
 * since: v1.16
@@ -289,9 +281,9 @@ context cookies from the response. The method will automatically follow redirect
 * since: v1.16
 ### option: APIRequestContext.patch.params = %%-csharp-fetch-option-params-%%
 * since: v1.16
-### option: APIRequestContext.patch.headers = %%-js-python-csharp-fetch-option-headers-%%
+### option: APIRequestContext.patch.headers = %%-js-python-fetch-option-headers-%%
 * since: v1.16
-### option: APIRequestContext.patch.data = %%-js-python-csharp-fetch-option-data-%%
+### option: APIRequestContext.patch.data = %%-js-python-fetch-option-data-%%
 * since: v1.16
 ### option: APIRequestContext.patch.form = %%-js-python-fetch-option-form-%%
 * since: v1.16
@@ -301,14 +293,12 @@ context cookies from the response. The method will automatically follow redirect
 * since: v1.16
 ### option: APIRequestContext.patch.multipart = %%-csharp-fetch-option-multipart-%%
 * since: v1.16
-### option: APIRequestContext.patch.timeout = %%-js-python-csharp-fetch-option-timeout-%%
+### option: APIRequestContext.patch.timeout = %%-js-python-fetch-option-timeout-%%
 * since: v1.16
-### option: APIRequestContext.patch.failOnStatusCode = %%-js-python-csharp-fetch-option-failonstatuscode-%%
+### option: APIRequestContext.patch.failOnStatusCode = %%-js-python-fetch-option-failonstatuscode-%%
 * since: v1.16
-### option: APIRequestContext.patch.ignoreHTTPSErrors = %%-js-python-csharp-fetch-option-ignorehttpserrors-%%
+### option: APIRequestContext.patch.ignoreHTTPSErrors = %%-js-python-fetch-option-ignorehttpserrors-%%
 * since: v1.16
-### option: APIRequestContext.patch.maxRedirects = %%-js-python-csharp-fetch-option-maxredirects-%%
-* since: v1.26
 
 ## async method: APIRequestContext.post
 * since: v1.16
@@ -326,9 +316,9 @@ context cookies from the response. The method will automatically follow redirect
 * since: v1.16
 ### option: APIRequestContext.post.params = %%-csharp-fetch-option-params-%%
 * since: v1.16
-### option: APIRequestContext.post.headers = %%-js-python-csharp-fetch-option-headers-%%
+### option: APIRequestContext.post.headers = %%-js-python-fetch-option-headers-%%
 * since: v1.16
-### option: APIRequestContext.post.data = %%-js-python-csharp-fetch-option-data-%%
+### option: APIRequestContext.post.data = %%-js-python-fetch-option-data-%%
 * since: v1.16
 ### option: APIRequestContext.post.form = %%-js-python-fetch-option-form-%%
 * since: v1.16
@@ -338,14 +328,12 @@ context cookies from the response. The method will automatically follow redirect
 * since: v1.16
 ### option: APIRequestContext.post.multipart = %%-csharp-fetch-option-multipart-%%
 * since: v1.16
-### option: APIRequestContext.post.timeout = %%-js-python-csharp-fetch-option-timeout-%%
+### option: APIRequestContext.post.timeout = %%-js-python-fetch-option-timeout-%%
 * since: v1.16
-### option: APIRequestContext.post.failOnStatusCode = %%-js-python-csharp-fetch-option-failonstatuscode-%%
+### option: APIRequestContext.post.failOnStatusCode = %%-js-python-fetch-option-failonstatuscode-%%
 * since: v1.16
-### option: APIRequestContext.post.ignoreHTTPSErrors = %%-js-python-csharp-fetch-option-ignorehttpserrors-%%
+### option: APIRequestContext.post.ignoreHTTPSErrors = %%-js-python-fetch-option-ignorehttpserrors-%%
 * since: v1.16
-### option: APIRequestContext.post.maxRedirects = %%-js-python-csharp-fetch-option-maxredirects-%%
-* since: v1.26
 
 ## async method: APIRequestContext.put
 * since: v1.16
@@ -363,9 +351,9 @@ context cookies from the response. The method will automatically follow redirect
 * since: v1.16
 ### option: APIRequestContext.put.params = %%-csharp-fetch-option-params-%%
 * since: v1.16
-### option: APIRequestContext.put.headers = %%-js-python-csharp-fetch-option-headers-%%
+### option: APIRequestContext.put.headers = %%-js-python-fetch-option-headers-%%
 * since: v1.16
-### option: APIRequestContext.put.data = %%-js-python-csharp-fetch-option-data-%%
+### option: APIRequestContext.put.data = %%-js-python-fetch-option-data-%%
 * since: v1.16
 ### option: APIRequestContext.put.form = %%-js-python-fetch-option-form-%%
 * since: v1.16
@@ -375,14 +363,12 @@ context cookies from the response. The method will automatically follow redirect
 * since: v1.16
 ### option: APIRequestContext.put.multipart = %%-csharp-fetch-option-multipart-%%
 * since: v1.16
-### option: APIRequestContext.put.timeout = %%-js-python-csharp-fetch-option-timeout-%%
+### option: APIRequestContext.put.timeout = %%-js-python-fetch-option-timeout-%%
 * since: v1.16
-### option: APIRequestContext.put.failOnStatusCode = %%-js-python-csharp-fetch-option-failonstatuscode-%%
+### option: APIRequestContext.put.failOnStatusCode = %%-js-python-fetch-option-failonstatuscode-%%
 * since: v1.16
-### option: APIRequestContext.put.ignoreHTTPSErrors = %%-js-python-csharp-fetch-option-ignorehttpserrors-%%
+### option: APIRequestContext.put.ignoreHTTPSErrors = %%-js-python-fetch-option-ignorehttpserrors-%%
 * since: v1.16
-### option: APIRequestContext.put.maxRedirects = %%-js-python-csharp-fetch-option-maxredirects-%%
-* since: v1.26
 
 ## async method: APIRequestContext.storageState
 * since: v1.16
diff --git a/docs/src/api/class-apiresponseassertions.md b/docs/src/api/class-apiresponseassertions.md
index 27e699073f8de7476e0d5b4aaca78f0e15e713d6..c4ef4edb538e87dbe83d8f627a5d2d250b3faaf3 100644
--- a/docs/src/api/class-apiresponseassertions.md
+++ b/docs/src/api/class-apiresponseassertions.md
@@ -1,5 +1,6 @@
 # class: APIResponseAssertions
 * since: v1.18
+* langs: js, java, python
 
 The [APIResponseAssertions] class provides assertion methods that can be used to make assertions about the [APIResponse] in the tests. A new instance of [APIResponseAssertions] is created by calling [`method: PlaywrightAssertions.expectAPIResponse`]:
 
@@ -49,7 +50,7 @@ def test_navigates_to_login_page(page: Page) -> None:
 
 ## property: APIResponseAssertions.not
 * since: v1.20
-* langs: java, js, csharp
+* langs: java, js
 - returns: <[APIResponseAssertions]>
 
 Makes the assertion check for the opposite condition. For example, this code tests that the response status is not successful:
@@ -73,7 +74,7 @@ The opposite of [`method: APIResponseAssertions.toBeOK`].
 * langs:
   - alias-java: isOK
 
-Ensures the response status code is within `200..299` range.
+Ensures the response status code is within [200..299] range.
 
 ```js
 await expect(response).toBeOK();
diff --git a/docs/src/api/class-browsertype.md b/docs/src/api/class-browsertype.md
index 425efe80c7ddd5530f368f6c757837ec67032bcd..5be5ef5cc2b054f7c0b5ff36a17dd372ae0d3d71 100644
--- a/docs/src/api/class-browsertype.md
+++ b/docs/src/api/class-browsertype.md
@@ -136,36 +136,6 @@ The default browser context is accessible via [`method: Browser.contexts`].
 Connecting over the Chrome DevTools Protocol is only supported for Chromium-based browsers.
 :::
 
-```js
-const browser = await playwright.chromium.connectOverCDP('http://localhost:9222');
-const defaultContext = browser.contexts()[0];
-const page = defaultContext.pages()[0];
-```
-
-```java
-Browser browser = playwright.chromium().connectOverCDP("http://localhost:9222");
-BrowserContext defaultContext = browser.contexts().get(0);
-Page page = defaultContext.pages().get(0);
-```
-
-```python async
-browser = await playwright.chromium.connect_over_cdp("http://localhost:9222")
-default_context = browser.contexts[0]
-page = default_context.pages[0]
-```
-
-```python sync
-browser = playwright.chromium.connect_over_cdp("http://localhost:9222")
-default_context = browser.contexts[0]
-page = default_context.pages[0]
-```
-
-```csharp
-var browser = await playwright.Chromium.ConnectOverCDPAsync("http://localhost:9222");
-var defaultContext = browser.Contexts[0];
-var page = defaultContext.Pages[0];
-```
-
 ### param: BrowserType.connectOverCDP.endpointURL
 * since: v1.11
 - `endpointURL` <[string]>
diff --git a/docs/src/api/class-elementhandle.md b/docs/src/api/class-elementhandle.md
index 3d4d6a36fba9ff2f8af3bf5d18a53291c8249fc7..21683c3d30d7077111c0ac5ac44f6a5f60105715 100644
--- a/docs/src/api/class-elementhandle.md
+++ b/docs/src/api/class-elementhandle.md
@@ -921,7 +921,7 @@ element_handle.type("world", delay=100) # types slower, like a user
 
 ```csharp
 await elementHandle.TypeAsync("Hello"); // Types instantly
-await elementHandle.TypeAsync("World", new() { Delay = 100 }); // Types slower, like a user
+await elementHandle.TypeAsync("World", delay: 100); // Types slower, like a user
 ```
 
 An example of typing into a text field and then submitting the form:
diff --git a/docs/src/api/class-frame.md b/docs/src/api/class-frame.md
index ddf5d090305a331f3206a2e254896489328321cd..12a4a7d10932f6cdefb13d118d6b192117f2b06b 100644
--- a/docs/src/api/class-frame.md
+++ b/docs/src/api/class-frame.md
@@ -1484,7 +1484,7 @@ frame.type("#mytextarea", "world", delay=100) # types slower, like a user
 
 ```csharp
 await frame.TypeAsync("#mytextarea", "hello"); // types instantly
-await frame.TypeAsync("#mytextarea", "world", new() { Delay = 100 }); // types slower, like a user
+await frame.TypeAsync("#mytextarea", "world", delay: 100); // types slower, like a user
 ```
 
 ### param: Frame.type.selector = %%-input-selector-%%
diff --git a/docs/src/api/class-framelocator.md b/docs/src/api/class-framelocator.md
index a73520a8b686d2683c27fbcf391298e7edeb1d49..96bdb5cd376d7e6bfe7a8590cb77bcd1b517336e 100644
--- a/docs/src/api/class-framelocator.md
+++ b/docs/src/api/class-framelocator.md
@@ -30,7 +30,7 @@ await locator.ClickAsync();
 
 **Strictness**
 
-Frame locators are strict. This means that all operations on frame locators will throw if more than one element matches a given selector.
+Frame locators are strict. This means that all operations on frame locators will throw if more than one element matches given selector.
 
 ```js
 // Throws if there are several frames in DOM:
diff --git a/docs/src/api/class-locator.md b/docs/src/api/class-locator.md
index 83a8cbc24f7180c7afc7b051d928b758dc180e9a..7699cf617a89332df44f63366ab3eb1a1b30cca6 100644
--- a/docs/src/api/class-locator.md
+++ b/docs/src/api/class-locator.md
@@ -984,7 +984,7 @@ element.type("world", delay=100) # types slower, like a user
 
 ```csharp
 await element.TypeAsync("Hello"); // Types instantly
-await element.TypeAsync("World", new() { Delay = 100 }); // Types slower, like a user
+await element.TypeAsync("World", delay: 100); // Types slower, like a user
 ```
 
 An example of typing into a text field and then submitting the form:
diff --git a/docs/src/api/class-locatorassertions.md b/docs/src/api/class-locatorassertions.md
index 935fa90ed2ce8218abe022b80f2e684b665062f9..68e1d87c46a958a741ee196dd2aef7d83fefe96d 100644
--- a/docs/src/api/class-locatorassertions.md
+++ b/docs/src/api/class-locatorassertions.md
@@ -54,10 +54,9 @@ using NUnit.Framework;
 
 namespace PlaywrightTests;
 
-[TestFixture]
 public class ExampleTests : PageTest
 {
-    [PlaywrightTest]
+    [Test]
     public async Task StatusBecomesSubmitted()
     {
         // ..
@@ -205,10 +204,10 @@ Whether to use `element.innerText` instead of `element.textContent` when retriev
 * since: v1.18
 
 ## async method: LocatorAssertions.NotToHaveAttribute
-* since: v1.18
+* since: v1.20
 * langs: python
 
-The opposite of [`method: LocatorAssertions.toHaveAttribute#1`].
+The opposite of [`method: LocatorAssertions.toHaveAttribute`].
 
 ### param: LocatorAssertions.NotToHaveAttribute.name
 * since: v1.18
@@ -512,9 +511,6 @@ var locator = Page.Locator("input");
 await Expect(locator).ToBeEditableAsync();
 ```
 
-### option: LocatorAssertions.toBeEditable.editable
-* since: v1.26
-- `editable` <[boolean]>
 ### option: LocatorAssertions.toBeEditable.timeout = %%-js-assertions-timeout-%%
 * since: v1.18
 ### option: LocatorAssertions.toBeEditable.timeout = %%-csharp-java-python-assertions-timeout-%%
@@ -597,9 +593,6 @@ var locator = Page.Locator("button.submit");
 await Expect(locator).toBeEnabledAsync();
 ```
 
-### option: LocatorAssertions.toBeEnabled.enabled
-* since: v1.26
-- `enabled` <[boolean]>
 ### option: LocatorAssertions.toBeEnabled.timeout = %%-js-assertions-timeout-%%
 * since: v1.18
 ### option: LocatorAssertions.toBeEnabled.timeout = %%-csharp-java-python-assertions-timeout-%%
@@ -652,7 +645,7 @@ await Expect(locator).ToBeFocusedAsync();
 * langs:
   - alias-java: isHidden
 
-Ensures that [Locator] either does not resolve to any DOM node, or resolves to a [non-visible](./actionability.md#visible) one.
+Ensures the [Locator] points to a hidden DOM node, which is the opposite of [visible](./actionability.md#visible).
 
 ```js
 const locator = page.locator('.my-element');
@@ -693,7 +686,7 @@ await Expect(locator).ToBeHiddenAsync();
 * langs:
   - alias-java: isVisible
 
-Ensures that [Locator] points to an [attached](./actionability.md#visible) and [visible](./actionability.md#visible) DOM node.
+Ensures the [Locator] points to a [visible](./actionability.md#visible) DOM node.
 
 ```js
 const locator = page.locator('.my-element');
@@ -723,9 +716,6 @@ var locator = Page.Locator(".my-element");
 await Expect(locator).ToBeVisibleAsync();
 ```
 
-### option: LocatorAssertions.toBeVisible.visible
-* since: v1.26
-- `visible` <[boolean]>
 ### option: LocatorAssertions.toBeVisible.timeout = %%-js-assertions-timeout-%%
 * since: v1.18
 ### option: LocatorAssertions.toBeVisible.timeout = %%-csharp-java-python-assertions-timeout-%%
@@ -895,16 +885,15 @@ Whether to use `element.innerText` instead of `element.textContent` when retriev
 * since: v1.18
 
 
-## async method: LocatorAssertions.toHaveAttribute#1
-* since: v1.18
+## async method: LocatorAssertions.toHaveAttribute
+* since: v1.20
 * langs:
   - alias-java: hasAttribute
 
-Ensures the [Locator] points to an element with given attribute value.
+Ensures the [Locator] points to an element with given attribute.
 
 ```js
 const locator = page.locator('input');
-// Assert attribute with given value.
 await expect(locator).toHaveAttribute('type', 'text');
 ```
 
@@ -931,76 +920,23 @@ var locator = Page.Locator("input");
 await Expect(locator).ToHaveAttributeAsync("type", "text");
 ```
 
-### param: LocatorAssertions.toHaveAttribute#1.name
+### param: LocatorAssertions.toHaveAttribute.name
 * since: v1.18
 - `name` <[string]>
 
 Attribute name.
 
-### param: LocatorAssertions.toHaveAttribute#1.value
+### param: LocatorAssertions.toHaveAttribute.value
 * since: v1.18
 - `value` <[string]|[RegExp]>
 
 Expected attribute value.
 
-### option: LocatorAssertions.toHaveAttribute#1.timeout = %%-js-assertions-timeout-%%
+### option: LocatorAssertions.toHaveAttribute.timeout = %%-js-assertions-timeout-%%
 * since: v1.18
-### option: LocatorAssertions.toHaveAttribute#1.timeout = %%-csharp-java-python-assertions-timeout-%%
+### option: LocatorAssertions.toHaveAttribute.timeout = %%-csharp-java-python-assertions-timeout-%%
 * since: v1.18
 
-## async method: LocatorAssertions.toHaveAttribute#2
-* since: v1.26
-* langs:
-  - alias-java: hasAttribute
-
-Ensures the [Locator] points to an element with given attribute. The method will assert attribute
-presence.
-
-```js
-const locator = page.locator('input');
-// Assert attribute existance.
-await expect(locator).toHaveAttribute('disabled');
-await expect(locator).not.toHaveAttribute('open');
-```
-
-```java
-assertThat(page.locator("input")).hasAttribute("disabled");
-assertThat(page.locator("input")).not().hasAttribute("open");
-```
-
-```python async
-from playwright.async_api import expect
-
-locator = page.locator("input")
-await expect(locator).to_have_attribute("disabled")
-await expect(locator).not_to_have_attribute("open")
-```
-
-```python sync
-from playwright.sync_api import expect
-
-locator = page.locator("input")
-expect(locator).to_have_attribute("disabled")
-expect(locator).not_to_have_attribute("open")
-```
-
-```csharp
-var locator = Page.Locator("input");
-await Expect(locator).ToHaveAttributeAsync("disabled");
-await Expect(locator).Not.ToHaveAttributeAsync("open");
-```
-
-### param: LocatorAssertions.toHaveAttribute#2.name
-* since: v1.26
-- `name` <[string]>
-
-Attribute name.
-
-### option: LocatorAssertions.toHaveAttribute#2.timeout = %%-js-assertions-timeout-%%
-* since: v1.26
-### option: LocatorAssertions.toHaveAttribute#2.timeout = %%-csharp-java-python-assertions-timeout-%%
-* since: v1.26
-
 ## async method: LocatorAssertions.toHaveClass
 * since: v1.20
 * langs:
diff --git a/docs/src/api/class-page.md b/docs/src/api/class-page.md
index 64b5b5302595e3cb0c40d71f39ed4ebaf38ef55d..747df53999a98ea2da7442c7ebd0aabec2ac755c 100644
--- a/docs/src/api/class-page.md
+++ b/docs/src/api/class-page.md
@@ -1188,6 +1188,10 @@ Emulates `'prefers-reduced-motion'` media feature, supported values are `'reduce
 
 Emulates `'forced-colors'` media feature, supported values are `'active'` and `'none'`. Passing `null` disables forced colors emulation.
 
+:::note
+It's not supported in WebKit, see [here](https://bugs.webkit.org/show_bug.cgi?id=225281) in their issue tracker.
+:::
+
 ### option: Page.emulateMedia.forcedColors
 * since: v1.15
 * langs: csharp
@@ -3380,7 +3384,7 @@ page.type("#mytextarea", "world", delay=100) # types slower, like a user
 
 ```csharp
 await page.TypeAsync("#mytextarea", "hello"); // types instantly
-await page.TypeAsync("#mytextarea", "world", new() { Delay = 100 }); // types slower, like a user
+await page.TypeAsync("#mytextarea", "world"); // types slower, like a user
 ```
 
 Shortcut for main frame's [`method: Frame.type`].
@@ -4158,7 +4162,7 @@ Returns when element specified by selector satisfies [`option: state`] option. R
 
 :::note
 Playwright automatically waits for element to be ready before performing an action. Using
-[Locator] objects and web-first assertions makes the code wait-for-selector-free.
+[Locator] objects and web-first assertions make the code wait-for-selector-free.
 :::
 
 Wait for the [`param: selector`] to satisfy [`option: state`] option (either appear/disappear from dom, or become
diff --git a/docs/src/api/class-pageassertions.md b/docs/src/api/class-pageassertions.md
index 014b28a2216c60a30c3c5a3ea3e4b88975d4b594..9163c1af62647a0ef0731b5ce1f50d2b3aa8e159 100644
--- a/docs/src/api/class-pageassertions.md
+++ b/docs/src/api/class-pageassertions.md
@@ -56,10 +56,9 @@ using NUnit.Framework;
 
 namespace PlaywrightTests;
 
-[TestFixture]
 public class ExampleTests : PageTest
 {
-    [PlaywrightTest]
+    [Test]
     public async Task NavigatetoLoginPage()
     {
         // ..
diff --git a/docs/src/api/class-playwrightassertions.md b/docs/src/api/class-playwrightassertions.md
index 38571c6fbf68b0279c5d1774143e05391079f483..9fa8856f90413adb0df6df59e131ba44dbe765d2 100644
--- a/docs/src/api/class-playwrightassertions.md
+++ b/docs/src/api/class-playwrightassertions.md
@@ -55,10 +55,9 @@ using NUnit.Framework;
 
 namespace PlaywrightTests;
 
-[TestFixture]
 public class ExampleTests : PageTest
 {
-    [PlaywrightTest]
+    [Test]
     public async Task StatusBecomesSubmitted()
     {
         await Page.Locator("#submit-button").ClickAsync();
@@ -75,7 +74,7 @@ By default, the timeout for assertions is set to 5 seconds.
 
 ## method: PlaywrightAssertions.expectAPIResponse
 * since: v1.18
-* langs:
+* langs: js, java, python
   - alias-java: assertThat
   - alias-python: expect
   - alias-js: expect
diff --git a/docs/src/api/class-requestoptions.md b/docs/src/api/class-requestoptions.md
index 65130ee494f86ec3dea9d1b7e769f278073f71d3..c9ac9438ce7618bcc65cba687f4c059a284f4bf5 100644
--- a/docs/src/api/class-requestoptions.md
+++ b/docs/src/api/class-requestoptions.md
@@ -114,17 +114,6 @@ Header value.
 
 Whether to ignore HTTPS errors when sending network requests.
 
-## method: RequestOptions.setMaxRedirects
-* since: v1.26
-- returns: <[RequestOptions]>
-
-### param: RequestOptions.setMaxRedirects.maxRedirects
-* since: v1.26
-- `maxRedirects` <[int]>
-
-Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded.
-Defaults to `20`. Pass `0` to not follow redirects.
-
 ## method: RequestOptions.setMethod
 * since: v1.18
 - returns: <[RequestOptions]>
diff --git a/docs/src/api/class-selectors.md b/docs/src/api/class-selectors.md
index 397d3975a5546192b4ac7cd20c7abbd33c783595..51241b070db0d6e2a8f5e1c3d872e0cc6df8e6c4 100644
--- a/docs/src/api/class-selectors.md
+++ b/docs/src/api/class-selectors.md
@@ -45,7 +45,7 @@ const { selectors, firefox } = require('playwright');  // Or 'chromium' or 'webk
 ```
 
 ```java
-// Script that evaluates to a selector engine instance. The script is evaluated in the page context.
+// Script that evaluates to a selector engine instance.
 String createTagNameEngine = "{\n" +
   "  // Returns the first element matching given selector in the root's subtree.\n" +
   "  query(root, selector) {\n" +
@@ -146,7 +146,7 @@ with sync_playwright() as playwright:
 
 ```csharp
 using var playwright = await Playwright.CreateAsync();
-// Script that evaluates to a selector engine instance. The script is evaluated in the page context.
+// Script that evaluates to a selector engine instance.
 await playwright.Selectors.RegisterAsync("tag", @"{
 // Returns the first element matching given selector in the root's subtree.
 query(root, selector) {
@@ -184,28 +184,28 @@ contain `[a-zA-Z0-9_]` characters.
     current working directory. Optional.
   - `content` ?<[string]> Raw script content. Optional.
 
-Script that evaluates to a selector engine instance. The script is evaluated in the page context.
+Script that evaluates to a selector engine instance.
 
 ### param: Selectors.register.script
 * since: v1.8
 * langs: java
 - `script` <[string]|[path]>
 
-Script that evaluates to a selector engine instance. The script is evaluated in the page context.
+Script that evaluates to a selector engine instance.
 
 ### option: Selectors.register.script
 * since: v1.8
 * langs: csharp
 - `script` <[string]>
 
-Script that evaluates to a selector engine instance. The script is evaluated in the page context.
+Script that evaluates to a selector engine instance.
 
 ### option: Selectors.register.path
 * since: v1.8
 * langs: csharp
 - `path` <[path]>
 
-Script that evaluates to a selector engine instance. The script is evaluated in the page context.
+Script that evaluates to a selector engine instance.
 
 ### option: Selectors.register.contentScript
 * since: v1.8
@@ -213,4 +213,4 @@ Script that evaluates to a selector engine instance. The script is evaluated in
 
 Whether to run this selector engine in isolated JavaScript environment. This environment has access to the same DOM, but
 not any JavaScript objects from the frame's scripts. Defaults to `false`. Note that running as a content script is not
-guaranteed when this engine is used together with other registered engines.
+guaranteed when this engine is used together with other registered engines.
\ No newline at end of file
diff --git a/docs/src/api/params.md b/docs/src/api/params.md
index 4dc1969c56dbfd9bc762e45362610d2c9d153aad..f97622067258678e352ff342a763ddddc2df074f 100644
--- a/docs/src/api/params.md
+++ b/docs/src/api/params.md
@@ -27,7 +27,7 @@ value can be changed by using the [`method: BrowserContext.setDefaultTimeout`].
 - `strict` <[boolean]>
 
 When true, the call requires selector to resolve to a single element. If given selector resolves to more
-than one element, the call throws an exception.
+then one element, the call throws an exception.
 
 ## input-timeout
 - `timeout` <[float]>
@@ -324,19 +324,19 @@ Query parameters to be sent with the URL.
 
 Optional request parameters.
 
-## js-python-csharp-fetch-option-headers
+## js-python-fetch-option-headers
 * langs: js, python, csharp
 - `headers` <[Object]<[string], [string]>>
 
 Allows to set HTTP headers.
 
-## js-python-csharp-fetch-option-timeout
+## js-python-fetch-option-timeout
 * langs: js, python, csharp
 - `timeout` <[float]>
 
 Request timeout in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout.
 
-## js-python-csharp-fetch-option-failonstatuscode
+## js-python-fetch-option-failonstatuscode
 * langs: js, python, csharp
 - `failOnStatusCode` <[boolean]>
 
@@ -384,7 +384,7 @@ or as file-like object containing file name, mime-type and its content.
 
 An instance of [FormData] can be created via [`method: APIRequestContext.createFormData`].
 
-## js-python-csharp-fetch-option-data
+## js-python-fetch-option-data
 * langs: js, python, csharp
 - `data` <[string]|[Buffer]|[Serializable]>
 
@@ -392,19 +392,12 @@ Allows to set post data of the request. If the data parameter is an object, it w
 and `content-type` header will be set to `application/json` if not explicitly set. Otherwise the `content-type` header will be
 set to `application/octet-stream` if not explicitly set.
 
-## js-python-csharp-fetch-option-ignorehttpserrors
+## js-python-fetch-option-ignorehttpserrors
 * langs: js, python, csharp
 - `ignoreHTTPSErrors` <[boolean]>
 
 Whether to ignore HTTPS errors when sending network requests. Defaults to `false`.
 
-## js-python-csharp-fetch-option-maxredirects
-* langs: js, python, csharp
-- `maxRedirects` <[int]>
-
-Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is exceeded.
-Defaults to `20`. Pass `0` to not follow redirects.
-
 ## evaluate-expression
 - `expression` <[string]>
 
@@ -541,6 +534,10 @@ to `'no-preference'`.
 Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See [`method: Page.emulateMedia`] for more details. Defaults
 to `'none'`.
 
+:::note
+It's not supported in WebKit, see [here](https://bugs.webkit.org/show_bug.cgi?id=225281) in their issue tracker.
+:::
+
 ## context-option-logger
 * langs: js
 - `logger` <[Logger]>
diff --git a/docs/src/auth.md b/docs/src/auth.md
index a9f84c0c3892107523ef498cd66e2263c836c029..321ba04577e2dd39bfd2ab0b68aa096cbfa6e700 100644
--- a/docs/src/auth.md
+++ b/docs/src/auth.md
@@ -5,60 +5,33 @@ title: "Authentication"
 
 Playwright can be used to automate scenarios that require authentication.
 
-Tests written with Playwright execute in isolated clean-slate environments called [browser contexts](./browser-contexts.md). This isolation model improves reproducibility and prevents cascading test failures. New browser contexts can load existing authentication state. This eliminates the need to login in every context and speeds up test execution.
+Tests written with Playwright execute in isolated clean-slate environments called
+[browser contexts](./browser-contexts.md). This isolation model
+improves reproducibility and prevents cascading test failures. New browser
+contexts can load existing authentication state. This eliminates the need to
+login in every context and speeds up test execution.
 
-> Note: This guide covers cookie/token-based authentication (logging in via the app UI). For [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication) use [`method: Browser.newContext`].
+> Note: This guide covers cookie/token-based authentication (logging in via the
+app UI). For [HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication) use [`method: Browser.newContext`].
 
-## Automate logging in
-
-The Playwright API can [automate interaction](./input.md) from a login form.
-
-The following example automates logging into GitHub. Once these steps are executed,
-the browser context will be authenticated.
-
-```js tab=js-ts
-import { test } from '@playwright/test';
-
-test.beforeEach(async ({ page }) => {
-  // Runs before each test and signs in each page.
-  await page.goto('https://github.com/login');
-  await page.locator('text=Login').click();
-  await page.locator('input[name="login"]').fill('username');
-  await page.locator('input[name="password"]').fill('password');
-  await page.locator('text=Submit').click();
-});
+<!-- TOC -->
 
-test('first', async ({ page }) => {
-  // page is signed in.
-});
-
-test('second', async ({ page }) => {
-  // page is signed in.
-});
-```
+## Playwright Test vs. Library
+* langs: js
 
-```js tab=js-js
-const { test } = require('@playwright/test');
+:::caution
+This guide is for [Playwright Library](./library.md), if you are using Playwright Test (`@playwright/test`) see [here](./test-auth.md).
+:::
 
-test.beforeEach(async ({ page }) => {
-  // Runs before each test and signs in each page.
-  await page.goto('https://github.com/login');
-  await page.locator('text=Login').click();
-  await page.locator('input[name="login"]').fill('username');
-  await page.locator('input[name="password"]').fill('password');
-  await page.locator('text=Submit').click();
-});
+## Automate logging in
 
-test('first', async ({ page }) => {
-  // page is signed in.
-});
+The Playwright API can automate interaction with a login form. See
+[Input guide](./input.md) for more details.
 
-test('second', async ({ page }) => {
-  // page is signed in.
-});
-```
+The following example automates login on GitHub. Once these steps are executed,
+the browser context will be authenticated.
 
-```js tab=js-library
+```js
 const page = await context.newPage();
 await page.goto('https://github.com/login');
 
@@ -67,7 +40,7 @@ await page.locator('text=Login').click();
 await page.locator('input[name="login"]').fill(USERNAME);
 await page.locator('input[name="password"]').fill(PASSWORD);
 await page.locator('text=Submit').click();
-// Continue with the test
+// Verify app is logged in
 ```
 
 ```java
@@ -78,7 +51,7 @@ page.locator("text=Login").click();
 page.locator("input[name='login']").fill(USERNAME);
 page.locator("input[name='password']").fill(PASSWORD);
 page.locator("text=Submit").click();
-// Continue with the test
+// Verify app is logged in
 ```
 
 ```python async
@@ -90,7 +63,7 @@ await page.locator('text=Login').click()
 await page.locator('input[name="login"]').fill(USERNAME)
 await page.locator('input[name="password"]').fill(PASSWORD)
 await page.locator('text=Submit').click()
-# Continue with the test
+# Verify app is logged in
 ```
 
 ```python sync
@@ -102,7 +75,7 @@ page.locator('text=Login').click()
 page.locator('input[name="login"]').fill(USERNAME)
 page.locator('input[name="password"]').fill(PASSWORD)
 page.locator('text=Submit').click()
-# Continue with the test
+# Verify app is logged in
 ```
 
 ```csharp
@@ -113,23 +86,34 @@ await page.Locator("text=Login").ClickAsync();
 await page.Locator("input[name='login']").FillAsync(USERNAME);
 await page.Locator("input[name='password']").FillAsync(PASSWORD);
 await page.Locator("text=Submit").ClickAsync();
-// Continue with the test
+// Verify app is logged in
 ```
 
-Redoing login for every test can slow down test execution. To mitigate that, reuse
-existing authentication state instead.
+These steps can be executed for every browser context. However, redoing login
+for every test can slow down test execution. To prevent that, we will reuse
+existing authentication state in new browser contexts.
+
+## Reuse authentication state
 
-## Reuse signed in state
-* langs: java, csharp, python
+Web apps use cookie-based or token-based authentication, where authenticated
+state is stored as [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies)
+or in [local storage](https://developer.mozilla.org/en-US/docs/Web/API/Storage).
+Playwright provides [`method: BrowserContext.storageState`] method that can be used to retrieve storage state from authenticated contexts and then create new contexts with prepopulated state.
 
-Playwright provides a way to reuse the signed-in state in the tests. That way you can log
-in only once and then skip the log in step for all of the tests.
+Cookies and local storage state can be used across different browsers. They depend
+on your application's authentication model: some apps might require both cookies
+and local storage.
 
-Web apps use cookie-based or token-based authentication, where authenticated state is stored as [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies) or in [local storage](https://developer.mozilla.org/en-US/docs/Web/API/Storage). Playwright provides [browserContext.storageState([options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-storage-state) method that can be used to retrieve storage state from authenticated contexts and then create new contexts with prepopulated state.
+The following code snippet retrieves state from an authenticated context and
+creates a new context with that state.
 
-Cookies and local storage state can be used across different browsers. They depend on your application's authentication model: some apps might require both cookies and local storage.
+```js
+// Save storage state into the file.
+await context.storageState({ path: 'state.json' });
 
-The following code snippet retrieves state from an authenticated context and creates a new context with that state.
+// Create a new context with the saved storage state.
+const context = await browser.newContext({ storageState: 'state.json' });
+```
 
 ```java
 // Save storage state into the file.
@@ -169,570 +153,63 @@ var context = await browser.NewContextAsync(new()
     StorageStatePath = "state.json"
 });
 ```
-## Reuse signed in state
-* langs: js
-
-Playwright provides a way to reuse the signed-in state in the tests. That way you can log
-in only once and then skip the log in step for all of the tests.
-
-Web apps use cookie-based or token-based authentication, where authenticated state is stored as [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies) or in [local storage](https://developer.mozilla.org/en-US/docs/Web/API/Storage). Playwright provides [browserContext.storageState([options])](https://playwright.dev/docs/api/class-browsercontext#browser-context-storage-state) method that can be used to retrieve storage state from authenticated contexts and then create new contexts with prepopulated state.
-
-Cookies and local storage state can be used across different browsers. They depend on your application's authentication model: some apps might require both cookies and local storage.
-
-Create a new global setup script:
-
-```js tab=js-js
-// global-setup.js
-const { chromium } = require('@playwright/test');
-
-module.exports = async config => {
-  const browser = await chromium.launch();
-  const page = await browser.newPage();
-  await page.goto('https://github.com/login');
-  await page.locator('input[name="login"]').fill('user');
-  await page.locator('input[name="password"]').fill('password');
-  await page.locator('text=Sign in').click();
-  // Save signed-in state to 'storageState.json'.
-  await page.context().storageState({ path: 'storageState.json' });
-  await browser.close();
-};
-```
-
-```js tab=js-ts
-// global-setup.ts
-import { chromium, FullConfig } from '@playwright/test';
-
-async function globalSetup(config: FullConfig) {
-  const browser = await chromium.launch();
-  const page = await browser.newPage();
-  await page.goto('https://github.com/login');
-  await page.locator('input[name="login"]').fill('user');
-  await page.locator('input[name="password"]').fill('password');
-  await page.locator('text=Sign in').click();
-  // Save signed-in state to 'storageState.json'.
-  await page.context().storageState({ path: 'storageState.json' });
-  await browser.close();
-}
-
-export default globalSetup;
-```
-
-Register global setup script in the Playwright configuration file:
-
-```js tab=js-ts
-// playwright.config.ts
-import type { PlaywrightTestConfig } from '@playwright/test';
-
-const config: PlaywrightTestConfig = {
-  globalSetup: require.resolve('./global-setup'),
-  use: {
-    // Tell all tests to load signed-in state from 'storageState.json'.
-    storageState: 'storageState.json'
-  }
-};
-export default config;
-```
-
-```js tab=js-js
-// playwright.config.js
-// @ts-check
-/** @type {import('@playwright/test').PlaywrightTestConfig} */
-const config = {
-  globalSetup: require.resolve('./global-setup'),
-  use: {
-    // Tell all tests to load signed-in state from 'storageState.json'.
-    storageState: 'storageState.json'
-  }
-};
-module.exports = config;
-```
-
-Tests start already authenticated because we specify `storageState` that was populated by global setup.
-
-```js tab=js-ts
-import { test } from '@playwright/test';
-
-test('test', async ({ page }) => {
-  // page is signed in.
-});
-```
-
-```js tab=js-js
-const { test } = require('@playwright/test');
-
-test('test', async ({ page }) => {
-  // page is signed in.
-});
-```
-
-:::note
-If you can log in once and commit the `storageState.json` into the repository, you won't need the global setup at all, just specify the `storageState.json` in Playwright Config as above and it'll be picked up.
-
-However, periodically, you may need to update the `storageState.json` file if your app requires you to re-authenticate after some amount of time. For example, if your app prompts you to sign in every week even if you're on the same computer/browser, you'll need to update `storageState.json` at least this often.
-:::
-
-### Sign in via API request
-* langs: js
-
-If your web application supports signing in via API, you can use [APIRequestContext] to simplify sign in flow. Global setup script from the example above would change like this:
-
-```js tab=js-js
-// global-setup.js
-const { request } = require('@playwright/test');
-
-module.exports = async () => {
-  const requestContext = await request.newContext();
-  await requestContext.post('https://github.com/login', {
-    form: {
-      'user': 'user',
-      'password': 'password'
-    }
-  });
-  // Save signed-in state to 'storageState.json'.
-  await requestContext.storageState({ path: 'storageState.json' });
-  await requestContext.dispose();
-}
-```
-
-```js tab=js-ts
-// global-setup.ts
-import { request } from '@playwright/test';
-
-async function globalSetup() {
-  const requestContext = await request.newContext();
-  await requestContext.post('https://github.com/login', {
-    form: {
-      'user': 'user',
-      'password': 'password'
-    }
-  });
-  // Save signed-in state to 'storageState.json'.
-  await requestContext.storageState({ path: 'storageState.json' });
-  await requestContext.dispose();
-}
-
-export default globalSetup;
-```
-
-### Avoiding multiple sessions per account at a time
-* langs: js
-
-By default, Playwright Test runs tests in parallel. If you reuse a single signed-in state for all your tests, this usually leads to the same account being signed in from multiple tests at the same time. If this behavior is undesirable for your application, you can sign in with a different account in each [worker process](./test-parallel.md#worker-processes) created by Playwright Test.
-
-In this example we [override `storageState` fixture](./test-fixtures.md#overriding-fixtures) and ensure we only sign in once per worker, using [`property: TestInfo.workerIndex`] to differentiate between workers.
-
-```js tab=js-js
-// fixtures.js
-const { test: base } = require('@playwright/test');
-
-const users = [
-  { username: 'user-1', password: 'password-1' },
-  { username: 'user-2', password: 'password-2' },
-  // ... put your test users here ...
-];
-
-exports.test = base.extend({
-  storageState: async ({ browser }, use, testInfo) => {
-    // Override storage state, use worker index to look up logged-in info and generate it lazily.
-    const fileName = path.join(testInfo.project.outputDir, 'storage-' + testInfo.workerIndex);
-    if (!fs.existsSync(fileName)) {
-      // Make sure we are not using any other storage state.
-      const page = await browser.newPage({ storageState: undefined });
-      await page.goto('https://github.com/login');
-      await page.locator('input[name="login"]').fill(users[testInfo.workerIndex].username);
-      await page.locator('input[name="password"]').fill(users[testInfo.workerIndex].password);
-      await page.locator('text=Sign in').click();
-      await page.context().storageState({ path: fileName });
-      await page.close();
-    }
-    await use(fileName);
-  },
-});
-exports.expect = base.expect;
-
-// example.spec.js
-const { test, expect } = require('./fixtures');
-
-test('test', async ({ page }) => {
-  // page is signed in.
-});
-```
-
-```js tab=js-ts
-// fixtures.ts
-import { test as baseTest } from '@playwright/test';
-export { expect } from '@playwright/test';
-
-const users = [
-  { username: 'user-1', password: 'password-1' },
-  { username: 'user-2', password: 'password-2' },
-  // ... put your test users here ...
-];
-
-export const test = baseTest.extend({
-  storageState: async ({ browser }, use, testInfo) => {
-    // Override storage state, use worker index to look up logged-in info and generate it lazily.
-    const fileName = path.join(testInfo.project.outputDir, 'storage-' + testInfo.workerIndex);
-    if (!fs.existsSync(fileName)) {
-      // Make sure we are not using any other storage state.
-      const page = await browser.newPage({ storageState: undefined });
-      await page.goto('https://github.com/login');
-      // Create a unique username for each worker.
-      await page.locator('input[name="login"]').fill(users[testInfo.workerIndex].username);
-      await page.locator('input[name="password"]').fill(users[testInfo.workerIndex].password);
-      await page.locator('text=Sign in').click();
-      await page.context().storageState({ path: fileName });
-      await page.close();
-    }
-    await use(fileName);
-  },
-});
-
-// example.spec.ts
-import { test, expect } from './fixtures';
-
-test('test', async ({ page }) => {
-  // page is signed in.
-});
-```
-
-## Multiple signed in roles
-* langs: js
-
-Sometimes you have more than one signed-in user in your end to end tests. You can achieve that via logging in for these users multiple times in globalSetup and saving that state into different files.
-
-```js tab=js-js
-// global-setup.js
-const { chromium } = require('@playwright/test');
-
-module.exports = async config => {
-  const browser = await chromium.launch();
-  const adminPage = await browser.newPage();
-  // ... log in
-  await adminPage.context().storageState({ path: 'adminStorageState.json' });
-
-  const userPage = await browser.newPage();
-  // ... log in
-  await userPage.context().storageState({ path: 'userStorageState.json' });
-  await browser.close();
-};
-```
-
-```js tab=js-ts
-// global-setup.ts
-import { chromium, FullConfig } from '@playwright/test';
-
-async function globalSetup(config: FullConfig) {
-  const browser = await chromium.launch();
-  const adminPage = await browser.newPage();
-  // ... log in
-  await adminPage.context().storageState({ path: 'adminStorageState.json' });
-
-  const userPage = await browser.newPage();
-  // ... log in
-  await userPage.context().storageState({ path: 'userStorageState.json' });
-  await browser.close();
-}
-
-export default globalSetup;
-```
-
-After that you can specify the user to use for each test file or each test group:
-
-```js tab=js-ts
-import { test } from '@playwright/test';
-
-test.use({ storageState: 'adminStorageState.json' });
-
-test('admin test', async ({ page }) => {
-  // page is signed in as admin.
-});
-
-test.describe(() => {
-  test.use({ storageState: 'userStorageState.json' });
-
-  test('user test', async ({ page }) => {
-    // page is signed in as a user.
-  });
-});
-```
-
-```js tab=js-js
-const { test } = require('@playwright/test');
-
-test.use({ storageState: 'adminStorageState.json' });
-
-test('admin test', async ({ page }) => {
-  // page is signed in as amin.
-});
-
-test.describe(() => {
-  test.use({ storageState: 'userStorageState.json' });
-
-  test('user test', async ({ page }) => {
-    // page is signed in as a user.
-  });
-});
-```
-
-### Testing multiple roles together
-* langs: js
-
-If you need to test how multiple authenticated roles interact together, use multiple [BrowserContext]s and [Page]s with different storage states in the same test. Any of the methods above to create multiple storage state files would work.
-
-```js tab=js-ts
-import { test } from '@playwright/test';
-
-test('admin and user', async ({ browser }) => {
-  // adminContext and all pages inside, including adminPage, are signed in as "admin".
-  const adminContext = await browser.newContext({ storageState: 'adminStorageState.json' });
-  const adminPage = await adminContext.newPage();
-
-  // userContext and all pages inside, including userPage, are signed in as "user".
-  const userContext = await browser.newContext({ storageState: 'userStorageState.json' });
-  const userPage = await userContext.newPage();
-
-  // ... interact with both adminPage and userPage ...
-});
-```
-
-```js tab=js-js
-const { test } = require('@playwright/test');
-
-test('admin and user', async ({ browser }) => {
-  // adminContext and all pages inside, including adminPage, are signed in as "admin".
-  const adminContext = await browser.newContext({ storageState: 'adminStorageState.json' });
-  const adminPage = await adminContext.newPage();
-
-  // userContext and all pages inside, including userPage, are signed in as "user".
-  const userContext = await browser.newContext({ storageState: 'userStorageState.json' });
-  const userPage = await userContext.newPage();
-
-  // ... interact with both adminPage and userPage ...
-});
-```
-
-### Testing multiple roles with POM fixtures
-* langs: js
-
-If many of your tests require multiple authenticated roles from within the same test, you can introduce fixtures for each role. Any of the methods above to create multiple storage state files would work.
-
-Below is an example that [creates fixtures](./test-fixtures.md#creating-a-fixture) for two [Page Object Models](./test-pom.md) - admin POM and user POM. It assumes `adminStorageState.json` and `userStorageState.json` files were created.
-
-```js tab=js-ts
-// fixtures.ts
-import { test as base, Page, Browser, Locator } from '@playwright/test';
-export { expect } from '@playwright/test';
-
-// Page Object Model for the "admin" page.
-// Here you can add locators and helper methods specific to the admin page.
-class AdminPage {
-  // Page signed in as "admin".
-  page: Page;
-
-  constructor(page: Page) {
-    this.page = page;
-  }
-
-  static async create(browser: Browser) {
-    const context = await browser.newContext({ storageState: 'adminStorageState.json' });
-    const page = await context.newPage();
-    return new AdminPage(page);
-  }
-}
-
-// Page Object Model for the "user" page.
-// Here you can add locators and helper methods specific to the user page.
-class UserPage {
-  // Page signed in as "user".
-  page: Page;
-
-  // Example locator pointing to "Welcome, User" greeting.
-  greeting: Locator;
-
-  constructor(page: Page) {
-    this.page = page;
-    this.greeting = page.locator('#greeting');
-  }
-
-  static async create(browser: Browser) {
-    const context = await browser.newContext({ storageState: 'userStorageState.json' });
-    const page = await context.newPage();
-    return new UserPage(page);
-  }
-}
-
-// Declare the types of your fixtures.
-type MyFixtures = {
-  adminPage: AdminPage;
-  userPage: UserPage;
-};
-
-// Extend base test by providing "adminPage" and "userPage".
-// This new "test" can be used in multiple test files, and each of them will get the fixtures.
-export const test = base.extend<MyFixtures>({
-  adminPage: async ({ browser }, use) => {
-    await use(await AdminPage.create(browser));
-  },
-  userPage: async ({ browser }, use) => {
-    await use(await UserPage.create(browser));
-  },
-});
-
-
-// example.spec.ts
-// Import test with our new fixtures.
-import { test, expect } from './fixtures';
-
-// Use adminPage and userPage fixtures in the test.
-test('admin and user', async ({ adminPage, userPage }) => {
-  // ... interact with both adminPage and userPage ...
-  await adminPage.page.screenshot();
-  await expect(userPage.greeting).toHaveText('Welcome, User');
-});
-```
-
-```js tab=js-js
-// fixtures.js
-const { test: base } = require('@playwright/test');
-
-// Page Object Model for the "admin" page.
-// Here you can add locators and helper methods specific to the admin page.
-class AdminPage {
-  constructor(page) {
-    // Page signed in as "admin".
-    this.page = page;
-  }
-
-  static async create(browser) {
-    const context = await browser.newContext({ storageState: 'adminStorageState.json' });
-    const page = await context.newPage();
-    return new AdminPage(page);
-  }
-}
-
-// Page Object Model for the "user" page.
-// Here you can add locators and helper methods specific to the user page.
-class UserPage {
-  constructor(page) {
-    // Page signed in as "user".
-    this.page = page;
-    // Example locator pointing to "Welcome, User" greeting.
-    this.greeting = page.locator('#greeting');
-  }
-
-  static async create(browser) {
-    const context = await browser.newContext({ storageState: 'userStorageState.json' });
-    const page = await context.newPage();
-    return new UserPage(page);
-  }
-}
-
-// Extend base test by providing "adminPage" and "userPage".
-// This new "test" can be used in multiple test files, and each of them will get the fixtures.
-exports.test = base.extend({
-  adminPage: async ({ browser }, use) => {
-    await use(await AdminPage.create(browser));
-  },
-  userPage: async ({ browser }, use) => {
-    await use(await UserPage.create(browser));
-  },
-});
-exports.expect = base.expect;
-
-// example.spec.ts
-// Import test with our new fixtures.
-const { test, expect } = require('./fixtures');
-
-// Use adminPage and userPage fixtures in the test.
-test('admin and user', async ({ adminPage, userPage }) => {
-  // ... interact with both adminPage and userPage ...
-  await adminPage.page.screenshot();
-  await expect(userPage.greeting).toHaveText('Welcome, User');
-});
-```
 
-## Reuse the signed in page in multiple tests
+### Code generation
 * langs: js
 
-Although discouraged, sometimes it is necessary to sacrifice the isolation and run a number of tests
-in the same page. In that case, you can log into that page once in `beforeAll` and then use that same
-page in all the tests. Note that you need to run these tests serially using `test.describe.serial` in
-order to achieve that:
+Logging in via the UI and then reusing authentication state can be combined to
+implement **login once and run multiple scenarios**. The lifecycle looks like:
 
-```js tab=js-js
-// example.spec.js
-// @ts-check
+1. Run tests (for example, with `npm run test`).
+2. Login via UI and retrieve authentication state.
+    * In Jest, this can be executed in [`globalSetup`](https://jestjs.io/docs/en/configuration#globalsetup-string).
+3. In each test, load authentication state in `beforeEach` or `beforeAll` step.
 
-const { test } = require('@playwright/test');
+This approach will also **work in CI environments**, since it does not rely on any external state.
 
-test.describe.configure({ mode: 'serial' });
+### Code generation
+* langs: python
 
-/** @type {import('@playwright/test').Page} */
-let page;
+Logging in via the UI and then reusing authentication state can be combined to implement **login once and run multiple scenarios**. The lifecycle looks like:
 
-test.beforeAll(async ({ browser }) => {
-  // Create page yourself and sign in.
-  page = await browser.newPage();
-  await page.goto('https://github.com/login');
-  await page.locator('input[name="user"]').fill('user');
-  await page.locator('input[name="password"]').fill('password');
-  await page.locator('text=Sign in').click();
-});
+1. Run tests (for example, with `pytest`).
+2. Login via UI and retrieve authentication state.
+3. In each test, load authentication state using `autouse=True` fixture with `scope=function`.
 
-test.afterAll(async () => {
-  await page.close();
-});
+This approach will also **work in CI environments**, since it does not rely on any external state.
 
-test('first test', async () => {
-  // page is signed in.
-});
+### Code generation
+* langs: csharp
 
-test('second test', async () => {
-  // page is signed in.
-});
-```
+Logging in via the UI and then reusing authentication state can be combined to implement **login once and run multiple scenarios**. The lifecycle looks like:
 
-```js tab=js-ts
-// example.spec.ts
+1. Run tests (for example, with `dotnet test`).
+2. Login via UI and retrieve authentication state.
+3. In each test, load authentication state in `SetUp`.
 
-import { test, Page } from '@playwright/test';
+This approach will also **work in CI environments**, since it does not rely on any external state.
 
-test.describe.configure({ mode: 'serial' });
+### Code generation
+* langs: java
 
-let page: Page;
+Logging in via the UI and then reusing authentication state can be combined to implement **login once and run multiple scenarios**. The lifecycle looks like:
 
-test.beforeAll(async ({ browser }) => {
-  // Create page once and sign in.
-  page = await browser.newPage();
-  await page.goto('https://github.com/login');
-  await page.locator('input[name="user"]').fill('user');
-  await page.locator('input[name="password"]').fill('password');
-  await page.locator('text=Sign in').click();
-});
+1. Run tests (for example, with `mvn test`).
+2. Login via UI and retrieve authentication state.
+3. In each test, load authentication state in `@beforeEach` or `@beforeAll` step.
 
-test.afterAll(async () => {
-  await page.close();
-});
-
-test('first test', async () => {
-  // page is signed in.
-});
-
-test('second test', async () => {
-  // page is signed in.
-});
-```
-
-:::note
-You can also use `storageState` property when you are creating the [`method: Browser.newPage`] in order to
-pass it an existing logged in state.
-:::
+This approach will also **work in CI environments**, since it does not rely on any external state.
 
+### API reference
+- [`method: BrowserContext.storageState`]
+- [`method: Browser.newContext`]
 
 ## Session storage
 
-Rarely, [session storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage) is used for storing information associated with the logged-in state. Session storage is specific to a particular domain and is not persisted across page loads. Playwright does not provide API to persist session storage, but the following snippet can be used to save/load session storage.
+Rarely, [session storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage) is used for storing information
+associated with the logged-in state. Session storage is specific to a particular domain and is not persisted across page loads.
+Playwright does not provide API to persist session storage, but the following snippet can be used to
+save/load session storage.
 
 ```js
 // Get session storage and store as env variable
@@ -821,6 +298,12 @@ await context.AddInitScriptAsync(@"(storage => {
   })('" + loadedSessionStorage + "')");
 ```
 
+### API reference
+- [`method: BrowserContext.storageState`]
+- [`method: Browser.newContext`]
+- [`method: Page.evaluate`]
+- [`method: BrowserContext.addInitScript`]
+
 ## Multi-factor authentication
 
 Accounts with multi-factor authentication (MFA) cannot be fully automated, and need
@@ -898,21 +381,12 @@ class Program
 }
 ```
 
-#### Lifecycle
+### Lifecycle
 
 1. Create a user data directory on disk.
 1. Launch a persistent context with the user data directory and login the MFA account.
 1. Reuse user data directory to run automation scenarios.
 
-## Manually Reuse Signed in State
-* langs: js
-
-The following code snippet retrieves state from an authenticated context and creates a new context with that state.
-
-```js 
-// Save storage state into the file.
-await context.storageState({ path: 'state.json' });
-
-// Create a new context with the saved storage state.
-const context = await browser.newContext({ storageState: 'state.json' });
-```
+### API reference
+- [BrowserContext]
+- [`method: BrowserType.launchPersistentContext`]
diff --git a/docs/src/browser-contexts.md b/docs/src/browser-contexts.md
index 71d70afa226acccf21316256fcdec30730154778..e54c5b60304f97bc57ae5415905980351f604e33 100644
--- a/docs/src/browser-contexts.md
+++ b/docs/src/browser-contexts.md
@@ -1,43 +1,18 @@
 ---
 id: browser-contexts
-title: "Isolation"
+title: "Browser Contexts"
 ---
 
-Tests written with Playwright execute in isolated clean-slate environments called browser contexts. This isolation model improves reproducibility and prevents cascading test failures. 
+<!-- TOC -->
 
-[BrowserContext]s are equivalent to incognito-like profiles, they are fast and cheap to create and completely isolated, even when running in a single browser. Playwright creates a context for each test, and provides a default [Page] in that context.
+## Browser context
 
-When using Playwright as a Test Runner, this happens out of the box for each test. Otherwise, you can create browser contexts manually.
+A [BrowserContext] is an isolated incognito-alike session within a browser instance. Browser contexts are fast and
+cheap to create. We recommend running each test scenario in its own new Browser context, so that
+the browser state is isolated between the tests. If you are using [Playwright Test](./intro.md), this happens out of the
+box for each test. Otherwise, you can create browser contexts manually:
 
-```js tab=js-ts
-const { test } = require('@playwright/test');
-
-test('example test', async ({ page, context }) => {
-  // "context" is an isolated BrowserContext, created for this specific test.
-  // "page" belongs to this context.
-});
-
-test('another test', async ({ page, context }) => {
-  // "context" and "page" in this second test are completely
-  // isolated from the first test.
-});
-```
-
-```js tab=js-js
-import { test } from '@playwright/test';
-
-test('example test', async ({ page, context }) => {
-  // "context" is an isolated BrowserContext, created for this specific test.
-  // "page" belongs to this context.
-});
-
-test('another test', async ({ page, context }) => {
-  // "context" and "page" in this second test are completely
-  // isolated from the first test.
-});
-```
-
-```js tab=js-library
+```js
 const browser = await chromium.launch();
 const context = await browser.newContext();
 const page = await context.newPage();
@@ -67,41 +42,114 @@ var context = await browser.NewContextAsync();
 var page = await context.NewPageAsync();
 ```
 
-Browser contexts can also be used to emulate multi-page scenarios involving mobile devices, permissions, locale and color scheme. Check out our [Emulation](./emulation.md) guide for more details.
+Browser contexts can also be used to emulate multi-page scenarios involving
+mobile devices, permissions, locale and color scheme.
 
-## Multiple contexts in a single test
+```js
+const { devices } = require('playwright');
+const iPhone = devices['iPhone 11 Pro'];
 
-Playwright can create multiple browser contexts within a single scenario. This is useful when you want to test for multi-user functionality, like a chat.
+const context = await browser.newContext({
+  ...iPhone,
+  permissions: ['geolocation'],
+  geolocation: { latitude: 52.52, longitude: 13.39},
+  colorScheme: 'dark',
+  locale: 'de-DE'
+});
+const page = await context.newPage();
+```
 
-```js tab=js-js
-import { test } from '@playwright/test';
+```java
+// FIXME
+import com.microsoft.playwright.*;
 
-test('admin and user', async ({ browser }) => {
-  // Create two isolated browser contexts
-  const adminContext = await browser.newContext();
-  const userContext = await browser.newContext();
-  
-  // Create pages and interact with contexts independently
-  const adminPage = await adminContext.newPage();
-  const userPage = await userContext.newPage();
-});
+public class Example {
+  public static void main(String[] args) {
+    try (Playwright playwright = Playwright.create()) {
+      BrowserType devices = playwright.devices();
+      BrowserContext context = browser.newContext(new Browser.NewContextOptions()
+        .setUserAgent("Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0 Mobile/15E148 Safari/604.1")
+        .setViewportSize(375, 812)
+        .setDeviceScaleFactor(3)
+        .setIsMobile(true)
+        .setHasTouch(true)
+        .setPermissions(Arrays.asList("geolocation"))
+        .setGeolocation(52.52, 13.39)
+        .setColorScheme(ColorScheme.DARK)
+        .setLocale("de-DE"));
+      Page page = context.newPage();
+    }
+  }
+}
 ```
 
-```js tab=js-ts
-const { test } = require('@playwright/test');
-
-test('admin and user', async ({ browser }) => {
-  // Create two isolated browser contexts
-  const adminContext = await browser.newContext();
-  const userContext = await browser.newContext();
-  
-  // Create pages and interact with contexts independently
-  const adminPage = await adminContext.newPage();
-  const userPage = await userContext.newPage();
-});
+```python async
+import asyncio
+from playwright.async_api import async_playwright
+
+async def main():
+    async with async_playwright() as p:
+        iphone_11 = p.devices['iPhone 11 Pro']
+        browser = await p.chromium.launch()
+        context = await browser.new_context(
+            **iphone_11,
+            locale='de-DE',
+            geolocation={ 'longitude': 12.492507, 'latitude': 41.889938 },
+            permissions=['geolocation'],
+            color_scheme='dark',
+        )
+        page = await browser.new_page()
+        await browser.close()
+
+asyncio.run(main())
+```
+
+```python sync
+from playwright.sync_api import sync_playwright
+
+with sync_playwright() as p:
+    iphone_11 = p.devices['iPhone 11 Pro']
+    browser = p.webkit.launch(headless=False)
+    context = browser.new_context(
+        **iphone_11,
+        locale='de-DE',
+        geolocation={ 'longitude': 12.492507, 'latitude': 41.889938 },
+        permissions=['geolocation']
+    )
+    page = context.new_page()
+    browser.close()
+```
+
+```csharp
+using Microsoft.Playwright;
+using System.Threading.Tasks;
+
+class PlaywrightExample
+{
+    public static async Task Main()
+    {
+        using var playwright = await Playwright.CreateAsync();
+        await using var browser = await playwright.Webkit.LaunchAsync();
+        var options = new BrowserNewContextOptions(playwright.Devices["iPhone 11 Pro"])
+        {
+            Geolocation = new() { Longitude = 12.492507f, Latitude = 41.889938f },
+            Permissions = new[] { "geolocation" },
+            Locale = "de-DE"
+        };
+
+        await using var context = await browser.NewContextAsync(options);
+        var page = await browser.NewPageAsync();
+    }
+}
 ```
 
-```js tab=js-library
+## Multiple contexts
+
+[Browser contexts](./browser-contexts.md) are isolated environments on a single browser instance.
+Playwright can create multiple browser contexts within a single scenario. This is useful when you want to test for
+multi-user functionality, like chat.
+
+```js
 const { chromium } = require('playwright');
 
 // Create a Chromium browser instance
@@ -112,8 +160,6 @@ const userContext = await browser.newContext();
 const adminContext = await browser.newContext();
 
 // Create pages and interact with contexts independently
-const adminPage = await adminContext.newPage();
-const userPage = await userContext.newPage();
 ```
 
 ```java
@@ -190,3 +236,8 @@ class Program
     }
 }
 ```
+
+### API reference
+- [BrowserContext]
+- [`method: Browser.newContext`]
+- [`method: BrowserContext.addCookies`]
diff --git a/docs/src/ci-intro-js.md b/docs/src/ci-intro-js.md
index 9d81c35843cc70c82f9661f67fc820600f0182ec..9958177b3630b8718ab4ea5da114e7970305eb1a 100644
--- a/docs/src/ci-intro-js.md
+++ b/docs/src/ci-intro-js.md
@@ -11,8 +11,8 @@ When installing Playwright you are given the option to add a [GitHub Actions](ht
 - [How to create a repo and push to GitHub](#create-a-repo-and-push-to-github)
 - [How to open the workflows](#opening-the-workflows)
 - [How to view the test logs](#viewing-test-logs)
-- [How to download the report from GitHub](#downloading-the-html-report)
-- [How to view the report](#viewing-the-html-report)
+- [How to download the report from GitHub](#downloading-the-playwright-report)
+- [How to view the report](#viewing-the-playwright-report)
 - [How to view the trace](#viewing-the-trace)
 
 ## GitHub Actions
diff --git a/docs/src/ci.md b/docs/src/ci.md
index eea1f01c67c6556a03997fc7af57483d908846e5..c9d88b3c95be4d80cd78ee57b380f584d854c878 100644
--- a/docs/src/ci.md
+++ b/docs/src/ci.md
@@ -37,7 +37,7 @@ configurations for common CI providers.
 
 1. **Run your tests**:
    ```bash js
-   npx playwright test
+   npm test
    ```
    ```bash python
    pytest
@@ -66,7 +66,7 @@ steps:
   - name: Install Playwright
     run: npx playwright install --with-deps
   - name: Run your tests
-    run: npx playwright test
+    run: npm test
   - name: Upload test results
     if: always()
     uses: actions/upload-artifact@v2
@@ -148,7 +148,7 @@ jobs:
     - name: Install Playwright
       run: npx playwright install --with-deps
     - name: Run Playwright tests
-      run: npx playwright test
+      run: npm run test:e2e
       env:
         # This might depend on your test-runner/language binding
         PLAYWRIGHT_TEST_BASE_URL: ${{ github.event.deployment_status.target_url }}
@@ -176,7 +176,7 @@ steps:
     name: 'Playwright Tests'
     runs-on: ubuntu-latest
     container:
-      image: mcr.microsoft.com/playwright:v1.27.0-focal
+      image: mcr.microsoft.com/playwright:v1.25.2-focal
     steps:
       - uses: actions/checkout@v3
       - uses: actions/setup-node@v2
@@ -194,7 +194,7 @@ steps:
     name: 'Playwright Tests'
     runs-on: ubuntu-latest
     container:
-      image: mcr.microsoft.com/playwright:v1.27.0-focal
+      image: mcr.microsoft.com/playwright:v1.25.2-focal
     steps:
       - uses: actions/checkout@v3
       - name: Set up Python
@@ -218,7 +218,7 @@ steps:
     name: 'Playwright Tests'
     runs-on: ubuntu-latest
     container:
-      image: mcr.microsoft.com/playwright:v1.27.0-focal
+      image: mcr.microsoft.com/playwright:v1.25.2-focal
     steps:
       - uses: actions/checkout@v3
       - uses: actions/setup-java@v3
@@ -239,7 +239,7 @@ steps:
     name: 'Playwright Tests'
     runs-on: ubuntu-latest
     container:
-      image: mcr.microsoft.com/playwright:v1.27.0-focal
+      image: mcr.microsoft.com/playwright:v1.25.2-focal
     steps:
       - uses: actions/checkout@v3
       - name: Setup dotnet
@@ -264,11 +264,11 @@ steps:
     name: 'Playwright Tests - ${{ matrix.project }} - Shard ${{ matrix.shardIndex }} of ${{ matrix.shardTotal }}'
     runs-on: ubuntu-latest
     container:
-      image: mcr.microsoft.com/playwright:v1.27.0-focal
+      image: mcr.microsoft.com/playwright:v1.25.2-focal
     strategy:
       fail-fast: false
       matrix:
-        project: [chromium, webkit]
+        project: [Chrome, Safari]
         shardIndex: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
         shardTotal: [10]
     steps:
@@ -293,89 +293,30 @@ Pipelines support [running containerized
 jobs](https://docs.microsoft.com/en-us/azure/devops/pipelines/process/container-phases?view=azure-devops).
 Alternatively, you can use [Command line tools](./cli.md#install-system-dependencies) to install all necessary dependencies.
 
-For running the Playwright tests use this pipeline task:
 ```yml
-jobs:
-    - deployment: Run_E2E_Tests
-      pool:
-        vmImage: ubuntu-20.04
-      container: mcr.microsoft.com/playwright:v1.27.0-focal
-      environment: testing
-      strategy:
-        runOnce:
-          deploy:
-            steps:
-            - checkout: self
-            - task: Bash@3
-              displayName: 'Run Playwright tests'
-              inputs:
-                workingDirectory: 'my-e2e-tests'
-                targetType: 'inline'
-                failOnStderr: true
-                env:
-                  CI: true
-                script: |
-                  npm ci
-                  npx playwright test
-```
-This will make the pipeline run fail if any of the playwright tests fails.
-If you also want to integrate the test results with Azure DevOps, use `failOnStderr:false` and the built-in `PublishTestResults` task like so:
-```yml
-jobs:
-    - deployment: Run_E2E_Tests
-      pool:
-        vmImage: ubuntu-20.04
-      container: mcr.microsoft.com/playwright:v1.27.0-focal
-      environment: testing
-      strategy:
-        runOnce:
-          deploy:
-            steps:
-            - checkout: self
-            - task: Bash@3
-              displayName: 'Run Playwright tests'
-              inputs:
-                workingDirectory: 'my-e2e-tests'
-                targetType: 'inline'
-                failOnStderr: false
-                env:
-                  CI: true
-                script: |
-                  npm ci
-                  npx playwright test
-                  exit 0
-            - task: PublishTestResults@2
-              displayName: 'Publish test results'
-              inputs:
-                searchFolder: 'my-e2e-tests/test-results'
-                testResultsFormat: 'JUnit'
-                testResultsFiles: 'e2e-junit-results.xml' 
-                mergeTestResults: true
-                failTaskOnFailedTests: true
-                testRunTitle: 'My End-To-End Tests'
-```
-Note: The JUnit reporter needs to be configured accordingly via
-```ts
-["junit", { outputFile: "test-results/e2e-junit-results.xml" }]
+pool:
+  vmImage: 'ubuntu-20.04'
+
+container: mcr.microsoft.com/playwright:v1.25.2-focal
+
+steps:
+...
 ```
-in `playwright.config.ts`.
 
 ### CircleCI
 
-Running Playwright on Circle CI is very similar to running on Github Actions. In order to specify the pre-built Playwright [Docker image](./docker.md) , simply modify the agent definition with `docker:` in your config like so:
+Running Playwright on CircleCI requires the following steps:
+
+1. Use the pre-built [Docker image](./docker.md) in your config like so:
 
    ```yml
-   executors:
-      pw-focal-development:
-        docker:
-          - image: mcr.microsoft.com/playwright:v1.27.0-focal
-      environment:
-        NODE_ENV: development # Needed if playwright is in `devDependencies`
+   docker:
+     - image: mcr.microsoft.com/playwright:v1.25.2-focal
+   environment:
+     NODE_ENV: development # Needed if playwright is in `devDependencies`
    ```
 
-Note: When using the docker agent definition, you are specifying the resource class of where playwright runs to the 'medium' tier [here](https://circleci.com/docs/configuration-reference?#docker-execution-environment). The default behavior of Playwright is to set the number of workers to the detected core count (2 in the case of the medium tier). Overriding the number of workers to greater than this number will cause unnecessary timeouts and failures.
-
-Similarly, If youâre using Playwright through Jest, then you may encounter an error spawning child processes:
+1. If youâre using Playwright through Jest, then you may encounter an error spawning child processes:
 
    ```
    [00:00.0]  jest args: --e2e --spec --max-workers=36
@@ -385,18 +326,6 @@ Similarly, If youâre using Playwright through Jest, then you may encounter an
 
    This is likely caused by Jest autodetecting the number of processes on the entire machine (`36`) rather than the number allowed to your container (`2`). To fix this, set `jest --maxWorkers=2` in your test command.
 
-#### Sharding in Circle CI
-
-Sharding in Circle CI is indexed with 0 which means that you will need to override the default parallelism ENV VARS. The following example demonstrates how to run Playwright with a Circle CI Parallelism of 4 by adding 1 to the `CIRCLE_NODE_INDEX` to pass into the `--shard` cli arg.
-
-  ```yml
-    playwright-job-name:
-      executor: pw-focal-development
-      parallelism: 4
-      steps:
-        - run: SHARD="$((${CIRCLE_NODE_INDEX}+1))"; npx playwright test -- --shard=${SHARD}/${CIRCLE_NODE_TOTAL}      
-  ```
-
 ### Jenkins
 
 Jenkins supports Docker agents for pipelines. Use the [Playwright Docker image](./docker.md)
@@ -404,13 +333,13 @@ to run tests on Jenkins.
 
 ```groovy
 pipeline {
-   agent { docker { image 'mcr.microsoft.com/playwright:v1.27.0-focal' } }
+   agent { docker { image 'mcr.microsoft.com/playwright:v1.25.2-focal' } }
    stages {
       stage('e2e-tests') {
          steps {
             // Depends on your language / test framework
             sh 'npm install'
-            sh 'npx playwright test'
+            sh 'npm run test'
          }
       }
    }
@@ -422,7 +351,7 @@ pipeline {
 Bitbucket Pipelines can use public [Docker images as build environments](https://confluence.atlassian.com/bitbucket/use-docker-images-as-build-environments-792298897.html). To run Playwright tests on Bitbucket, use our public Docker image ([see Dockerfile](./docker.md)).
 
 ```yml
-image: mcr.microsoft.com/playwright:v1.27.0-focal
+image: mcr.microsoft.com/playwright:v1.25.2-focal
 ```
 
 ### GitLab CI
@@ -435,48 +364,11 @@ stages:
 
 tests:
   stage: test
-  image: mcr.microsoft.com/playwright:v1.27.0-focal
+  image: mcr.microsoft.com/playwright:v1.25.2-focal
   script:
   ...
 ```
 
-#### Sharding
-* langs: js
-
-GitLab CI supports [sharding tests between multiple jobs](https://docs.gitlab.com/ee/ci/jobs/job_control.html#parallelize-large-jobs) using the [parallel](https://docs.gitlab.com/ee/ci/yaml/index.html#parallel) keyword. The test job will be split into multiple smaller jobs that run in parallel. Parallel jobs are named sequentially from `job_name 1/N` to `job_name N/N`.
-
-```yml
-stages:
-  - test
-
-tests:
-  stage: test
-  image: mcr.microsoft.com/playwright:v1.27.0-focal
-  parallel: 7
-  script:
-    - npm ci
-    - npx playwright test --shard=$CI_NODE_INDEX/$CI_NODE_TOTAL
-```
-
-GitLab CI also supports sharding tests between multiple jobs using the [parallel:matrix](https://docs.gitlab.com/ee/ci/yaml/index.html#parallelmatrix) option. The test job will run multiple times in parallel in a single pipeline, but with different variable values for each instance of the job. In the example below, we have 2 `PROJECT` values, 10 `SHARD_INDEX` values and 1 `SHARD_TOTAL` value, resulting in a total of 20 jobs to be run.
-
-```yml
-stages:
-  - test
-
-tests:
-  stage: test
-  image: mcr.microsoft.com/playwright:v1.27.0-focal
-  parallel:
-    matrix:
-      - PROJECT: ['chromium', 'webkit']
-        SHARD_INDEX: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
-        SHARD_TOTAL: 10
-  script:
-    - npm ci
-    - npx playwright test --project=$PROJECT --shard=$SHARD_INDEX/$SHARD_TOTAL
-```
-
 ## Caching browsers
 
 By default, Playwright downloads browser binaries when the Playwright NPM package
@@ -524,7 +416,7 @@ configuration, against a hash of the Playwright version.
 Playwright supports the `DEBUG` environment variable to output debug logs during execution. Setting it to `pw:browser*` is helpful while debugging `Error: Failed to launch browser` errors.
 
 ```bash js
-DEBUG=pw:browser* npx playwright test
+DEBUG=pw:browser* npm run test
 ```
 ```bash python
 DEBUG=pw:browser* pytest
diff --git a/docs/src/cli.md b/docs/src/cli.md
index d4b1aa8d0217994270e9771cea2f12ab3c78cd4d..3485cc0ea8c85d91d40316fd20072cf5ab1f54ee 100644
--- a/docs/src/cli.md
+++ b/docs/src/cli.md
@@ -5,6 +5,8 @@ title: "Command line tools"
 
 Playwright comes with the command line tools.
 
+<!-- TOC -->
+
 ## Usage
 
 ```bash js
@@ -321,7 +323,7 @@ var browser = await chromium.LaunchAsync(new BrowserTypeLaunchOptions { Headless
 
 // Setup context however you like.
 var context = await browser.NewContextAsync(); // Pass any options
-await context.RouteAsync("**/*", route => route.ContinueAsync());
+await context.RouteAsync('**/*', route => route.ContinueAsync());
 
 // Pause the page, and start recording manually.
 var page = await context.NewPageAsync();
diff --git a/docs/src/codegen-intro.md b/docs/src/codegen-intro.md
index bee78d55bfa982fd6c35a6bbff442cef5a845b16..6d715d44c73c9f1258063c4bd726711ea1d67081 100644
--- a/docs/src/codegen-intro.md
+++ b/docs/src/codegen-intro.md
@@ -46,4 +46,4 @@ To learn more about generating tests check out or detailed guide on [Codegen](./
 
 ## What's Next
 
-- [See a trace of your tests](./trace-viewer-intro.md)
+- [See a trace of your tests](./trace-viewer.md)
diff --git a/docs/src/codegen.md b/docs/src/codegen.md
index 8a6363923198d08851230ad143e3e4367ee7c81b..7f374dff3829a1250658461cb40cc9b110792fda 100644
--- a/docs/src/codegen.md
+++ b/docs/src/codegen.md
@@ -121,9 +121,9 @@ pwsh bin/Debug/netX/playwright.ps1 codegen --timezone="Europe/Rome" --geolocatio
 
 ## Preserve authenticated state
 
-Run `codegen` with `--save-storage` to save [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies) and [localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) at the end of the session. This is useful to separately record an authentication step and reuse it later in the tests.
+Run `codegen` with `--save-storage` to save [cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies) and [localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) at the end of the session. This is useful to separately record an authentication step and reuse it later in the tests. 
 
-After performing authentication and closing the browser, `auth.json` will contain the storage state.
+After performing authentication and closing the browser, `auth.json` will contain the storage state. 
 
 ```bash js
 npx playwright codegen --save-storage=auth.json
@@ -269,7 +269,7 @@ var browser = await chromium.LaunchAsync(new BrowserTypeLaunchOptions { Headless
 
 // Setup context however you like.
 var context = await browser.NewContextAsync(); // Pass any options
-await context.RouteAsync("**/*", route => route.ContinueAsync());
+await context.RouteAsync('**/*', route => route.ContinueAsync());
 
 // Pause the page, and start recording manually.
 var page = await context.NewPageAsync();
diff --git a/docs/src/debug-selectors.md b/docs/src/debug-selectors.md
index e7a42c471226c1bbadde4e6f529772c7281b84e5..22ecf046dbb257265e31e9fd486b34560f9fe96e 100644
--- a/docs/src/debug-selectors.md
+++ b/docs/src/debug-selectors.md
@@ -100,17 +100,17 @@ Generates selector for the given element.
 Playwright supports verbose logging with the `DEBUG` environment variable.
 
 ```bash tab=bash-bash lang=js
-DEBUG=pw:api npx playwright test
+DEBUG=pw:api npm run test
 ```
 
 ```batch tab=bash-batch lang=js
 set DEBUG=pw:api
-npx playwright test
+npm run test
 ```
 
 ```powershell tab=bash-powershell lang=js
 $env:DEBUG="pw:api"
-npx playwright test
+npm run test
 ```
 
 ```bash tab=bash-bash lang=java
diff --git a/docs/src/debug.md b/docs/src/debug.md
index 6ebab2464c17b7e7c7e7b7a9c6df60fae9b9ede6..970fc2b23b665cdb01c5c66ae2a135649b6855e3 100644
--- a/docs/src/debug.md
+++ b/docs/src/debug.md
@@ -34,17 +34,17 @@ Set the `PWDEBUG` environment variable to run your scripts in debug mode. This
 configures Playwright for debugging and opens the inspector.
 
 ```bash tab=bash-bash lang=js
-PWDEBUG=1 npx playwright test
+PWDEBUG=1 npm run test
 ```
 
 ```batch tab=bash-batch lang=js
 set PWDEBUG=1
-npx playwright test
+npm run test
 ```
 
 ```powershell tab=bash-powershell lang=js
 $env:PWDEBUG=1
-npx playwright test
+npm run test
 ```
 
 ```bash tab=bash-bash lang=java
@@ -108,17 +108,17 @@ Using `PWDEBUG=console` will configure the browser for debugging in Developer to
   composite selectors.
 
 ```bash tab=bash-bash lang=js
-PWDEBUG=console npx playwright test
+PWDEBUG=console npm run test
 ```
 
 ```batch tab=bash-batch lang=js
 set PWDEBUG=console
-npx playwright test
+npm run test
 ```
 
 ```powershell tab=bash-powershell lang=js
 $env:PWDEBUG="console"
-npx playwright test
+npm run test
 ```
 
 ```bash tab=bash-bash lang=java
diff --git a/docs/src/dialogs.md b/docs/src/dialogs.md
index 6dd5bac06e456dc09ae0db9d2058f48c8a172bbb..56eaa2eeec6bcf86277806326de1377a1665089a 100644
--- a/docs/src/dialogs.md
+++ b/docs/src/dialogs.md
@@ -5,9 +5,11 @@ title: "Dialogs"
 
 Playwright can interact with the web page dialogs such as [`alert`](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert), [`confirm`](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm), [`prompt`](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt) as well as [`beforeunload`](https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event) confirmation.
 
+<!-- TOC -->
+
 ## alert(), confirm(), prompt() dialogs
 
-By default, dialogs are auto-dismissed by Playwright, so you don't have to handle them. However, you can register a dialog handler before the action that triggers the dialog to either [`method: Dialog.accept`] or [`method: Dialog.dismiss`] it.
+By default, dialogs are auto-dismissed by Playwright, so you don't have to handle them. However, you can register a dialog handler before the action that triggers the dialog to accept or decline it.
 
 ```js
 page.on('dialog', dialog => dialog.accept());
@@ -35,10 +37,10 @@ await page.Locator("button").ClickAsync();
 ```
 
 :::note
-[`event: Page.dialog`] listener **must handle** the dialog. Otherwise your action will stall, be it [`method: Locator.click`] or something else. That's because dialogs in Web are modals and therefore block further page execution until they are handled.
+[`event: Page.dialog`] listener **must handle** the dialog. Otherwise your action will stall, be it [`method: Page.click`], [`method: Page.evaluate`] or any other. That's because dialogs in Web are modal and block further page execution until they are handled.
 :::
 
-As a result, the following snippet will never resolve:
+As a result, following snippet will never resolve:
 
 :::warning
 WRONG!
@@ -73,11 +75,17 @@ await page.Locator("button").ClickAsync(); // Will hang here
 If there is no listener for [`event: Page.dialog`], all dialogs are automatically dismissed.
 :::
 
+### API reference
+
+- [Dialog]
+- [`method: Dialog.accept`]
+- [`method: Dialog.dismiss`]
+
 ## beforeunload dialog
 
-When [`method: Page.close`] is invoked with the truthy [`option: runBeforeUnload`] value, the page runs its unload handlers. This is the only case when [`method: Page.close`] does not wait for the page to actually close, because it might be that the page stays open in the end of the operation.
+When [`method: Page.close`] is invoked with the truthy [`option: runBeforeUnload`] value, it page runs its unload handlers. This is the only case when [`method: Page.close`] does not wait for the page to actually close, because it might be that the page stays open in the end of the operation.
 
-You can register a dialog handler to handle the `beforeunload` dialog yourself:
+You can register a dialog handler to handle the beforeunload dialog yourself:
 
 ```js
 page.on('dialog', async dialog => {
diff --git a/docs/src/docker.md b/docs/src/docker.md
index 85677381bd3c471a81abc7eda212008a1c11a003..f8732c4048856dabf9a44a82255efc4a4d40f405 100644
--- a/docs/src/docker.md
+++ b/docs/src/docker.md
@@ -14,19 +14,19 @@ This image is published on [Docker Hub].
 ### Pull the image
 
 ```bash js
-docker pull mcr.microsoft.com/playwright:v1.27.0-focal
+docker pull mcr.microsoft.com/playwright:v1.25.2-focal
 ```
 
 ```bash python
-docker pull mcr.microsoft.com/playwright/python:v1.27.0-focal
+docker pull mcr.microsoft.com/playwright/python:v1.25.2-focal
 ```
 
 ```bash csharp
-docker pull mcr.microsoft.com/playwright/dotnet:v1.27.0-focal
+docker pull mcr.microsoft.com/playwright/dotnet:v1.25.2-focal
 ```
 
 ```bash java
-docker pull mcr.microsoft.com/playwright/java:v1.27.0-focal
+docker pull mcr.microsoft.com/playwright/java:v1.25.2-focal
 ```
 
 ### Run the image
@@ -38,19 +38,19 @@ By default, the Docker image will use the `root` user to run the browsers. This
 On trusted websites, you can avoid creating a separate user and use root for it since you trust the code which will run on the browsers.
 
 ```bash js
-docker run -it --rm --ipc=host mcr.microsoft.com/playwright:v1.27.0-focal /bin/bash
+docker run -it --rm --ipc=host mcr.microsoft.com/playwright:v1.25.2-focal /bin/bash
 ```
 
 ```bash python
-docker run -it --rm --ipc=host mcr.microsoft.com/playwright/python:v1.27.0-focal /bin/bash
+docker run -it --rm --ipc=host mcr.microsoft.com/playwright/python:v1.25.2-focal /bin/bash
 ```
 
 ```bash csharp
-docker run -it --rm --ipc=host mcr.microsoft.com/playwright/dotnet:v1.27.0-focal /bin/bash
+docker run -it --rm --ipc=host mcr.microsoft.com/playwright/dotnet:v1.25.2-focal /bin/bash
 ```
 
 ```bash java
-docker run -it --rm --ipc=host mcr.microsoft.com/playwright/java:v1.27.0-focal /bin/bash
+docker run -it --rm --ipc=host mcr.microsoft.com/playwright/java:v1.25.2-focal /bin/bash
 ```
 
 #### Crawling and scraping
@@ -58,19 +58,19 @@ docker run -it --rm --ipc=host mcr.microsoft.com/playwright/java:v1.27.0-focal /
 On untrusted websites, it's recommended to use a separate user for launching the browsers in combination with the seccomp profile. Inside the container or if you are using the Docker image as a base image you have to use `adduser` for it.
 
 ```bash js
-docker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright:v1.27.0-focal /bin/bash
+docker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright:v1.25.2-focal /bin/bash
 ```
 
 ```bash python
-docker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright/python:v1.27.0-focal /bin/bash
+docker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright/python:v1.25.2-focal /bin/bash
 ```
 
 ```bash csharp
-docker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright/dotnet:v1.27.0-focal /bin/bash
+docker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright/dotnet:v1.25.2-focal /bin/bash
 ```
 
 ```bash java
-docker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright/java:v1.27.0-focal /bin/bash
+docker run -it --rm --ipc=host --user pwuser --security-opt seccomp=seccomp_profile.json mcr.microsoft.com/playwright/java:v1.25.2-focal /bin/bash
 ```
 
 [`seccomp_profile.json`](https://github.com/microsoft/playwright/blob/main/utils/docker/seccomp_profile.json) is needed to run Chromium with sandbox. This is a [default Docker seccomp profile](https://github.com/docker/engine/blob/d0d99b04cf6e00ed3fc27e81fc3d94e7eda70af3/profiles/seccomp/default.json) with extra user namespace cloning permissions:
@@ -145,51 +145,3 @@ The image will be tagged as `playwright:localbuild-focal` and could be run as:
 ```
 docker run --rm -it playwright:localbuild /bin/bash
 ```
-
-## (Experimental) Playwright Test Docker Integration
-* langs: js
-
-Playwright Test now ships an **experimental** Docker integration. The Docker container provides a consistent environment, eliminating browser rendering differences across platforms. 
-With this integration, **only** browser binaries are running inside a Docker container,
-while all the code is still running on the host operating system.
-
-Playwright Test will automatically proxy host network traffic
-into the container, so browsers can access servers running on the host.
-
-:::note
-Docker integration requires Docker installed & running on your computer.
-See https://docs.docker.com/get-docker/
-
-If you use [Docker Desktop](https://www.docker.com/products/docker-desktop/), make sure to increase
-default CPU and memory limit for better performance.
-:::
-
-Docker integration usage:
-
-1. Build a local Docker image that will be used to run containers. This step
-   needs to be done only once.
-
-    ```bash js
-    npx playwright docker build
-    ```
-
-2. Run Docker container in the background.
-
-    ```bash js
-    npx playwright docker start
-    ```
-
-3. Run tests inside Docker container. Note that this command accepts all the same arguments
-   as a regular `npx playwright test` command.
-
-    ```bash js
-    npx playwright docker test
-    ```
-
-   Note that this command will detect running Docker container, and auto-launch it if needed.
-
-4. Finally, stop background Docker container when you're done working with tests:
-
-    ```bash js
-    npx playwright docker stop
-    ```
diff --git a/docs/src/downloads.md b/docs/src/downloads.md
index 9031b8816e5cfe6939522304998930e19136f930..337dea74f2869578d1f405a30e9325b0b3c8f65e 100644
--- a/docs/src/downloads.md
+++ b/docs/src/downloads.md
@@ -3,9 +3,13 @@ id: downloads
 title: "Downloads"
 ---
 
+:::note
+For uploading files, see the [uploading files](./input.md#upload-files) section.
+:::
 
-
-For every attachment downloaded by the page, [`event: Page.download`] event is emitted. All these attachments are downloaded into a temporary folder. You can obtain the download url, file system path and payload stream using the [Download] object from the event.
+For every attachment downloaded by the page, [`event: Page.download`] event is emitted. All these attachments are going
+to be downloaded into a temporary folder. You can obtain the download url, file system path and payload stream using
+the [Download] object from the event.
 
 You can specify where to persist downloaded files using the [`option: downloadsPath`] option in [`method: BrowserType.launch`].
 
@@ -103,8 +107,9 @@ page.on("download", lambda download: print(download.path()))
 page.Download += (sender, download) => Console.WriteLine(download.Url);
 ```
 
-Note that handling the event forks the control flow and makes the script harder to follow. Your scenario might end while you are downloading a file since your main control flow is not awaiting for this operation to resolve.
+Note that handling the event forks the control flow and makes script harder to follow. Your scenario might end while you
+are downloading a file since your main control flow is not awaiting for this operation to resolve.
 
-:::note
-For uploading files, see the [uploading files](./input.md#upload-files) section.
-:::
+### API reference
+- [Download]
+- [`event: Page.download`]
diff --git a/docs/src/emulation.md b/docs/src/emulation.md
index 12b7a9d6f0132118105235cea2013c89313d624a..786f184209325c75b884951edc224b0c90e64a0a 100644
--- a/docs/src/emulation.md
+++ b/docs/src/emulation.md
@@ -3,69 +3,37 @@ id: emulation
 title: "Emulation"
 ---
 
-With Playwright you can test your app on any browser as well as emulate a real device such as a mobile phone or tablet. Simply configure the devices you would like to emulate and Playwright will simulate the browser behavior such as `"userAgent"`, `"screenSize"`, `"viewport"` and if it `"hasTouch"` enabled. You can also emulate the `"geolocation"`, `"locale"` and `"timezone"` for all tests or for a specific test as well as set the `"permissions"` to show notifications or change the `"colorScheme"`.
+Playwright allows overriding various parameters of the device where the browser is running:
+- viewport size, device scale factor, touch support
+- locale, timezone
+- color scheme
+- geolocation
 
-## Devices
-* langs: js, csharp, python
+Most of these parameters are configured during the browser context construction, but some of them such as viewport size
+can be changed for individual pages.
 
-Playwright comes with a [registry of device parameters](https://github.com/microsoft/playwright/blob/main/packages/playwright-core/src/server/deviceDescriptorsSource.json) using [`property: Playwright.devices`] for selected desktop, tablet and mobile devices. It can be used to simulate browser behavior for a specific device such as user agent, screen size, viewport and if it has touch enabled. All tests will run with the specified device parameters. 
+<!-- TOC -->
 
-```js tab=js-ts
-// playwright.config.ts
-import { type PlaywrightTestConfig, devices } from '@playwright/test'; // import devices
+## Playwright Test vs. Library
+* langs: js
 
-const config: PlaywrightTestConfig = {
-  projects: [
-    {
-      name: 'chromium',
-      use: {
-        ...devices['Desktop Chrome'],
-      },
-    },
-    {
-      name: 'Mobile Safari',
-      use: {
-        ...devices['iPhone 12'],
-      },
-    },
-  ],
-};
-export default config;
-```
-
-```js tab=js-js
-// playwright.config.js
-// @ts-check
-const { devices } = require('@playwright/test'); // require devices
-
-/** @type {import('@playwright/test').PlaywrightTestConfig} */ 
-const config = {
-  projects: [
-    {
-      name: 'chromium',
-      use: {
-        ...devices['Desktop Chrome'],
-      },
-    },
-    {
-      name: 'Mobile Safari',
-      use: {
-        ...devices['iPhone 12'],
-      },
-    },
-  ],
-};
+:::caution
+This guide is for [Playwright Library](./library.md), if you are using Playwright Test (`@playwright/test`) see [here](./test-configuration.md).
+:::
 
-module.exports = config;
-```
+## Devices
+* langs: js, python, csharp
+
+Playwright comes with a registry of device parameters for selected mobile devices. It can be used to simulate browser
+behavior on a mobile device:
 
-```js tab=js-library
+```js
 const { chromium, devices } = require('playwright');
 const browser = await chromium.launch();
 
-const iphone12 = devices['iPhone 12'];
+const pixel2 = devices['Pixel 2'];
 const context = await browser.newContext({
-  ...iphone12,
+  ...pixel2,
 });
 ```
 
@@ -74,10 +42,10 @@ import asyncio
 from playwright.async_api import async_playwright
 
 async def run(playwright):
-    iphone_12 = playwright.devices['iPhone 12']
+    pixel_2 = playwright.devices['Pixel 2']
     browser = await playwright.webkit.launch(headless=False)
     context = await browser.new_context(
-        **iphone_12,
+        **pixel_2,
     )
 
 async def main():
@@ -90,10 +58,10 @@ asyncio.run(main())
 from playwright.sync_api import sync_playwright
 
 def run(playwright):
-    iphone_12 = playwright.devices['iPhone 12']
+    pixel_2 = playwright.devices['Pixel 2']
     browser = playwright.webkit.launch(headless=False)
     context = browser.new_context(
-        **iphone_12,
+        **pixel_2,
     )
 
 with sync_playwright() as playwright:
@@ -113,43 +81,61 @@ class Program
         {
             Headless: False
         });
-        var iphone12 = playwright.Devices["iPhone 12"];
-        await using var context = await browser.NewContextAsync(iphone12);
+        var pixel2 = playwright.Devices["Pixel 2"];
+        await using var context = await browser.NewContextAsync(pixel2);
     }
 }
 ```
 
-## Viewport
+All pages created in the context above will share the same device parameters.
 
-The viewport is included in the device but you can override it for some tests with [`method: Page.setViewportSize`].
+### API reference
+- [`property: Playwright.devices`]
+- [`method: Browser.newContext`]
 
-```js tab=js-ts
-import { test, expect } from '@playwright/test';
+<br/>
 
-// Run tests in this file with portrait-like viewport.
-test.use({
-  viewport: { width: 600, height: 900 },
-});
+## User agent
 
-test('my portrait test', async ({ page }) => {
-  // ...
+All pages created in the context above will share the user agent specified:
+
+```js
+const context = await browser.newContext({
+  userAgent: 'My user agent'
 });
 ```
 
-```js tab=js-js
-const { test, expect } = require('@playwright/test');
+```java
+BrowserContext context = browser.newContext(new Browser.NewContextOptions()
+  .setUserAgent("My user agent"));
+```
 
-// Run tests in this file with portrait-like viewport.
-test.use({ 
-  viewport: { width: 600, height: 900 },
-});
+```python async
+context = await browser.new_context(
+  user_agent='My user agent'
+)
+```
 
-test('my portrait test', async ({ page }) => {
-  // ...
-});
+```python sync
+context = browser.new_context(
+  user_agent='My user agent'
+)
+```
+
+```csharp
+var context = await browser.NewContextAsync(new BrowserNewContextOptions { UserAgent = "My User Agent" });
 ```
 
-```js tab=js-library
+### API reference
+- [`method: Browser.newContext`]
+
+<br/>
+
+## Viewport
+
+Create a context with custom viewport size:
+
+```js
 // Create context with given viewport
 const context = await browser.newContext({
   viewport: { width: 1280, height: 1024 }
@@ -164,33 +150,6 @@ const context = await browser.newContext({
   deviceScaleFactor: 2,
 });
 ```
-The same works inside a describe block.
-
-```js tab=js-ts
-import { test, expect } from '@playwright/test';
-
-test.describe('locale block', () => {
-  // Run tests in this describe block with portrait-like viewport.
-  test.use({ viewport: { width: 600, height: 900 } });
-
-  test('my portrait test', async ({ page }) => {
-    // ...
-  });
-});
-```
-
-```js tab=js-js
-const { test, expect } = require('@playwright/test');
-
-test.describe('locale block', () => {
-  // Run tests in this describe block with portrait-like viewport.
-  test.use({ viewport: { width: 600, height: 900 } });
-
-  test('my portrait test', async ({ page }) => {
-    // ...
-  });
-});
-```
 
 ```java
 // Create context with given viewport
@@ -254,37 +213,16 @@ await using var context = await browser.NewContextAsync(new()
     DeviceScaleFactor = 2
 });
 ```
-## Locale & Timezone
-
-Emulate the user Locale and Timezone which can be set globally for all tests in the config and then overridden for particular tests.
-
-```js tab=js-ts
-import { test, expect } from '@playwright/test';
-
-test.use({ 
-  locale: 'de-DE',
-  timezoneId: 'Europe/Berlin',
-});
-
-test('my test for de lang in Berlin timezone', async ({ page }) => {
-  // ...
-});
-```
 
-```js tab=js-js
-const { test, expect } = require('@playwright/test');
+### API reference
+- [`method: Browser.newContext`]
+- [`method: Page.setViewportSize`]
 
-test.use({ 
-  locale: 'de-DE',
-  timezoneId: 'Europe/Berlin',
-});
+<br/>
 
-test('my test for de lang in Berlin timezone', async ({ page }) => {
-  // ...
-});
-```
+## Locale & timezone
 
-```js tab=js-library
+```js
 // Emulate locale and time
 const context = await browser.newContext({
   locale: 'de-DE',
@@ -322,34 +260,17 @@ await using var context = await browser.NewContextAsync(new()
     TimezoneId = "Europe/Berlin"
 });
 ```
-## Permissions
 
-Allow app to show system notifications.
+### API reference
+- [`method: Browser.newContext`]
 
-```js tab=js-js
-// @ts-check
+<br/>
 
-/** @type {import('@playwright/test').PlaywrightTestConfig} */
-const config = {
-  use: {
-    permissions: ['notifications'],
-  },
-};
+## Permissions
 
-module.exports = config;
-```
+Allow all pages in the context to show system notifications:
 
-```js tab=js-ts
-import type { PlaywrightTestConfig } from '@playwright/test';
-const config: PlaywrightTestConfig = {
-  use: {
-    permissions: ['notifications'],
-  },
-};
-export default config;
-```
-
-```js tab=js-library
+```js
 const context = await browser.newContext({
   permissions: ['notifications'],
 });
@@ -372,32 +293,9 @@ context = browser.new_context(
 )
 ```
 
-Allow test to request current location.
+Grant all pages in the existing context access to current location:
 
-```js tab=js-js
-// @ts-check
-
-/** @type {import('@playwright/test').PlaywrightTestConfig} */
-const config = {
-  use: {
-    permissions: ['geolocation'],
-  },
-};
-
-module.exports = config;
-```
-
-```js tab=js-ts
-import type { PlaywrightTestConfig } from '@playwright/test';
-const config: PlaywrightTestConfig = {
-  use: {
-    permissions: ['geolocation'],
-  },
-};
-export default config;
-```
-
-```js tab=js-library
+```js
 await context.grantPermissions(['geolocation']);
 ```
 
@@ -417,32 +315,9 @@ context.grant_permissions(['geolocation'])
 await context.GrantPermissionsAsync(new[] { "geolocation" });
 ```
 
-Allow notifications for a specific domain.
-
-```js tab=js-js
-// @ts-check
-
-/** @type {import('@playwright/test').PlaywrightTestConfig} */
-const config = {
-  use: {
-    permissions: ['notifications'], {origin: 'https://skype.com'},
-  },
-};
-
-module.exports = config;
-```
-
-```js tab=js-ts
-import type { PlaywrightTestConfig } from '@playwright/test';
-const config: PlaywrightTestConfig = {
-  use: {
-    permissions: ['notifications'], {origin: 'https://skype.com'},
-  },
-};
-export default config;
-```
+Grant notifications access from a specific domain:
 
-```js tab=js-library
+```js
 await context.grantPermissions(['notifications'], {origin: 'https://skype.com'} );
 ```
 
@@ -463,10 +338,9 @@ context.grant_permissions(['notifications'], origin='https://skype.com')
 await context.GrantPermissionsAsync(new[] { "notifications" }, origin: "https://skype.com");
 ```
 
-Revoke all permissions with [`method: BrowserContext.clearPermissions`].
+Revoke all permissions:
 
 ```js
-// Library
 await context.clearPermissions();
 ```
 
@@ -485,42 +359,23 @@ context.clear_permissions()
 ```csharp
 await context.ClearPermissionsAsync();
 ```
-## Geolocation
-
-Create a test with `"geolocation"` permissions granted and geolocation set to a specific area.
 
-```js tab=js-ts
-import { test, expect } from '@playwright/test';
+### API reference
+- [`method: Browser.newContext`]
+- [`method: BrowserContext.grantPermissions`]
+- [`method: BrowserContext.clearPermissions`]
 
-test.use({ 
-  geolocation: { longitude: 48.858455, latitude: 2.294474 },
-  permissions: ['geolocation'],
-});
-
-test('my test with geolocation', async ({ page }) => {
-  // ...
-});
-```
+<br/>
 
-```js tab=js-js
-const { test, expect } = require('@playwright/test');
-
-test.use({ 
-  geolocation: { longitude: 48.858455, latitude: 2.294474 },
-  permissions: ['geolocation'],
-});
+## Geolocation
 
-test('my test with geolocation', async ({ page }) => {
-  // ...
-});
-```
+Create a context with `"geolocation"` permissions granted:
 
-```js tab=js-library
+```js
 const context = await browser.newContext({
   geolocation: { longitude: 48.858455, latitude: 2.294474 },
   permissions: ['geolocation']
 });
-
 ```
 
 ```java
@@ -574,35 +429,18 @@ await context.SetGeolocationAsync(new Geolocation() { Longitude = 48.858455f, La
 ```
 
 **Note** you can only change geolocation for all pages in the context.
-## Color Scheme and Media
 
-Create a test that emulates the users `"colorScheme"`. Supported values are 'light', 'dark', 'no-preference'. You can also emulate the media type with [`method: Page.emulateMedia`].
+### API reference
+- [`method: Browser.newContext`]
+- [`method: BrowserContext.setGeolocation`]
 
-```js tab=js-ts
-import { test, expect } from '@playwright/test';
+<br/>
 
-test.use({ 
-  colorScheme: 'dark' // or 'light'
-});
+## Color scheme and media
 
-test('my test with dark mode', async ({ page }) => {
-  // ...
-});
-```
-
-```js tab=js-js
-const { test, expect } = require('@playwright/test');
-
-test.use({ 
-  colorScheme: 'dark' // or 'light'
-});
+Create a context with dark or light mode. Pages created in this context will follow this color scheme preference.
 
-test('my test with dark mode', async ({ page }) => {
-  // ...
-});
-```
-
-```js tab=js-library
+```js
 // Create context with dark mode
 const context = await browser.newContext({
   colorScheme: 'dark' // or 'light'
@@ -697,82 +535,7 @@ await page.EmulateMediaAsync(new()
     Media = Media.Print
 });
 ```
-## User Agent
 
-The User Agent is included in the device and therefore you  will rarely need to change it however if you do need to test a different user agent you can override it with the `userAgent` property.
-
-```js tab=js-ts
-import { test, expect } from '@playwright/test';
-
-test.use({ userAgent: 'My user agent'});
-
-test('my user agent test', async ({ page }) => {
-  // ...
-});
-```
-
-```js tab=js-js
-const { test, expect } = require('@playwright/test');
-
-test.use({ userAgent: 'My user agent' });
-
-test('my user agent test', async ({ page }) => {
-  // ...
-});
-```
-
-```js tab=js-library
-const context = await browser.newContext({
-  userAgent: 'My user agent'
-});
-```
-
-```java
-BrowserContext context = browser.newContext(new Browser.NewContextOptions()
-  .setUserAgent("My user agent"));
-```
-
-```python async
-context = await browser.new_context(
-  user_agent='My user agent'
-)
-```
-
-```python sync
-context = browser.new_context(
-  user_agent='My user agent'
-)
-```
-
-```csharp
-var context = await browser.NewContextAsync(new BrowserNewContextOptions { UserAgent = "My User Agent" });
-```
-## JavaScript Enabled
-
-Emulate a user scenario where JavaScript is disabled.
-
-```js tab=js-ts
-import { test, expect } from '@playwright/test';
-
-test.use({ javaScriptEnabled: false });
-
-test('test with no JavaScript', async ({ page }) => {
-  // ...
-});
-```
-
-```js tab=js-js
-const { test, expect } = require('@playwright/test');
-
-test.use({ javaScriptEnabled: false });
-
-test('test with no JavaScript', async ({ page }) => {
-  // ...
-});
-```
-
-```js tab=js-library
-const context = await browser.newContext({
-  javaScriptEnabled: false
-});
-```
\ No newline at end of file
+### API reference
+- [`method: Browser.newContext`]
+- [`method: Page.emulateMedia`]
\ No newline at end of file
diff --git a/docs/src/events.md b/docs/src/events.md
index f0f93581f764eef0df982012af319a92eb76a003..c2ac8961c42a9fe3a01572c0592ffd8c9ced7295 100644
--- a/docs/src/events.md
+++ b/docs/src/events.md
@@ -3,13 +3,18 @@ id: events
 title: "Events"
 ---
 
-Playwright allows listening to various types of events happening on the web page, such as network requests, creation of child pages, dedicated workers etc. There are several ways to subscribe to such events such as waiting for events or adding or removing event listeners.
+Playwright allows listening to various types of events happening in the web page, such
+as network requests, creation of child pages, dedicated workers etc. There are several
+ways to subscribe to such events:
+
+<!-- TOC -->
 
 ## Waiting for event
 
-Most of the time, scripts will need to wait for a particular event to happen. Below are some of the typical event awaiting patterns.
+Most of the time, scripts will need to wait for a particular event to happen. Below are some of the typical event
+awaiting patterns.
 
-Wait for a request with the specified url using [`method: Page.waitForRequest`]:
+Wait for a request with the specified url:
 
 ```js
 // Note that Promise.all prevents a race condition
@@ -97,7 +102,8 @@ await popup.GotoAsync("https://wikipedia.org");
 
 ## Adding/removing event listener
 
-Sometimes, events happen in random time and instead of waiting for them, they need to be handled. Playwright supports traditional language mechanisms for subscribing and unsubscribing from the events:
+Sometimes, events happen in random time and instead of waiting for them, they need to be handled.
+Playwright supports traditional language mechanisms for subscribing and unsubscribing from the events:
 
 ```js
 page.on('request', request => console.log(`Request sent: ${request.url()}`));
@@ -167,7 +173,7 @@ await page.GotoAsync("https://www.openstreetmap.org/");
 ## Adding one-off listeners
 * langs: js, python, java
 
-If a certain event needs to be handled once, there is a convenience API for that:
+If certain event needs to be handled once, there is a convenience API for that:
 
 ```js
 page.once('dialog', dialog => dialog.accept("2021"));
@@ -188,3 +194,10 @@ await page.evaluate("prompt('Enter a number:')")
 page.once("dialog", lambda dialog: dialog.accept("2021"))
 page.evaluate("prompt('Enter a number:')")
 ```
+
+### API reference
+
+- [Browser]
+- [BrowserContext]
+- [Page]
+- [Worker]
diff --git a/docs/src/extensibility.md b/docs/src/extensibility.md
index e8f21c64fb08f122d39906127e7b0cafc981e6be..2910c3f4d431d3637b798b6e456f3c891410f6f5 100644
--- a/docs/src/extensibility.md
+++ b/docs/src/extensibility.md
@@ -53,7 +53,7 @@ const buttonCount = await page.locator('tag=button').count();
 ```
 
 ```java
-// Must be a script that evaluates to a selector engine instance.  The script is evaluated in the page context.
+// Must be a script that evaluates to a selector engine instance.
 String createTagNameEngine = "{\n" +
   "  // Returns the first element matching given selector in the root's subtree.\n" +
   "  query(root, selector) {\n" +
diff --git a/docs/src/frames.md b/docs/src/frames.md
index d587930ad3007b72bd15e499da7d0ba9c7c9a67d..5808eda1237aa31c20272f66c3579ecc2000b0d7 100644
--- a/docs/src/frames.md
+++ b/docs/src/frames.md
@@ -3,6 +3,10 @@ id: frames
 title: "Frames"
 ---
 
+<!-- TOC -->
+
+## Frames
+
 A [Page] can have one or more [Frame] objects attached to it. Each page has a main frame and page-level interactions
 (like `click`) are assumed to operate in the main frame.
 
diff --git a/docs/src/getting-started-vscode-js.md b/docs/src/getting-started-vscode-js.md
index c416773a553a6ba2e79883a577ffe476da048306..b33fb4158f311a3619e876a21090074dc5a26f15 100644
--- a/docs/src/getting-started-vscode-js.md
+++ b/docs/src/getting-started-vscode-js.md
@@ -9,9 +9,9 @@ Get started by installing Playwright and generating a test to see it in action.
 
 ## Installation
 
-Install the [VS Code extension from the marketplace](https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright) or from the extensions tab in VS Code.
+Install the [VS Code extension from the marketplace](https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright).
 
-<img width="1099" alt="VS Code extension for Playwright" src="https://user-images.githubusercontent.com/13063165/188664251-e6e28648-25fb-45bb-98f5-ac6044938475.png" />
+<img width="535" alt="image" src="https://user-images.githubusercontent.com/13063165/182146928-b2a46ce5-3008-409c-be10-d2b255bd5e91.jpeg"></img>
 
 Once installed, open the command panel and type:
 
@@ -19,39 +19,32 @@ Once installed, open the command panel and type:
 Install Playwright
 ```
 
-<img width="1093" alt="Install Playwright in VS code" src="https://user-images.githubusercontent.com/13063165/188664853-7b3b610b-70ce-4674-ac51-3f2b48dcc589.png" />
+<img width="538" alt="image" src="https://user-images.githubusercontent.com/13063165/177199115-ce90eb84-f12a-4b95-bd3a-17ff870fcec2.png"></img>
+
+Select "Test: Install Playwright" and Choose the browsers you would like to run your tests on. These can be later configured in the [playwright.config](./test-configuration.md) file. You can also choose if you would like to have a GitHub Actions setup to run your tests on CI.
 
-Select **Test: Install Playwright** and Choose the browsers you would like to run your tests on. These can be later configured in the [playwright.config](./test-configuration.md) file. You can also choose if you would like to have a GitHub Actions setup to [run your tests on CI](./ci-intro.md).
 
-<img width="1093" alt="choose browsers for Playwright in VS Code" src="https://user-images.githubusercontent.com/13063165/188664742-371f2321-67a1-4799-99ba-253a125de838.png" />
 
 ## Running Tests
 
 You can run a single test by clicking the green triangle next to your test block to run your test. Playwright will run through each line of the test and when it finishes you will see a green tick next to your test block as well as the time it took to run the test.
 
-<img width="1272" alt="Running Tests in VS Code" src="https://user-images.githubusercontent.com/13063165/188641041-e7f49b0e-758c-4154-b719-b873ba58dca4.png" />
-
-### Run Tests and Show Browsers
-
-You can also run your tests and show the browsers by selecting the option **Show Browsers** in the testing sidebar. Then when you click the green triangle to run your test the browser will open and you will visually see it run through your test. Leave this selected if you want browsers open for all your tests or uncheck it if you prefer your tests to run in headless mode with no browser open. 
 
-<img width="1394" alt="Run Tests and Show Browsers in VS Code" src="https://user-images.githubusercontent.com/13063165/188662739-5b191b2d-7055-4f33-9399-bc8626163293.png" />
 
-Use the **Close all browsers** button to close all browsers.
-
-<img width="1272" alt="Close Browsers in VS Code" src="https://user-images.githubusercontent.com/13063165/188663381-c0293d02-75f9-46d4-852f-43aebe508d4a.png" />
+<img width="750" alt="image" src="https://user-images.githubusercontent.com/13063165/182153398-101bf809-deca-40f8-9ac7-314eab2ff119.png" />
 
 ### View and Run All Tests
 
 View all tests in the testing sidebar and extend the tests by clicking on each test. Tests that have not been run will not have the green check next to them. Run all tests by clicking on the white triangle as you hover over the tests in the testing sidebar.
 
-<img width="1272" alt="View and Run All Tests in VS Code" src="https://user-images.githubusercontent.com/13063165/188641364-3bfa74f8-2e8a-45e5-92e1-4cbee0660e8a.png" />
+<img width="755" alt="image" src="https://user-images.githubusercontent.com/13063165/182154055-6ff7af95-3787-475e-b0c0-8aa521aaa31b.png" />
+
 
 ### Run Tests on Specific Browsers
 
 The VS Code test runner runs your tests on the default browser of Chrome. To run on other/multiple browsers click the play button's dropdown and choose the option of "Select Default Profile" and select the browsers you wish to run your tests on.
 
-<img width="1272" alt="Run Tests on Specific Browsers in VS Code" src="https://user-images.githubusercontent.com/13063165/188642000-f3c59179-8b44-40cb-a573-c2d9965737a6.png" />
+<img width="753" alt="image" src="https://user-images.githubusercontent.com/13063165/182154251-89f8d4f1-a9c3-42bc-9659-7db6412e96fe.png" />
 
 ## Debugging Tests
 
@@ -61,51 +54,38 @@ With the VS Code extension you can debug your tests right in VS Code see error m
 
 If your test fails VS Code will show you error messages right in the editor showing what was expected, what was received as well as a complete call log.
 
-<img width="1272" alt="Error Messages in VS Code" src="https://user-images.githubusercontent.com/13063165/188642424-37da9e6c-b24a-4755-b14c-ceefa59483d2.png" />
+<img width="848" alt="image" src="https://user-images.githubusercontent.com/13063165/182155225-d91ec237-f69e-4ace-9a5f-a149800aba75.png" />
 
 ### Run in Debug Mode
 
 To set a breakpoint click next to the line number where you want the breakpoint to be until a red dot appears. Run the tests in debug mode by right clicking on the line next to the test you want to run. A browser window will open and the test will run and pause at where the breakpoint is set.
 
-<img width="1272" alt="Run tests in Debug Mode in VS Code" src="https://user-images.githubusercontent.com/13063165/188642947-48f4eeaa-486d-4657-9819-63ad742ee7e2.png" />
+<img width="847" alt="image" src="https://user-images.githubusercontent.com/13063165/182156149-f683f62d-9555-4ce2-93d2-e80de8087411.png" />
 
 
 ### Live Debugging
 
 You can modify your test right in VS Code while debugging and Playwright will highlight the selector in the browser. This is a great way of seeing if the selector exits or if there is more than one result. You can step through the tests, pause the test and rerun the tests from the menu in VS Code.
 
-
-<img width="1394" alt="Live debugging in VS Code" src="https://user-images.githubusercontent.com/13063165/188644314-89967ab8-2415-4e55-bbca-b3840d347ca4.png" />
-
+<img width="858" alt="image" src="https://user-images.githubusercontent.com/13063165/182157241-c8da5eff-edbc-4ae1-80e3-8e42fa5fe659.png" />
 
 
 ## Generating Tests
 
 CodeGen will auto generate your tests for you as you perform actions in the browser and is a great way to quickly get started. The viewport for the browser window is set to a specific width and height. See the [configuration guide](./test-configuration.md) to change the viewport or emulate different environments.
-### Record a New Test
-
-To record a test click on the **Record new** button from the Testing sidebar. This will create a `test-1.spec.ts` file as well as open up a browser window. In the browser go to the URL you wish to test and start clicking around. Playwright will record your actions and generate a test for you. Once you are done recording click the **cancel** button or close the browser window. You can then inspect your `test-1.spec.ts` file and see your generated test.
-
 
-<img width="1272" alt="Recording a Test in VS Code" src="https://user-images.githubusercontent.com/13063165/188644755-2ab9c826-79a9-4c52-8963-26bb9e853170.png" />
+### Recording a Test
 
-### Record a Test Starting From Another Test
+To record a test click on the record icon. This will create a `test-1.spec.ts` file as well as open up a browser window.
 
-Use the **Record from here** button to record a test from a specific line in your test file. This will open up a browser window and record the test from the line you selected. A new test file will now be created with the name `test-2.spec.ts` and will include the test code up to the selected line of the test file where you ran the **Record from here** button. You can then continue to generate the new test by clicking around in the browser window. 
 
-<img width="1272" alt="Record a test from here in VS Code" src="https://user-images.githubusercontent.com/13063165/188654397-dc6e8677-e957-48ca-906e-8dd38da97c3b.png" />
+<img width="798" alt="image" src="https://user-images.githubusercontent.com/13063165/182149486-a30fbd3f-5e88-4ac2-b1df-4e33d4a893c7.png" />
 
 ### Selector Highlighting
 
 As you interact with the page Codegen will generate the test for you in the newly created file in VS Code. When you hover over an element Playwright will highlight the element and show the [selector](./selectors.md) underneath it.
 
-<img width="1394" alt="Selector Highlighting in VS Code" src="https://user-images.githubusercontent.com/13063165/188645469-cd9e925a-fb75-4250-bbdd-f14f2338ba34.png" />
-
-### Picking a Selector
-
-Pick a selector and copy it into your test file by clicking the **Pick selector** button form the testing sidebar. Then in the browser click the selector you require and it will now show up in the **Pick selector** box in VS Code. Press 'enter' on your keyboard to copy the selector into the clipboard and then paste anywhere in your code. Or press 'escape' if you want to cancel.
-
-<img width="1394" alt="Selector Highlighting in VS Code" src="https://user-images.githubusercontent.com/13063165/188645977-2d5d1a50-d0f0-4d2e-ba30-59899bd3c77c.png" />
+<img width="860" alt="image" src="https://user-images.githubusercontent.com/13063165/182151374-03273172-38cd-4f27-add5-cb3d3cdc7bcd.png" />
 
 
 
diff --git a/docs/src/input.md b/docs/src/input.md
index 9121b19601bcf2296fa5c4011b420b573fba4e0f..f58f77aa2184665c4f7081e1b400a35fff9db9c8 100644
--- a/docs/src/input.md
+++ b/docs/src/input.md
@@ -1,13 +1,13 @@
 ---
 id: input
-title: "Actions"
+title: "Input"
 ---
 
-Playwright can interact with HTML Input elements such as text inputs, checkboxes, radio buttons, select options, mouse clicks, type characters, keys and shortcuts as well as upload files and focus elements.
+<!-- TOC -->
 
 ## Text input
 
-Using [`method: Locator.fill`] is the easiest way to fill out the form fields. It focuses the element and triggers an `input` event with the entered text. It works for `<input>`, `<textarea>`, `[contenteditable]` and `<label>` associated with an input or textarea.
+This is the easiest way to fill out the form fields. It focuses the element and triggers an `input` event with the entered text. It works for `<input>`, `<textarea>`, `[contenteditable]` and `<label>` associated with an input or textarea.
 
 ```js
 // Text input
@@ -94,9 +94,17 @@ await page.Locator("#local").FillAsync("2020-03-02T05:15");
 await page.Locator("text=First Name").FillAsync("Peter");
 ```
 
+### API reference
+
+- [`method: Locator.fill`]
+- [`method: Page.fill`]
+- [`method: Frame.fill`]
+
+<br/>
+
 ## Checkboxes and radio buttons
 
-Using [`method: Locator.setChecked`] is the easiest way to check and uncheck a checkbox or a radio button. This method can be used with `input[type=checkbox]`, `input[type=radio]`, `[role=checkbox]` or `label` associated with checkbox or radio button.
+This is the easiest way to check and uncheck a checkbox or a radio button. This method can be used with `input[type=checkbox]`, `input[type=radio]`, `[role=checkbox]` or `label` associated with checkbox or radio button.
 
 ```js
 // Check the checkbox
@@ -168,9 +176,20 @@ await page.Locator("#subscribe-label").UncheckAsync();
 await page.Locator("text=XL").CheckAsync();
 ```
 
+### API reference
+
+- [`method: Locator.check`]
+- [`method: Locator.isChecked`]
+- [`method: Locator.uncheck`]
+- [`method: Page.check`]
+- [`method: Page.isChecked`]
+- [`method: Page.uncheck`]
+
+<br/>
+
 ## Select options
 
-Selects one or multiple options in the `<select>` element with [`method: Locator.selectOption`].
+Selects one or multiple options in the `<select>` element.
 You can specify option `value`, or `label` to select. Multiple options can be selected.
 
 ```js
@@ -228,6 +247,14 @@ await page.Locator("select#colors").SelectOptionAsync(new SelectOptionValue { La
 await page.Locator("select#colors").SelectOptionAsync(new[] { "blue", "green", "red" });
 ```
 
+### API reference
+
+- [`method: Locator.selectOption`]
+- [`method: Page.selectOption`]
+- [`method: Frame.selectOption`]
+
+<br/>
+
 ## Mouse click
 
 Performs a simple human click.
@@ -367,7 +394,7 @@ await page.Locator("button#submit").ClickAsync(new() { Force = true });
 
 #### Programmatic click
 
-If you are not interested in testing your app under the real conditions and want to simulate the click by any means possible, you can trigger the [`HTMLElement.click()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click) behavior via simply dispatching a click event on the element with [`method: Locator.dispatchEvent`]:
+If you are not interested in testing your app under the real conditions and want to simulate the click by any means possible, you can trigger the [`HTMLElement.click()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click) behavior via simply dispatching a click event on the element:
 
 ```js
 await page.locator('button#submit').dispatchEvent('click');
@@ -389,9 +416,26 @@ page.locator('button#submit').dispatch_event('click')
 await page.Locator("button#submit").DispatchEventAsync("click");
 ```
 
+### API reference
+
+- [`method: Locator.click`]
+- [`method: Page.click`]
+- [`method: Frame.click`]
+- [`method: Locator.dblclick`]
+- [`method: Page.dblclick`]
+- [`method: Frame.dblclick`]
+- [`method: Locator.hover`]
+- [`method: Page.hover`]
+- [`method: Frame.hover`]
+- [`method: Locator.dispatchEvent`]
+- [`method: Page.dispatchEvent`]
+- [`method: Frame.dispatchEvent`]
+
+<br/>
+
 ## Type characters
 
-Type into the field character by character, as if it was a user with a real keyboard with [`method: Locator.type`].
+Type into the field character by character, as if it was a user with a real keyboard.
 
 ```js
 // Type character by character
@@ -424,6 +468,15 @@ This method will emit all the necessary keyboard events, with all the `keydown`,
 Most of the time, [`method: Page.fill`] will just work. You only need to type characters if there is special keyboard handling on the page.
 :::
 
+### API reference
+
+- [`method: Locator.type`]
+- [`method: Page.type`]
+- [`method: Frame.type`]
+- [`method: Keyboard.type`]
+
+<br/>
+
 ## Keys and shortcuts
 
 ```js
@@ -481,7 +534,7 @@ await page.Locator("#name").PressAsync("Control+ArrowRight");
 await page.Locator("#value").PressAsync("$");
 ```
 
-The [`method: Locator.press`] method focuses the selected element and produces a single keystroke. It accepts the logical key names that are emitted in the [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) property of the keyboard events:
+This method focuses the selected element and produces a single keystroke. It accepts the logical key names that are emitted in the [keyboardEvent.key](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) property of the keyboard events:
 
 ```
 Backquote, Minus, Equal, Backslash, Backspace, Tab, Delete, Escape,
@@ -540,9 +593,19 @@ Shortcuts such as `"Control+o"` or `"Control+Shift+T"` are supported as well. Wh
 
 Note that you still need to specify the capital `A` in `Shift-A` to produce the capital character. `Shift-a` produces a lower-case one as if you had the `CapsLock` toggled.
 
+
+### API reference
+
+- [`method: Locator.press`]
+- [`method: Page.press`]
+- [`method: Frame.press`]
+- [`method: Keyboard.press`]
+
+<br/>
+
 ## Upload files
 
-You can select input files for upload using the [`method: Locator.setInputFiles`] method. It expects first argument to point to an [input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) with the type `"file"`. Multiple files can be passed in the array. If some of the file paths are relative, they are resolved relative to the current working directory. Empty array clears the selected files.
+You can select input files for upload using the [`method: Page.setInputFiles`] method. It expects first argument to point to an [input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) with the type `"file"`. Multiple files can be passed in the array. If some of the file paths are relative, they are resolved relative to the current working directory. Empty array clears the selected files.
 
 ```js
 // Select one file
@@ -675,9 +738,17 @@ var fileChooser = page.RunAndWaitForFileChooserAsync(async () =>
 await fileChooser.SetFilesAsync("myfile.pdf");
 ```
 
+### API reference
+- [FileChooser]
+- [`method: Locator.setInputFiles`]
+- [`method: Page.setInputFiles`]
+- [`method: Frame.setInputFiles`]
+
+<br/>
+
 ## Focus element
 
-For the dynamic pages that handle focus events, you can focus the given element with [`method: Locator.focus`].
+For the dynamic pages that handle focus events, you can focus the given element.
 
 ```js
 await page.locator('input#name').focus();
@@ -698,3 +769,10 @@ page.locator('input#name').focus()
 ```csharp
 await page.Locator("input#name").FocusAsync();
 ```
+
+### API reference
+
+- [`method: Locator.focus`]
+- [`method: Page.focus`]
+- [`method: Frame.focus`]
+<br/>
diff --git a/docs/src/intro-csharp.md b/docs/src/intro-csharp.md
index 0b654d04a070d1de8e0453da5546fcc08eb8cf1f..1fe8423baa4fc022cfdee9734886a5ff511e6f46 100644
--- a/docs/src/intro-csharp.md
+++ b/docs/src/intro-csharp.md
@@ -98,10 +98,9 @@ using NUnit.Framework;
 namespace PlaywrightTests;
 
 [Parallelizable(ParallelScope.Self)]
-[TestFixture]
 public class Tests : PageTest
 {
-    [PlaywrightTest]
+    [Test]
     public async Task HomepageHasPlaywrightInTitleAndGetStartedLinkLinkingtoTheIntroPage()
     {
         await Page.GotoAsync("https://playwright.dev");
@@ -136,7 +135,7 @@ namespace PlaywrightTests;
 [TestClass]
 public class UnitTest1 : PageTest
 {
-    [PlaywrightTestMethod]
+    [TestMethod]
     public async Task HomepageHasPlaywrightInTitleAndGetStartedLinkLinkingtoTheIntroPage()
     {
         await Page.GotoAsync("https://playwright.dev");
diff --git a/docs/src/intro-java.md b/docs/src/intro-java.md
index 4aac1d83e48e5f12f44f9dc725979555dc253580..8f7147e8040e044ce9aa4102285de8144aecb5fb 100644
--- a/docs/src/intro-java.md
+++ b/docs/src/intro-java.md
@@ -59,7 +59,7 @@ public class Example {
     <dependency>
       <groupId>com.microsoft.playwright</groupId>
       <artifactId>playwright</artifactId>
-      <version>1.27.0</version>
+      <version>1.25.0</version>
     </dependency>
   </dependencies>
   <build>
diff --git a/docs/src/intro-js.md b/docs/src/intro-js.md
index c55208492a40836bcad100e98c8d8bdeb1d9ca06..77a93b09dce9865260a7e4d7086827d1a36c08d2 100644
--- a/docs/src/intro-js.md
+++ b/docs/src/intro-js.md
@@ -21,8 +21,7 @@ Get started by installing Playwright using npm or yarn. Alternatively you can al
   defaultValue="npm"
   values={[
     {label: 'npm', value: 'npm'},
-    {label: 'yarn', value: 'yarn'},
-    {label: 'pnpm', value: 'pnpm'}
+    {label: 'yarn', value: 'yarn'}
   ]
 }>
 <TabItem value="npm">
@@ -39,14 +38,6 @@ npm init playwright@latest
 yarn create playwright
 ```
 
-</TabItem>
-  
-<TabItem value="pnpm">
-
-```bash
-pnpm dlx create-playwright
-```
-
 </TabItem>
 </Tabs>
 
@@ -100,5 +91,5 @@ npx playwright show-report
 
 - [Write tests using web first assertions, page fixtures and locators](./writing-tests.md)
 - [Run single tests, multiple tests, headed mode](./running-tests.md)
-- [Generate tests with Codegen](./codegen-intro.md)
-- [See a trace of your tests](./trace-viewer-intro.md)
+- [Generate tests with Codegen](./codegen.md)
+- [See a trace of your tests](./trace-viewer-intro.md)
\ No newline at end of file
diff --git a/docs/src/library-csharp.md b/docs/src/library-csharp.md
index d0c4c69f6d0a52af772aa8da2d8731e911c2dc61..e0f737c492eeea90a9692a69161ff457f8061b55 100644
--- a/docs/src/library-csharp.md
+++ b/docs/src/library-csharp.md
@@ -34,10 +34,7 @@ using var playwright = await Playwright.CreateAsync();
 await using var browser = await playwright.Chromium.LaunchAsync();
 var page = await browser.NewPageAsync();
 await page.GotoAsync("https://playwright.dev/dotnet");
-await page.ScreenshotAsync(new()
-{
-    Path = "screenshot.png"
-});
+await page.ScreenshotAsync(new PageScreenshotOptions { Path = "screenshot.png" });
 ```
 
 Now run it.
diff --git a/docs/src/library-js.md b/docs/src/library-js.md
index 3cebaadcb2b98ab54c6224a5d290491cd72138bc..e4925db6f94c567e3dc1c9b5c086f0daffca45ec 100644
--- a/docs/src/library-js.md
+++ b/docs/src/library-js.md
@@ -117,7 +117,6 @@ The key differences to note are as follows:
 | | Library | Test |
 | - | - | - |
 | Installation | `npm install playwright` | `npm init playwright@latest` (note `install` vs. `init`) |
-| Install browsers | Chromium, Firefox, WebKit are installed by default | `npx playwright install` or `npx playwright install chromium` for a single one |
 | `import`/`require` name | `playwright` | `@playwright/test` |
 | Initialization | Explicitly need to: <ol><li>Pick a browser to use (e.g. `chromium`)</li><li>Create `browser` ([`method: BrowserType.launch`])</li><li>Create a `context` ([`method: Browser.newContext`]), <em>and</em> pass any context options explcitly (e.g. `devices['iPhone 11']`</li><li>Create a `page` ([`method: BrowserContext.newPage`])</li></ol> | An isolated `page` and `context` are provided to each test out-of the box (along with any other [built-in fixtures](./test-fixtures.md#built-in-fixtures)). No explicit creation. If referenced by the test in it's arguments, the Test Runner will create them for the test. (i.e. lazy-initialization) |
 | Assertions | No built-in Web-First Assertions | [Web-First assertions](./test-assertions.md) like: <ul><li>[`method: PageAssertions.toHaveTitle`]</li><li>[`method: PageAssertions.toHaveScreenshot#1`]</li></ul> which auto-wait and retry for the condition to be met.|
diff --git a/docs/src/locators.md b/docs/src/locators.md
index 8ee0e307affae7526ff13ae5e40c5b6e0ffb0da6..e3018b803c844c72ed6032cc065223b420d4f2a7 100644
--- a/docs/src/locators.md
+++ b/docs/src/locators.md
@@ -341,7 +341,7 @@ rowLocator
     .screenshot();
 ```
 ```python async
-row_locator = page.locator("tr")
+row_locator = page.lsocator("tr")
 # ...
 await row_locator
     .filter(has_text="text in column 1")
@@ -349,7 +349,7 @@ await row_locator
     .screenshot()
 ```
 ```python sync
-row_locator = page.locator("tr")
+row_locator = page.lsocator("tr")
 # ...
 row_locator
     .filter(has_text="text in column 1")
diff --git a/docs/src/mock-js.md b/docs/src/mock-js.md
index 4510ac4bba638925e134529e715cd94aba2dfe07..ce8726ad3fbd1f54b45ba207e7fe53d07d01605f 100644
--- a/docs/src/mock-js.md
+++ b/docs/src/mock-js.md
@@ -5,7 +5,7 @@ title: "Mock APIs"
 
 Playwright provides native support for most of the browser features. However, there are some experimental APIs
 and APIs which are not (yet) fully supported by all browsers. Playwright usually doesn't provide dedicated
-automation APIs in such cases. You can use mocks to test the behavior of your application in such cases. This guide
+automation APIs in such cases. You can use mocks to test behavior of your application in such cases. This guide
 gives a few examples.
 
 <!-- TOC -->
@@ -18,7 +18,8 @@ battery status.
 
 ## Creating mocks
 
-Since the page may be calling the API very early while loading it's important to setup all the mocks before the page started loading. The easiest way to achieve that is to call [`method: Page.addInitScript`]:
+Since the page may be calling the API very early while loading it's important to setup all the mocks before the 
+page started loading. The easiest way to achieve that is to call [`method: Page.addInitScript`]:
 
 ```js
 await page.addInitScript(() => {
diff --git a/docs/src/pom.md b/docs/src/pom.md
index dfa42d06de1df1c38872a564dc8a09aedb8a4d31..de866f1a2e5d95acd9b9fee15a563f2615292bce 100644
--- a/docs/src/pom.md
+++ b/docs/src/pom.md
@@ -2,198 +2,54 @@
 id: pom
 title: "Page Object Models"
 ---
-Large test suites can be structured to optimize ease of authoring and maintenance. Page object models are one such approach to structure your test suite. 
 
-A page object represents a part of your web application. An e-commerce web application might have a home page, a listings page and a checkout page. Each of them can be represented by page object models.
+Large test suites can be structured to optimize ease of authoring and maintenance. Page object models are one such
+approach to structure your test suite.
 
-Page objects **simplify authoring** by creating a higher-level API which suits your application and **simplify maintenance** by capturing element selectors in one place and create reusable code to avoid repetition.
+<!-- TOC -->
 
-## Implementation
+## Playwright Test vs. Library
 * langs: js
 
-We will create a `PlaywrightDevPage` helper class to encapsulate common operations on the `playwright.dev` page. Internally, it will use the `page` object.
-
-```js tab=js-js
-// playwright-dev-page.js
-const { expect } = require('@playwright/test');
+:::caution
+This guide is for [Playwright Library](./library.md), if you are using Playwright Test (`@playwright/test`) see [here](./test-pom.md).
+:::
 
-exports.PlaywrightDevPage = class PlaywrightDevPage {
+## Introduction
 
-  /**
-   * @param {import('@playwright/test').Page} page
-   */
-  constructor(page) {
-    this.page = page;
-    this.getStartedLink = page.locator('a', { hasText: 'Get started' });
-    this.gettingStartedHeader = page.locator('h1', { hasText: 'Installation' });
-    this.pomLink = page.locator('li', { hasText: 'Writing Tests' }).locator('a', { hasText: 'Page Object Model' });
-    this.tocList = page.locator('article div.markdown ul > li > a');
-  }
+A page object represents a part of your web application. An e-commerce web application might have a home page, a
+listings page and a checkout page. Each of them can be represented by page object models.
 
-  async goto() {
-    await this.page.goto('https://playwright.dev');
-  }
+Page objects **simplify authoring**. They create a higher-level API which suits your application.
 
-  async getStarted() {
-    await this.getStartedLink.first().click();
-    await expect(this.gettingStartedHeader).toBeVisible();
-  }
+Page objects **simplify maintenance**. They capture element selectors in one place and create reusable code to avoid
+repetition.
 
-  async pageObjectModel() {
-    await this.getStarted();
-    await this.pomLink.click();
-  }
-}
-```
-
-```js tab=js-ts
-// playwright-dev-page.ts
-import { expect, Locator, Page } from '@playwright/test';
-
-export class PlaywrightDevPage {
-  readonly page: Page;
-  readonly getStartedLink: Locator;
-  readonly gettingStartedHeader: Locator;
-  readonly pomLink: Locator;
-  readonly tocList: Locator;
-
-  constructor(page: Page) {
-    this.page = page;
-    this.getStartedLink = page.locator('a', { hasText: 'Get started' });
-    this.gettingStartedHeader = page.locator('h1', { hasText: 'Installation' });
-    this.pomLink = page.locator('li', { hasText: 'Playwright Test' }).locator('a', { hasText: 'Page Object Model' });
-    this.tocList = page.locator('article div.markdown ul > li > a');
-  }
-
-  async goto() {
-    await this.page.goto('https://playwright.dev');
-  }
-
-  async getStarted() {
-    await this.getStartedLink.first().click();
-    await expect(this.gettingStartedHeader).toBeVisible();
-  }
+## Implementation
 
-  async pageObjectModel() {
-    await this.getStarted();
-    await this.pomLink.click();
-  }
-}
-```
+Page object models wrap over a Playwright [Page].
 
-```js tab=js-library
-// models/PlaywrightDevPage.js
-class PlaywrightDevPage {
+```js
+// models/Search.js
+class SearchPage {
   /**
    * @param {import('playwright').Page} page 
    */
   constructor(page) {
     this.page = page;
-    this.getStartedLink = page.locator('a', { hasText: 'Get started' });
-    this.gettingStartedHeader = page.locator('h1', { hasText: 'Installation' });
-    this.pomLink = page.locator('li', { hasText: 'Playwright Test' }).locator('a', { hasText: 'Page Object Model' });
-    this.tocList = page.locator('article div.markdown ul > li > a');
+    this.searchTermInput = page.locator('[aria-label="Enter your search term"]');
   }
-  async getStarted() {
-    await this.getStartedLink.first().click();
-    await expect(this.gettingStartedHeader).toBeVisible();
+  async navigate() {
+    await this.page.goto('https://bing.com');
   }
-
-  async pageObjectModel() {
-    await this.getStarted();
-    await this.pomLink.click();
+  async search(text) {
+    await this.searchTermInput.fill(text);
+    await this.searchTermInput.press('Enter');
   }
 }
-module.exports = { PlaywrightDevPage };
-```
-
-Now we can use the `PlaywrightDevPage` class in our tests.
-
-```js tab=js-js
-// example.spec.js
-const { test, expect } = require('@playwright/test');
-const { PlaywrightDevPage } = require('./playwright-dev-page');
-
-test('getting started should contain table of contents', async ({ page }) => {
-  const playwrightDev = new PlaywrightDevPage(page);
-  await playwrightDev.goto();
-  await playwrightDev.getStarted();
-  await expect(playwrightDev.tocList).toHaveText([
-    `How to install Playwright`,
-    `What's Installed`,
-    `How to run the example test`,
-    `How to open the HTML test report`,
-    `Write tests using web first assertions, page fixtures and locators`,
-    `Run single tests, multiple tests, headed mode`,
-    `Generate tests with Codegen`,
-    `See a trace of your tests`
-  ]);
-});
-
-test('should show Page Object Model article', async ({ page }) => {
-  const playwrightDev = new PlaywrightDevPage(page);
-  await playwrightDev.goto();
-  await playwrightDev.pageObjectModel();
-  await expect(page.locator('article')).toContainText('Page Object Model is a common pattern');
-});
+module.exports = { SearchPage };
 ```
 
-```js tab=js-ts
-// example.spec.ts
-import { test, expect } from '@playwright/test';
-import { PlaywrightDevPage } from './playwright-dev-page';
-
-test('getting started should contain table of contents', async ({ page }) => {
-  const playwrightDev = new PlaywrightDevPage(page);
-  await playwrightDev.goto();
-  await playwrightDev.getStarted();
-  await expect(playwrightDev.tocList).toHaveText([
-    `How to install Playwright`,
-    `What's Installed`,
-    `How to run the example test`,
-    `How to open the HTML test report`,
-    `Write tests using web first assertions, page fixtures and locators`,
-    `Run single tests, multiple tests, headed mode`,
-    `Generate tests with Codegen`,
-    `See a trace of your tests`
-  ]);
-});
-
-test('should show Page Object Model article', async ({ page }) => {
-  const playwrightDev = new PlaywrightDevPage(page);
-  await playwrightDev.goto();
-  await playwrightDev.pageObjectModel();
-  await expect(page.locator('article')).toContainText('Page Object Model is a common pattern');
-});
-```
-
-```js tab=js-library
-// example.spec.js
-const { PlaywrightDevPage } = require('./playwright-dev-page');
-
-// In the test
-const page = await browser.newPage();
-await playwrightDev.goto();
-await playwrightDev.getStarted();
-await expect(playwrightDev.tocList).toHaveText([
-  'Installation',
-  'First test',
-  'Configuration file',
-  'Writing assertions',
-  'Using test fixtures',
-  'Using test hooks',
-  'VS Code extension',
-  'Command line',
-  'Configure NPM scripts',
-  'Release notes'
-]);
-```
-
-## Implementation
-* langs: java, csharp, python
-
-Page object models wrap over a Playwright [Page].
-
 ```java
 // models/SearchPage.java
 package models;
@@ -282,6 +138,17 @@ public class SearchPage
 
 Page objects can then be used inside a test.
 
+```js
+// search.spec.js
+const { SearchPage } = require('./models/Search');
+
+// In the test
+const page = await browser.newPage();
+const searchPage = new SearchPage(page);
+await searchPage.navigate();
+await searchPage.search('search query');
+```
+
 ```java
 import models.SearchPage;
 import com.microsoft.playwright.*;
@@ -324,3 +191,6 @@ var page = new SearchPage(await browser.NewPageAsync());
 await page.GotoAsync();
 await page.SearchAsync("search query");
 ```
+
+### API reference
+- [Page]
diff --git a/docs/src/protractor-js.md b/docs/src/protractor-js.md
index ee10ab7596f77dbd343562f3b9c17639f347ef83..47527c3da651de3401075d63c915ef97358f7dd5 100644
--- a/docs/src/protractor-js.md
+++ b/docs/src/protractor-js.md
@@ -140,18 +140,18 @@ Here's how to polyfill `waitForAngular` function in Playwright Test:
     await page.goto('https://example.org');
     await waitForAngular(page);
     ```
-
+ 
 ## Playwright Test Super Powers
 
 Once you're on Playwright Test, you get a lot!
 
 - Full zero-configuration TypeScript support
-- Run tests across **all web engines** (Chrome, Firefox, Safari) on **any popular operating system** (Windows, macOS, Ubuntu)
+- Run tests across **all web engines** (Chrome, Firefox, Safari) on **any popular operating system** (Windows, MacOS, Ubuntu)
 - Full support for multiple origins, [(i)frames](./api/class-frame), [tabs and contexts](./pages)
 - Run tests in parallel across multiple browsers
 - Built-in test artifact collection: [video recording](./test-configuration#record-video), [screenshots](./test-configuration#automatic-screenshots) and [playwright traces](./test-configuration#record-test-trace)
 
-You also get all these â¨ awesome tools â¨ that come bundled with Playwright Test:
+Also you get all these â¨ awesome tools â¨ that come bundled with Playwright Test:
 - [Playwright Inspector](./debug.md)
 - [Playwright Test Code generation](./auth#code-generation)
 - [Playwright Tracing](./trace-viewer) for post-mortem debugging
diff --git a/docs/src/puppeteer-js.md b/docs/src/puppeteer-js.md
deleted file mode 100644
index da946845b5489194102ef0f5e16e0377b84162f8..0000000000000000000000000000000000000000
--- a/docs/src/puppeteer-js.md
+++ /dev/null
@@ -1,178 +0,0 @@
----
-id: puppeteer
-title: "Migrating from Puppeteer"
----
-
-<!-- TOC -->
-
-## Migration Principles
-
-This guide describes migration to [Playwright Library](./library) and [Playwright Test](./intro.md) from Puppeteer. The APIs have similarities, but Playwright offers much more possibilities for web testing and cross-browser automation.
-
-- Most Puppeteer APIs can be used as is
-- The use of [ElementHandle] is discouraged, use [Locator] objects and web-first assertions instead.
-- Playwright is cross-browser
-- You probably don't need explicit wait
-
-## Cheat Sheet
-
-| Puppeteer                                          | Playwright Library                          |
-|----------------------------------------------------|---------------------------------------------|
-| `await puppeteer.launch()`                         | `await playwright.chromium.launch()`        |
-| `puppeteer.launch({product: 'firefox'})`           | `await playwright.firefox.launch()`         |
-|  WebKit is not supported by Puppeteer              | `await playwright.webkit.launch()`          |
-| `await browser.createIncognitoBrowserContext(...)` | `await browser.newContext(...)`             |
-| `await page.setViewport(...)`                      | `await page.setViewportSize(...)`           |
-| `await page.waitForXPath(XPathSelector)`           | `await page.waitForSelector(XPathSelector)` |
-| `await page.waitForNetworkIdle(...)`               | `await page.waitForLoadState({ state: 'networkidle' }})` |
-| `await page.$eval(...)`                            | [Assertions](./test-assertions) can often be used instead to verify text, attribute, class... |
-| `await page.$(...)`                                | Discouraged, use [Locators](./api/class-locator) instead |
-| `await page.$x(xpath_selector)`                    | Discouraged, use [Locators](./api/class-locator) instead |
-| No methods dedicated to checkbox or radio input    | `await page.locator(selector).check()`<br/>`await page.locator(selector).uncheck()` |
-| `await page.click(selector)`                       | `await page.locator(selector).click()`      |
-| `await page.focus(selector)`                       | `await page.locator(selector).focus()`      |
-| `await page.hover(selector)`                       | `await page.locator(selector).hover()`      |
-| `await page.select(selector, values)`              | `await page.locator(selector).selectOption(values)` |
-| `await page.tap(selector)`                         | `await page.locator(selector).tap()`        |
-| `await page.type(selector, ...)`                   | `await page.locator(selector).type(...)`<br/> Please also consider [`method: Locator.fill`] |
-| `await page.waitForFileChooser(...)`<br/>`await elementHandle.uploadFile(...)` | `await page.locator(selector).setInputFiles(...)` |
-| `await page.cookies([...urls])`                    | `await browserContext.cookies([urls])`      |
-| `await page.deleteCookie(...cookies)`              | `await browserContext.clearCookies()`       |
-| `await page.setCookie(...cookies)`                 | `await browserContext.addCookies(cookies)`  |
-| `page.on(...)`                                     | `page.on(...)`<br/>In order to intercept and mutate requests, see [`method: Page.route`] |
-
-`page.waitForNavigation` and `page.waitForSelector` remain, but in many cases will not be necessary due to [auto-waiting](./actionability).
-
-The use of [ElementHandle] is discouraged, use [Locator] objects and web-first assertions instead.
-
-Locators are the central piece of Playwright's auto-waiting and retry-ability. Locators are strict. This means that all operations on locators that imply some target DOM element will throw an exception if more than one element matches a given selector.
-
-## Examples
-
-### Automation example
-
-Puppeteer:
-
-```js
-const puppeteer = require('puppeteer');
-
-(async () => {
-  const browser = await puppeteer.launch();
-  const page = await browser.newPage();
-  await page.setViewport({ width: 1280, height: 800 });
-  await page.goto('http://whatsmyuseragent.org/', {
-    waitUntil: 'networkidle2',
-  });
-  await page.screenshot({ path: 'example.png' });
-  await browser.close();
-})();
-```
-
-Line-by-line migration to Playwright:
-
-```js
-const { chromium } = require('playwright'); // 1
-
-(async () => {
-  const browser = await chromium.launch();
-  const page = await browser.newPage(); // 2
-  await page.setViewportSize({ width: 1280, height: 800 }); // 3
-  await page.goto('http://whatsmyuseragent.org/', {
-    waitUntil: 'networkidle', // 4
-  });
-  await page.screenshot({ path: 'example.png' });
-  await browser.close();
-})();
-```
-
-Migration highlights (see inline comments in the Playwright code snippet):
-
-1. Each Playwright Library file has explicit import of `chromium`. Other browsers `webkit` or `firefox` can be used.
-1. For browser state isolation, consider [browser contexts](./browser-contexts.md)
-1. `setViewport` becomes `setViewportSize`
-1. `networkidle2` becomes `networkidle`. Please note that in most cases it is not useful, thanks to auto-waiting.
-
-### Test example
-
-Puppeteer with Jest:
-
-```js
-import puppeteer from 'puppeteer';
-
-describe('Playwright homepage', () => {
-  let browser;
-  let page;
-
-  beforeAll(async () => {
-    browser = await puppeteer.launch();
-    page = await browser.newPage();
-  });
-
-  it('contains hero title', async () => {
-    await page.goto('https://playwright.dev/');
-    await page.waitForSelector('.hero__title');
-    const text = await page.$eval('.hero__title', (e) => e.textContent);
-    expect(text).toContain('Playwright enables reliable end-to-end testing'); // 5
-  });
-
-  afterAll(() => browser.close());
-});
-```
-Line-by-line migration to Playwright Test:
-
-```js
-import { test, expect } from '@playwright/test'; // 1
-
-test.describe('Playwright homepage', () => {
-  test('contains hero title', async ({ page }) => { // 2, 3
-    await page.goto('https://playwright.dev/');
-    const titleLocator = page.locator('.hero__title'); // 4
-    await expect(titleLocator).toContainText( // 5
-      'Playwright enables reliable end-to-end testing'
-    );
-  });
-});
-```
-
-1. Each Playwright Test file has explicit import of the `test` and `expect` functions
-1. Test function is marked with `async`
-1. Playwright Test is given a `page` as one of its parameters. This is one of the many [useful fixtures](./api/class-fixtures) in Playwright Test.
-Playwright Test creates an isolated [Page] object for each test. However, if you'd like to reuse a single [Page] object between multiple tests, you can create your own in [`method: Test.beforeAll`] and close it in [`method: Test.afterAll`].
-1. Locator creation with [`method: Page.locator`] is one of the few methods that is sync.
-1. Use [assertions](./test-assertions) to verify the state instead of `page.$eval()`.
-
-## Testing
-
-With a few lines of code, you can hook up Playwright to your existing JavaScript [test runner](./test-runners).
-
-To improve testing, it is advised to use [Locators](./api/class-locator) and web-first [Assertions](./test-assertions). See [Writing Tests](./writing-tests)
-
-It is common with Puppeteer to use `page.evaluate()` or `page.$eval()` to inspect an [ElementHandle] and extract the value of text content, attribute, class... Web-first [Assertions](./test-assertions) offers several matchers for this purpose, it is more reliable and readable.
-
-[Playwright Test](./intro.md) is our first-party recommended test runner to be used with Playwright. It provides several features like Page Object Model, parallelism, fixtures or reporters.
-
-## Playwright Test Super Powers
-
-Once you're on Playwright Test, you get a lot!
-
-- Full zero-configuration TypeScript support
-- Run tests across **all web engines** (Chrome, Firefox, Safari) on **any popular operating system** (Windows, macOS, Ubuntu)
-- Full support for multiple origins, [(i)frames](./api/class-frame), [tabs and contexts](./pages)
-- Run tests in isolation in parallel across multiple browsers
-- Built-in test artifact collection: [video recording](./test-configuration#record-video), [screenshots](./test-configuration#automatic-screenshots) and [playwright traces](./test-configuration#record-test-trace)
-
-You also get all these â¨ awesome tools â¨ that come bundled with Playwright Test:
-- [Playwright Inspector](./debug.md)
-- [Playwright Test Code generation](./auth#code-generation)
-- [Playwright Tracing](./trace-viewer) for post-mortem debugging
-
-## Further Reading
-
-Learn more about Playwright Test runner:
-
-- [Getting Started](./intro)
-- [Fixtures](./test-fixtures)
-- [Locators](./api/class-locator)
-- [Selectors](./selectors)
-- [Assertions](./test-assertions)
-- [Auto-waiting](./actionability)
diff --git a/docs/src/release-notes-csharp.md b/docs/src/release-notes-csharp.md
index 91f01a9c75b269463c4316cd9dbd0947b39d3ee0..0380ab4cfaf1a30328d69326aa2747c898751f9e 100644
--- a/docs/src/release-notes-csharp.md
+++ b/docs/src/release-notes-csharp.md
@@ -260,10 +260,9 @@ using NUnit.Framework;
 
 namespace PlaywrightTests;
 
-[TestFixture]
 public class ExampleTests : PageTest
 {
-    [PlaywrightTest]
+    [Test]
     public async Task StatusBecomesSubmitted()
     {
         await Expect(Page.Locator(".status")).ToHaveTextAsync("Submitted");
diff --git a/docs/src/release-notes-js.md b/docs/src/release-notes-js.md
index fab7e1f28e262a9077fd24bcc468b0fb281cecc3..abf5ba0f1690aafa27b688a790533aedd804c17e 100644
--- a/docs/src/release-notes-js.md
+++ b/docs/src/release-notes-js.md
@@ -4,54 +4,8 @@ title: "Release notes"
 toc_max_heading_level: 2
 ---
 
-## Version 1.26
-
-### (Experimental) Docker integration
-
-Playwright Test now ships an **experimental** Docker integration. The Docker container provides a consistent environment, eliminating browser rendering differences across platforms.
-
-With this integration, only **browser binaries** are running inside a Docker container, while all the code is still running on the host operating system.
-
-<img width="450px" src="https://user-images.githubusercontent.com/746130/189774482-fd65d4ce-7b45-46c8-8761-36b76dba4671.png" />
-
-Read more in [our documentation](./docker#experimental-playwright-test-docker-integration).
-
-### Assertions
-
-- New option `enabled` for [`method: LocatorAssertions.toBeEnabled`].
-- [`method: LocatorAssertions.toHaveText`] now pierces open shadow roots.
-- New option `editable` for [`method: LocatorAssertions.toBeEditable`].
-- New option `visible` for [`method: LocatorAssertions.toBeVisible`].
-
-### Other highlights
-
-- New option `maxRedirects` for [`method: APIRequestContext.get`] and others to limit redirect count.
-- New command-line flag `--pass-with-no-tests` that allows the test suite to pass when no files are found.
-- New command-line flag `--ignore-snapshots` to skip snapshot expectations, such as `expect(value).toMatchSnapshot()` and `expect(page).toHaveScreenshot()`.
-
-### Behavior Change
-
-A bunch of Playwright APIs already support the `waitUntil: 'domcontentloaded'` option.
-For example:
-
-```js
-await page.goto('https://playwright.dev', {
-  waitUntil: 'domcontentloaded',
-});
-```
-
-Prior to 1.26, this would wait for all iframes to fire the `DOMContentLoaded`
-event. 
-
-To align with web specification, the `'domcontentloaded'` value only waits for
-the target frame to fire the `'DOMContentLoaded'` event. Use `waitUntil: 'load'` to wait for all iframes.
-
 ## Version 1.25
 
-<div className="embed-youtube">
-<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/NFLHA57a-so" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
-</div>
-
 ### VSCode Extension
 
 * Watch your tests running live & keep devtools open.
@@ -80,7 +34,7 @@ the target frame to fire the `'DOMContentLoaded'` event. Use `waitUntil: 'load'`
 
 ### Announcements
 
-* ð We now ship Ubuntu 22.04 Jammy Jellyfish docker image: `mcr.microsoft.com/playwright:v1.27.0-jammy`.
+* ð We now ship Ubuntu 22.04 Jammy Jellyfish docker image: `mcr.microsoft.com/playwright:v1.25.2-jammy`.
 * ðª¦ This is the last release with macOS 10.15 support (deprecated as of 1.21).
 * ðª¦ This is the last release with Node.js 12 support, we recommend upgrading to Node.js LTS (16).
 * â ï¸ Ubuntu 18 is now deprecated and will not be supported as of Dec 2022.
@@ -330,7 +284,7 @@ Read more about [component testing with Playwright](./test-components).
     }
   });
   ```
-* Playwright now runs on Ubuntu 22 amd64 and Ubuntu 22 arm64. We also publish new docker image `mcr.microsoft.com/playwright:v1.27.0-jammy`.
+* Playwright now runs on Ubuntu 22 amd64 and Ubuntu 22 arm64. We also publish new docker image `mcr.microsoft.com/playwright:v1.25.2-jammy`.
 
 ### â ï¸ Breaking Changes â ï¸
 
diff --git a/docs/src/release-notes-python.md b/docs/src/release-notes-python.md
index 4fcea137c16094260c5e269bbffd367b94278537..bac1bc0f4710a3ef729f5e3900046ba3e0baa146 100644
--- a/docs/src/release-notes-python.md
+++ b/docs/src/release-notes-python.md
@@ -8,7 +8,7 @@ toc_max_heading_level: 2
 
 ### Announcements
 
-* ð We now ship Ubuntu 22.04 Jammy Jellyfish docker image: `mcr.microsoft.com/playwright/python:v1.27.0-jammy`.
+* ð We now ship Ubuntu 22.04 Jammy Jellyfish docker image: `mcr.microsoft.com/playwright/python:v1.25.2-jammy`.
 * ðª¦ This is the last release with macOS 10.15 support (deprecated as of 1.21).
 * â ï¸ Ubuntu 18 is now deprecated and will not be supported as of Dec 2022.
 
diff --git a/docs/src/running-tests-js.md b/docs/src/running-tests-js.md
index 61c66c03b42db7d452980a6309b8d0fb4060a106..739bffee717a81a02d54c5ccf49c3decbc6842bd 100644
--- a/docs/src/running-tests-js.md
+++ b/docs/src/running-tests-js.md
@@ -53,7 +53,7 @@ For a better debugging experience check out the [VS Code Extension](./getting-st
   npx playwright test landing-page.spec.ts --headed
   ```
 
-- Running tests on a specific project
+- Running Tests on specific browsers
 
   ```bash
   npx playwright test landing-page.ts --project=chromium
@@ -96,13 +96,13 @@ The [HTML Reporter](././test-reporters.md#html-reporter) shows you a full report
 npx playwright show-report
 ```
 
-<img width="963" alt="HTML Report > Test Reports view" src="https://user-images.githubusercontent.com/13063165/189140120-71a6bc41-f921-40be-a7a4-61d44da33b20.png" />
+<img width="739" alt="HTML Report > Test Reports view" src="https://user-images.githubusercontent.com/13063165/181803518-1f554349-f72a-4ad3-a7aa-4d3d1b4cad13.png" />
 
 You can click on each test and explore the tests errors as well as each step of the test. 
 
-<img width="955" alt="HTML Reporter > Test Reports detailed view" src="https://user-images.githubusercontent.com/13063165/189140263-0e3ac2d9-4e75-40c8-b29c-58323c8be433.png" />
+<img width="739" alt="HTML Reporter > Test Reports detailed view" src="https://user-images.githubusercontent.com/13063165/181814327-a597109f-6f24-44a1-b47c-0de9dc7f5912.png" />
 
 ## What's Next
 
-- [Generate tests with Codegen](./codegen-intro.md)
+- [Generate tests with Codegen](./codegen.md)
 - [See a trace of your tests](./trace-viewer-intro.md)
diff --git a/docs/src/selectors.md b/docs/src/selectors.md
index 6615f6e5e7cd062eb6e9e5e04d8d0b6c4848a497..e378faa6575114a89febfc15b74474bb26bf03d1 100644
--- a/docs/src/selectors.md
+++ b/docs/src/selectors.md
@@ -7,6 +7,8 @@ Selectors are strings that are used to create [Locator]s. Locators are used to p
 
 Writing good selectors is part art, part science so be sure to checkout the [Best Practices](#best-practices) section.
 
+<!-- TOC -->
+
 ## Quick guide
 
 - Text selector
diff --git a/docs/src/test-advanced-js.md b/docs/src/test-advanced-js.md
index c611a1edcbd37016dd5a9615dd1b456ee15f28d8..3d7f35cd383e35e45f29d6ef29c73840a5c27470 100644
--- a/docs/src/test-advanced-js.md
+++ b/docs/src/test-advanced-js.md
@@ -3,6 +3,8 @@ id: test-advanced
 title: "Advanced: configuration"
 ---
 
+<!-- TOC -->
+
 ## Configuration object
 
 Configuration file exports a single [TestConfig] object. See [TestConfig] properties for available configuration options.
@@ -679,14 +681,10 @@ test('numeric ranges', () => {
 });
 ```
 
-For TypeScript, also add the following to your [`global.d.ts`](https://www.typescriptlang.org/docs/handbook/declaration-files/templates/global-d-ts.html). If it does not exist, you need to create it inside your repository. Make sure that your `global.d.ts` gets included inside your `tsconfig.json` via the `include` or `compilerOptions.typeRoots` option so that your IDE will pick it up.
-
-You don't need it for JavaScript.
+For TypeScript, also add the following to `global.d.ts`. You don't need it for JavaScript.
 
 ```js
 // global.d.ts
-export {};
-
 declare global {
  namespace PlaywrightTest {
     interface Matchers<R, T> {
diff --git a/docs/src/test-annotations-js.md b/docs/src/test-annotations-js.md
index 2452df5fc0a37525ac4b516985930fcc63e9b9dd..8dd75f35cdb01c164a9483ac2b52543eaeee9a56 100644
--- a/docs/src/test-annotations-js.md
+++ b/docs/src/test-annotations-js.md
@@ -3,10 +3,14 @@ id: test-annotations
 title: "Annotations"
 ---
 
+<!-- TOC -->
+
+## Annotations
+
 Playwright Test supports test annotations to deal with failures, flakiness, skip, focus and tag tests:
 - [`method: Test.skip#1`] marks the test as irrelevant. Playwright Test does not run such a test. Use this annotation when the test is not applicable in some configuration.
 - [`method: Test.fail#1`] marks the test as failing. Playwright Test will run this test and ensure it does indeed fail. If the test does not fail, Playwright Test will complain.
-- [`method: Test.fixme#1`] marks the test as failing. Playwright Test will not run this test, as opposed to the `fail` annotation. Use `fixme` when running the test is slow or crashy.
+- [`method: Test.fixme#1`] marks the test as failing. Playwright Test will not run this test, as opposite to the `fail` annotation. Use `fixme` when running the test is slow or crashy.
 - [`method: Test.slow#1`] marks the test as slow and triples the test timeout.
 
 Annotations can be used on a single test or a group of tests. Annotations can be conditional, in which case they apply when the condition is truthy. Annotations may depend on test fixtures. There could be multiple annotations on the same test, possibly in different configurations.
diff --git a/docs/src/test-api/class-testconfig.md b/docs/src/test-api/class-testconfig.md
index e1b68487b04826635e4167905da65be26f6c019d..ddd673bcae92770635d796b8ab24b8cde6d7ecd4 100644
--- a/docs/src/test-api/class-testconfig.md
+++ b/docs/src/test-api/class-testconfig.md
@@ -226,11 +226,6 @@ Filter to only run tests with a title **not** matching one of the patterns. This
 
 `grepInvert` option is also useful for [tagging tests](../test-annotations.md#tag-tests).
 
-## property: TestConfig.ignoreSnapshots
-* since: v1.26
-- type: ?<[boolean]>
-
-Whether to skip snapshot expectations, such as `expect(value).toMatchSnapshot()` and `await expect(page).toHaveScreenshot()`.
 
 ## property: TestConfig.maxFailures
 * since: v1.10
diff --git a/docs/src/test-assertions-js.md b/docs/src/test-assertions-js.md
index 8313891fe278910f0c9227c5c2cc9aff545929f5..51578a2ecf35d00db588bc88ccc5fad8df04a5cc 100644
--- a/docs/src/test-assertions-js.md
+++ b/docs/src/test-assertions-js.md
@@ -3,7 +3,8 @@ id: test-assertions
 title: "Assertions"
 ---
 
-Playwright Test uses [expect](https://jestjs.io/docs/expect) library for test assertions. This library provides a lot of matchers like `toEqual`, `toContain`, `toMatch`, `toMatchSnapshot` and many more:
+Playwright Test uses [expect](https://jestjs.io/docs/expect) library for test assertions. This library provides
+a lot of matchers like `toEqual`, `toContain`, `toMatch`, `toMatchSnapshot` and many more:
 
 ```js
 expect(success).toBeTruthy();
@@ -16,10 +17,15 @@ the expected condition is met. Consider the following example:
 await expect(page.locator('.status')).toHaveText('Submitted');
 ```
 
-Playwright Test will be re-testing the node with the selector `.status` until fetched Node has the `"Submitted"` text. It will be re-fetching the node and checking it over and over, until the condition is met or until the timeout is reached. You can either pass this timeout or configure it once via the [`property: TestConfig.expect`] value in test config.
+Playwright Test will be re-testing the node with the selector `.status` until fetched Node has the `"Submitted"`
+text. It will be re-fetching the node and checking it over and over, until the condition is met or until the timeout is
+reached. You can either pass this timeout or configure it once via the [`property: TestConfig.expect`] value
+in test config.
 
 By default, the timeout for assertions is set to 5 seconds. Learn more about [various timeouts](./test-timeouts.md).
 
+<!-- TOC -->
+
 ## Negating Matchers
 
 In general, we can expect the opposite to be true by adding a `.not` to the front
diff --git a/docs/src/test-cli-js.md b/docs/src/test-cli-js.md
index 3e1b2fb854c923ff9c4e5e284e4fe3eef2146560..21b30dca34430e9e80fef2d706726e542636d138 100644
--- a/docs/src/test-cli-js.md
+++ b/docs/src/test-cli-js.md
@@ -3,6 +3,10 @@ id: test-cli
 title: "Command line"
 ---
 
+<!-- TOC -->
+
+## Examples
+
 Here are the most common options available in the command line.
 
 - Run all the tests
@@ -107,8 +111,6 @@ Complete set of Playwright Test options is available in the [configuration file]
 
 - `--timeout <number>`: Maximum timeout in milliseconds for each test, defaults to 30 seconds. Learn more about [various timeouts](./test-timeouts.md).
 
-- `--ignore-snapshots` or `-i`: Whether to ignore [snapshots](./test-snapshots.md). Use this when snapshot expectations are known to be different, e.g. running tests on Linux against Windows screenshots.
-
 - `--update-snapshots` or `-u`: Whether to update [snapshots](./test-snapshots.md) with actual results instead of comparing them. Use this when snapshot expectations have changed.
 
 - `--workers <number>` or `-j <number>`: The maximum number of concurrent worker processes that run in [parallel](./test-parallel.md).
diff --git a/docs/src/test-components-js.md b/docs/src/test-components-js.md
index df649403d5bd02ea701f871b787fad0e69926c74..820b268982b441c4c3dc2124621cf6e274c48678 100644
--- a/docs/src/test-components-js.md
+++ b/docs/src/test-components-js.md
@@ -102,57 +102,6 @@ npm run test-ct
 
 Refer to [Playwright config](./test-configuration.md) for configuring your project.
 
-## Hooks
-
-You can use `beforeMount` and `afterMount` hooks to configure your app. This lets you setup things like your app router, fake server etc. giving you the flexibility you need. You can also pass custom configuration from the `mount` call from a test, which is accessible from the `hooksConfig` fixture.
-
-#### `playwright/index.ts`
-
-This includes any config that needs to be run before/after mounting the component. Here's an example of how to setup `miragejs` mocking library:
-
-```js
-import { beforeMount } from '@playwright/experimental-ct-react/hooks';
-import { createServer } from "miragejs"
-
-beforeMount(async ({ hooksConfig }) => {
-  // Setting default values if custom config is not provided
-  const users = hooksConfig.users ?? [
-    { id: "1", name: "Luke" },
-    { id: "2", name: "Leia" },
-    { id: "3", name: "Han" },
-  ];
-  createServer({
-    routes() {
-      this.get("/api/users", () => users)
-    },
-  });
-});
-```
-
-#### In your test file:
-
-```js
-// src/Users.spec.tsx
-import { test, expect } from "@playwright/experimental-ct-react";
-import React from "react";
-import { Users } from "./Users";
-
-test("should work", async ({ mount }) => {
-  const component = await mount(<Users />, {
-    hooksConfig: {
-      users: [
-        { id: "4", name: "Anakin" },
-        { id: "5", name: "Padme" },
-      ]
-    }
-  });
-  await expect(component.locator("li")).toContainText([
-    "Anakin",
-    "Padme",
-  ]);
-});
-```
-
 ## Under the hood
 
 When Playwright Test is used to test web components, tests run in Node.js, while components run in the real browser. This brings together the best of both worlds: components run in the real browser environment, real clicks are triggered, real layout is executed, visual regression is possible. At the same time, test can use all the powers of Node.js as well as all the Playwright Test features. As a result, the same parallel, parametrized tests with the same post-mortem Tracing story are available during component testing.
diff --git a/docs/src/test-configuration-js.md b/docs/src/test-configuration-js.md
index 820cdf2789a9ede4c8f7218fa719d5d30497edfd..04b2200d35827a01fcb70141c21af6959ec9ba09 100644
--- a/docs/src/test-configuration-js.md
+++ b/docs/src/test-configuration-js.md
@@ -5,15 +5,17 @@ title: "Configuration"
 
 Playwright Test provides options to configure the default `browser`, `context` and `page` fixtures. For example there are options for `headless`, `viewport` and `ignoreHTTPSErrors`. You can also record a video or a trace for the test or capture a screenshot at the end.
 
-There are plenty of testing options like `timeout` or `testDir` that configure how your tests are collected and executed.
+Finally, there are plenty of testing options like `timeout` or `testDir` that configure how your tests are collected and executed.
 
 You can specify any options globally in the configuration file, and most of them locally in a test file.
 
 See the full list of [test options][TestOptions] and all [configuration properties][TestConfig].
 
+<!-- TOC -->
+
 ## Global configuration
 
-Create a `playwright.config.js` (or `playwright.config.ts`) and specify options in the [`property: TestConfig.use`] section.
+Create `playwright.config.js` (or `playwright.config.ts`) and specify options in the [`property: TestConfig.use`] section.
 
 ```js tab=js-js
 // @ts-check
@@ -47,7 +49,7 @@ export default config;
 Now run tests as usual, Playwright Test will pick up the configuration file automatically.
 
 ```bash
-npx playwright test
+npx playwright test --browser=firefox
 ```
 
 If you put your configuration file in a different place, pass it with `--config` option.
@@ -58,13 +60,15 @@ npx playwright test --config=tests/my.config.js
 
 ## Local configuration
 
-You can override some options for a file or describe block.
+With [`method: Test.use`] you can override some options for a file or a [`method: Test.describe#1`] block.
 
 ```js tab=js-js
 // example.spec.js
 const { test, expect } = require('@playwright/test');
+
 // Run tests in this file with portrait-like viewport.
 test.use({ viewport: { width: 600, height: 900 } });
+
 test('my portrait test', async ({ page }) => {
   // ...
 });
@@ -73,8 +77,10 @@ test('my portrait test', async ({ page }) => {
 ```js tab=js-ts
 // example.spec.ts
 import { test, expect } from '@playwright/test';
+
 // Run tests in this file with portrait-like viewport.
 test.use({ viewport: { width: 600, height: 900 } });
+
 test('my portrait test', async ({ page }) => {
   // ...
 });
@@ -85,9 +91,11 @@ The same works inside describe.
 ```js tab=js-js
 // example.spec.js
 const { test, expect } = require('@playwright/test');
+
 test.describe('locale block', () => {
   // Run tests in this describe block with portrait-like viewport.
   test.use({ viewport: { width: 600, height: 900 } });
+
   test('my portrait test', async ({ page }) => {
     // ...
   });
@@ -97,9 +105,11 @@ test.describe('locale block', () => {
 ```js tab=js-ts
 // example.spec.ts
 import { test, expect } from '@playwright/test';
+
 test.describe('locale block', () => {
   // Run tests in this describe block with portrait-like viewport.
   test.use({ viewport: { width: 600, height: 900 } });
+
   test('my portrait test', async ({ page }) => {
     // ...
   });
@@ -108,9 +118,7 @@ test.describe('locale block', () => {
 
 ## Basic options
 
-Normally you would start with emulating a device, for example Desktop Chromium. See our [Emulation](./emulation.md) guide to learn more.
-
-Here are some of the commonly used options for various scenarios. You usually set them globally in the [configuration file](#global-configuration).
+These are commonly used options for various scenarios. You usually set them globally in [configuration file](#global-configuration).
 
 - `actionTimeout` - Timeout for each Playwright action in milliseconds. Defaults to `0` (no timeout). Learn more about [various timeouts](./test-timeouts.md).
 - `baseURL` - Base URL used for all pages in the context. Allows navigating by using just the path, for example `page.goto('/settings')`.
@@ -120,11 +128,6 @@ Here are some of the commonly used options for various scenarios. You usually se
 - `headless` - Whether to run the browser in headless mode.
 - `viewport` - Viewport used for all pages in the context.
 - `storageState` - Populates context with given storage state. Useful for easy authentication, [learn more](./auth.md).
-- `colorScheme` - Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`.
-- `geolocation` - Context geolocation.
-- `locale` - [Emulates](./emulation.md) the user locale, for example `en-GB`, `de-DE`, etc.
-- `permissions` - A list of permissions to grant to all pages in the context.
-- `timezoneId` - Changes the timezone of the context.
 
 ```js tab=js-js
 // @ts-check
@@ -230,6 +233,111 @@ Running 1 test using 1 worker
   â [firefox] âº example.spec.ts:3:1 âº basic test (2s)
 ```
 
+## Emulation
+
+Playwright can [emulate different environments](./emulation.md) like mobile device, locale or timezone.
+
+Here is an example configuration that runs tests in "Pixel 4" and "iPhone 11" emulation modes. Note that it uses the [projects](./test-advanced.md#projects) feature to run the same set of tests in multiple configurations.
+
+```js tab=js-js
+// playwright.config.js
+// @ts-check
+const { devices } = require('@playwright/test');
+
+/** @type {import('@playwright/test').PlaywrightTestConfig} */
+const config = {
+  projects: [
+    // "Pixel 4" tests use Chromium browser.
+    {
+      name: 'Pixel 4',
+      use: {
+        browserName: 'chromium',
+        ...devices['Pixel 4'],
+      },
+    },
+
+    // "iPhone 11" tests use WebKit browser.
+    {
+      name: 'iPhone 11',
+      use: {
+        browserName: 'webkit',
+        ...devices['iPhone 11'],
+      },
+    },
+  ],
+};
+
+module.exports = config;
+```
+
+```js tab=js-ts
+// playwright.config.ts
+import { type PlaywrightTestConfig, devices } from '@playwright/test';
+
+const config: PlaywrightTestConfig = {
+  projects: [
+    // "Pixel 4" tests use Chromium browser.
+    {
+      name: 'Pixel 4',
+      use: {
+        browserName: 'chromium',
+        ...devices['Pixel 4'],
+      },
+    },
+
+    // "iPhone 11" tests use WebKit browser.
+    {
+      name: 'iPhone 11',
+      use: {
+        browserName: 'webkit',
+        ...devices['iPhone 11'],
+      },
+    },
+  ],
+};
+export default config;
+```
+
+You can specify options separately instead of using predefined devices. There are also more options such as locale, geolocation, and timezone which can be configured.
+
+- `colorScheme` - Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`.
+- `deviceScaleFactor` - Specify device scale factor (can be thought of as dpr). Defaults to `1`.
+- `geolocation` - Context geolocation.
+- `hasTouch` - Specifies if device supports touch events.
+- `isMobile` - Whether the `meta viewport` tag is taken into account and touch events are enabled.
+- `javaScriptEnabled` - Whether or not to enable JavaScript in the context.
+- `locale` - User locale, for example `en-GB`, `de-DE`, etc.
+- `permissions` - A list of permissions to grant to all pages in the context.
+- `timezoneId` - Changes the timezone of the context.
+- `userAgent` - Specific user agent to use in the context.
+
+```js tab=js-js
+// @ts-check
+
+/** @type {import('@playwright/test').PlaywrightTestConfig} */
+const config = {
+  use: {
+    locale: 'fr-FR',
+    geolocation: { longitude: 48.858455, latitude: 2.294474 },
+    permissions: ['geolocation'],
+  },
+};
+
+module.exports = config;
+```
+
+```js tab=js-ts
+import type { PlaywrightTestConfig } from '@playwright/test';
+const config: PlaywrightTestConfig = {
+  use: {
+    locale: 'fr-FR',
+    geolocation: { longitude: 48.858455, latitude: 2.294474 },
+    permissions: ['geolocation'],
+  },
+};
+export default config;
+```
+
 ## Network
 
 Available options to configure networking:
diff --git a/docs/src/test-fixtures-js.md b/docs/src/test-fixtures-js.md
index ca982c8888d9ca076669fdc34c7ba34502f9079f..5cd4cb6ae0f38df9d1ff2d27de15da4ac2ec7167 100644
--- a/docs/src/test-fixtures-js.md
+++ b/docs/src/test-fixtures-js.md
@@ -3,6 +3,10 @@ id: test-fixtures
 title: "Advanced: fixtures"
 ---
 
+<!-- TOC -->
+
+## Introduction to fixtures
+
 Playwright Test is based on the concept of test fixtures. Test fixtures are used to establish environment for each test, giving the test everything it needs and nothing else. Test fixtures are isolated between tests. With fixtures, you can group tests based on their meaning, instead of their common setup.
 
 ### Built-in fixtures
diff --git a/docs/src/test-parallel-js.md b/docs/src/test-parallel-js.md
index 0df813de14a51dde7ada1d50c2d92fc61b15cffc..3639667326fab7f634efac74524bc0af65731c0f 100644
--- a/docs/src/test-parallel-js.md
+++ b/docs/src/test-parallel-js.md
@@ -12,6 +12,8 @@ Playwright Test runs tests in parallel. In order to achieve that, it runs severa
 
 You can control the number of [parallel worker processes](#limit-workers) and [limit the number of failures](#limit-failures-and-fail-fast) in the whole test suite for efficiency.
 
+<!-- TOC -->
+
 ## Worker processes
 
 All tests run in worker processes. These processes are OS processes, running independently, orchestrated by the test runner. All workers have identical environments and each starts its own browser.
diff --git a/docs/src/test-parameterize-js.md b/docs/src/test-parameterize-js.md
index 1f5330e56e68ec16ee7b243afb022c7820fd7b38..7b10bb39657b9b04ca11bbaf423fd77ed53ef7ae 100644
--- a/docs/src/test-parameterize-js.md
+++ b/docs/src/test-parameterize-js.md
@@ -5,6 +5,8 @@ title: "Parametrize tests"
 
 You can either parametrize tests on a test level or on a project level.
 
+<!-- TOC -->
+
 ## Parameterized Tests
 
 ```js tab=js-js
diff --git a/docs/src/test-pom-js.md b/docs/src/test-pom-js.md
index 288ce62f95c0b8749b228559b91b2f8992314061..9fecb220c78af52a4b7a1e74a9ea309615cd8fc6 100644
--- a/docs/src/test-pom-js.md
+++ b/docs/src/test-pom-js.md
@@ -19,7 +19,7 @@ exports.PlaywrightDevPage = class PlaywrightDevPage {
   constructor(page) {
     this.page = page;
     this.getStartedLink = page.locator('a', { hasText: 'Get started' });
-    this.gettingStartedHeader = page.locator('h1', { hasText: 'Installation' });
+    this.gettingStartedHeader = page.locator('h1', { hasText: 'Getting started' });
     this.pomLink = page.locator('li', { hasText: 'Playwright Test' }).locator('a', { hasText: 'Page Object Model' });
     this.tocList = page.locator('article div.markdown ul > li > a');
   }
@@ -54,7 +54,7 @@ export class PlaywrightDevPage {
   constructor(page: Page) {
     this.page = page;
     this.getStartedLink = page.locator('a', { hasText: 'Get started' });
-    this.gettingStartedHeader = page.locator('h1', { hasText: 'Installation' });
+    this.gettingStartedHeader = page.locator('h1', { hasText: 'Getting started' });
     this.pomLink = page.locator('li', { hasText: 'Playwright Test' }).locator('a', { hasText: 'Page Object Model' });
     this.tocList = page.locator('article div.markdown ul > li > a');
   }
@@ -87,14 +87,16 @@ test('getting started should contain table of contents', async ({ page }) => {
   await playwrightDev.goto();
   await playwrightDev.getStarted();
   await expect(playwrightDev.tocList).toHaveText([
-    `How to install Playwright`,
-    `What's Installed`,
-    `How to run the example test`,
-    `How to open the HTML test report`,
-    `Write tests using web first assertions, page fixtures and locators`,
-    `Run single tests, multiple tests, headed mode`,
-    `Generate tests with Codegen`,
-    `See a trace of your tests`
+    'Installation',
+    'First test',
+    'Configuration file',
+    'Writing assertions',
+    'Using test fixtures',
+    'Using test hooks',
+    'VS Code extension',
+    'Command line',
+    'Configure NPM scripts',
+    'Release notes'
   ]);
 });
 
@@ -116,14 +118,16 @@ test('getting started should contain table of contents', async ({ page }) => {
   await playwrightDev.goto();
   await playwrightDev.getStarted();
   await expect(playwrightDev.tocList).toHaveText([
-    `How to install Playwright`,
-    `What's Installed`,
-    `How to run the example test`,
-    `How to open the HTML test report`,
-    `Write tests using web first assertions, page fixtures and locators`,
-    `Run single tests, multiple tests, headed mode`,
-    `Generate tests with Codegen`,
-    `See a trace of your tests`
+    'Installation',
+    'First test',
+    'Configuration file',
+    'Writing assertions',
+    'Using test fixtures',
+    'Using test hooks',
+    'VS Code extension',
+    'Command line',
+    'Configure NPM scripts',
+    'Release notes'
   ]);
 });
 
diff --git a/docs/src/test-reporters-js.md b/docs/src/test-reporters-js.md
index b15fb5cd163bbc88badc85b2fa9f82b87ec353ff..5d3f90c6af97ed3461414e880aaaa8aa92aef24e 100644
--- a/docs/src/test-reporters-js.md
+++ b/docs/src/test-reporters-js.md
@@ -3,6 +3,10 @@ id: test-reporters
 title: "Reporters"
 ---
 
+<!-- TOC -->
+
+## Using reporters
+
 Playwright Test comes with a few built-in reporters for different needs and ability to provide custom reporters. The easiest way to try out built-in reporters is to pass `--reporter` [command line option](./test-cli.md).
 
 
@@ -36,7 +40,7 @@ export default config;
 
 ### Multiple reporters
 
-You can use multiple reporters at the same time. For example  you can use `'list'` for nice terminal output and `'json'` to get a comprehensive json file with the test results.
+You can use multiple reporters at the same time. For example  you can use`'list'` for nice terminal output and `'json'` to get a comprehensive json file with the test results.
 
 ```js tab=js-js
 // playwright.config.js
diff --git a/docs/src/test-retries-js.md b/docs/src/test-retries-js.md
index 2485b1b904c88a5342a85997edef6f9422dc622f..bb35704ded5f4e707fd256f9d75fe0b32d6d1f6e 100644
--- a/docs/src/test-retries-js.md
+++ b/docs/src/test-retries-js.md
@@ -3,7 +3,7 @@ id: test-retries
 title: "Test retry"
 ---
 
-Test retries are a way to automatically re-run a test when it fails. This is useful when a test is flaky and fails intermittently. Test retries are configured in the [configuration file](./test-configuration.md).
+<!-- TOC -->
 
 ## Failures
 
diff --git a/docs/src/test-runners-csharp.md b/docs/src/test-runners-csharp.md
index 481859d7a44ce1f334ee8c4143530593d17cfef1..b05cbfa21b6db22b0908c5b39debe494fee5e485 100644
--- a/docs/src/test-runners-csharp.md
+++ b/docs/src/test-runners-csharp.md
@@ -41,17 +41,16 @@ using Microsoft.Playwright.NUnit;
 namespace PlaywrightTests;
 
 [Parallelizable(ParallelScope.Self)]
-[TestFixture]
 public class MyTest : PageTest
 {
-    [PlaywrightTest]
+    [Test]
     public async Task ShouldHaveTheCorrectSlogan()
     {
         await Page.GotoAsync("https://playwright.dev");
         await Expect(Page.Locator("text=enables reliable end-to-end testing for modern web apps")).ToBeVisibleAsync();
     }
 
-    [PlaywrightTest]
+    [Test]
     public async Task ShouldHaveTheCorrectTitle()
     {
         await Page.GotoAsync("https://playwright.dev");
@@ -122,10 +121,9 @@ using Microsoft.Playwright.NUnit;
 namespace PlaywrightTests;
 
 [Parallelizable(ParallelScope.Self)]
-[TestFixture]
 public class MyTest : PageTest
 {
-    [PlaywrightTest]
+    [Test]
     public async Task TestWithCustomContextOptions()
     {
         // The following Page (and BrowserContext) instance has the custom colorScheme, viewport and baseURL set:
@@ -217,10 +215,6 @@ There are a few base classes available to you in `Microsoft.Playwright.NUnit` na
 |BrowserTest   |Each test will get a browser and can create as many contexts as it likes. Each test is responsible for cleaning up all the contexts it created.|
 |PlaywrightTest|This gives each test a Playwright object so that the test could start and stop as many browsers as it likes.|
 
-### 'No test is available'
-
-You need to add `[TestFixture]` to your test class. NUnit does not discover tests without it, if the `TestAttribute` comes from a different assembly.
-
 ## MSTest
 
 Playwright provides base classes to write tests with MSTest via the [`Microsoft.Playwright.MSTest`](https://www.nuget.org/packages/Microsoft.Playwright.MSTest) package.
@@ -250,14 +244,14 @@ namespace PlaywrightTests;
 [TestClass]
 public class UnitTest1: PageTest
 {
-    [PlaywrightTestMethod]
+    [TestMethod]
     public async Task ShouldHaveTheCorrectSlogan()
     {
         await Page.GotoAsync("https://playwright.dev");
         await Expect(Page.Locator("text=enables reliable end-to-end testing for modern web apps")).ToBeVisibleAsync();
     }
 
-    [PlaywrightTestMethod]
+    [TestMethod]
     public async Task ShouldHaveTheCorrectTitle()
     {
         await Page.GotoAsync("https://playwright.dev");
@@ -335,7 +329,7 @@ namespace PlaywrightTests;
 [TestClass]
 public class UnitTest1 : PageTest
 {
-    [PlaywrightTestMethod]
+    [TestMethod]
     public async Task TestWithCustomContextOptions()
     {
         // The following Page (and BrowserContext) instance has the custom colorScheme, viewport and baseURL set:
diff --git a/docs/src/test-snapshots-js.md b/docs/src/test-snapshots-js.md
index 6ae4d5e265afd0e0daec0cdc43e18ca654f31a29..47e5772c174505c2a7a73eb65dbe764ab4b0937a 100644
--- a/docs/src/test-snapshots-js.md
+++ b/docs/src/test-snapshots-js.md
@@ -56,7 +56,7 @@ The snapshot name `example-test-1-chromium-darwin.png` consists of a few parts:
 If you are not on the same operating system as your CI system, you can use Docker to generate/update the screenshots:
 
 ```bash
-docker run --rm --network host -v $(pwd):/work/ -w /work/ -it mcr.microsoft.com/playwright:v1.27.0-focal /bin/bash
+docker run --rm --network host -v $(pwd):/work/ -w /work/ -it mcr.microsoft.com/playwright:v1.25.2-focal /bin/bash
 npm install
 npx playwright test --update-snapshots
 ```
diff --git a/docs/src/test-timeouts-js.md b/docs/src/test-timeouts-js.md
index d2425dde3e1ad743f0e1bd62b8fb1ad7486decdc..ebc2ed3ad69b345d60f4b1e1c9e54906d4706286 100644
--- a/docs/src/test-timeouts-js.md
+++ b/docs/src/test-timeouts-js.md
@@ -3,6 +3,10 @@ id: test-timeouts
 title: "Timeouts"
 ---
 
+<!-- TOC -->
+
+## Overview
+
 Playwright Test has multiple configurable timeouts for various tasks.
 
 |Timeout    |Default             |Description                      |
diff --git a/docs/src/testing-library-js.md b/docs/src/testing-library-js.md
index 33fc2f01a89e2bfe5e18eb180848b97704698dac..148ac5840bae0e5521622f7daa9e4236ead9c9ca 100644
--- a/docs/src/testing-library-js.md
+++ b/docs/src/testing-library-js.md
@@ -83,7 +83,7 @@ Migration highlights (see inline comments in the Playwright Test code snippet):
 
 ## Migrating queries
 
-All queries like `getBy...`, `findBy...`, `queryBy...` and their multi-element counterparts are replaced with `page.locator('...')`. Locators always auto-wait and retry when needed, so you don't have to worry about choosing the right method. When you want to do a [list operation](./locators#lists), e.g. assert a list of texts, Playwright automatically performs multi-element operations.
+All queries like `getBy...`, `findBy...`, `queryBy...` and their multi-element counterparts are replaced with `page.locator('...')`. Locators always auto-wait and retry when needed, so you don't have to worry about choosing the right method. When you want to do a [list operation](./locators#lists), e.g. assert a list of texts, Playwright automatically performs multi-element opertations.
 
 1. `getByRole`: use [role selector](./selectors#role-selector) `component.locator('role=button[name="Sign up"]')`.
 1. `getByText`: use `component.locator('text=some value')` and other variations of the [text selector](./selectors#text-selector).
@@ -141,7 +141,7 @@ Once you're on Playwright Test, you get a lot!
 - Run tests in isolation in parallel across multiple browsers
 - Built-in test artifact collection: [video recording](./test-configuration#record-video), [screenshots](./test-configuration#automatic-screenshots) and [playwright traces](./test-configuration#record-test-trace)
 
-You also get all these â¨ awesome tools â¨ that come bundled with Playwright Test:
+Also you get all these â¨ awesome tools â¨ that come bundled with Playwright Test:
 - [Playwright Inspector](./debug.md)
 - [Playwright Test Code generation](./auth#code-generation)
 - [Playwright Tracing](./trace-viewer) for post-mortem debugging
diff --git a/docs/src/trace-viewer-intro-csharp-java-python.md b/docs/src/trace-viewer-intro-csharp-java-python.md
index dc9b22ebb4d04b239fca495f66ee5caf011b9d06..8fba36f8f90b6a5b17447f13b0998e202b1a5c50 100644
--- a/docs/src/trace-viewer-intro-csharp-java-python.md
+++ b/docs/src/trace-viewer-intro-csharp-java-python.md
@@ -103,10 +103,18 @@ playwright show-trace trace.zip
 ```bash csharp
 pwsh bin/Debug/netX/playwright.ps1 show-trace trace.zip
 ```
+
+
 ## Viewing the trace
 
 View traces of your test by clicking through each action or hovering using the timeline and see the state of the page before and after the action. Inspect the log, source and network during each step of the test. The trace viewer creates a DOM snapshot so you can fully interact with it, open devtools etc.
 
-<img width="1386" alt="Playwright Trace Viewer" src="https://user-images.githubusercontent.com/13063165/189136442-4fc6d7a3-6f0c-4a5f-9d36-2650018b018a.png" />
+
+
+<img width="941" alt="image" src="https://user-images.githubusercontent.com/13063165/182618490-3340cfbf-7ac9-46e2-8157-6a8ce52dca28.png" />
+
+
 
 To learn more check out our detailed guide on [Trace Viewer](/trace-viewer.md).
+
+
diff --git a/docs/src/trace-viewer-intro-js.md b/docs/src/trace-viewer-intro-js.md
index 4a9c546026aaea55a05e298b83584b1fdd65c3e3..8f04e7082aa8ccebebd77b4e7f478ce51d08c4a8 100644
--- a/docs/src/trace-viewer-intro-js.md
+++ b/docs/src/trace-viewer-intro-js.md
@@ -3,7 +3,7 @@ id: trace-viewer-intro
 title: "Trace Viewer"
 ---
 
-Playwright Trace Viewer is a GUI tool that lets you explore recorded Playwright traces of your tests meaning you can go back and forward through each action of your test and visually see what was happening during each action.
+Playwright Trace Viewer is a GUI tool that lets you explore recorded Playwright traces of your tests meaning you can go back and forward though each action of your test and visually see what was happening during each action.
 
 **You will learn**
 
@@ -14,7 +14,7 @@ Playwright Trace Viewer is a GUI tool that lets you explore recorded Playwright
 
 ## Recording a Trace
 
-By default the [playwright.config](/test-configuration.md#record-test-trace) file will contain the configuration needed to create a `trace.zip` file for each test. Traces are setup to run `on-first-retry` meaning they will be run on the first retry of a failed test. Also `retries` are set to 2 when running on CI and 0 locally. This means the traces will be recorded on the first retry of a failed test but not on the first run and not on the second retry.
+By default the [playwright.config](/test-configuration.md#record-test-trace) file will contain the configuration needed to create a `trace.zip` file for each test. Traces are setup to run `on-first-retry` meaning they will be run on the first retry of a failed test. Also `retires` are set to 2 when running on CI and 0 locally. This means the traces will be recorded on the first retry of a failed test but not on the first run and not on the second retry.
 
 ```js tab=js-js
 // @ts-check
@@ -52,7 +52,7 @@ npx playwright test --trace on
 ```
 
 :::note 
-The `trace-on` flag was introduced in Playwright v1.25. Check your `package.json` to make sure you have at least this version of Playwright installed.
+The `trace-on` flag was introduced in Playwright v1.25. Check your `package.json` to sure you have at least this version of Playwright installed.
 :::
 
 ## Opening the HTML Report
@@ -65,11 +65,11 @@ npx playwright show-report
 
 In the HTML report click on the trace icon to directly open the trace file.
 
-<img width="960" alt="Playwright HTML Report" src="https://user-images.githubusercontent.com/13063165/189138532-bbb95411-3167-4f5f-985a-8886082fa7ab.png" />
+<img width="744" alt="image" src="https://user-images.githubusercontent.com/13063165/182853447-e26f4d39-b4e2-4d9b-a890-ac1838c088e1.png" />
 
-You can also click on the test file and scroll down to the `'Traces'` tab and open the trace by clicking on the trace screenshot.
+You can also click on the test file and then click the 'Retry #1' tab which will show you a traces section in your html report. Here you can open the trace by clicking on the screenshot.
 
-<img width="978" alt="Playwright HTML Report" src="https://user-images.githubusercontent.com/13063165/189139117-8c3a9979-0289-4ae9-8a76-cb8ff1e76539.png" />
+<img width="749" alt="image" src="https://user-images.githubusercontent.com/13063165/183130559-16a83a39-2f1d-4560-850c-d025fad789b3.png" />
 
 
 To learn more about reporters check out our detailed guide on reporters including the [HTML Reporter](/test-reporters.md#html-reporter).
@@ -78,6 +78,12 @@ To learn more about reporters check out our detailed guide on reporters includin
 
 View traces of your test by clicking through each action or hovering using the timeline and see the state of the page before and after the action. Inspect the log, source and network during each step of the test. The trace viewer creates a DOM snapshot so you can fully interact with it, open devtools etc.
 
-<img width="1386" alt="Playwright Trace Viewer" src="https://user-images.githubusercontent.com/13063165/189136442-4fc6d7a3-6f0c-4a5f-9d36-2650018b018a.png" />
+
+
+<img width="941" alt="image" src="https://user-images.githubusercontent.com/13063165/182618490-3340cfbf-7ac9-46e2-8157-6a8ce52dca28.png" />
+
+
 
 To learn more about traces check out our detailed guide on [Trace Viewer](/trace-viewer.md).
+
+
diff --git a/docs/src/videos.md b/docs/src/videos.md
index b31c1a2ff3c0fbec943efae74caf004e624030bb..9a5cae12db54c0010c21a86920da22d79c68c85d 100644
--- a/docs/src/videos.md
+++ b/docs/src/videos.md
@@ -3,115 +3,10 @@ id: videos
 title: "Videos"
 ---
 
-With Playwright you can record videos for your tests.
+<!-- TOC -->
 
-## Record video
-* langs: js
-
-Playwright Test can record videos for your tests, controlled by the `video` option in your Playwright config. By default videos are off.
-
-- `'off'` - Do not record video.
-- `'on'` - Record video for each test.
-- `'retain-on-failure'` - Record video for each test, but remove all videos from successful test runs.
-- `'on-first-retry'` - Record video only when retrying a test for the first time.
-
-Video files will appear in the test output directory, typically `test-results`. See [`property: TestOptions.video`] for advanced video configuration.
-
-Videos are saved upon [browser context](./browser-contexts.md) closure at the end of a test. If you create a browser context manually, make sure to await [`method: BrowserContext.close`].
-
-```js tab=js-js
-// @ts-check
-
-/** @type {import('@playwright/test').PlaywrightTestConfig} */
-const config = {
-  use: {
-    video: 'on-first-retry',
-  },
-};
-
-module.exports = config;
-```
-
-```js tab=js-ts
-import type { PlaywrightTestConfig } from '@playwright/test';
-const config: PlaywrightTestConfig = {
-  use: {
-    video: 'on-first-retry',
-  },
-};
-export default config;
-```
-
-```js tab=js-library
-const context = await browser.newContext({ recordVideo: { dir: 'videos/' } });
-// Make sure to await close, so that videos are saved.
-await context.close();
-```
-
-You can also specify video size. The video size defaults to the viewport size scaled down to fit 800x800. The video of the viewport is placed in the top-left corner of the output video, scaled down to fit if necessary. You may need to set the viewport size to match your desired video size.
-
-```js tab=js-js
-// @ts-check
-
-/** @type {import('@playwright/test').PlaywrightTestConfig} */
-const config = {
-  use: {
-    video: {
-      mode: 'on-first-retry', 
-      size: { width: 640, height: 480 }
-    }
-  },
-};
-
-module.exports = config;
-```
-
-```js tab=js-ts
-import type { PlaywrightTestConfig } from '@playwright/test';
-const config: PlaywrightTestConfig = {
-  use: {
-    video: {
-      mode: 'on-first-retry', 
-      size: { width: 640, height: 480 }
-    }
-  },
-};
-export default config;
-```
-
-```js tab=js-library
-const context = await browser.newContext({
-  recordVideo: {
-    dir: 'videos/',
-    size: { width: 640, height: 480 },
-  }
-});
-```
-
-For multi-page scenarios, you can access the video file associated with the page via the
-[`method: Page.video`].
-
-
-```js tab=js-js
-const path = await page.video().path();
-```
-
-```js tab=js-ts
-const path = await page.video().path();
-```
-
-```js tab=js-library
-const path = await page.video().path();
-```
-
-:::note
-Note that the video is only available after the page or browser context is closed.
-:::
-
-## Record video
-* langs: python, java, csharp
-
-Videos are saved upon [browser context](./browser-contexts.md) closure at the end of a test. If you create a browser context manually, make sure to await [`method: BrowserContext.close`].
+Playwright can record videos for all pages in a [browser context](./browser-contexts.md). Videos are saved
+upon context closure, so make sure to await [`method: BrowserContext.close`].
 
 ```js
 const context = await browser.newContext({ recordVideo: { dir: 'videos/' } });
@@ -215,3 +110,9 @@ var path = await page.Video.PathAsync();
 :::note
 Note that the video is only available after the page or browser context is closed.
 :::
+
+### API reference
+- [BrowserContext]
+- [`method: Browser.newContext`]
+- [`method: Browser.newPage`]
+- [`method: BrowserContext.close`]
diff --git a/docs/src/writing-tests-csharp.md b/docs/src/writing-tests-csharp.md
index 27616cf3ee5c0cf276c581bbbbfdc83fd2214eca..e9bb085a9dae821011619bb79c475a65f7906ead 100644
--- a/docs/src/writing-tests-csharp.md
+++ b/docs/src/writing-tests-csharp.md
@@ -24,10 +24,9 @@ using Microsoft.Playwright.NUnit;
 namespace PlaywrightTests;
 
 [Parallelizable(ParallelScope.Self)]
-[TestFixture]
 public class Tests : PageTest
 {
-    [PlaywrightTest]
+    [Test]
     public async Task HomepageHasPlaywrightInTitleAndGetStartedLinkLinkingtoTheIntroPage()
     {
         await Page.GotoAsync("https://playwright.dev");
@@ -62,7 +61,7 @@ namespace PlaywrightTests;
 [TestClass]
 public class UnitTest1 : PageTest
 {
-    [PlaywrightTestMethod]
+    [TestMethod]
     public async Task HomepageHasPlaywrightInTitleAndGetStartedLinkLinkingtoTheIntroPage()
     {
         await Page.GotoAsync("https://playwright.dev");
@@ -137,10 +136,9 @@ using NUnit.Framework;
 namespace PlaywrightTests;
 
 [Parallelizable(ParallelScope.Self)]
-[TestFixture]
 public class Tests : PageTest
 {
-    [PlaywrightTest]
+    [Test]
     public async Task BasicTest()
     {
         await Page.GotoAsync("https://playwright.dev");
@@ -159,7 +157,7 @@ namespace PlaywrightTests;
 [TestClass]
 public class UnitTest1 : PageTest
 {
-    [PlaywrightTestMethod]
+    [TestMethod]
     public async Task BasicTest()
     {
         await Page.GotoAsync("https://playwright.dev");
@@ -192,10 +190,9 @@ using NUnit.Framework;
 namespace PlaywrightTests;
 
 [Parallelizable(ParallelScope.Self)]
-[TestFixture]
 public class Tests : PageTest
 {
-    [PlaywrightTest]
+    [Test]
     public async Task MainNavigation()
     {
         // Assertions use the expect API.
@@ -221,7 +218,7 @@ namespace PlaywrightTests;
 [TestClass]
 public class UnitTest1 : PageTest
 {
-    [PlaywrightTestMethod]
+    [TestMethod]
     public async Task MainNavigation()
     {
         // Assertions use the expect API.
diff --git a/docs/src/writing-tests-js.md b/docs/src/writing-tests-js.md
index 7aaa78dc3f89935b88dd31c72e6f2542821b4ea7..6ed96a466768577d3061401c6e559820addd669f 100644
--- a/docs/src/writing-tests-js.md
+++ b/docs/src/writing-tests-js.md
@@ -145,5 +145,5 @@ test.describe("navigation", () => {
 ## What's Next
 
 - [Run single tests, multiple tests, headed mode](./running-tests.md)
-- [Generate tests with Codegen](./codegen-intro.md)
+- [Generate tests with Codegen](./codegen.md)
 - [See a trace of your tests](./trace-viewer-intro.md)
\ No newline at end of file
diff --git a/examples/components-vue/package-lock.json b/examples/components-vue/package-lock.json
index a817631e91de8f42e356ee6a71607ddd3c5981f9..25999fcbb562b2d5fa59ec3748c7eb4ae68c9d7a 100644
--- a/examples/components-vue/package-lock.json
+++ b/examples/components-vue/package-lock.json
@@ -14,7 +14,7 @@
         "@playwright/experimental-ct-vue": "^0.0.5",
         "@playwright/test": "1.22.0-alpha-apr-26-2022",
         "@vitejs/plugin-vue": "^2.3.1",
-        "vite": "^2.9.13"
+        "vite": "^2.9.5"
       }
     },
     "node_modules/@babel/parser": {
@@ -601,9 +601,9 @@
       }
     },
     "node_modules/nanoid": {
-      "version": "3.3.4",
-      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.4.tgz",
-      "integrity": "sha512-MqBkQh/OHTS2egovRtLk45wEyNXwF+cokD+1YPf9u5VfJiRdAiRwB2froX5Co9Rh20xs4siNPm8naNotSD6RBw==",
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.1.tgz",
+      "integrity": "sha512-n6Vs/3KGyxPQd6uO0eH4Bv0ojGSUvuLlIHtC3Y0kEO23YRge8H9x1GCzLn28YX0H66pMkxuaeESFq4tKISKwdw==",
       "bin": {
         "nanoid": "bin/nanoid.cjs"
       },
@@ -635,9 +635,9 @@
       }
     },
     "node_modules/postcss": {
-      "version": "8.4.16",
-      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.16.tgz",
-      "integrity": "sha512-ipHE1XBvKzm5xI7hiHCZJCSugxvsdq2mPnsq5+UF+VHCjiBvtDrlxJfMBToWaP9D5XlgNmcFGqoHmUn0EYEaRQ==",
+      "version": "8.4.12",
+      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.12.tgz",
+      "integrity": "sha512-lg6eITwYe9v6Hr5CncVbK70SoioNQIq81nsaG86ev5hAidQvmOeETBqs7jm43K2F5/Ley3ytDtriImV6TpNiSg==",
       "funding": [
         {
           "type": "opencollective",
@@ -649,7 +649,7 @@
         }
       ],
       "dependencies": {
-        "nanoid": "^3.3.4",
+        "nanoid": "^3.3.1",
         "picocolors": "^1.0.0",
         "source-map-js": "^1.0.2"
       },
@@ -715,13 +715,13 @@
       }
     },
     "node_modules/vite": {
-      "version": "2.9.13",
-      "resolved": "https://registry.npmjs.org/vite/-/vite-2.9.13.tgz",
-      "integrity": "sha512-AsOBAaT0AD7Mhe8DuK+/kE4aWYFMx/i0ZNi98hJclxb4e0OhQcZYUrvLjIaQ8e59Ui7txcvKMiJC1yftqpQoDw==",
+      "version": "2.9.5",
+      "resolved": "https://registry.npmjs.org/vite/-/vite-2.9.5.tgz",
+      "integrity": "sha512-dvMN64X2YEQgSXF1lYabKXw3BbN6e+BL67+P3Vy4MacnY+UzT1AfkHiioFSi9+uiDUiaDy7Ax/LQqivk6orilg==",
       "dev": true,
       "dependencies": {
         "esbuild": "^0.14.27",
-        "postcss": "^8.4.13",
+        "postcss": "^8.4.12",
         "resolve": "^1.22.0",
         "rollup": "^2.59.0"
       },
@@ -1123,9 +1123,9 @@
       }
     },
     "nanoid": {
-      "version": "3.3.4",
-      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.4.tgz",
-      "integrity": "sha512-MqBkQh/OHTS2egovRtLk45wEyNXwF+cokD+1YPf9u5VfJiRdAiRwB2froX5Co9Rh20xs4siNPm8naNotSD6RBw=="
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.1.tgz",
+      "integrity": "sha512-n6Vs/3KGyxPQd6uO0eH4Bv0ojGSUvuLlIHtC3Y0kEO23YRge8H9x1GCzLn28YX0H66pMkxuaeESFq4tKISKwdw=="
     },
     "path-parse": {
       "version": "1.0.7",
@@ -1145,11 +1145,11 @@
       "dev": true
     },
     "postcss": {
-      "version": "8.4.16",
-      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.16.tgz",
-      "integrity": "sha512-ipHE1XBvKzm5xI7hiHCZJCSugxvsdq2mPnsq5+UF+VHCjiBvtDrlxJfMBToWaP9D5XlgNmcFGqoHmUn0EYEaRQ==",
+      "version": "8.4.12",
+      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.12.tgz",
+      "integrity": "sha512-lg6eITwYe9v6Hr5CncVbK70SoioNQIq81nsaG86ev5hAidQvmOeETBqs7jm43K2F5/Ley3ytDtriImV6TpNiSg==",
       "requires": {
-        "nanoid": "^3.3.4",
+        "nanoid": "^3.3.1",
         "picocolors": "^1.0.0",
         "source-map-js": "^1.0.2"
       }
@@ -1191,14 +1191,14 @@
       "dev": true
     },
     "vite": {
-      "version": "2.9.13",
-      "resolved": "https://registry.npmjs.org/vite/-/vite-2.9.13.tgz",
-      "integrity": "sha512-AsOBAaT0AD7Mhe8DuK+/kE4aWYFMx/i0ZNi98hJclxb4e0OhQcZYUrvLjIaQ8e59Ui7txcvKMiJC1yftqpQoDw==",
+      "version": "2.9.5",
+      "resolved": "https://registry.npmjs.org/vite/-/vite-2.9.5.tgz",
+      "integrity": "sha512-dvMN64X2YEQgSXF1lYabKXw3BbN6e+BL67+P3Vy4MacnY+UzT1AfkHiioFSi9+uiDUiaDy7Ax/LQqivk6orilg==",
       "dev": true,
       "requires": {
         "esbuild": "^0.14.27",
         "fsevents": "~2.3.2",
-        "postcss": "^8.4.13",
+        "postcss": "^8.4.12",
         "resolve": "^1.22.0",
         "rollup": "^2.59.0"
       }
diff --git a/examples/components-vue/package.json b/examples/components-vue/package.json
index 44e0a479d8edaa2e734980fce397c03c8449968f..70197159600eb2d2fdd4a46d37c19c00ad3cee54 100644
--- a/examples/components-vue/package.json
+++ b/examples/components-vue/package.json
@@ -14,6 +14,6 @@
     "@playwright/experimental-ct-vue": "^0.0.5",
     "@playwright/test": "1.22.0-alpha-apr-26-2022",
     "@vitejs/plugin-vue": "^2.3.1",
-    "vite": "^2.9.13"
+    "vite": "^2.9.5"
   }
 }
diff --git a/examples/components-vue/vue.d.ts b/examples/components-vue/vue.d.ts
index df9f4ba88567b73fe41eb4805f596a6d929df43f..d4d073050ed3e6c3c015b285b28e25ab6290d415 100644
--- a/examples/components-vue/vue.d.ts
+++ b/examples/components-vue/vue.d.ts
@@ -1 +1,4 @@
-declare module '*.vue';
+declare module '*.vue' {
+  const value: any;
+  export default value;
+}
diff --git a/examples/todomvc/tests/integration.spec.ts b/examples/todomvc/tests/integration.spec.ts
index 4f53e5380ac40634073abf943e194da6326027b8..0faf4da1e6a7e22a5f436bb879df948a088f195f 100644
--- a/examples/todomvc/tests/integration.spec.ts
+++ b/examples/todomvc/tests/integration.spec.ts
@@ -242,7 +242,6 @@ test.describe('Editing', () => {
   test('should cancel edits on escape', async ({ page }) => {
     const todoItems = page.locator('.todo-list li');
     await todoItems.nth(1).dblclick();
-    await todoItems.nth(1).locator('.edit').fill('buy some sausages');
     await todoItems.nth(1).locator('.edit').press('Escape');
     await expect(todoItems).toHaveText(TODO_ITEMS);
   });
diff --git a/package-lock.json b/package-lock.json
index 131e3be85427c14222dcdcc55a6cae96fe00e6f9..72274f6ab74657f783109ab248911fef9edf78dd 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -1,12 +1,12 @@
 {
   "name": "playwright-internal",
-  "version": "1.27.0-next",
+  "version": "1.25.2",
   "lockfileVersion": 2,
   "requires": true,
   "packages": {
     "": {
       "name": "playwright-internal",
-      "version": "1.27.0-next",
+      "version": "1.25.2",
       "license": "Apache-2.0",
       "workspaces": [
         "packages/*"
@@ -22,7 +22,7 @@
         "@babel/plugin-transform-typescript": "^7.16.8",
         "@babel/preset-react": "^7.16.7",
         "@types/formidable": "^2.0.4",
-        "@types/node": "=14.18.24",
+        "@types/node": "=14.17.15",
         "@types/react": "^18.0.12",
         "@types/react-dom": "^18.0.5",
         "@types/resize-observer-browser": "^0.1.7",
@@ -31,6 +31,7 @@
         "@typescript-eslint/parser": "^5.10.2",
         "@vitejs/plugin-react": "^1.3.2",
         "@zip.js/zip.js": "^2.4.2",
+        "adm-zip": "^0.5.9",
         "ansi-to-html": "^0.7.2",
         "chokidar": "^3.5.3",
         "colors": "^1.4.0",
@@ -38,10 +39,9 @@
         "concurrently": "^6.2.1",
         "cross-env": "^7.0.3",
         "dotenv": "^16.0.0",
-        "electron": "19.0.11",
-        "electron-to-chromium": "^1.4.212",
+        "electron": "^16.2.8",
+        "electron-to-chromium": "^1.4.204",
         "enquirer": "^2.3.6",
-        "esbuild": "^0.15.6",
         "eslint": "^8.8.0",
         "eslint-plugin-notice": "^0.9.10",
         "eslint-plugin-react-hooks": "^4.3.0",
@@ -67,7 +67,8 @@
     },
     "node_modules/@ampproject/remapping": {
       "version": "2.2.0",
-      "license": "Apache-2.0",
+      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.2.0.tgz",
+      "integrity": "sha512-qRmjj8nj9qmLTQXXmaR1cck3UXSRMPrbsLJAasZpF+t3riI71BXed5ebIOYwQntykeZuhjsdweEc9BxH5Jc26w==",
       "dependencies": {
         "@jridgewell/gen-mapping": "^0.1.0",
         "@jridgewell/trace-mapping": "^0.3.9"
@@ -78,7 +79,8 @@
     },
     "node_modules/@ampproject/remapping/node_modules/@jridgewell/gen-mapping": {
       "version": "0.1.1",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.1.1.tgz",
+      "integrity": "sha512-sQXCasFk+U8lWYEe66WxRDOE9PjVz4vSM51fTu3Hw+ClTpUSQb718772vH3pyS5pShp6lvQM7SxgIDXXXmOX7w==",
       "dependencies": {
         "@jridgewell/set-array": "^1.0.0",
         "@jridgewell/sourcemap-codec": "^1.4.10"
@@ -89,8 +91,9 @@
     },
     "node_modules/@babel/cli": {
       "version": "7.16.8",
+      "resolved": "https://registry.npmjs.org/@babel/cli/-/cli-7.16.8.tgz",
+      "integrity": "sha512-FTKBbxyk5TclXOGmwYyqelqP5IF6hMxaeJskd85jbR5jBfYlwqgwAbJwnixi1ZBbTqKfFuAA95mdmUFeSRwyJA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "commander": "^4.0.1",
         "convert-source-map": "^1.1.0",
@@ -117,7 +120,8 @@
     },
     "node_modules/@babel/code-frame": {
       "version": "7.16.7",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.16.7.tgz",
+      "integrity": "sha512-iAXqUn8IIeBTNd72xsFlgaXHkMBMt6y4HJp1tIaK465CWLT/fG1aqB7ykr95gHHmlBdGbFeWWfyB4NJJ0nmeIg==",
       "dependencies": {
         "@babel/highlight": "^7.16.7"
       },
@@ -126,15 +130,17 @@
       }
     },
     "node_modules/@babel/compat-data": {
-      "version": "7.18.8",
-      "license": "MIT",
+      "version": "7.17.10",
+      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.17.10.tgz",
+      "integrity": "sha512-GZt/TCsG70Ms19gfZO1tM4CVnXsPgEPBCpJu+Qz3L0LUDsY5nZqFZglIoPC1kIYOtNBZlrnFT+klg12vFGZXrw==",
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/core": {
       "version": "7.16.12",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.16.12.tgz",
+      "integrity": "sha512-dK5PtG1uiN2ikk++5OzSYsitZKny4wOCD0nrO4TqnW4BVBTQ2NGS3NgilvT/TEyxTST7LNyWV/T4tXDoD3fOgg==",
       "dependencies": {
         "@babel/code-frame": "^7.16.7",
         "@babel/generator": "^7.16.8",
@@ -161,11 +167,12 @@
       }
     },
     "node_modules/@babel/generator": {
-      "version": "7.18.12",
-      "license": "MIT",
+      "version": "7.18.2",
+      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.18.2.tgz",
+      "integrity": "sha512-W1lG5vUwFvfMd8HVXqdfbuG7RuaSrTCCD8cl8fP8wOivdbtbIg2Db3IWUcgvfxKbbn6ZBGYRW/Zk1MIwK49mgw==",
       "dependencies": {
-        "@babel/types": "^7.18.10",
-        "@jridgewell/gen-mapping": "^0.3.2",
+        "@babel/types": "^7.18.2",
+        "@jridgewell/gen-mapping": "^0.3.0",
         "jsesc": "^2.5.1"
       },
       "engines": {
@@ -173,21 +180,23 @@
       }
     },
     "node_modules/@babel/helper-annotate-as-pure": {
-      "version": "7.18.6",
-      "license": "MIT",
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.16.7.tgz",
+      "integrity": "sha512-s6t2w/IPQVTAET1HitoowRGXooX8mCgtuP5195wD/QJPV6wYjpujCGF7JuMODVX2ZAJOf1GT6DT9MHEZvLOFSw==",
       "dependencies": {
-        "@babel/types": "^7.18.6"
+        "@babel/types": "^7.16.7"
       },
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/helper-compilation-targets": {
-      "version": "7.18.9",
-      "license": "MIT",
+      "version": "7.18.2",
+      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.18.2.tgz",
+      "integrity": "sha512-s1jnPotJS9uQnzFtiZVBUxe67CuBa679oWFHpxYYnTpRL/1ffhyX44R9uYiXoa/pLXcY9H2moJta0iaanlk/rQ==",
       "dependencies": {
-        "@babel/compat-data": "^7.18.8",
-        "@babel/helper-validator-option": "^7.18.6",
+        "@babel/compat-data": "^7.17.10",
+        "@babel/helper-validator-option": "^7.16.7",
         "browserslist": "^4.20.2",
         "semver": "^6.3.0"
       },
@@ -199,16 +208,17 @@
       }
     },
     "node_modules/@babel/helper-create-class-features-plugin": {
-      "version": "7.18.9",
-      "license": "MIT",
+      "version": "7.18.0",
+      "resolved": "https://registry.npmjs.org/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.18.0.tgz",
+      "integrity": "sha512-Kh8zTGR9de3J63e5nS0rQUdRs/kbtwoeQQ0sriS0lItjC96u8XXZN6lKpuyWd2coKSU13py/y+LTmThLuVX0Pg==",
       "dependencies": {
-        "@babel/helper-annotate-as-pure": "^7.18.6",
-        "@babel/helper-environment-visitor": "^7.18.9",
-        "@babel/helper-function-name": "^7.18.9",
-        "@babel/helper-member-expression-to-functions": "^7.18.9",
-        "@babel/helper-optimise-call-expression": "^7.18.6",
-        "@babel/helper-replace-supers": "^7.18.9",
-        "@babel/helper-split-export-declaration": "^7.18.6"
+        "@babel/helper-annotate-as-pure": "^7.16.7",
+        "@babel/helper-environment-visitor": "^7.16.7",
+        "@babel/helper-function-name": "^7.17.9",
+        "@babel/helper-member-expression-to-functions": "^7.17.7",
+        "@babel/helper-optimise-call-expression": "^7.16.7",
+        "@babel/helper-replace-supers": "^7.16.7",
+        "@babel/helper-split-export-declaration": "^7.16.7"
       },
       "engines": {
         "node": ">=6.9.0"
@@ -218,75 +228,82 @@
       }
     },
     "node_modules/@babel/helper-environment-visitor": {
-      "version": "7.18.9",
-      "license": "MIT",
+      "version": "7.18.2",
+      "resolved": "https://registry.npmjs.org/@babel/helper-environment-visitor/-/helper-environment-visitor-7.18.2.tgz",
+      "integrity": "sha512-14GQKWkX9oJzPiQQ7/J36FTXcD4kSp8egKjO9nINlSKiHITRA9q/R74qu8S9xlc/b/yjsJItQUeeh3xnGN0voQ==",
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/helper-function-name": {
-      "version": "7.18.9",
-      "license": "MIT",
+      "version": "7.17.9",
+      "resolved": "https://registry.npmjs.org/@babel/helper-function-name/-/helper-function-name-7.17.9.tgz",
+      "integrity": "sha512-7cRisGlVtiVqZ0MW0/yFB4atgpGLWEHUVYnb448hZK4x+vih0YO5UoS11XIYtZYqHd0dIPMdUSv8q5K4LdMnIg==",
       "dependencies": {
-        "@babel/template": "^7.18.6",
-        "@babel/types": "^7.18.9"
+        "@babel/template": "^7.16.7",
+        "@babel/types": "^7.17.0"
       },
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/helper-hoist-variables": {
-      "version": "7.18.6",
-      "license": "MIT",
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/helper-hoist-variables/-/helper-hoist-variables-7.16.7.tgz",
+      "integrity": "sha512-m04d/0Op34H5v7pbZw6pSKP7weA6lsMvfiIAMeIvkY/R4xQtBSMFEigu9QTZ2qB/9l22vsxtM8a+Q8CzD255fg==",
       "dependencies": {
-        "@babel/types": "^7.18.6"
+        "@babel/types": "^7.16.7"
       },
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/helper-member-expression-to-functions": {
-      "version": "7.18.9",
-      "license": "MIT",
+      "version": "7.17.7",
+      "resolved": "https://registry.npmjs.org/@babel/helper-member-expression-to-functions/-/helper-member-expression-to-functions-7.17.7.tgz",
+      "integrity": "sha512-thxXgnQ8qQ11W2wVUObIqDL4p148VMxkt5T/qpN5k2fboRyzFGFmKsTGViquyM5QHKUy48OZoca8kw4ajaDPyw==",
       "dependencies": {
-        "@babel/types": "^7.18.9"
+        "@babel/types": "^7.17.0"
       },
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/helper-module-imports": {
-      "version": "7.18.6",
-      "license": "MIT",
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.16.7.tgz",
+      "integrity": "sha512-LVtS6TqjJHFc+nYeITRo6VLXve70xmq7wPhWTqDJusJEgGmkAACWwMiTNrvfoQo6hEhFwAIixNkvB0jPXDL8Wg==",
       "dependencies": {
-        "@babel/types": "^7.18.6"
+        "@babel/types": "^7.16.7"
       },
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/helper-module-transforms": {
-      "version": "7.18.9",
-      "license": "MIT",
+      "version": "7.18.0",
+      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.18.0.tgz",
+      "integrity": "sha512-kclUYSUBIjlvnzN2++K9f2qzYKFgjmnmjwL4zlmU5f8ZtzgWe8s0rUPSTGy2HmK4P8T52MQsS+HTQAgZd3dMEA==",
       "dependencies": {
-        "@babel/helper-environment-visitor": "^7.18.9",
-        "@babel/helper-module-imports": "^7.18.6",
-        "@babel/helper-simple-access": "^7.18.6",
-        "@babel/helper-split-export-declaration": "^7.18.6",
-        "@babel/helper-validator-identifier": "^7.18.6",
-        "@babel/template": "^7.18.6",
-        "@babel/traverse": "^7.18.9",
-        "@babel/types": "^7.18.9"
+        "@babel/helper-environment-visitor": "^7.16.7",
+        "@babel/helper-module-imports": "^7.16.7",
+        "@babel/helper-simple-access": "^7.17.7",
+        "@babel/helper-split-export-declaration": "^7.16.7",
+        "@babel/helper-validator-identifier": "^7.16.7",
+        "@babel/template": "^7.16.7",
+        "@babel/traverse": "^7.18.0",
+        "@babel/types": "^7.18.0"
       },
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/helper-optimise-call-expression": {
-      "version": "7.18.6",
-      "license": "MIT",
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/helper-optimise-call-expression/-/helper-optimise-call-expression-7.16.7.tgz",
+      "integrity": "sha512-EtgBhg7rd/JcnpZFXpBy0ze1YRfdm7BnBX4uKMBd3ixa3RGAE002JZB66FJyNH7g0F38U05pXmA5P8cBh7z+1w==",
       "dependencies": {
-        "@babel/types": "^7.18.6"
+        "@babel/types": "^7.16.7"
       },
       "engines": {
         "node": ">=6.9.0"
@@ -294,30 +311,33 @@
     },
     "node_modules/@babel/helper-plugin-utils": {
       "version": "7.16.7",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.16.7.tgz",
+      "integrity": "sha512-Qg3Nk7ZxpgMrsox6HreY1ZNKdBq7K72tDSliA6dCl5f007jR4ne8iD5UzuNnCJH2xBf2BEEVGr+/OL6Gdp7RxA==",
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/helper-replace-supers": {
-      "version": "7.18.9",
-      "license": "MIT",
+      "version": "7.18.2",
+      "resolved": "https://registry.npmjs.org/@babel/helper-replace-supers/-/helper-replace-supers-7.18.2.tgz",
+      "integrity": "sha512-XzAIyxx+vFnrOxiQrToSUOzUOn0e1J2Li40ntddek1Y69AXUTXoDJ40/D5RdjFu7s7qHiaeoTiempZcbuVXh2Q==",
       "dependencies": {
-        "@babel/helper-environment-visitor": "^7.18.9",
-        "@babel/helper-member-expression-to-functions": "^7.18.9",
-        "@babel/helper-optimise-call-expression": "^7.18.6",
-        "@babel/traverse": "^7.18.9",
-        "@babel/types": "^7.18.9"
+        "@babel/helper-environment-visitor": "^7.18.2",
+        "@babel/helper-member-expression-to-functions": "^7.17.7",
+        "@babel/helper-optimise-call-expression": "^7.16.7",
+        "@babel/traverse": "^7.18.2",
+        "@babel/types": "^7.18.2"
       },
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/helper-simple-access": {
-      "version": "7.18.6",
-      "license": "MIT",
+      "version": "7.17.7",
+      "resolved": "https://registry.npmjs.org/@babel/helper-simple-access/-/helper-simple-access-7.17.7.tgz",
+      "integrity": "sha512-txyMCGroZ96i+Pxr3Je3lzEJjqwaRC9buMUgtomcrLe5Nd0+fk1h0LLA+ixUF5OW7AhHuQ7Es1WcQJZmZsz2XA==",
       "dependencies": {
-        "@babel/types": "^7.18.6"
+        "@babel/types": "^7.17.0"
       },
       "engines": {
         "node": ">=6.9.0"
@@ -325,7 +345,8 @@
     },
     "node_modules/@babel/helper-skip-transparent-expression-wrappers": {
       "version": "7.16.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/helper-skip-transparent-expression-wrappers/-/helper-skip-transparent-expression-wrappers-7.16.0.tgz",
+      "integrity": "sha512-+il1gTy0oHwUsBQZyJvukbB4vPMdcYBrFHa0Uc4AizLxbq6BOYC51Rv4tWocX9BLBDLZ4kc6qUFpQ6HRgL+3zw==",
       "dependencies": {
         "@babel/types": "^7.16.0"
       },
@@ -334,53 +355,51 @@
       }
     },
     "node_modules/@babel/helper-split-export-declaration": {
-      "version": "7.18.6",
-      "license": "MIT",
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.16.7.tgz",
+      "integrity": "sha512-xbWoy/PFoxSWazIToT9Sif+jJTlrMcndIsaOKvTA6u7QEo7ilkRZpjew18/W3c7nm8fXdUDXh02VXTbZ0pGDNw==",
       "dependencies": {
-        "@babel/types": "^7.18.6"
+        "@babel/types": "^7.16.7"
       },
       "engines": {
         "node": ">=6.9.0"
       }
     },
-    "node_modules/@babel/helper-string-parser": {
-      "version": "7.18.10",
-      "license": "MIT",
-      "engines": {
-        "node": ">=6.9.0"
-      }
-    },
     "node_modules/@babel/helper-validator-identifier": {
-      "version": "7.18.6",
-      "license": "MIT",
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.16.7.tgz",
+      "integrity": "sha512-hsEnFemeiW4D08A5gUAZxLBTXpZ39P+a+DGDsHw1yxqyQ/jzFEnxf5uTEGp+3bzAbNOxU1paTgYS4ECU/IgfDw==",
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/helper-validator-option": {
-      "version": "7.18.6",
-      "license": "MIT",
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.16.7.tgz",
+      "integrity": "sha512-TRtenOuRUVo9oIQGPC5G9DgK4743cdxvtOw0weQNpZXaS16SCBi5MNjZF8vba3ETURjZpTbVn7Vvcf2eAwFozQ==",
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/helpers": {
-      "version": "7.18.9",
-      "license": "MIT",
+      "version": "7.18.2",
+      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.18.2.tgz",
+      "integrity": "sha512-j+d+u5xT5utcQSzrh9p+PaJX94h++KN+ng9b9WEJq7pkUPAd61FGqhjuUEdfknb3E/uDBb7ruwEeKkIxNJPIrg==",
       "dependencies": {
-        "@babel/template": "^7.18.6",
-        "@babel/traverse": "^7.18.9",
-        "@babel/types": "^7.18.9"
+        "@babel/template": "^7.16.7",
+        "@babel/traverse": "^7.18.2",
+        "@babel/types": "^7.18.2"
       },
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/highlight": {
-      "version": "7.18.6",
-      "license": "MIT",
+      "version": "7.16.10",
+      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.16.10.tgz",
+      "integrity": "sha512-5FnTQLSLswEj6IkgVw5KusNUUFY9ZGqe/TRFnP/BKYHYgfh7tc+C7mwiy95/yNP7Dh9x580Vv8r7u7ZfTBFxdw==",
       "dependencies": {
-        "@babel/helper-validator-identifier": "^7.18.6",
+        "@babel/helper-validator-identifier": "^7.16.7",
         "chalk": "^2.0.0",
         "js-tokens": "^4.0.0"
       },
@@ -389,8 +408,9 @@
       }
     },
     "node_modules/@babel/parser": {
-      "version": "7.18.11",
-      "license": "MIT",
+      "version": "7.18.4",
+      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.18.4.tgz",
+      "integrity": "sha512-FDge0dFazETFcxGw/EXzOkN8uJp0PC7Qbm+Pe9T+av2zlBpOgunFHkQPPn+eRuClU73JF+98D531UgayY89tow==",
       "bin": {
         "parser": "bin/babel-parser.js"
       },
@@ -400,7 +420,8 @@
     },
     "node_modules/@babel/plugin-proposal-class-properties": {
       "version": "7.16.7",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-class-properties/-/plugin-proposal-class-properties-7.16.7.tgz",
+      "integrity": "sha512-IobU0Xme31ewjYOShSIqd/ZGM/r/cuOz2z0MDbNrhF5FW+ZVgi0f2lyeoj9KFPDOAqsYxmLWZte1WOwlvY9aww==",
       "dependencies": {
         "@babel/helper-create-class-features-plugin": "^7.16.7",
         "@babel/helper-plugin-utils": "^7.16.7"
@@ -414,7 +435,8 @@
     },
     "node_modules/@babel/plugin-proposal-decorators": {
       "version": "7.18.2",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-decorators/-/plugin-proposal-decorators-7.18.2.tgz",
+      "integrity": "sha512-kbDISufFOxeczi0v4NQP3p5kIeW6izn/6klfWBrIIdGZZe4UpHR+QU03FAoWjGGd9SUXAwbw2pup1kaL4OQsJQ==",
       "dependencies": {
         "@babel/helper-create-class-features-plugin": "^7.18.0",
         "@babel/helper-plugin-utils": "^7.17.12",
@@ -432,15 +454,17 @@
     },
     "node_modules/@babel/plugin-proposal-decorators/node_modules/@babel/helper-plugin-utils": {
       "version": "7.17.12",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
+      "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA==",
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/plugin-proposal-export-namespace-from": {
       "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-export-namespace-from/-/plugin-proposal-export-namespace-from-7.16.7.tgz",
+      "integrity": "sha512-ZxdtqDXLRGBL64ocZcs7ovt71L3jhC1RGSyR996svrCi3PYqHNkb3SwPJCs8RIzD86s+WPpt2S73+EHCGO+NUA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@babel/helper-plugin-utils": "^7.16.7",
         "@babel/plugin-syntax-export-namespace-from": "^7.8.3"
@@ -454,8 +478,9 @@
     },
     "node_modules/@babel/plugin-proposal-logical-assignment-operators": {
       "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-logical-assignment-operators/-/plugin-proposal-logical-assignment-operators-7.16.7.tgz",
+      "integrity": "sha512-K3XzyZJGQCr00+EtYtrDjmwX7o7PLK6U9bi1nCwkQioRFVUv6dJoxbQjtWVtP+bCPy82bONBKG8NPyQ4+i6yjg==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@babel/helper-plugin-utils": "^7.16.7",
         "@babel/plugin-syntax-logical-assignment-operators": "^7.10.4"
@@ -469,7 +494,8 @@
     },
     "node_modules/@babel/plugin-proposal-nullish-coalescing-operator": {
       "version": "7.16.7",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-nullish-coalescing-operator/-/plugin-proposal-nullish-coalescing-operator-7.16.7.tgz",
+      "integrity": "sha512-aUOrYU3EVtjf62jQrCj63pYZ7k6vns2h/DQvHPWGmsJRYzWXZ6/AsfgpiRy6XiuIDADhJzP2Q9MwSMKauBQ+UQ==",
       "dependencies": {
         "@babel/helper-plugin-utils": "^7.16.7",
         "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3"
@@ -483,7 +509,8 @@
     },
     "node_modules/@babel/plugin-proposal-object-rest-spread": {
       "version": "7.18.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-object-rest-spread/-/plugin-proposal-object-rest-spread-7.18.0.tgz",
+      "integrity": "sha512-nbTv371eTrFabDfHLElkn9oyf9VG+VKK6WMzhY2o4eHKaG19BToD9947zzGMO6I/Irstx9d8CwX6njPNIAR/yw==",
       "dependencies": {
         "@babel/compat-data": "^7.17.10",
         "@babel/helper-compilation-targets": "^7.17.10",
@@ -500,14 +527,16 @@
     },
     "node_modules/@babel/plugin-proposal-object-rest-spread/node_modules/@babel/helper-plugin-utils": {
       "version": "7.17.12",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
+      "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA==",
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/plugin-proposal-optional-chaining": {
       "version": "7.16.7",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-optional-chaining/-/plugin-proposal-optional-chaining-7.16.7.tgz",
+      "integrity": "sha512-eC3xy+ZrUcBtP7x+sq62Q/HYd674pPTb/77XZMb5wbDPGWIdUbSr4Agr052+zaUPSb+gGRnjxXfKFvx5iMJ+DA==",
       "dependencies": {
         "@babel/helper-plugin-utils": "^7.16.7",
         "@babel/helper-skip-transparent-expression-wrappers": "^7.16.0",
@@ -522,7 +551,8 @@
     },
     "node_modules/@babel/plugin-syntax-decorators": {
       "version": "7.17.12",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-decorators/-/plugin-syntax-decorators-7.17.12.tgz",
+      "integrity": "sha512-D1Hz0qtGTza8K2xGyEdVNCYLdVHukAcbQr4K3/s6r/esadyEriZovpJimQOpu8ju4/jV8dW/1xdaE0UpDroidw==",
       "dependencies": {
         "@babel/helper-plugin-utils": "^7.17.12"
       },
@@ -535,15 +565,17 @@
     },
     "node_modules/@babel/plugin-syntax-decorators/node_modules/@babel/helper-plugin-utils": {
       "version": "7.17.12",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
+      "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA==",
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/plugin-syntax-export-namespace-from": {
       "version": "7.8.3",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-export-namespace-from/-/plugin-syntax-export-namespace-from-7.8.3.tgz",
+      "integrity": "sha512-MXf5laXo6c1IbEbegDmzGPwGNTsHZmEy6QGznu5Sh2UCWvueywb2ee+CCE4zQiZstxU9BMoQO9i6zUFSY0Kj0Q==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@babel/helper-plugin-utils": "^7.8.3"
       },
@@ -552,10 +584,11 @@
       }
     },
     "node_modules/@babel/plugin-syntax-jsx": {
-      "version": "7.18.6",
-      "license": "MIT",
+      "version": "7.17.12",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.17.12.tgz",
+      "integrity": "sha512-spyY3E3AURfxh/RHtjx5j6hs8am5NbUBGfcZ2vB3uShSpZdQyXSf5rR5Mk76vbtlAZOelyVQ71Fg0x9SG4fsog==",
       "dependencies": {
-        "@babel/helper-plugin-utils": "^7.18.6"
+        "@babel/helper-plugin-utils": "^7.17.12"
       },
       "engines": {
         "node": ">=6.9.0"
@@ -565,16 +598,18 @@
       }
     },
     "node_modules/@babel/plugin-syntax-jsx/node_modules/@babel/helper-plugin-utils": {
-      "version": "7.18.6",
-      "license": "MIT",
+      "version": "7.17.12",
+      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
+      "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA==",
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/plugin-syntax-logical-assignment-operators": {
       "version": "7.10.4",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
+      "integrity": "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@babel/helper-plugin-utils": "^7.10.4"
       },
@@ -584,7 +619,8 @@
     },
     "node_modules/@babel/plugin-syntax-nullish-coalescing-operator": {
       "version": "7.8.3",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz",
+      "integrity": "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==",
       "dependencies": {
         "@babel/helper-plugin-utils": "^7.8.0"
       },
@@ -594,7 +630,8 @@
     },
     "node_modules/@babel/plugin-syntax-object-rest-spread": {
       "version": "7.8.3",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz",
+      "integrity": "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==",
       "dependencies": {
         "@babel/helper-plugin-utils": "^7.8.0"
       },
@@ -604,7 +641,8 @@
     },
     "node_modules/@babel/plugin-syntax-optional-chaining": {
       "version": "7.8.3",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz",
+      "integrity": "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==",
       "dependencies": {
         "@babel/helper-plugin-utils": "^7.8.0"
       },
@@ -613,10 +651,11 @@
       }
     },
     "node_modules/@babel/plugin-syntax-typescript": {
-      "version": "7.18.6",
-      "license": "MIT",
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.16.7.tgz",
+      "integrity": "sha512-YhUIJHHGkqPgEcMYkPCKTyGUdoGKWtopIycQyjJH8OjvRgOYsXsaKehLVPScKJWAULPxMa4N1vCe6szREFlZ7A==",
       "dependencies": {
-        "@babel/helper-plugin-utils": "^7.18.6"
+        "@babel/helper-plugin-utils": "^7.16.7"
       },
       "engines": {
         "node": ">=6.9.0"
@@ -625,16 +664,10 @@
         "@babel/core": "^7.0.0-0"
       }
     },
-    "node_modules/@babel/plugin-syntax-typescript/node_modules/@babel/helper-plugin-utils": {
-      "version": "7.18.9",
-      "license": "MIT",
-      "engines": {
-        "node": ">=6.9.0"
-      }
-    },
     "node_modules/@babel/plugin-transform-arrow-functions": {
       "version": "7.17.12",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-arrow-functions/-/plugin-transform-arrow-functions-7.17.12.tgz",
+      "integrity": "sha512-PHln3CNi/49V+mza4xMwrg+WGYevSF1oaiXaC2EQfdp4HWlSjRsrDXWJiQBKpP7749u6vQ9mcry2uuFOv5CXvA==",
       "dependencies": {
         "@babel/helper-plugin-utils": "^7.17.12"
       },
@@ -647,14 +680,16 @@
     },
     "node_modules/@babel/plugin-transform-arrow-functions/node_modules/@babel/helper-plugin-utils": {
       "version": "7.17.12",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
+      "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA==",
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/plugin-transform-block-scoping": {
       "version": "7.18.4",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-block-scoping/-/plugin-transform-block-scoping-7.18.4.tgz",
+      "integrity": "sha512-+Hq10ye+jlvLEogSOtq4mKvtk7qwcUQ1f0Mrueai866C82f844Yom2cttfJdMdqRLTxWpsbfbkIkOIfovyUQXw==",
       "dependencies": {
         "@babel/helper-plugin-utils": "^7.17.12"
       },
@@ -667,14 +702,16 @@
     },
     "node_modules/@babel/plugin-transform-block-scoping/node_modules/@babel/helper-plugin-utils": {
       "version": "7.17.12",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
+      "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA==",
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/plugin-transform-computed-properties": {
       "version": "7.17.12",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-computed-properties/-/plugin-transform-computed-properties-7.17.12.tgz",
+      "integrity": "sha512-a7XINeplB5cQUWMg1E/GI1tFz3LfK021IjV1rj1ypE+R7jHm+pIHmHl25VNkZxtx9uuYp7ThGk8fur1HHG7PgQ==",
       "dependencies": {
         "@babel/helper-plugin-utils": "^7.17.12"
       },
@@ -687,14 +724,16 @@
     },
     "node_modules/@babel/plugin-transform-computed-properties/node_modules/@babel/helper-plugin-utils": {
       "version": "7.17.12",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
+      "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA==",
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/plugin-transform-destructuring": {
       "version": "7.18.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-destructuring/-/plugin-transform-destructuring-7.18.0.tgz",
+      "integrity": "sha512-Mo69klS79z6KEfrLg/1WkmVnB8javh75HX4pi2btjvlIoasuxilEyjtsQW6XPrubNd7AQy0MMaNIaQE4e7+PQw==",
       "dependencies": {
         "@babel/helper-plugin-utils": "^7.17.12"
       },
@@ -707,15 +746,17 @@
     },
     "node_modules/@babel/plugin-transform-destructuring/node_modules/@babel/helper-plugin-utils": {
       "version": "7.17.12",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
+      "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA==",
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/plugin-transform-modules-commonjs": {
       "version": "7.17.9",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-commonjs/-/plugin-transform-modules-commonjs-7.17.9.tgz",
+      "integrity": "sha512-2TBFd/r2I6VlYn0YRTz2JdazS+FoUuQ2rIFHoAxtyP/0G3D82SBLaRq9rnUkpqlLg03Byfl/+M32mpxjO6KaPw==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@babel/helper-module-transforms": "^7.17.7",
         "@babel/helper-plugin-utils": "^7.16.7",
@@ -731,7 +772,8 @@
     },
     "node_modules/@babel/plugin-transform-parameters": {
       "version": "7.17.12",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-parameters/-/plugin-transform-parameters-7.17.12.tgz",
+      "integrity": "sha512-6qW4rWo1cyCdq1FkYri7AHpauchbGLXpdwnYsfxFb+KtddHENfsY5JZb35xUwkK5opOLcJ3BNd2l7PhRYGlwIA==",
       "dependencies": {
         "@babel/helper-plugin-utils": "^7.17.12"
       },
@@ -744,15 +786,17 @@
     },
     "node_modules/@babel/plugin-transform-parameters/node_modules/@babel/helper-plugin-utils": {
       "version": "7.17.12",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
+      "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA==",
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/plugin-transform-react-display-name": {
       "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-display-name/-/plugin-transform-react-display-name-7.16.7.tgz",
+      "integrity": "sha512-qgIg8BcZgd0G/Cz916D5+9kqX0c7nPZyXaP8R2tLNN5tkyIZdG5fEwBrxwplzSnjC1jvQmyMNVwUCZPcbGY7Pg==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@babel/helper-plugin-utils": "^7.16.7"
       },
@@ -764,14 +808,15 @@
       }
     },
     "node_modules/@babel/plugin-transform-react-jsx": {
-      "version": "7.18.10",
-      "license": "MIT",
+      "version": "7.17.12",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx/-/plugin-transform-react-jsx-7.17.12.tgz",
+      "integrity": "sha512-Lcaw8bxd1DKht3thfD4A12dqo1X16he1Lm8rIv8sTwjAYNInRS1qHa9aJoqvzpscItXvftKDCfaEQzwoVyXpEQ==",
       "dependencies": {
-        "@babel/helper-annotate-as-pure": "^7.18.6",
-        "@babel/helper-module-imports": "^7.18.6",
-        "@babel/helper-plugin-utils": "^7.18.9",
-        "@babel/plugin-syntax-jsx": "^7.18.6",
-        "@babel/types": "^7.18.10"
+        "@babel/helper-annotate-as-pure": "^7.16.7",
+        "@babel/helper-module-imports": "^7.16.7",
+        "@babel/helper-plugin-utils": "^7.17.12",
+        "@babel/plugin-syntax-jsx": "^7.17.12",
+        "@babel/types": "^7.17.12"
       },
       "engines": {
         "node": ">=6.9.0"
@@ -781,10 +826,11 @@
       }
     },
     "node_modules/@babel/plugin-transform-react-jsx-development": {
-      "version": "7.18.6",
-      "license": "MIT",
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-development/-/plugin-transform-react-jsx-development-7.16.7.tgz",
+      "integrity": "sha512-RMvQWvpla+xy6MlBpPlrKZCMRs2AGiHOGHY3xRwl0pEeim348dDyxeH4xBsMPbIMhujeq7ihE702eM2Ew0Wo+A==",
       "dependencies": {
-        "@babel/plugin-transform-react-jsx": "^7.18.6"
+        "@babel/plugin-transform-react-jsx": "^7.16.7"
       },
       "engines": {
         "node": ">=6.9.0"
@@ -794,10 +840,11 @@
       }
     },
     "node_modules/@babel/plugin-transform-react-jsx-self": {
-      "version": "7.18.6",
-      "license": "MIT",
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.16.7.tgz",
+      "integrity": "sha512-oe5VuWs7J9ilH3BCCApGoYjHoSO48vkjX2CbA5bFVhIuO2HKxA3vyF7rleA4o6/4rTDbk6r8hBW7Ul8E+UZrpA==",
       "dependencies": {
-        "@babel/helper-plugin-utils": "^7.18.6"
+        "@babel/helper-plugin-utils": "^7.16.7"
       },
       "engines": {
         "node": ">=6.9.0"
@@ -806,18 +853,12 @@
         "@babel/core": "^7.0.0-0"
       }
     },
-    "node_modules/@babel/plugin-transform-react-jsx-self/node_modules/@babel/helper-plugin-utils": {
-      "version": "7.18.6",
-      "license": "MIT",
-      "engines": {
-        "node": ">=6.9.0"
-      }
-    },
     "node_modules/@babel/plugin-transform-react-jsx-source": {
-      "version": "7.18.6",
-      "license": "MIT",
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.16.7.tgz",
+      "integrity": "sha512-rONFiQz9vgbsnaMtQlZCjIRwhJvlrPET8TabIUK2hzlXw9B9s2Ieaxte1SCOOXMbWRHodbKixNf3BLcWVOQ8Bw==",
       "dependencies": {
-        "@babel/helper-plugin-utils": "^7.18.6"
+        "@babel/helper-plugin-utils": "^7.16.7"
       },
       "engines": {
         "node": ">=6.9.0"
@@ -826,24 +867,19 @@
         "@babel/core": "^7.0.0-0"
       }
     },
-    "node_modules/@babel/plugin-transform-react-jsx-source/node_modules/@babel/helper-plugin-utils": {
-      "version": "7.18.6",
-      "license": "MIT",
-      "engines": {
-        "node": ">=6.9.0"
-      }
-    },
     "node_modules/@babel/plugin-transform-react-jsx/node_modules/@babel/helper-plugin-utils": {
-      "version": "7.18.9",
-      "license": "MIT",
+      "version": "7.17.12",
+      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
+      "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA==",
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/plugin-transform-react-pure-annotations": {
       "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-pure-annotations/-/plugin-transform-react-pure-annotations-7.16.7.tgz",
+      "integrity": "sha512-hs71ToC97k3QWxswh2ElzMFABXHvGiJ01IB1TbYQDGeWRKWz/MPUTh5jGExdHvosYKpnJW5Pm3S4+TA3FyX+GA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@babel/helper-annotate-as-pure": "^7.16.7",
         "@babel/helper-plugin-utils": "^7.16.7"
@@ -857,7 +893,8 @@
     },
     "node_modules/@babel/plugin-transform-spread": {
       "version": "7.17.12",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-spread/-/plugin-transform-spread-7.17.12.tgz",
+      "integrity": "sha512-9pgmuQAtFi3lpNUstvG9nGfk9DkrdmWNp9KeKPFmuZCpEnxRzYlS8JgwPjYj+1AWDOSvoGN0H30p1cBOmT/Svg==",
       "dependencies": {
         "@babel/helper-plugin-utils": "^7.17.12",
         "@babel/helper-skip-transparent-expression-wrappers": "^7.16.0"
@@ -871,18 +908,20 @@
     },
     "node_modules/@babel/plugin-transform-spread/node_modules/@babel/helper-plugin-utils": {
       "version": "7.17.12",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
+      "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA==",
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/plugin-transform-typescript": {
-      "version": "7.18.12",
-      "license": "MIT",
+      "version": "7.16.8",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-typescript/-/plugin-transform-typescript-7.16.8.tgz",
+      "integrity": "sha512-bHdQ9k7YpBDO2d0NVfkj51DpQcvwIzIusJ7mEUaMlbZq3Kt/U47j24inXZHQ5MDiYpCs+oZiwnXyKedE8+q7AQ==",
       "dependencies": {
-        "@babel/helper-create-class-features-plugin": "^7.18.9",
-        "@babel/helper-plugin-utils": "^7.18.9",
-        "@babel/plugin-syntax-typescript": "^7.18.6"
+        "@babel/helper-create-class-features-plugin": "^7.16.7",
+        "@babel/helper-plugin-utils": "^7.16.7",
+        "@babel/plugin-syntax-typescript": "^7.16.7"
       },
       "engines": {
         "node": ">=6.9.0"
@@ -891,17 +930,11 @@
         "@babel/core": "^7.0.0-0"
       }
     },
-    "node_modules/@babel/plugin-transform-typescript/node_modules/@babel/helper-plugin-utils": {
-      "version": "7.18.9",
-      "license": "MIT",
-      "engines": {
-        "node": ">=6.9.0"
-      }
-    },
     "node_modules/@babel/preset-react": {
       "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/preset-react/-/preset-react-7.16.7.tgz",
+      "integrity": "sha512-fWpyI8UM/HE6DfPBzD8LnhQ/OcH8AgTaqcqP2nGOXEUV+VKBR5JRN9hCk9ai+zQQ57vtm9oWeXguBCPNUjytgA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@babel/helper-plugin-utils": "^7.16.7",
         "@babel/helper-validator-option": "^7.16.7",
@@ -917,62 +950,32 @@
         "@babel/core": "^7.0.0-0"
       }
     },
-    "node_modules/@babel/preset-typescript": {
-      "version": "7.18.6",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/helper-plugin-utils": "^7.18.6",
-        "@babel/helper-validator-option": "^7.18.6",
-        "@babel/plugin-transform-typescript": "^7.18.6"
-      },
-      "engines": {
-        "node": ">=6.9.0"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0-0"
-      }
-    },
-    "node_modules/@babel/preset-typescript/node_modules/@babel/helper-plugin-utils": {
-      "version": "7.18.9",
-      "license": "MIT",
-      "engines": {
-        "node": ">=6.9.0"
-      }
-    },
     "node_modules/@babel/template": {
-      "version": "7.18.10",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/code-frame": "^7.18.6",
-        "@babel/parser": "^7.18.10",
-        "@babel/types": "^7.18.10"
-      },
-      "engines": {
-        "node": ">=6.9.0"
-      }
-    },
-    "node_modules/@babel/template/node_modules/@babel/code-frame": {
-      "version": "7.18.6",
-      "license": "MIT",
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.16.7.tgz",
+      "integrity": "sha512-I8j/x8kHUrbYRTUxXrrMbfCa7jxkE7tZre39x3kjr9hvI82cK1FfqLygotcWN5kdPGWcLdWMHpSBavse5tWw3w==",
       "dependencies": {
-        "@babel/highlight": "^7.18.6"
+        "@babel/code-frame": "^7.16.7",
+        "@babel/parser": "^7.16.7",
+        "@babel/types": "^7.16.7"
       },
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/traverse": {
-      "version": "7.18.11",
-      "license": "MIT",
+      "version": "7.18.2",
+      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.18.2.tgz",
+      "integrity": "sha512-9eNwoeovJ6KH9zcCNnENY7DMFwTU9JdGCFtqNLfUAqtUHRCOsTOqWoffosP8vKmNYeSBUv3yVJXjfd8ucwOjUA==",
       "dependencies": {
-        "@babel/code-frame": "^7.18.6",
-        "@babel/generator": "^7.18.10",
-        "@babel/helper-environment-visitor": "^7.18.9",
-        "@babel/helper-function-name": "^7.18.9",
-        "@babel/helper-hoist-variables": "^7.18.6",
-        "@babel/helper-split-export-declaration": "^7.18.6",
-        "@babel/parser": "^7.18.11",
-        "@babel/types": "^7.18.10",
+        "@babel/code-frame": "^7.16.7",
+        "@babel/generator": "^7.18.2",
+        "@babel/helper-environment-visitor": "^7.18.2",
+        "@babel/helper-function-name": "^7.17.9",
+        "@babel/helper-hoist-variables": "^7.16.7",
+        "@babel/helper-split-export-declaration": "^7.16.7",
+        "@babel/parser": "^7.18.0",
+        "@babel/types": "^7.18.2",
         "debug": "^4.1.0",
         "globals": "^11.1.0"
       },
@@ -980,22 +983,12 @@
         "node": ">=6.9.0"
       }
     },
-    "node_modules/@babel/traverse/node_modules/@babel/code-frame": {
-      "version": "7.18.6",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/highlight": "^7.18.6"
-      },
-      "engines": {
-        "node": ">=6.9.0"
-      }
-    },
     "node_modules/@babel/types": {
-      "version": "7.18.10",
-      "license": "MIT",
+      "version": "7.18.4",
+      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.18.4.tgz",
+      "integrity": "sha512-ThN1mBcMq5pG/Vm2IcBmPPfyPXbd8S02rS+OBIDENdufvqC7Z/jHPCv9IcP01277aKtDI8g/2XysBN4hA8niiw==",
       "dependencies": {
-        "@babel/helper-string-parser": "^7.18.10",
-        "@babel/helper-validator-identifier": "^7.18.6",
+        "@babel/helper-validator-identifier": "^7.16.7",
         "to-fast-properties": "^2.0.0"
       },
       "engines": {
@@ -1004,8 +997,9 @@
     },
     "node_modules/@electron/get": {
       "version": "1.14.1",
+      "resolved": "https://registry.npmjs.org/@electron/get/-/get-1.14.1.tgz",
+      "integrity": "sha512-BrZYyL/6m0ZXz/lDxy/nlVhQz+WF+iPS6qXolEU8atw7h6v1aYkjwJZ63m+bJMBTxDE66X+r2tPS4a/8C82sZw==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "debug": "^4.1.1",
         "env-paths": "^2.2.0",
@@ -1023,26 +1017,11 @@
         "global-tunnel-ng": "^2.7.1"
       }
     },
-    "node_modules/@esbuild/linux-loong64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.15.6.tgz",
-      "integrity": "sha512-hqmVU2mUjH6J2ZivHphJ/Pdse2ZD+uGCHK0uvsiLDk/JnSedEVj77CiVUnbMKuU4tih1TZZL8tG9DExQg/GZsw==",
-      "cpu": [
-        "loong64"
-      ],
-      "dev": true,
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
     "node_modules/@eslint/eslintrc": {
       "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-1.0.5.tgz",
+      "integrity": "sha512-BLxsnmK3KyPunz5wmCCpqy0YelEoxxGmH73Is+Z74oOTMtExcjkr3dDR6quwrjh1YspA8DH9gnX1o069KiS9AQ==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "ajv": "^6.12.4",
         "debug": "^4.3.2",
@@ -1060,8 +1039,9 @@
     },
     "node_modules/@eslint/eslintrc/node_modules/globals": {
       "version": "13.12.0",
+      "resolved": "https://registry.npmjs.org/globals/-/globals-13.12.0.tgz",
+      "integrity": "sha512-uS8X6lSKN2JumVoXrbUz+uG4BYG+eiawqm3qFcT7ammfbUHeCBoJMlHcec/S3krSk73/AE/f0szYFmgAA3kYZg==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "type-fest": "^0.20.2"
       },
@@ -1074,16 +1054,18 @@
     },
     "node_modules/@eslint/eslintrc/node_modules/ignore": {
       "version": "4.0.6",
+      "resolved": "https://registry.npmjs.org/ignore/-/ignore-4.0.6.tgz",
+      "integrity": "sha512-cyFDKrqc/YdcWFniJhzI42+AzS+gNwmUzOSFcRCQYwySuBBBy/KjuxWLZ/FHEH6Moq1NizMOBWyTcv8O4OZIMg==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">= 4"
       }
     },
     "node_modules/@eslint/eslintrc/node_modules/type-fest": {
       "version": "0.20.2",
+      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
+      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
       "dev": true,
-      "license": "(MIT OR CC0-1.0)",
       "engines": {
         "node": ">=10"
       },
@@ -1093,8 +1075,9 @@
     },
     "node_modules/@humanwhocodes/config-array": {
       "version": "0.9.3",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.9.3.tgz",
+      "integrity": "sha512-3xSMlXHh03hCcCmFc0rbKp3Ivt2PFEJnQUJDDMTJQ2wkECZWdq4GePs2ctc5H8zV+cHPaq8k2vU8mrQjA6iHdQ==",
       "dev": true,
-      "license": "Apache-2.0",
       "dependencies": {
         "@humanwhocodes/object-schema": "^1.2.1",
         "debug": "^4.1.1",
@@ -1106,14 +1089,16 @@
     },
     "node_modules/@humanwhocodes/object-schema": {
       "version": "1.2.1",
-      "dev": true,
-      "license": "BSD-3-Clause"
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-1.2.1.tgz",
+      "integrity": "sha512-ZnQMnLV4e7hDlUvw8H+U8ASL02SS2Gn6+9Ac3wGGLIe7+je2AeAOxPY+izIPJDfFDb7eDjev0Us8MO1iFRN8hA==",
+      "dev": true
     },
     "node_modules/@jridgewell/gen-mapping": {
-      "version": "0.3.2",
-      "license": "MIT",
+      "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.1.tgz",
+      "integrity": "sha512-GcHwniMlA2z+WFPWuY8lp3fsza0I8xPFMWL5+n8LYyP6PSvPrXf4+n8stDHZY2DM0zy9sVkRDy1jDI4XGzYVqg==",
       "dependencies": {
-        "@jridgewell/set-array": "^1.0.1",
+        "@jridgewell/set-array": "^1.0.0",
         "@jridgewell/sourcemap-codec": "^1.4.10",
         "@jridgewell/trace-mapping": "^0.3.9"
       },
@@ -1123,25 +1108,29 @@
     },
     "node_modules/@jridgewell/resolve-uri": {
       "version": "3.0.7",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.0.7.tgz",
+      "integrity": "sha512-8cXDaBBHOr2pQ7j77Y6Vp5VDT2sIqWyWQ56TjEq4ih/a4iST3dItRe8Q9fp0rrIl9DoKhWQtUQz/YpOxLkXbNA==",
       "engines": {
         "node": ">=6.0.0"
       }
     },
     "node_modules/@jridgewell/set-array": {
       "version": "1.1.1",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.1.1.tgz",
+      "integrity": "sha512-Ct5MqZkLGEXTVmQYbGtx9SVqD2fqwvdubdps5D3djjAkgkKwT918VNOz65pEHFaYTeWcukmJmH5SwsA9Tn2ObQ==",
       "engines": {
         "node": ">=6.0.0"
       }
     },
     "node_modules/@jridgewell/sourcemap-codec": {
       "version": "1.4.13",
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.13.tgz",
+      "integrity": "sha512-GryiOJmNcWbovBxTfZSF71V/mXbgcV3MewDe3kIMCLyIh5e7SKAeUZs+rMnJ8jkMolZ/4/VsdBmMrw3l+VdZ3w=="
     },
     "node_modules/@jridgewell/trace-mapping": {
       "version": "0.3.13",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.13.tgz",
+      "integrity": "sha512-o1xbKhp9qnIAoHJSWd6KlCZfqslL4valSF81H8ImioOAxluWYWOpWkpyktY2vnt4tbrX9XYaxovq6cgowaJp2w==",
       "dependencies": {
         "@jridgewell/resolve-uri": "^3.0.3",
         "@jridgewell/sourcemap-codec": "^1.4.10"
@@ -1149,14 +1138,16 @@
     },
     "node_modules/@nicolo-ribaudo/chokidar-2": {
       "version": "2.1.8-no-fsevents.3",
+      "resolved": "https://registry.npmjs.org/@nicolo-ribaudo/chokidar-2/-/chokidar-2-2.1.8-no-fsevents.3.tgz",
+      "integrity": "sha512-s88O1aVtXftvp5bCPB7WnmXc5IwOZZ7YPuwNPt+GtOOXpPvad1LfbmjYv+qII7zP6RU2QGnqve27dnLycEnyEQ==",
       "dev": true,
-      "license": "MIT",
       "optional": true
     },
     "node_modules/@nodelib/fs.scandir": {
       "version": "2.1.5",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
+      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@nodelib/fs.stat": "2.0.5",
         "run-parallel": "^1.1.9"
@@ -1167,16 +1158,18 @@
     },
     "node_modules/@nodelib/fs.stat": {
       "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
+      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">= 8"
       }
     },
     "node_modules/@nodelib/fs.walk": {
       "version": "1.2.8",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
+      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@nodelib/fs.scandir": "2.1.5",
         "fastq": "^1.6.0"
@@ -1189,10 +1182,6 @@
       "resolved": "packages/playwright-ct-react",
       "link": true
     },
-    "node_modules/@playwright/experimental-ct-solid": {
-      "resolved": "packages/playwright-ct-solid",
-      "link": true
-    },
     "node_modules/@playwright/experimental-ct-svelte": {
       "resolved": "packages/playwright-ct-svelte",
       "link": true
@@ -1211,7 +1200,8 @@
     },
     "node_modules/@rollup/pluginutils": {
       "version": "4.2.1",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@rollup/pluginutils/-/pluginutils-4.2.1.tgz",
+      "integrity": "sha512-iKnFXr7NkdZAIHiIWE+BX5ULi/ucVFYWD6TbAV+rZctiRTY2PL6tsIKhoIOaoskiWAkgu+VsbXgUVDNLHf+InQ==",
       "dependencies": {
         "estree-walker": "^2.0.1",
         "picomatch": "^2.2.2"
@@ -1222,16 +1212,18 @@
     },
     "node_modules/@sindresorhus/is": {
       "version": "0.14.0",
+      "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-0.14.0.tgz",
+      "integrity": "sha512-9NET910DNaIPngYnLLPeg+Ogzqsi9uM4mSboU5y6p8S5DzMTVEsJZrawi+BoDNUVBa2DhJqQYUFvMDfgU062LQ==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=6"
       }
     },
     "node_modules/@szmarczak/http-timer": {
       "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/@szmarczak/http-timer/-/http-timer-1.1.2.tgz",
+      "integrity": "sha512-XIB2XbzHTN6ieIjfIMV9hlVcfPU26s2vafYWQcZHWXHOxiaRZYEDKEwdl129Zyg50+foYV2jCgtrqSA6qNuNSA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "defer-to-connect": "^1.0.1"
       },
@@ -1241,35 +1233,41 @@
     },
     "node_modules/@types/formidable": {
       "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/@types/formidable/-/formidable-2.0.4.tgz",
+      "integrity": "sha512-6HYcnmBCeby/nNGgX9kq1DxUpK2UcB3yoHCr3GzFjjqkpivOdcBSbsXP9NbxLcPEi11Fl/L41rbFCIsteF9sbg==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@types/node": "*"
       }
     },
     "node_modules/@types/json-schema": {
       "version": "7.0.9",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.9.tgz",
+      "integrity": "sha512-qcUXuemtEu+E5wZSJHNxUXeCZhAfXKQ41D+duX+VYPde7xyEVZci+/oXKJL13tnRs9lR2pr4fod59GT6/X1/yQ==",
+      "dev": true
     },
     "node_modules/@types/node": {
-      "version": "14.18.24",
-      "license": "MIT"
+      "version": "14.17.15",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-14.17.15.tgz",
+      "integrity": "sha512-D1sdW0EcSCmNdLKBGMYb38YsHUS6JcM7yQ6sLQ9KuZ35ck7LYCKE7kYFHOO59ayFOY3zobWVZxf4KXhYHcHYFA=="
     },
     "node_modules/@types/normalize-package-data": {
       "version": "2.4.1",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/@types/normalize-package-data/-/normalize-package-data-2.4.1.tgz",
+      "integrity": "sha512-Gj7cI7z+98M282Tqmp2K5EIsoouUEzbBJhQQzDE3jSIRk6r9gsz0oUokqIUR4u1R3dMHo0pDHM7sNOHyhulypw==",
+      "dev": true
     },
     "node_modules/@types/prop-types": {
       "version": "15.7.3",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.3.tgz",
+      "integrity": "sha512-KfRL3PuHmqQLOG+2tGpRO26Ctg+Cq1E01D2DMriKEATHgWLfeNDmq9e29Q9WIky0dQ3NPkd1mzYH8Lm936Z9qw==",
+      "dev": true
     },
     "node_modules/@types/react": {
       "version": "18.0.12",
+      "resolved": "https://registry.npmjs.org/@types/react/-/react-18.0.12.tgz",
+      "integrity": "sha512-duF1OTASSBQtcigUvhuiTB1Ya3OvSy+xORCiEf20H0P0lzx+/KeVsA99U5UjLXSbyo1DRJDlLKqTeM1ngosqtg==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@types/prop-types": "*",
         "@types/scheduler": "*",
@@ -1278,34 +1276,39 @@
     },
     "node_modules/@types/react-dom": {
       "version": "18.0.5",
+      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-18.0.5.tgz",
+      "integrity": "sha512-OWPWTUrY/NIrjsAPkAk1wW9LZeIjSvkXRhclsFO8CZcZGCOg2G0YZy4ft+rOyYxy8B7ui5iZzi9OkDebZ7/QSA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@types/react": "*"
       }
     },
     "node_modules/@types/resize-observer-browser": {
       "version": "0.1.7",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/@types/resize-observer-browser/-/resize-observer-browser-0.1.7.tgz",
+      "integrity": "sha512-G9eN0Sn0ii9PWQ3Vl72jDPgeJwRWhv2Qk/nQkJuWmRmOB4HX3/BhD5SE1dZs/hzPZL/WKnvF0RHdTSG54QJFyg==",
+      "dev": true
     },
     "node_modules/@types/scheduler": {
       "version": "0.16.1",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/@types/scheduler/-/scheduler-0.16.1.tgz",
+      "integrity": "sha512-EaCxbanVeyxDRTQBkdLb3Bvl/HK7PBK6UJjsSixB0iHKoWxE5uu2Q/DgtpOhPIojN0Zl1whvOd7PoHs2P0s5eA==",
+      "dev": true
     },
     "node_modules/@types/xml2js": {
       "version": "0.4.9",
+      "resolved": "https://registry.npmjs.org/@types/xml2js/-/xml2js-0.4.9.tgz",
+      "integrity": "sha512-CHiCKIihl1pychwR2RNX5mAYmJDACgFVCMT5OArMaO3erzwXVcBqPcusr+Vl8yeeXukxZqtF8mZioqX+mpjjdw==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@types/node": "*"
       }
     },
     "node_modules/@typescript-eslint/eslint-plugin": {
       "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-5.10.2.tgz",
+      "integrity": "sha512-4W/9lLuE+v27O/oe7hXJKjNtBLnZE8tQAFpapdxwSVHqtmIoPB1gph3+ahNwVuNL37BX7YQHyGF9Xv6XCnIX2Q==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@typescript-eslint/scope-manager": "5.10.2",
         "@typescript-eslint/type-utils": "5.10.2",
@@ -1336,8 +1339,9 @@
     },
     "node_modules/@typescript-eslint/eslint-plugin/node_modules/semver": {
       "version": "7.3.5",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.5.tgz",
+      "integrity": "sha512-PoeGJYh8HK4BTO/a9Tf6ZG3veo/A7ZVsYrSA6J8ny9nb3B1VrpkuN+z9OE5wfE5p6H4LchYZsegiQgbJD94ZFQ==",
       "dev": true,
-      "license": "ISC",
       "dependencies": {
         "lru-cache": "^6.0.0"
       },
@@ -1350,8 +1354,9 @@
     },
     "node_modules/@typescript-eslint/eslint-plugin/node_modules/tsutils": {
       "version": "3.21.0",
+      "resolved": "https://registry.npmjs.org/tsutils/-/tsutils-3.21.0.tgz",
+      "integrity": "sha512-mHKK3iUXL+3UF6xL5k0PEhKRUBKPBCv/+RkEOpjRWxxx27KKRBmmA60A9pgOUvMi8GKhRMPEmjBRPzs2W7O1OA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "tslib": "^1.8.1"
       },
@@ -1364,8 +1369,9 @@
     },
     "node_modules/@typescript-eslint/parser": {
       "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-5.10.2.tgz",
+      "integrity": "sha512-JaNYGkaQVhP6HNF+lkdOr2cAs2wdSZBoalE22uYWq8IEv/OVH0RksSGydk+sW8cLoSeYmC+OHvRyv2i4AQ7Czg==",
       "dev": true,
-      "license": "BSD-2-Clause",
       "dependencies": {
         "@typescript-eslint/scope-manager": "5.10.2",
         "@typescript-eslint/types": "5.10.2",
@@ -1390,8 +1396,9 @@
     },
     "node_modules/@typescript-eslint/scope-manager": {
       "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-5.10.2.tgz",
+      "integrity": "sha512-39Tm6f4RoZoVUWBYr3ekS75TYgpr5Y+X0xLZxXqcZNDWZdJdYbKd3q2IR4V9y5NxxiPu/jxJ8XP7EgHiEQtFnw==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@typescript-eslint/types": "5.10.2",
         "@typescript-eslint/visitor-keys": "5.10.2"
@@ -1406,8 +1413,9 @@
     },
     "node_modules/@typescript-eslint/type-utils": {
       "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-5.10.2.tgz",
+      "integrity": "sha512-uRKSvw/Ccs5FYEoXW04Z5VfzF2iiZcx8Fu7DGIB7RHozuP0VbKNzP1KfZkHBTM75pCpsWxIthEH1B33dmGBKHw==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@typescript-eslint/utils": "5.10.2",
         "debug": "^4.3.2",
@@ -1431,8 +1439,9 @@
     },
     "node_modules/@typescript-eslint/type-utils/node_modules/tsutils": {
       "version": "3.21.0",
+      "resolved": "https://registry.npmjs.org/tsutils/-/tsutils-3.21.0.tgz",
+      "integrity": "sha512-mHKK3iUXL+3UF6xL5k0PEhKRUBKPBCv/+RkEOpjRWxxx27KKRBmmA60A9pgOUvMi8GKhRMPEmjBRPzs2W7O1OA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "tslib": "^1.8.1"
       },
@@ -1445,8 +1454,9 @@
     },
     "node_modules/@typescript-eslint/types": {
       "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-5.10.2.tgz",
+      "integrity": "sha512-Qfp0qk/5j2Rz3p3/WhWgu4S1JtMcPgFLnmAKAW061uXxKSa7VWKZsDXVaMXh2N60CX9h6YLaBoy9PJAfCOjk3w==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
       },
@@ -1457,8 +1467,9 @@
     },
     "node_modules/@typescript-eslint/typescript-estree": {
       "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-5.10.2.tgz",
+      "integrity": "sha512-WHHw6a9vvZls6JkTgGljwCsMkv8wu8XU8WaYKeYhxhWXH/atZeiMW6uDFPLZOvzNOGmuSMvHtZKd6AuC8PrwKQ==",
       "dev": true,
-      "license": "BSD-2-Clause",
       "dependencies": {
         "@typescript-eslint/types": "5.10.2",
         "@typescript-eslint/visitor-keys": "5.10.2",
@@ -1483,8 +1494,9 @@
     },
     "node_modules/@typescript-eslint/typescript-estree/node_modules/semver": {
       "version": "7.3.5",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.5.tgz",
+      "integrity": "sha512-PoeGJYh8HK4BTO/a9Tf6ZG3veo/A7ZVsYrSA6J8ny9nb3B1VrpkuN+z9OE5wfE5p6H4LchYZsegiQgbJD94ZFQ==",
       "dev": true,
-      "license": "ISC",
       "dependencies": {
         "lru-cache": "^6.0.0"
       },
@@ -1497,8 +1509,9 @@
     },
     "node_modules/@typescript-eslint/typescript-estree/node_modules/tsutils": {
       "version": "3.21.0",
+      "resolved": "https://registry.npmjs.org/tsutils/-/tsutils-3.21.0.tgz",
+      "integrity": "sha512-mHKK3iUXL+3UF6xL5k0PEhKRUBKPBCv/+RkEOpjRWxxx27KKRBmmA60A9pgOUvMi8GKhRMPEmjBRPzs2W7O1OA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "tslib": "^1.8.1"
       },
@@ -1511,8 +1524,9 @@
     },
     "node_modules/@typescript-eslint/utils": {
       "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-5.10.2.tgz",
+      "integrity": "sha512-vuJaBeig1NnBRkf7q9tgMLREiYD7zsMrsN1DA3wcoMDvr3BTFiIpKjGiYZoKPllfEwN7spUjv7ZqD+JhbVjEPg==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@types/json-schema": "^7.0.9",
         "@typescript-eslint/scope-manager": "5.10.2",
@@ -1534,8 +1548,9 @@
     },
     "node_modules/@typescript-eslint/visitor-keys": {
       "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-5.10.2.tgz",
+      "integrity": "sha512-zHIhYGGGrFJvvyfwHk5M08C5B5K4bewkm+rrvNTKk1/S15YHR+SA/QUF8ZWscXSfEaB8Nn2puZj+iHcoxVOD/Q==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@typescript-eslint/types": "5.10.2",
         "eslint-visitor-keys": "^3.0.0"
@@ -1550,8 +1565,8 @@
     },
     "node_modules/@vitejs/plugin-react": {
       "version": "1.3.2",
-      "dev": true,
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-1.3.2.tgz",
+      "integrity": "sha512-aurBNmMo0kz1O4qRoY+FM4epSA39y3ShWGuqfLRA/3z0oEJAdtoSfgA3aO98/PCCHAqMaduLxIxErWrVKIFzXA==",
       "dependencies": {
         "@babel/core": "^7.17.10",
         "@babel/plugin-transform-react-jsx": "^7.17.3",
@@ -1568,8 +1583,8 @@
     },
     "node_modules/@vitejs/plugin-react/node_modules/@babel/core": {
       "version": "7.18.2",
-      "dev": true,
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.18.2.tgz",
+      "integrity": "sha512-A8pri1YJiC5UnkdrWcmfZTJTV85b4UXTAfImGmCfYmax4TR9Cw8sDS0MOk++Gp2mE/BefVJ5nwy5yzqNJbP/DQ==",
       "dependencies": {
         "@ampproject/remapping": "^2.1.0",
         "@babel/code-frame": "^7.16.7",
@@ -1597,11 +1612,13 @@
     },
     "node_modules/@vue/babel-helper-vue-jsx-merge-props": {
       "version": "1.2.1",
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/@vue/babel-helper-vue-jsx-merge-props/-/babel-helper-vue-jsx-merge-props-1.2.1.tgz",
+      "integrity": "sha512-QOi5OW45e2R20VygMSNhyQHvpdUwQZqGPc748JLGCYEy+yp8fNFNdbNIGAgZmi9e+2JHPd6i6idRuqivyicIkA=="
     },
     "node_modules/@vue/babel-plugin-transform-vue-jsx": {
       "version": "1.2.1",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@vue/babel-plugin-transform-vue-jsx/-/babel-plugin-transform-vue-jsx-1.2.1.tgz",
+      "integrity": "sha512-HJuqwACYehQwh1fNT8f4kyzqlNMpBuUK4rSiSES5D4QsYncv5fxFsLyrxFPG2ksO7t5WP+Vgix6tt6yKClwPzA==",
       "dependencies": {
         "@babel/helper-module-imports": "^7.0.0",
         "@babel/plugin-syntax-jsx": "^7.2.0",
@@ -1616,7 +1633,8 @@
     },
     "node_modules/@vue/babel-preset-jsx": {
       "version": "1.2.4",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@vue/babel-preset-jsx/-/babel-preset-jsx-1.2.4.tgz",
+      "integrity": "sha512-oRVnmN2a77bYDJzeGSt92AuHXbkIxbf/XXSE3klINnh9AXBmVS1DGa1f0d+dDYpLfsAKElMnqKTQfKn7obcL4w==",
       "dependencies": {
         "@vue/babel-helper-vue-jsx-merge-props": "^1.2.1",
         "@vue/babel-plugin-transform-vue-jsx": "^1.2.1",
@@ -1633,7 +1651,8 @@
     },
     "node_modules/@vue/babel-sugar-composition-api-inject-h": {
       "version": "1.2.1",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@vue/babel-sugar-composition-api-inject-h/-/babel-sugar-composition-api-inject-h-1.2.1.tgz",
+      "integrity": "sha512-4B3L5Z2G+7s+9Bwbf+zPIifkFNcKth7fQwekVbnOA3cr3Pq71q71goWr97sk4/yyzH8phfe5ODVzEjX7HU7ItQ==",
       "dependencies": {
         "@babel/plugin-syntax-jsx": "^7.2.0"
       },
@@ -1643,7 +1662,8 @@
     },
     "node_modules/@vue/babel-sugar-composition-api-render-instance": {
       "version": "1.2.4",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@vue/babel-sugar-composition-api-render-instance/-/babel-sugar-composition-api-render-instance-1.2.4.tgz",
+      "integrity": "sha512-joha4PZznQMsxQYXtR3MnTgCASC9u3zt9KfBxIeuI5g2gscpTsSKRDzWQt4aqNIpx6cv8On7/m6zmmovlNsG7Q==",
       "dependencies": {
         "@babel/plugin-syntax-jsx": "^7.2.0"
       },
@@ -1653,7 +1673,8 @@
     },
     "node_modules/@vue/babel-sugar-functional-vue": {
       "version": "1.2.2",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@vue/babel-sugar-functional-vue/-/babel-sugar-functional-vue-1.2.2.tgz",
+      "integrity": "sha512-JvbgGn1bjCLByIAU1VOoepHQ1vFsroSA/QkzdiSs657V79q6OwEWLCQtQnEXD/rLTA8rRit4rMOhFpbjRFm82w==",
       "dependencies": {
         "@babel/plugin-syntax-jsx": "^7.2.0"
       },
@@ -1663,7 +1684,8 @@
     },
     "node_modules/@vue/babel-sugar-inject-h": {
       "version": "1.2.2",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@vue/babel-sugar-inject-h/-/babel-sugar-inject-h-1.2.2.tgz",
+      "integrity": "sha512-y8vTo00oRkzQTgufeotjCLPAvlhnpSkcHFEp60+LJUwygGcd5Chrpn5480AQp/thrxVm8m2ifAk0LyFel9oCnw==",
       "dependencies": {
         "@babel/plugin-syntax-jsx": "^7.2.0"
       },
@@ -1673,7 +1695,8 @@
     },
     "node_modules/@vue/babel-sugar-v-model": {
       "version": "1.2.3",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@vue/babel-sugar-v-model/-/babel-sugar-v-model-1.2.3.tgz",
+      "integrity": "sha512-A2jxx87mySr/ulAsSSyYE8un6SIH0NWHiLaCWpodPCVOlQVODCaSpiR4+IMsmBr73haG+oeCuSvMOM+ttWUqRQ==",
       "dependencies": {
         "@babel/plugin-syntax-jsx": "^7.2.0",
         "@vue/babel-helper-vue-jsx-merge-props": "^1.2.1",
@@ -1688,7 +1711,8 @@
     },
     "node_modules/@vue/babel-sugar-v-on": {
       "version": "1.2.3",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@vue/babel-sugar-v-on/-/babel-sugar-v-on-1.2.3.tgz",
+      "integrity": "sha512-kt12VJdz/37D3N3eglBywV8GStKNUhNrsxChXIV+o0MwVXORYuhDTHJRKPgLJRb/EY3vM2aRFQdxJBp9CLikjw==",
       "dependencies": {
         "@babel/plugin-syntax-jsx": "^7.2.0",
         "@vue/babel-plugin-transform-vue-jsx": "^1.2.1",
@@ -1700,7 +1724,8 @@
     },
     "node_modules/@vue/compiler-core": {
       "version": "3.2.36",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@vue/compiler-core/-/compiler-core-3.2.36.tgz",
+      "integrity": "sha512-bbyZM5hvBicv0PW3KUfVi+x3ylHnfKG7DOn5wM+f2OztTzTjLEyBb/5yrarIYpmnGitVGbjZqDbODyW4iK8hqw==",
       "peer": true,
       "dependencies": {
         "@babel/parser": "^7.16.4",
@@ -1711,7 +1736,8 @@
     },
     "node_modules/@vue/compiler-core/node_modules/source-map": {
       "version": "0.6.1",
-      "license": "BSD-3-Clause",
+      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
+      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
       "peer": true,
       "engines": {
         "node": ">=0.10.0"
@@ -1719,7 +1745,8 @@
     },
     "node_modules/@vue/compiler-dom": {
       "version": "3.2.36",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@vue/compiler-dom/-/compiler-dom-3.2.36.tgz",
+      "integrity": "sha512-tcOTAOiW4s24QLnq+ON6J+GRONXJ+A/mqKCORi0LSlIh8XQlNnlm24y8xIL8la+ZDgkdbjarQ9ZqYSvEja6gVA==",
       "peer": true,
       "dependencies": {
         "@vue/compiler-core": "3.2.36",
@@ -1728,7 +1755,8 @@
     },
     "node_modules/@vue/compiler-sfc": {
       "version": "3.2.36",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@vue/compiler-sfc/-/compiler-sfc-3.2.36.tgz",
+      "integrity": "sha512-AvGb4bTj4W8uQ4BqaSxo7UwTEqX5utdRSMyHy58OragWlt8nEACQ9mIeQh3K4di4/SX+41+pJrLIY01lHAOFOA==",
       "peer": true,
       "dependencies": {
         "@babel/parser": "^7.16.4",
@@ -1745,7 +1773,8 @@
     },
     "node_modules/@vue/compiler-sfc/node_modules/magic-string": {
       "version": "0.25.9",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.25.9.tgz",
+      "integrity": "sha512-RmF0AsMzgt25qzqqLc1+MbHmhdx0ojF2Fvs4XnOqz2ZOBXzzkEwc/dJQZCYHAn7v1jbVOjAZfK8msRn4BxO4VQ==",
       "peer": true,
       "dependencies": {
         "sourcemap-codec": "^1.4.8"
@@ -1753,7 +1782,8 @@
     },
     "node_modules/@vue/compiler-sfc/node_modules/source-map": {
       "version": "0.6.1",
-      "license": "BSD-3-Clause",
+      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
+      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
       "peer": true,
       "engines": {
         "node": ">=0.10.0"
@@ -1761,7 +1791,8 @@
     },
     "node_modules/@vue/compiler-ssr": {
       "version": "3.2.36",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@vue/compiler-ssr/-/compiler-ssr-3.2.36.tgz",
+      "integrity": "sha512-+KugInUFRvOxEdLkZwE+W43BqHyhBh0jpYXhmqw1xGq2dmE6J9eZ8UUSOKNhdHtQ/iNLWWeK/wPZkVLUf3YGaw==",
       "peer": true,
       "dependencies": {
         "@vue/compiler-dom": "3.2.36",
@@ -1770,7 +1801,8 @@
     },
     "node_modules/@vue/component-compiler-utils": {
       "version": "3.3.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@vue/component-compiler-utils/-/component-compiler-utils-3.3.0.tgz",
+      "integrity": "sha512-97sfH2mYNU+2PzGrmK2haqffDpVASuib9/w2/noxiFi31Z54hW+q3izKQXXQZSNhtiUpAI36uSuYepeBe4wpHQ==",
       "dependencies": {
         "consolidate": "^0.15.1",
         "hash-sum": "^1.0.2",
@@ -1787,7 +1819,8 @@
     },
     "node_modules/@vue/component-compiler-utils/node_modules/consolidate": {
       "version": "0.15.1",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/consolidate/-/consolidate-0.15.1.tgz",
+      "integrity": "sha512-DW46nrsMJgy9kqAbPt5rKaCr7uFtpo4mSUvLHIUbJEjm0vo+aY5QLwBUq3FK4tRnJr/X0Psc0C4jf/h+HtXSMw==",
       "dependencies": {
         "bluebird": "^3.1.1"
       },
@@ -1797,11 +1830,13 @@
     },
     "node_modules/@vue/component-compiler-utils/node_modules/hash-sum": {
       "version": "1.0.2",
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/hash-sum/-/hash-sum-1.0.2.tgz",
+      "integrity": "sha512-fUs4B4L+mlt8/XAtSOGMUO1TXmAelItBPtJG7CyHJfYTdDjwisntGO2JQz7oUsatOY9o68+57eziUVNw/mRHmA=="
     },
     "node_modules/@vue/component-compiler-utils/node_modules/lru-cache": {
       "version": "4.1.5",
-      "license": "ISC",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-4.1.5.tgz",
+      "integrity": "sha512-sWZlbEP2OsHNkXrMl5GYk/jKk70MBng6UU4YI/qGDYbgf6YbP4EvmqISbXCoJiRKs+1bSpFHVgQxvJ17F2li5g==",
       "dependencies": {
         "pseudomap": "^1.0.2",
         "yallist": "^2.1.2"
@@ -1809,11 +1844,13 @@
     },
     "node_modules/@vue/component-compiler-utils/node_modules/picocolors": {
       "version": "0.2.1",
-      "license": "ISC"
+      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-0.2.1.tgz",
+      "integrity": "sha512-cMlDqaLEqfSaW8Z7N5Jw+lyIW869EzT73/F5lhtY9cLGoVxSXznfgfXMO0Z5K0o0Q2TkTXq+0KFsdnSe3jDViA=="
     },
     "node_modules/@vue/component-compiler-utils/node_modules/postcss": {
       "version": "7.0.39",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/postcss/-/postcss-7.0.39.tgz",
+      "integrity": "sha512-yioayjNbHn6z1/Bywyb2Y4s3yvDAeXGOyxqD+LnVOinq6Mdmd++SW2wUNVzavyyHxd6+DxzWGIuosg6P1Rj8uA==",
       "dependencies": {
         "picocolors": "^0.2.1",
         "source-map": "^0.6.1"
@@ -1828,18 +1865,21 @@
     },
     "node_modules/@vue/component-compiler-utils/node_modules/source-map": {
       "version": "0.6.1",
-      "license": "BSD-3-Clause",
+      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
+      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
       "engines": {
         "node": ">=0.10.0"
       }
     },
     "node_modules/@vue/component-compiler-utils/node_modules/yallist": {
       "version": "2.1.2",
-      "license": "ISC"
+      "resolved": "https://registry.npmjs.org/yallist/-/yallist-2.1.2.tgz",
+      "integrity": "sha1-HBH5IY8HYImkfdUS+TxmmaaoHVI="
     },
     "node_modules/@vue/reactivity": {
       "version": "3.2.36",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@vue/reactivity/-/reactivity-3.2.36.tgz",
+      "integrity": "sha512-c2qvopo0crh9A4GXi2/2kfGYMxsJW4tVILrqRPydVGZHhq0fnzy6qmclWOhBFckEhmyxmpHpdJtIRYGeKcuhnA==",
       "peer": true,
       "dependencies": {
         "@vue/shared": "3.2.36"
@@ -1847,7 +1887,8 @@
     },
     "node_modules/@vue/reactivity-transform": {
       "version": "3.2.36",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@vue/reactivity-transform/-/reactivity-transform-3.2.36.tgz",
+      "integrity": "sha512-Jk5o2BhpODC9XTA7o4EL8hSJ4JyrFWErLtClG3NH8wDS7ri9jBDWxI7/549T7JY9uilKsaNM+4pJASLj5dtRwA==",
       "peer": true,
       "dependencies": {
         "@babel/parser": "^7.16.4",
@@ -1859,7 +1900,8 @@
     },
     "node_modules/@vue/reactivity-transform/node_modules/magic-string": {
       "version": "0.25.9",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.25.9.tgz",
+      "integrity": "sha512-RmF0AsMzgt25qzqqLc1+MbHmhdx0ojF2Fvs4XnOqz2ZOBXzzkEwc/dJQZCYHAn7v1jbVOjAZfK8msRn4BxO4VQ==",
       "peer": true,
       "dependencies": {
         "sourcemap-codec": "^1.4.8"
@@ -1867,7 +1909,8 @@
     },
     "node_modules/@vue/runtime-core": {
       "version": "3.2.36",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@vue/runtime-core/-/runtime-core-3.2.36.tgz",
+      "integrity": "sha512-PTWBD+Lub+1U3/KhbCExrfxyS14hstLX+cBboxVHaz+kXoiDLNDEYAovPtxeTutbqtClIXtft+wcGdC+FUQ9qQ==",
       "peer": true,
       "dependencies": {
         "@vue/reactivity": "3.2.36",
@@ -1876,7 +1919,8 @@
     },
     "node_modules/@vue/runtime-dom": {
       "version": "3.2.36",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@vue/runtime-dom/-/runtime-dom-3.2.36.tgz",
+      "integrity": "sha512-gYPYblm7QXHVuBohqNRRT7Wez0f2Mx2D40rb4fleehrJU9CnkjG0phhcGEZFfGwCmHZRqBCRgbFWE98bPULqkg==",
       "peer": true,
       "dependencies": {
         "@vue/runtime-core": "3.2.36",
@@ -1886,28 +1930,33 @@
     },
     "node_modules/@vue/runtime-dom/node_modules/csstype": {
       "version": "2.6.20",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/csstype/-/csstype-2.6.20.tgz",
+      "integrity": "sha512-/WwNkdXfckNgw6S5R125rrW8ez139lBHWouiBvX8dfMFtcn6V81REDqnH7+CRpRipfYlyU1CmOnOxrmGcFOjeA==",
       "peer": true
     },
     "node_modules/@vue/shared": {
       "version": "3.2.36",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@vue/shared/-/shared-3.2.36.tgz",
+      "integrity": "sha512-JtB41wXl7Au3+Nl3gD16Cfpj7k/6aCroZ6BbOiCMFCMvrOpkg/qQUXTso2XowaNqBbnkuGHurLAqkLBxNGc1hQ==",
       "peer": true
     },
     "node_modules/@zip.js/zip.js": {
       "version": "2.4.2",
-      "dev": true,
-      "license": "BSD-3-Clause"
+      "resolved": "https://registry.npmjs.org/@zip.js/zip.js/-/zip.js-2.4.2.tgz",
+      "integrity": "sha512-D4xr9g7U625Q01lQASr9g1sQWEGhndyd+G3v3OvY/qH3pwaJDpbVDy+TO6yEq7c8teQdjjTiiBvlcQcVtT+itg==",
+      "dev": true
     },
     "node_modules/abbrev": {
       "version": "1.1.1",
-      "dev": true,
-      "license": "ISC"
+      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
+      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==",
+      "dev": true
     },
     "node_modules/acorn": {
       "version": "8.7.0",
+      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.7.0.tgz",
+      "integrity": "sha512-V/LGr1APy+PXIwKebEWrkZPwoeoF+w1jiOBUmuxuiUIaOHtob8Qc9BTrYo7VuI5fR8tqsy+buA2WFooR5olqvQ==",
       "dev": true,
-      "license": "MIT",
       "bin": {
         "acorn": "bin/acorn"
       },
@@ -1917,16 +1966,27 @@
     },
     "node_modules/acorn-jsx": {
       "version": "5.3.2",
+      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
+      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
       "dev": true,
-      "license": "MIT",
       "peerDependencies": {
         "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
       }
     },
+    "node_modules/adm-zip": {
+      "version": "0.5.9",
+      "resolved": "https://registry.npmjs.org/adm-zip/-/adm-zip-0.5.9.tgz",
+      "integrity": "sha512-s+3fXLkeeLjZ2kLjCBwQufpI5fuN+kIGBxu6530nVQZGVol0d7Y/M88/xw9HGGUcJjKf8LutN3VPRUBq6N7Ajg==",
+      "dev": true,
+      "engines": {
+        "node": ">=6.0"
+      }
+    },
     "node_modules/ajv": {
       "version": "6.12.6",
+      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
+      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "fast-deep-equal": "^3.1.1",
         "fast-json-stable-stringify": "^2.0.0",
@@ -1940,23 +2000,26 @@
     },
     "node_modules/ansi-colors": {
       "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/ansi-colors/-/ansi-colors-4.1.1.tgz",
+      "integrity": "sha512-JoX0apGbHaUJBNl6yF+p6JAFYZ666/hhCGKN5t9QFjbJQKUU/g8MNbFDbvfrgKXvI1QpZplPOnwIo99lX/AAmA==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=6"
       }
     },
     "node_modules/ansi-regex": {
       "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
+      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=8"
       }
     },
     "node_modules/ansi-styles": {
       "version": "3.2.1",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
+      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
       "dependencies": {
         "color-convert": "^1.9.0"
       },
@@ -1966,8 +2029,9 @@
     },
     "node_modules/ansi-to-html": {
       "version": "0.7.2",
+      "resolved": "https://registry.npmjs.org/ansi-to-html/-/ansi-to-html-0.7.2.tgz",
+      "integrity": "sha512-v6MqmEpNlxF+POuyhKkidusCHWWkaLcGRURzivcU3I9tv7k4JVhFcnukrM5Rlk2rUywdZuzYAZ+kbZqWCnfN3g==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "entities": "^2.2.0"
       },
@@ -1980,13 +2044,15 @@
     },
     "node_modules/argparse": {
       "version": "2.0.1",
-      "dev": true,
-      "license": "Python-2.0"
+      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
+      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
+      "dev": true
     },
     "node_modules/args": {
       "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/args/-/args-5.0.1.tgz",
+      "integrity": "sha512-1kqmFCFsPffavQFGt8OxJdIcETti99kySRUPMpOhaGjL6mRJn8HFU1OxKY5bMqfZKUwTQc1mZkAjmGYaVOHFtQ==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "camelcase": "5.0.0",
         "chalk": "2.4.2",
@@ -1999,93 +2065,72 @@
     },
     "node_modules/array-find-index": {
       "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/array-find-index/-/array-find-index-1.0.2.tgz",
+      "integrity": "sha1-3wEKoSh+Fku9pvlyOwqWoexBh6E=",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
       }
     },
     "node_modules/array-union": {
       "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz",
+      "integrity": "sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=8"
       }
     },
     "node_modules/asap": {
       "version": "2.0.6",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
+      "integrity": "sha1-5QNHYR1+aQlDIIu9r+vLwvuGbUY=",
+      "dev": true
     },
     "node_modules/async": {
       "version": "0.2.10",
+      "resolved": "https://registry.npmjs.org/async/-/async-0.2.10.tgz",
+      "integrity": "sha512-eAkdoKxU6/LkKDBzLpT+t6Ff5EtfSF4wx1WfJiPEEV7WNLnDaRXk0oVysiEPm262roaachGexwUv94WhSgN5TQ==",
       "dev": true
     },
     "node_modules/babel-plugin-dynamic-import-node": {
       "version": "2.3.3",
+      "resolved": "https://registry.npmjs.org/babel-plugin-dynamic-import-node/-/babel-plugin-dynamic-import-node-2.3.3.tgz",
+      "integrity": "sha512-jZVI+s9Zg3IqA/kdi0i6UDCybUI3aSBLnglhYbSSjKlV7yF1F/5LWv8MakQmvYpnbJDS6fcBL2KzHSxNCMtWSQ==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "object.assign": "^4.1.0"
       }
     },
-    "node_modules/babel-plugin-jsx-dom-expressions": {
-      "version": "0.33.14",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/helper-module-imports": "7.16.0",
-        "@babel/plugin-syntax-jsx": "^7.16.5",
-        "@babel/types": "^7.16.0",
-        "html-entities": "2.3.2"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0"
-      }
-    },
-    "node_modules/babel-plugin-jsx-dom-expressions/node_modules/@babel/helper-module-imports": {
-      "version": "7.16.0",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/types": "^7.16.0"
-      },
-      "engines": {
-        "node": ">=6.9.0"
-      }
-    },
-    "node_modules/babel-preset-solid": {
-      "version": "1.4.8",
-      "license": "MIT",
-      "dependencies": {
-        "babel-plugin-jsx-dom-expressions": "^0.33.14"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0"
-      }
-    },
     "node_modules/balanced-match": {
       "version": "1.0.2",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
+      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
+      "dev": true
     },
     "node_modules/basic-auth-parser": {
       "version": "0.0.2",
+      "resolved": "https://registry.npmjs.org/basic-auth-parser/-/basic-auth-parser-0.0.2.tgz",
+      "integrity": "sha1-zp5xp38jwSee7NJlmypGJEwVbkE=",
       "dev": true
     },
     "node_modules/bluebird": {
       "version": "3.7.2",
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.7.2.tgz",
+      "integrity": "sha512-XpNj6GDQzdfW+r2Wnn7xiSAd7TM3jzkxGXBGTtWKuSXv1xUV+azxAm8jdWZN06QTQk+2N2XB9jRDkvbmQmcRtg=="
     },
     "node_modules/boolean": {
       "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/boolean/-/boolean-3.2.0.tgz",
+      "integrity": "sha512-d0II/GO9uf9lfUHH2BQsjxzRJZBdsjgsBiW4BvhWk/3qoKwQFjIDVN19PfX8F2D/r9PCMTtLWjYVCFrpeYUzsw==",
       "dev": true,
-      "license": "MIT",
       "optional": true
     },
     "node_modules/brace-expansion": {
       "version": "1.1.11",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
+      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "balanced-match": "^1.0.0",
         "concat-map": "0.0.1"
@@ -2093,8 +2138,9 @@
     },
     "node_modules/braces": {
       "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
+      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "fill-range": "^7.0.1"
       },
@@ -2104,6 +2150,8 @@
     },
     "node_modules/browserslist": {
       "version": "4.20.3",
+      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.20.3.tgz",
+      "integrity": "sha512-NBhymBQl1zM0Y5dQT/O+xiLP9/rzOIQdKM/eMJBAq7yBgaB6krIYLGejrwVYnSHZdqjscB1SPuAjHwxjvN6Wdg==",
       "funding": [
         {
           "type": "opencollective",
@@ -2114,7 +2162,6 @@
           "url": "https://tidelift.com/funding/github/npm/browserslist"
         }
       ],
-      "license": "MIT",
       "dependencies": {
         "caniuse-lite": "^1.0.30001332",
         "electron-to-chromium": "^1.4.118",
@@ -2131,21 +2178,24 @@
     },
     "node_modules/buffer-crc32": {
       "version": "0.2.13",
+      "resolved": "https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.13.tgz",
+      "integrity": "sha1-DTM+PwDqxQqhRUq9MO+MKl2ackI=",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": "*"
       }
     },
     "node_modules/buffer-from": {
-      "version": "1.1.2",
-      "dev": true,
-      "license": "MIT"
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.1.tgz",
+      "integrity": "sha512-MQcXEUbCKtEo7bhqEs6560Hyd4XaovZlO/k9V3hjVUF/zwW7KBVdSK4gIt/bzwS9MbR5qob+F5jusZsb0YQK2A==",
+      "dev": true
     },
     "node_modules/cacheable-request": {
       "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/cacheable-request/-/cacheable-request-6.1.0.tgz",
+      "integrity": "sha512-Oj3cAGPCqOZX7Rz64Uny2GYAZNliQSqfbePrgAQ1wKAihYmCUnraBtJtKcGR4xz7wF+LoJC+ssFZvv5BgF9Igg==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "clone-response": "^1.0.2",
         "get-stream": "^5.1.0",
@@ -2161,16 +2211,18 @@
     },
     "node_modules/cacheable-request/node_modules/lowercase-keys": {
       "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-2.0.0.tgz",
+      "integrity": "sha512-tqNXrS78oMOE73NMxK4EMLQsQowWf8jKooH9g7xPavRT706R6bkQJ6DY2Te7QukaZsulxa30wQ7bk0pm4XiHmA==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=8"
       }
     },
     "node_modules/call-bind": {
       "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
+      "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "function-bind": "^1.1.1",
         "get-intrinsic": "^1.0.2"
@@ -2181,21 +2233,25 @@
     },
     "node_modules/callsites": {
       "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
+      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=6"
       }
     },
     "node_modules/camelcase": {
       "version": "5.0.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.0.0.tgz",
+      "integrity": "sha512-faqwZqnWxbxn+F1d399ygeamQNy3lPp/H9H6rNrqYh4FSVCtcY+3cub1MxA8o9mDd55mM8Aghuu/kuyYA6VTsA==",
       "engines": {
         "node": ">=6"
       }
     },
     "node_modules/caniuse-lite": {
       "version": "1.0.30001344",
+      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001344.tgz",
+      "integrity": "sha512-0ZFjnlCaXNOAYcV7i+TtdKBp0L/3XEU2MF/x6Du1lrh+SRX4IfzIVL4HNJg5pB2PmFb8rszIGyOvsZnqqRoc2g==",
       "funding": [
         {
           "type": "opencollective",
@@ -2205,12 +2261,12 @@
           "type": "tidelift",
           "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
         }
-      ],
-      "license": "CC-BY-4.0"
+      ]
     },
     "node_modules/chalk": {
       "version": "2.4.2",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
+      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
       "dependencies": {
         "ansi-styles": "^3.2.1",
         "escape-string-regexp": "^1.0.5",
@@ -2222,13 +2278,16 @@
     },
     "node_modules/charcodes": {
       "version": "0.2.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/charcodes/-/charcodes-0.2.0.tgz",
+      "integrity": "sha512-Y4kiDb+AM4Ecy58YkuZrrSRJBDQdQ2L+NyS1vHHFtNtUjgutcZfx3yp1dAONI/oPaPmyGfCLx5CxL+zauIMyKQ==",
       "engines": {
         "node": ">=6"
       }
     },
     "node_modules/chokidar": {
       "version": "3.5.3",
+      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
+      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
       "dev": true,
       "funding": [
         {
@@ -2236,7 +2295,6 @@
           "url": "https://paulmillr.com/funding/"
         }
       ],
-      "license": "MIT",
       "dependencies": {
         "anymatch": "~3.1.2",
         "braces": "~3.0.2",
@@ -2255,8 +2313,9 @@
     },
     "node_modules/chokidar/node_modules/anymatch": {
       "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.2.tgz",
+      "integrity": "sha512-P43ePfOAIupkguHUycrc4qJ9kz8ZiuOUijaETwX7THt0Y/GNK7v0aa8rY816xWjZ7rJdA5XdMcpVFTKMq+RvWg==",
       "dev": true,
-      "license": "ISC",
       "dependencies": {
         "normalize-path": "^3.0.0",
         "picomatch": "^2.0.4"
@@ -2267,16 +2326,18 @@
     },
     "node_modules/chokidar/node_modules/binary-extensions": {
       "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
+      "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=8"
       }
     },
     "node_modules/chokidar/node_modules/is-binary-path": {
       "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
+      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "binary-extensions": "^2.0.0"
       },
@@ -2286,6 +2347,8 @@
     },
     "node_modules/cli": {
       "version": "0.4.5",
+      "resolved": "https://registry.npmjs.org/cli/-/cli-0.4.5.tgz",
+      "integrity": "sha512-dbn5HyeJWSOU58RwOEiF1VWrl7HRvDsKLpu0uiI/vExH6iNoyUzjB5Mr3IJY5DVUfnbpe9793xw4DFJVzC9nWQ==",
       "dev": true,
       "dependencies": {
         "glob": ">= 3.1.4"
@@ -2296,6 +2359,8 @@
     },
     "node_modules/cliff": {
       "version": "0.1.10",
+      "resolved": "https://registry.npmjs.org/cliff/-/cliff-0.1.10.tgz",
+      "integrity": "sha1-U74z6p9ZvshWCe4wCsQgdgPlIBM=",
       "dev": true,
       "dependencies": {
         "colors": "~1.0.3",
@@ -2308,16 +2373,18 @@
     },
     "node_modules/cliff/node_modules/colors": {
       "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/colors/-/colors-1.0.3.tgz",
+      "integrity": "sha1-BDP0TYCWgP3rYO0mDxsMJi6CpAs=",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=0.1.90"
       }
     },
     "node_modules/cliui": {
       "version": "7.0.4",
+      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
+      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
       "dev": true,
-      "license": "ISC",
       "dependencies": {
         "string-width": "^4.2.0",
         "strip-ansi": "^6.0.0",
@@ -2326,43 +2393,49 @@
     },
     "node_modules/clone-response": {
       "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/clone-response/-/clone-response-1.0.2.tgz",
+      "integrity": "sha1-0dyXOSAxTfZ/vrlCI7TuNQI56Ws=",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "mimic-response": "^1.0.0"
       }
     },
     "node_modules/color-convert": {
       "version": "1.9.3",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
+      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
       "dependencies": {
         "color-name": "1.1.3"
       }
     },
     "node_modules/color-name": {
       "version": "1.1.3",
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
+      "integrity": "sha1-p9BVi9icQveV3UIyj3QIMcpTvCU="
     },
     "node_modules/colors": {
       "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/colors/-/colors-1.4.0.tgz",
+      "integrity": "sha512-a+UqTh4kgZg/SlGvfbzDHpgRu7AAQOmmqRHJnxhRZICKFUT91brVhNNt58CMWU9PsBbv3PDCZUHbVxuDiH2mtA==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=0.1.90"
       }
     },
     "node_modules/commander": {
       "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/commander/-/commander-4.1.1.tgz",
+      "integrity": "sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">= 6"
       }
     },
     "node_modules/commonmark": {
       "version": "0.30.0",
+      "resolved": "https://registry.npmjs.org/commonmark/-/commonmark-0.30.0.tgz",
+      "integrity": "sha512-j1yoUo4gxPND1JWV9xj5ELih0yMv1iCWDG6eEQIPLSWLxzCXiFoyS7kvB+WwU+tZMf4snwJMMtaubV0laFpiBA==",
       "dev": true,
-      "license": "BSD-2-Clause",
       "dependencies": {
         "entities": "~2.0",
         "mdurl": "~1.0.1",
@@ -2378,21 +2451,24 @@
     },
     "node_modules/commonmark/node_modules/entities": {
       "version": "2.0.3",
-      "dev": true,
-      "license": "BSD-2-Clause"
+      "resolved": "https://registry.npmjs.org/entities/-/entities-2.0.3.tgz",
+      "integrity": "sha512-MyoZ0jgnLvB2X3Lg5HqpFmn1kybDiIfEQmKzTb5apr51Rb+T3KdmMiqa70T+bhGnyv7bQ6WMj2QMHpGMmlrUYQ==",
+      "dev": true
     },
     "node_modules/concat-map": {
       "version": "0.0.1",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
+      "integrity": "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=",
+      "dev": true
     },
     "node_modules/concat-stream": {
       "version": "1.6.2",
+      "resolved": "https://registry.npmjs.org/concat-stream/-/concat-stream-1.6.2.tgz",
+      "integrity": "sha512-27HBghJxjiZtIk3Ycvn/4kbJk/1uZuJFfuPEns6LaEvpvG1f0hTea8lilrouyo9mVc2GWdcEZ8OLoGmSADlrCw==",
       "dev": true,
       "engines": [
         "node >= 0.8"
       ],
-      "license": "MIT",
       "dependencies": {
         "buffer-from": "^1.0.0",
         "inherits": "^2.0.3",
@@ -2402,8 +2478,9 @@
     },
     "node_modules/concurrently": {
       "version": "6.2.1",
+      "resolved": "https://registry.npmjs.org/concurrently/-/concurrently-6.2.1.tgz",
+      "integrity": "sha512-emgwhH+ezkuYKSHZQ+AkgEpoUZZlbpPVYCVv7YZx0r+T7fny1H03r2nYRebpi2DudHR4n1Rgbo2YTxKOxVJ4+g==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "chalk": "^4.1.0",
         "date-fns": "^2.16.1",
@@ -2424,8 +2501,9 @@
     },
     "node_modules/concurrently/node_modules/ansi-styles": {
       "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "color-convert": "^2.0.1"
       },
@@ -2438,8 +2516,9 @@
     },
     "node_modules/concurrently/node_modules/chalk": {
       "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "ansi-styles": "^4.1.0",
         "supports-color": "^7.1.0"
@@ -2453,8 +2532,9 @@
     },
     "node_modules/concurrently/node_modules/chalk/node_modules/supports-color": {
       "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
+      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "has-flag": "^4.0.0"
       },
@@ -2464,8 +2544,9 @@
     },
     "node_modules/concurrently/node_modules/color-convert": {
       "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "color-name": "~1.1.4"
       },
@@ -2475,21 +2556,24 @@
     },
     "node_modules/concurrently/node_modules/color-name": {
       "version": "1.1.4",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+      "dev": true
     },
     "node_modules/concurrently/node_modules/has-flag": {
       "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
+      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=8"
       }
     },
     "node_modules/concurrently/node_modules/supports-color": {
       "version": "8.1.1",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
+      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "has-flag": "^4.0.0"
       },
@@ -2502,6 +2586,8 @@
     },
     "node_modules/config-chain": {
       "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/config-chain/-/config-chain-1.1.12.tgz",
+      "integrity": "sha512-a1eOIcu8+7lUInge4Rpf/n4Krkf3Dd9lqhljRzII1/Zno/kRtUWnznPO3jOKBmTEktkt3fkxisUcivoj0ebzoA==",
       "dev": true,
       "optional": true,
       "dependencies": {
@@ -2511,7 +2597,8 @@
     },
     "node_modules/consolidate": {
       "version": "0.16.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/consolidate/-/consolidate-0.16.0.tgz",
+      "integrity": "sha512-Nhl1wzCslqXYTJVDyJCu3ODohy9OfBMB5uD2BiBTzd7w+QY0lBzafkR8y8755yMYHAaMD4NuzbAw03/xzfw+eQ==",
       "dependencies": {
         "bluebird": "^3.7.2"
       },
@@ -2521,20 +2608,23 @@
     },
     "node_modules/convert-source-map": {
       "version": "1.7.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.7.0.tgz",
+      "integrity": "sha512-4FJkXzKXEDB1snCFZlLP4gpC3JILicCpGbzG9f9G7tGqGCzETQ2hWPrcinA9oU4wtf2biUaEH5065UnMeR33oA==",
       "dependencies": {
         "safe-buffer": "~5.1.1"
       }
     },
     "node_modules/core-util-is": {
-      "version": "1.0.3",
-      "dev": true,
-      "license": "MIT"
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
+      "integrity": "sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=",
+      "dev": true
     },
     "node_modules/cross-env": {
       "version": "7.0.3",
+      "resolved": "https://registry.npmjs.org/cross-env/-/cross-env-7.0.3.tgz",
+      "integrity": "sha512-+/HKd6EgcQCJGh2PSjZuUitQBQynKor4wrFbRg4DtAgS1aWO+gU52xpH7M9ScGgXSYmAVS9bIJ8EzuaGw0oNAw==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "cross-spawn": "^7.0.1"
       },
@@ -2550,8 +2640,9 @@
     },
     "node_modules/cross-spawn": {
       "version": "7.0.3",
+      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
+      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "path-key": "^3.1.0",
         "shebang-command": "^2.0.0",
@@ -2563,7 +2654,8 @@
     },
     "node_modules/cssesc": {
       "version": "3.0.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
+      "integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
       "bin": {
         "cssesc": "bin/cssesc"
       },
@@ -2573,11 +2665,14 @@
     },
     "node_modules/csstype": {
       "version": "3.0.8",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.0.8.tgz",
+      "integrity": "sha512-jXKhWqXPmlUeoQnF/EhTtTl4C9SnrxSH/jZUih3jmO6lBKr99rP3/+FmrMj4EFpOXzMtXHAZkd3x0E6h6Fgflw==",
+      "dev": true
     },
     "node_modules/cycle": {
       "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/cycle/-/cycle-1.0.3.tgz",
+      "integrity": "sha1-IegLK+hYD5i0aPN5QwZisEbDStI=",
       "dev": true,
       "engines": {
         "node": ">=0.4.0"
@@ -2585,8 +2680,9 @@
     },
     "node_modules/date-fns": {
       "version": "2.23.0",
+      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-2.23.0.tgz",
+      "integrity": "sha512-5ycpauovVyAk0kXNZz6ZoB9AYMZB4DObse7P3BPWmyEjXNORTI8EJ6X0uaSAq4sCHzM1uajzrkr6HnsLQpxGXA==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=0.11"
       },
@@ -2597,12 +2693,14 @@
     },
     "node_modules/de-indent": {
       "version": "1.0.2",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/de-indent/-/de-indent-1.0.2.tgz",
+      "integrity": "sha512-e/1zu3xH5MQryN2zdVaF0OrdNLUbvWxzMbi+iNA6Bky7l1RoP8a2fIbRocyHclXt/arDrrR6lL3TqFD9pMQTsg==",
       "peer": true
     },
     "node_modules/debug": {
       "version": "4.3.4",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
+      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
       "dependencies": {
         "ms": "2.1.2"
       },
@@ -2617,16 +2715,18 @@
     },
     "node_modules/debuglog": {
       "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/debuglog/-/debuglog-1.0.1.tgz",
+      "integrity": "sha1-qiT/uaw9+aI1GDfPstJ5NgzXhJI=",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": "*"
       }
     },
     "node_modules/decompress-response": {
       "version": "3.3.0",
+      "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-3.3.0.tgz",
+      "integrity": "sha1-gKTdMjdIOEv6JICDYirt7Jgq3/M=",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "mimic-response": "^1.0.0"
       },
@@ -2636,25 +2736,29 @@
     },
     "node_modules/deep-is": {
       "version": "0.1.3",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.3.tgz",
+      "integrity": "sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ=",
+      "dev": true
     },
     "node_modules/deepmerge": {
       "version": "4.2.2",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.2.2.tgz",
+      "integrity": "sha512-FJ3UgI4gIl+PHZm53knsuSFpE+nESMr7M4v9QcgB7S63Kj/6WqMiFQJpBBYz1Pt+66bZpP3Q7Lye0Oo9MPKEdg==",
       "engines": {
         "node": ">=0.10.0"
       }
     },
     "node_modules/defer-to-connect": {
       "version": "1.1.3",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/defer-to-connect/-/defer-to-connect-1.1.3.tgz",
+      "integrity": "sha512-0ISdNousHvZT2EiFlZeZAHBUvSxmKswVCEf8hW7KWgG4a8MVEu/3Vb6uWYozkjylyCxe0JBIiRB1jV45S70WVQ==",
+      "dev": true
     },
     "node_modules/define-properties": {
       "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.1.3.tgz",
+      "integrity": "sha512-3MqfYKj2lLzdMSf8ZIZE/V+Zuy+BgD6f164e8K2w7dgnpKArBDerGYpM46IYYcjnkdPNMjPk9A6VFB8+3SKlXQ==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "object-keys": "^1.0.12"
       },
@@ -2664,14 +2768,16 @@
     },
     "node_modules/detect-node": {
       "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/detect-node/-/detect-node-2.1.0.tgz",
+      "integrity": "sha512-T0NIuQpnTvFDATNuHN5roPwSBG83rFsuO+MXXH9/3N1eFbn4wcPjttvjMLEPWJ0RGUYgQE7cGgS3tNxbqCGM7g==",
       "dev": true,
-      "license": "MIT",
       "optional": true
     },
     "node_modules/dezalgo": {
       "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/dezalgo/-/dezalgo-1.0.3.tgz",
+      "integrity": "sha1-f3Qt4Gb8dIvI24IFad3c5Jvw1FY=",
       "dev": true,
-      "license": "ISC",
       "dependencies": {
         "asap": "^2.0.0",
         "wrappy": "1"
@@ -2679,8 +2785,9 @@
     },
     "node_modules/dir-glob": {
       "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz",
+      "integrity": "sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "path-type": "^4.0.0"
       },
@@ -2690,8 +2797,9 @@
     },
     "node_modules/doctrine": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
+      "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
       "dev": true,
-      "license": "Apache-2.0",
       "dependencies": {
         "esutils": "^2.0.2"
       },
@@ -2701,26 +2809,28 @@
     },
     "node_modules/dotenv": {
       "version": "16.0.0",
+      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.0.0.tgz",
+      "integrity": "sha512-qD9WU0MPM4SWLPJy/r2Be+2WgQj8plChsyrCNQzW/0WjvcJQiKQJ9mH3ZgB3fxbUUxgc/11ZJ0Fi5KiimWGz2Q==",
       "dev": true,
-      "license": "BSD-2-Clause",
       "engines": {
         "node": ">=12"
       }
     },
     "node_modules/duplexer3": {
       "version": "0.1.4",
-      "dev": true,
-      "license": "BSD-3-Clause"
+      "resolved": "https://registry.npmjs.org/duplexer3/-/duplexer3-0.1.4.tgz",
+      "integrity": "sha1-7gHdHKwO08vH/b6jfcCo8c4ALOI=",
+      "dev": true
     },
     "node_modules/electron": {
-      "version": "19.0.11",
-      "resolved": "https://registry.npmjs.org/electron/-/electron-19.0.11.tgz",
-      "integrity": "sha512-GPM6C1Ze17/gR4koTE171MxrI5unYfFRgXQdkMdpWM2Cd55LMUrVa0QHCsfKpsaloufv9T65lsOn0uZuzCw5UA==",
+      "version": "16.2.8",
+      "resolved": "https://registry.npmjs.org/electron/-/electron-16.2.8.tgz",
+      "integrity": "sha512-KSOytY6SPLsh3iCziztqa/WgJyfDOKzCvNqku9gGIqSdT8CqtV66dTU1SOrKZQjRFLxHaF8LbyxUL1vwe4taqw==",
       "dev": true,
       "hasInstallScript": true,
       "dependencies": {
-        "@electron/get": "^1.14.1",
-        "@types/node": "^16.11.26",
+        "@electron/get": "^1.13.0",
+        "@types/node": "^14.6.2",
         "extract-zip": "^1.0.3"
       },
       "bin": {
@@ -2731,26 +2841,30 @@
       }
     },
     "node_modules/electron-to-chromium": {
-      "version": "1.4.212",
-      "license": "ISC"
+      "version": "1.4.204",
+      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.4.204.tgz",
+      "integrity": "sha512-5Ojjtw9/c9HCXtMVE6SXVSHSNjmbFOXpKprl6mY/5moLSxLeWatuYA7KTD+RzJMxLRH6yNNQrqGz9p6IoNBMgw=="
     },
     "node_modules/electron/node_modules/@types/node": {
-      "version": "16.11.47",
-      "dev": true,
-      "license": "MIT"
+      "version": "14.18.10",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-14.18.10.tgz",
+      "integrity": "sha512-6iihJ/Pp5fsFJ/aEDGyvT4pHGmCpq7ToQ/yf4bl5SbVAvwpspYJ+v3jO7n8UyjhQVHTy+KNszOozDdv+O6sovQ==",
+      "dev": true
     },
     "node_modules/electron/node_modules/debug": {
       "version": "2.6.9",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
+      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "ms": "2.0.0"
       }
     },
     "node_modules/electron/node_modules/extract-zip": {
       "version": "1.7.0",
+      "resolved": "https://registry.npmjs.org/extract-zip/-/extract-zip-1.7.0.tgz",
+      "integrity": "sha512-xoh5G1W/PB0/27lXgMQyIhP5DSY/LhoCsOyZgb+6iMmRtCwVBo55uKaMoEYrDCKQhWvqEip5ZPKAc6eFNyf/MA==",
       "dev": true,
-      "license": "BSD-2-Clause",
       "dependencies": {
         "concat-stream": "^1.6.2",
         "debug": "^2.6.9",
@@ -2763,18 +2877,21 @@
     },
     "node_modules/electron/node_modules/ms": {
       "version": "2.0.0",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
+      "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=",
+      "dev": true
     },
     "node_modules/emoji-regex": {
       "version": "8.0.0",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
+      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
+      "dev": true
     },
     "node_modules/encodeurl": {
       "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
+      "integrity": "sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k=",
       "dev": true,
-      "license": "MIT",
       "optional": true,
       "engines": {
         "node": ">= 0.8"
@@ -2782,16 +2899,18 @@
     },
     "node_modules/end-of-stream": {
       "version": "1.4.4",
+      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
+      "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "once": "^1.4.0"
       }
     },
     "node_modules/enquirer": {
       "version": "2.3.6",
+      "resolved": "https://registry.npmjs.org/enquirer/-/enquirer-2.3.6.tgz",
+      "integrity": "sha512-yjNnPr315/FjS4zIsUxYguYUPP2e1NK4d7E7ZOLiyYCcbFBiTMyID+2wvm2w6+pZ/odMA7cRkjhsPbltwBOrLg==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "ansi-colors": "^4.1.1"
       },
@@ -2801,39 +2920,42 @@
     },
     "node_modules/entities": {
       "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/entities/-/entities-2.2.0.tgz",
+      "integrity": "sha512-p92if5Nz619I0w+akJrLZH0MX0Pb5DX39XOwQTtXSdQQOaYH03S1uIQp4mhOZtAXrxq4ViO67YTiLBo2638o9A==",
       "dev": true,
-      "license": "BSD-2-Clause",
       "funding": {
         "url": "https://github.com/fb55/entities?sponsor=1"
       }
     },
     "node_modules/env-paths": {
       "version": "2.2.1",
+      "resolved": "https://registry.npmjs.org/env-paths/-/env-paths-2.2.1.tgz",
+      "integrity": "sha512-+h1lkLKhZMTYjog1VEpJNG7NZJWcuc2DDk/qsqSTRRCOXiLjeQ1d1/udrUGhqMxUgAlwKNZ0cf2uqan5GLuS2A==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=6"
       }
     },
     "node_modules/error-ex": {
       "version": "1.3.2",
+      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
+      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "is-arrayish": "^0.2.1"
       }
     },
     "node_modules/es6-error": {
       "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/es6-error/-/es6-error-4.1.1.tgz",
+      "integrity": "sha512-Um/+FxMr9CISWh0bi5Zv0iOD+4cFh5qLeks1qhAopKVAJw3drgKbKySikp7wGhDL0HPeaja0P5ULZrxLkniUVg==",
       "dev": true,
-      "license": "MIT",
       "optional": true
     },
     "node_modules/esbuild": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.15.6.tgz",
-      "integrity": "sha512-sgLOv3l4xklvXzzczhRwKRotyrfyZ2i1fCS6PTOLPd9wevDPArGU8HFtHrHCOcsMwTjLjzGm15gvC8uxVzQf+w==",
-      "dev": true,
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.14.49.tgz",
+      "integrity": "sha512-/TlVHhOaq7Yz8N1OJrjqM3Auzo5wjvHFLk+T8pIue+fhnhIMpfAzsG6PLVMbFveVxqD2WOp3QHei+52IMUNmCw==",
       "hasInstallScript": true,
       "bin": {
         "esbuild": "bin/esbuild"
@@ -2842,37 +2964,35 @@
         "node": ">=12"
       },
       "optionalDependencies": {
-        "@esbuild/linux-loong64": "0.15.6",
-        "esbuild-android-64": "0.15.6",
-        "esbuild-android-arm64": "0.15.6",
-        "esbuild-darwin-64": "0.15.6",
-        "esbuild-darwin-arm64": "0.15.6",
-        "esbuild-freebsd-64": "0.15.6",
-        "esbuild-freebsd-arm64": "0.15.6",
-        "esbuild-linux-32": "0.15.6",
-        "esbuild-linux-64": "0.15.6",
-        "esbuild-linux-arm": "0.15.6",
-        "esbuild-linux-arm64": "0.15.6",
-        "esbuild-linux-mips64le": "0.15.6",
-        "esbuild-linux-ppc64le": "0.15.6",
-        "esbuild-linux-riscv64": "0.15.6",
-        "esbuild-linux-s390x": "0.15.6",
-        "esbuild-netbsd-64": "0.15.6",
-        "esbuild-openbsd-64": "0.15.6",
-        "esbuild-sunos-64": "0.15.6",
-        "esbuild-windows-32": "0.15.6",
-        "esbuild-windows-64": "0.15.6",
-        "esbuild-windows-arm64": "0.15.6"
+        "esbuild-android-64": "0.14.49",
+        "esbuild-android-arm64": "0.14.49",
+        "esbuild-darwin-64": "0.14.49",
+        "esbuild-darwin-arm64": "0.14.49",
+        "esbuild-freebsd-64": "0.14.49",
+        "esbuild-freebsd-arm64": "0.14.49",
+        "esbuild-linux-32": "0.14.49",
+        "esbuild-linux-64": "0.14.49",
+        "esbuild-linux-arm": "0.14.49",
+        "esbuild-linux-arm64": "0.14.49",
+        "esbuild-linux-mips64le": "0.14.49",
+        "esbuild-linux-ppc64le": "0.14.49",
+        "esbuild-linux-riscv64": "0.14.49",
+        "esbuild-linux-s390x": "0.14.49",
+        "esbuild-netbsd-64": "0.14.49",
+        "esbuild-openbsd-64": "0.14.49",
+        "esbuild-sunos-64": "0.14.49",
+        "esbuild-windows-32": "0.14.49",
+        "esbuild-windows-64": "0.14.49",
+        "esbuild-windows-arm64": "0.14.49"
       }
     },
     "node_modules/esbuild-android-64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-android-64/-/esbuild-android-64-0.15.6.tgz",
-      "integrity": "sha512-Z1CHSgB1crVQi2LKSBwSkpaGtaloVz0ZIYcRMsvHc3uSXcR/x5/bv9wcZspvH/25lIGTaViosciS/NS09ERmVA==",
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-android-64/-/esbuild-android-64-0.14.49.tgz",
+      "integrity": "sha512-vYsdOTD+yi+kquhBiFWl3tyxnj2qZJsl4tAqwhT90ktUdnyTizgle7TjNx6Ar1bN7wcwWqZ9QInfdk2WVagSww==",
       "cpu": [
         "x64"
       ],
-      "dev": true,
       "optional": true,
       "os": [
         "android"
@@ -2882,13 +3002,12 @@
       }
     },
     "node_modules/esbuild-android-arm64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-android-arm64/-/esbuild-android-arm64-0.15.6.tgz",
-      "integrity": "sha512-mvM+gqNxqKm2pCa3dnjdRzl7gIowuc4ga7P7c3yHzs58Im8v/Lfk1ixSgQ2USgIywT48QWaACRa3F4MG7djpSw==",
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-android-arm64/-/esbuild-android-arm64-0.14.49.tgz",
+      "integrity": "sha512-g2HGr/hjOXCgSsvQZ1nK4nW/ei8JUx04Li74qub9qWrStlysaVmadRyTVuW32FGIpLQyc5sUjjZopj49eGGM2g==",
       "cpu": [
         "arm64"
       ],
-      "dev": true,
       "optional": true,
       "os": [
         "android"
@@ -2898,13 +3017,12 @@
       }
     },
     "node_modules/esbuild-darwin-64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-darwin-64/-/esbuild-darwin-64-0.15.6.tgz",
-      "integrity": "sha512-BsfVt3usScAfGlXJiGtGamwVEOTM8AiYiw1zqDWhGv6BncLXCnTg1As+90mxWewdTZKq3iIy8s9g8CKkrrAXVw==",
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-darwin-64/-/esbuild-darwin-64-0.14.49.tgz",
+      "integrity": "sha512-3rvqnBCtX9ywso5fCHixt2GBCUsogNp9DjGmvbBohh31Ces34BVzFltMSxJpacNki96+WIcX5s/vum+ckXiLYg==",
       "cpu": [
         "x64"
       ],
-      "dev": true,
       "optional": true,
       "os": [
         "darwin"
@@ -2914,13 +3032,12 @@
       }
     },
     "node_modules/esbuild-darwin-arm64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-darwin-arm64/-/esbuild-darwin-arm64-0.15.6.tgz",
-      "integrity": "sha512-CnrAeJaEpPakUobhqO4wVSA4Zm6TPaI5UY4EsI62j9mTrjIyQPXA1n4Ju6Iu5TVZRnEqV6q8blodgYJ6CJuwCA==",
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-darwin-arm64/-/esbuild-darwin-arm64-0.14.49.tgz",
+      "integrity": "sha512-XMaqDxO846srnGlUSJnwbijV29MTKUATmOLyQSfswbK/2X5Uv28M9tTLUJcKKxzoo9lnkYPsx2o8EJcTYwCs/A==",
       "cpu": [
         "arm64"
       ],
-      "dev": true,
       "optional": true,
       "os": [
         "darwin"
@@ -2930,13 +3047,12 @@
       }
     },
     "node_modules/esbuild-freebsd-64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-freebsd-64/-/esbuild-freebsd-64-0.15.6.tgz",
-      "integrity": "sha512-+qFdmqi+jkAsxsNJkaWVrnxEUUI50nu6c3MBVarv3RCDCbz7ZS1a4ZrdkwEYFnKcVWu6UUE0Kkb1SQ1yGEG6sg==",
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-freebsd-64/-/esbuild-freebsd-64-0.14.49.tgz",
+      "integrity": "sha512-NJ5Q6AjV879mOHFri+5lZLTp5XsO2hQ+KSJYLbfY9DgCu8s6/Zl2prWXVANYTeCDLlrIlNNYw8y34xqyLDKOmQ==",
       "cpu": [
         "x64"
       ],
-      "dev": true,
       "optional": true,
       "os": [
         "freebsd"
@@ -2946,13 +3062,12 @@
       }
     },
     "node_modules/esbuild-freebsd-arm64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-freebsd-arm64/-/esbuild-freebsd-arm64-0.15.6.tgz",
-      "integrity": "sha512-KtQkQOhnNciXm2yrTYZMD3MOm2zBiiwFSU+dkwNbcfDumzzUprr1x70ClTdGuZwieBS1BM/k0KajRQX7r504Xw==",
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-freebsd-arm64/-/esbuild-freebsd-arm64-0.14.49.tgz",
+      "integrity": "sha512-lFLtgXnAc3eXYqj5koPlBZvEbBSOSUbWO3gyY/0+4lBdRqELyz4bAuamHvmvHW5swJYL7kngzIZw6kdu25KGOA==",
       "cpu": [
         "arm64"
       ],
-      "dev": true,
       "optional": true,
       "os": [
         "freebsd"
@@ -2962,13 +3077,12 @@
       }
     },
     "node_modules/esbuild-linux-32": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-32/-/esbuild-linux-32-0.15.6.tgz",
-      "integrity": "sha512-IAkDNz3TpxwISTGVdQijwyHBZrbFgLlRi5YXcvaEHtgbmayLSDcJmH5nV1MFgo/x2QdKcHBkOYHdjhKxUAcPwg==",
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-linux-32/-/esbuild-linux-32-0.14.49.tgz",
+      "integrity": "sha512-zTTH4gr2Kb8u4QcOpTDVn7Z8q7QEIvFl/+vHrI3cF6XOJS7iEI1FWslTo3uofB2+mn6sIJEQD9PrNZKoAAMDiA==",
       "cpu": [
         "ia32"
       ],
-      "dev": true,
       "optional": true,
       "os": [
         "linux"
@@ -2978,13 +3092,12 @@
       }
     },
     "node_modules/esbuild-linux-64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-64/-/esbuild-linux-64-0.15.6.tgz",
-      "integrity": "sha512-gQPksyrEYfA4LJwyfTQWAZaVZCx4wpaLrSzo2+Xc9QLC+i/sMWmX31jBjrn4nLJCd79KvwCinto36QC7BEIU/A==",
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-linux-64/-/esbuild-linux-64-0.14.49.tgz",
+      "integrity": "sha512-hYmzRIDzFfLrB5c1SknkxzM8LdEUOusp6M2TnuQZJLRtxTgyPnZZVtyMeCLki0wKgYPXkFsAVhi8vzo2mBNeTg==",
       "cpu": [
         "x64"
       ],
-      "dev": true,
       "optional": true,
       "os": [
         "linux"
@@ -2994,13 +3107,12 @@
       }
     },
     "node_modules/esbuild-linux-arm": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-arm/-/esbuild-linux-arm-0.15.6.tgz",
-      "integrity": "sha512-xZ0Bq2aivsthDjA/ytQZzxrxIZbG0ATJYMJxNeOIBc1zUjpbVpzBKgllOZMsTSXMHFHGrow6TnCcgwqY0+oEoQ==",
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-linux-arm/-/esbuild-linux-arm-0.14.49.tgz",
+      "integrity": "sha512-iE3e+ZVv1Qz1Sy0gifIsarJMQ89Rpm9mtLSRtG3AH0FPgAzQ5Z5oU6vYzhc/3gSPi2UxdCOfRhw2onXuFw/0lg==",
       "cpu": [
         "arm"
       ],
-      "dev": true,
       "optional": true,
       "os": [
         "linux"
@@ -3010,13 +3122,12 @@
       }
     },
     "node_modules/esbuild-linux-arm64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-arm64/-/esbuild-linux-arm64-0.15.6.tgz",
-      "integrity": "sha512-aovDkclFa6C9EdZVBuOXxqZx83fuoq8097xZKhEPSygwuy4Lxs8J4anHG7kojAsR+31lfUuxzOo2tHxv7EiNHA==",
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-linux-arm64/-/esbuild-linux-arm64-0.14.49.tgz",
+      "integrity": "sha512-KLQ+WpeuY+7bxukxLz5VgkAAVQxUv67Ft4DmHIPIW+2w3ObBPQhqNoeQUHxopoW/aiOn3m99NSmSV+bs4BSsdA==",
       "cpu": [
         "arm64"
       ],
-      "dev": true,
       "optional": true,
       "os": [
         "linux"
@@ -3026,13 +3137,12 @@
       }
     },
     "node_modules/esbuild-linux-mips64le": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-mips64le/-/esbuild-linux-mips64le-0.15.6.tgz",
-      "integrity": "sha512-wVpW8wkWOGizsCqCwOR/G3SHwhaecpGy3fic9BF1r7vq4djLjUcA8KunDaBCjJ6TgLQFhJ98RjDuyEf8AGjAvw==",
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-linux-mips64le/-/esbuild-linux-mips64le-0.14.49.tgz",
+      "integrity": "sha512-n+rGODfm8RSum5pFIqFQVQpYBw+AztL8s6o9kfx7tjfK0yIGF6tm5HlG6aRjodiiKkH2xAiIM+U4xtQVZYU4rA==",
       "cpu": [
         "mips64el"
       ],
-      "dev": true,
       "optional": true,
       "os": [
         "linux"
@@ -3042,13 +3152,12 @@
       }
     },
     "node_modules/esbuild-linux-ppc64le": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-ppc64le/-/esbuild-linux-ppc64le-0.15.6.tgz",
-      "integrity": "sha512-z6w6gsPH/Y77uchocluDC8tkCg9rfkcPTePzZKNr879bF4tu7j9t255wuNOCE396IYEGxY7y8u2HJ9i7kjCLVw==",
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-linux-ppc64le/-/esbuild-linux-ppc64le-0.14.49.tgz",
+      "integrity": "sha512-WP9zR4HX6iCBmMFH+XHHng2LmdoIeUmBpL4aL2TR8ruzXyT4dWrJ5BSbT8iNo6THN8lod6GOmYDLq/dgZLalGw==",
       "cpu": [
         "ppc64"
       ],
-      "dev": true,
       "optional": true,
       "os": [
         "linux"
@@ -3058,13 +3167,12 @@
       }
     },
     "node_modules/esbuild-linux-riscv64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-riscv64/-/esbuild-linux-riscv64-0.15.6.tgz",
-      "integrity": "sha512-pfK/3MJcmbfU399TnXW5RTPS1S+ID6ra+CVj9TFZ2s0q9Ja1F5A1VirUUvViPkjiw+Kq3zveyn6U09Wg1zJXrw==",
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-linux-riscv64/-/esbuild-linux-riscv64-0.14.49.tgz",
+      "integrity": "sha512-h66ORBz+Dg+1KgLvzTVQEA1LX4XBd1SK0Fgbhhw4akpG/YkN8pS6OzYI/7SGENiN6ao5hETRDSkVcvU9NRtkMQ==",
       "cpu": [
         "riscv64"
       ],
-      "dev": true,
       "optional": true,
       "os": [
         "linux"
@@ -3074,13 +3182,12 @@
       }
     },
     "node_modules/esbuild-linux-s390x": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-s390x/-/esbuild-linux-s390x-0.15.6.tgz",
-      "integrity": "sha512-OZeeDu32liefcwAE63FhVqM4heWTC8E3MglOC7SK0KYocDdY/6jyApw0UDkDHlcEK9mW6alX/SH9r3PDjcCo/Q==",
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-linux-s390x/-/esbuild-linux-s390x-0.14.49.tgz",
+      "integrity": "sha512-DhrUoFVWD+XmKO1y7e4kNCqQHPs6twz6VV6Uezl/XHYGzM60rBewBF5jlZjG0nCk5W/Xy6y1xWeopkrhFFM0sQ==",
       "cpu": [
         "s390x"
       ],
-      "dev": true,
       "optional": true,
       "os": [
         "linux"
@@ -3090,13 +3197,12 @@
       }
     },
     "node_modules/esbuild-netbsd-64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-netbsd-64/-/esbuild-netbsd-64-0.15.6.tgz",
-      "integrity": "sha512-kaxw61wcHMyiEsSsi5ut1YYs/hvTC2QkxJwyRvC2Cnsz3lfMLEu8zAjpBKWh9aU/N0O/gsRap4wTur5GRuSvBA==",
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-netbsd-64/-/esbuild-netbsd-64-0.14.49.tgz",
+      "integrity": "sha512-BXaUwFOfCy2T+hABtiPUIpWjAeWK9P8O41gR4Pg73hpzoygVGnj0nI3YK4SJhe52ELgtdgWP/ckIkbn2XaTxjQ==",
       "cpu": [
         "x64"
       ],
-      "dev": true,
       "optional": true,
       "os": [
         "netbsd"
@@ -3106,13 +3212,12 @@
       }
     },
     "node_modules/esbuild-openbsd-64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-openbsd-64/-/esbuild-openbsd-64-0.15.6.tgz",
-      "integrity": "sha512-CuoY60alzYfIZapUHqFXqXbj88bbRJu8Fp9okCSHRX2zWIcGz4BXAHXiG7dlCye5nFVrY72psesLuWdusyf2qw==",
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-openbsd-64/-/esbuild-openbsd-64-0.14.49.tgz",
+      "integrity": "sha512-lP06UQeLDGmVPw9Rg437Btu6J9/BmyhdoefnQ4gDEJTtJvKtQaUcOQrhjTq455ouZN4EHFH1h28WOJVANK41kA==",
       "cpu": [
         "x64"
       ],
-      "dev": true,
       "optional": true,
       "os": [
         "openbsd"
@@ -3122,13 +3227,12 @@
       }
     },
     "node_modules/esbuild-sunos-64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-sunos-64/-/esbuild-sunos-64-0.15.6.tgz",
-      "integrity": "sha512-1ceefLdPWcd1nW/ZLruPEYxeUEAVX0YHbG7w+BB4aYgfknaLGotI/ZvPWUZpzhC8l1EybrVlz++lm3E6ODIJOg==",
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-sunos-64/-/esbuild-sunos-64-0.14.49.tgz",
+      "integrity": "sha512-4c8Zowp+V3zIWje329BeLbGh6XI9c/rqARNaj5yPHdC61pHI9UNdDxT3rePPJeWcEZVKjkiAS6AP6kiITp7FSw==",
       "cpu": [
         "x64"
       ],
-      "dev": true,
       "optional": true,
       "os": [
         "sunos"
@@ -3138,13 +3242,12 @@
       }
     },
     "node_modules/esbuild-windows-32": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-windows-32/-/esbuild-windows-32-0.15.6.tgz",
-      "integrity": "sha512-pBqdOsKqCD5LRYiwF29PJRDJZi7/Wgkz46u3d17MRFmrLFcAZDke3nbdDa1c8YgY78RiemudfCeAemN8EBlIpA==",
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-windows-32/-/esbuild-windows-32-0.14.49.tgz",
+      "integrity": "sha512-q7Rb+J9yHTeKr9QTPDYkqfkEj8/kcKz9lOabDuvEXpXuIcosWCJgo5Z7h/L4r7rbtTH4a8U2FGKb6s1eeOHmJA==",
       "cpu": [
         "ia32"
       ],
-      "dev": true,
       "optional": true,
       "os": [
         "win32"
@@ -3154,13 +3257,12 @@
       }
     },
     "node_modules/esbuild-windows-64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-windows-64/-/esbuild-windows-64-0.15.6.tgz",
-      "integrity": "sha512-KpPOh4aTOo//g9Pk2oVAzXMpc9Sz9n5A9sZTmWqDSXCiiachfFhbuFlsKBGATYCVitXfmBIJ4nNYYWSOdz4hQg==",
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-windows-64/-/esbuild-windows-64-0.14.49.tgz",
+      "integrity": "sha512-+Cme7Ongv0UIUTniPqfTX6mJ8Deo7VXw9xN0yJEN1lQMHDppTNmKwAM3oGbD/Vqff+07K2gN0WfNkMohmG+dVw==",
       "cpu": [
         "x64"
       ],
-      "dev": true,
       "optional": true,
       "os": [
         "win32"
@@ -3170,13 +3272,12 @@
       }
     },
     "node_modules/esbuild-windows-arm64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-windows-arm64/-/esbuild-windows-arm64-0.15.6.tgz",
-      "integrity": "sha512-DB3G2x9OvFEa00jV+OkDBYpufq5x/K7a6VW6E2iM896DG4ZnAvJKQksOsCPiM1DUaa+DrijXAQ/ZOcKAqf/3Hg==",
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-windows-arm64/-/esbuild-windows-arm64-0.14.49.tgz",
+      "integrity": "sha512-v+HYNAXzuANrCbbLFJ5nmO3m5y2PGZWLe3uloAkLt87aXiO2mZr3BTmacZdjwNkNEHuH3bNtN8cak+mzVjVPfA==",
       "cpu": [
         "arm64"
       ],
-      "dev": true,
       "optional": true,
       "os": [
         "win32"
@@ -3187,22 +3288,25 @@
     },
     "node_modules/escalade": {
       "version": "3.1.1",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
+      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
       "engines": {
         "node": ">=6"
       }
     },
     "node_modules/escape-string-regexp": {
       "version": "1.0.5",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
+      "integrity": "sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=",
       "engines": {
         "node": ">=0.8.0"
       }
     },
     "node_modules/eslint": {
       "version": "8.8.0",
+      "resolved": "https://registry.npmjs.org/eslint/-/eslint-8.8.0.tgz",
+      "integrity": "sha512-H3KXAzQGBH1plhYS3okDix2ZthuYJlQQEGE5k0IKuEqUSiyu4AmxxlJ2MtTYeJ3xB4jDhcYCwGOg2TXYdnDXlQ==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@eslint/eslintrc": "^1.0.5",
         "@humanwhocodes/config-array": "^0.9.2",
@@ -3252,8 +3356,9 @@
     },
     "node_modules/eslint-plugin-notice": {
       "version": "0.9.10",
+      "resolved": "https://registry.npmjs.org/eslint-plugin-notice/-/eslint-plugin-notice-0.9.10.tgz",
+      "integrity": "sha512-rF79EuqdJKu9hhTmwUkNeSvLmmq03m/NXq/NHwUENHbdJ0wtoyOjxZBhW4QCug8v5xYE6cGe3AWkGqSIe9KUbQ==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "find-root": "^1.1.0",
         "lodash": "^4.17.15",
@@ -3265,8 +3370,9 @@
     },
     "node_modules/eslint-plugin-react-hooks": {
       "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-4.3.0.tgz",
+      "integrity": "sha512-XslZy0LnMn+84NEG9jSGR6eGqaZB3133L8xewQo3fQagbQuGt7a63gf+P1NGKZavEYEC3UXaWEAA/AqDkuN6xA==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=10"
       },
@@ -3276,8 +3382,9 @@
     },
     "node_modules/eslint-scope": {
       "version": "5.1.1",
+      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.1.1.tgz",
+      "integrity": "sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==",
       "dev": true,
-      "license": "BSD-2-Clause",
       "dependencies": {
         "esrecurse": "^4.3.0",
         "estraverse": "^4.1.1"
@@ -3288,8 +3395,9 @@
     },
     "node_modules/eslint-utils": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/eslint-utils/-/eslint-utils-3.0.0.tgz",
+      "integrity": "sha512-uuQC43IGctw68pJA1RgbQS8/NP7rch6Cwd4j3ZBtgo4/8Flj4eGE7ZYSZRN3iq5pVUv6GPdW5Z1RFleo84uLDA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "eslint-visitor-keys": "^2.0.0"
       },
@@ -3305,24 +3413,27 @@
     },
     "node_modules/eslint-utils/node_modules/eslint-visitor-keys": {
       "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-2.1.0.tgz",
+      "integrity": "sha512-0rSmRBzXgDzIsD6mGdJgevzgezI534Cer5L/vyMX0kHzT/jiB43jRhd9YUlMGYLQy2zprNmoT8qasCGtY+QaKw==",
       "dev": true,
-      "license": "Apache-2.0",
       "engines": {
         "node": ">=10"
       }
     },
     "node_modules/eslint-visitor-keys": {
       "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.2.0.tgz",
+      "integrity": "sha512-IOzT0X126zn7ALX0dwFiUQEdsfzrm4+ISsQS8nukaJXwEyYKRSnEIIDULYg1mCtGp7UUXgfGl7BIolXREQK+XQ==",
       "dev": true,
-      "license": "Apache-2.0",
       "engines": {
         "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
       }
     },
     "node_modules/eslint/node_modules/ansi-styles": {
       "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "color-convert": "^2.0.1"
       },
@@ -3335,8 +3446,9 @@
     },
     "node_modules/eslint/node_modules/chalk": {
       "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "ansi-styles": "^4.1.0",
         "supports-color": "^7.1.0"
@@ -3350,8 +3462,9 @@
     },
     "node_modules/eslint/node_modules/color-convert": {
       "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "color-name": "~1.1.4"
       },
@@ -3361,13 +3474,15 @@
     },
     "node_modules/eslint/node_modules/color-name": {
       "version": "1.1.4",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+      "dev": true
     },
     "node_modules/eslint/node_modules/escape-string-regexp": {
       "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
+      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=10"
       },
@@ -3377,8 +3492,9 @@
     },
     "node_modules/eslint/node_modules/eslint-scope": {
       "version": "7.1.0",
+      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.1.0.tgz",
+      "integrity": "sha512-aWwkhnS0qAXqNOgKOK0dJ2nvzEbhEvpy8OlJ9kZ0FeZnA6zpjv1/Vei+puGFFX7zkPCkHHXb7IDX3A+7yPrRWg==",
       "dev": true,
-      "license": "BSD-2-Clause",
       "dependencies": {
         "esrecurse": "^4.3.0",
         "estraverse": "^5.2.0"
@@ -3389,16 +3505,18 @@
     },
     "node_modules/eslint/node_modules/estraverse": {
       "version": "5.3.0",
+      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
+      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
       "dev": true,
-      "license": "BSD-2-Clause",
       "engines": {
         "node": ">=4.0"
       }
     },
     "node_modules/eslint/node_modules/glob-parent": {
       "version": "6.0.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
+      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
       "dev": true,
-      "license": "ISC",
       "dependencies": {
         "is-glob": "^4.0.3"
       },
@@ -3408,8 +3526,9 @@
     },
     "node_modules/eslint/node_modules/globals": {
       "version": "13.10.0",
+      "resolved": "https://registry.npmjs.org/globals/-/globals-13.10.0.tgz",
+      "integrity": "sha512-piHC3blgLGFjvOuMmWZX60f+na1lXFDhQXBf1UYp2fXPXqvEUbOhNwi6BsQ0bQishwedgnjkwv1d9zKf+MWw3g==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "type-fest": "^0.20.2"
       },
@@ -3422,24 +3541,27 @@
     },
     "node_modules/eslint/node_modules/has-flag": {
       "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
+      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=8"
       }
     },
     "node_modules/eslint/node_modules/ignore": {
       "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.2.0.tgz",
+      "integrity": "sha512-CmxgYGiEPCLhfLnpPp1MoRmifwEIOgjcHXxOBjv7mY96c+eWScsOP9c112ZyLdWHi0FxHjI+4uVhKYp/gcdRmQ==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">= 4"
       }
     },
     "node_modules/eslint/node_modules/supports-color": {
       "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
+      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "has-flag": "^4.0.0"
       },
@@ -3449,8 +3571,9 @@
     },
     "node_modules/eslint/node_modules/type-fest": {
       "version": "0.20.2",
+      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
+      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
       "dev": true,
-      "license": "(MIT OR CC0-1.0)",
       "engines": {
         "node": ">=10"
       },
@@ -3460,8 +3583,9 @@
     },
     "node_modules/espree": {
       "version": "9.3.0",
+      "resolved": "https://registry.npmjs.org/espree/-/espree-9.3.0.tgz",
+      "integrity": "sha512-d/5nCsb0JcqsSEeQzFZ8DH1RmxPcglRWh24EFTlUEmCKoehXGdpsx0RkHDubqUI8LSAIKMQp4r9SzQ3n+sm4HQ==",
       "dev": true,
-      "license": "BSD-2-Clause",
       "dependencies": {
         "acorn": "^8.7.0",
         "acorn-jsx": "^5.3.1",
@@ -3473,8 +3597,9 @@
     },
     "node_modules/esquery": {
       "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.4.0.tgz",
+      "integrity": "sha512-cCDispWt5vHHtwMY2YrAQ4ibFkAL8RbH5YGBnZBc90MolvvfkkQcJro/aZiAQUlQ3qgrYS6D6v8Gc5G5CQsc9w==",
       "dev": true,
-      "license": "BSD-3-Clause",
       "dependencies": {
         "estraverse": "^5.1.0"
       },
@@ -3484,16 +3609,18 @@
     },
     "node_modules/esquery/node_modules/estraverse": {
       "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.2.0.tgz",
+      "integrity": "sha512-BxbNGGNm0RyRYvUdHpIwv9IWzeM9XClbOxwoATuFdOE7ZE6wHL+HQ5T8hoPM+zHvmKzzsEqhgy0GrQ5X13afiQ==",
       "dev": true,
-      "license": "BSD-2-Clause",
       "engines": {
         "node": ">=4.0"
       }
     },
     "node_modules/esrecurse": {
       "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
+      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
       "dev": true,
-      "license": "BSD-2-Clause",
       "dependencies": {
         "estraverse": "^5.2.0"
       },
@@ -3503,34 +3630,40 @@
     },
     "node_modules/esrecurse/node_modules/estraverse": {
       "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.2.0.tgz",
+      "integrity": "sha512-BxbNGGNm0RyRYvUdHpIwv9IWzeM9XClbOxwoATuFdOE7ZE6wHL+HQ5T8hoPM+zHvmKzzsEqhgy0GrQ5X13afiQ==",
       "dev": true,
-      "license": "BSD-2-Clause",
       "engines": {
         "node": ">=4.0"
       }
     },
     "node_modules/estraverse": {
       "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
+      "integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
       "dev": true,
-      "license": "BSD-2-Clause",
       "engines": {
         "node": ">=4.0"
       }
     },
     "node_modules/estree-walker": {
       "version": "2.0.2",
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-2.0.2.tgz",
+      "integrity": "sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w=="
     },
     "node_modules/esutils": {
       "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
+      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
       "dev": true,
-      "license": "BSD-2-Clause",
       "engines": {
         "node": ">=0.10.0"
       }
     },
     "node_modules/eyes": {
       "version": "0.1.8",
+      "resolved": "https://registry.npmjs.org/eyes/-/eyes-0.1.8.tgz",
+      "integrity": "sha1-Ys8SAjTGg3hdkCNIqADvPgzCC8A=",
       "dev": true,
       "engines": {
         "node": "> 0.1.90"
@@ -3538,13 +3671,15 @@
     },
     "node_modules/fast-deep-equal": {
       "version": "3.1.3",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
+      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
+      "dev": true
     },
     "node_modules/fast-glob": {
       "version": "3.2.7",
+      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.2.7.tgz",
+      "integrity": "sha512-rYGMRwip6lUMvYD3BTScMwT1HtAs2d71SMv66Vrxs0IekGZEjhM0pcMfjQPnknBt2zeCwQMEupiN02ZP4DiT1Q==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@nodelib/fs.stat": "^2.0.2",
         "@nodelib/fs.walk": "^1.2.3",
@@ -3558,34 +3693,39 @@
     },
     "node_modules/fast-json-stable-stringify": {
       "version": "2.1.0",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
+      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
+      "dev": true
     },
     "node_modules/fast-levenshtein": {
       "version": "2.0.6",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
+      "integrity": "sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=",
+      "dev": true
     },
     "node_modules/fastq": {
       "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.11.1.tgz",
+      "integrity": "sha512-HOnr8Mc60eNYl1gzwp6r5RoUyAn5/glBolUzP/Ez6IFVPMPirxn/9phgL6zhOtaTy7ISwPvQ+wT+hfcRZh/bzw==",
       "dev": true,
-      "license": "ISC",
       "dependencies": {
         "reusify": "^1.0.4"
       }
     },
     "node_modules/fd-slicer": {
       "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/fd-slicer/-/fd-slicer-1.1.0.tgz",
+      "integrity": "sha1-JcfInLH5B3+IkbvmHY85Dq4lbx4=",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "pend": "~1.2.0"
       }
     },
     "node_modules/file-entry-cache": {
       "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
+      "integrity": "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "flat-cache": "^3.0.4"
       },
@@ -3595,8 +3735,9 @@
     },
     "node_modules/fill-range": {
       "version": "7.0.1",
+      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
+      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "to-regex-range": "^5.0.1"
       },
@@ -3606,13 +3747,15 @@
     },
     "node_modules/find-root": {
       "version": "1.1.0",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/find-root/-/find-root-1.1.0.tgz",
+      "integrity": "sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng==",
+      "dev": true
     },
     "node_modules/flat-cache": {
       "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-3.0.4.tgz",
+      "integrity": "sha512-dm9s5Pw7Jc0GvMYbshN6zchCA9RgQlzzEZX3vylR9IqFfS8XciblUXOKfW6SiuJ0e13eDYZoZV5wdrev7P3Nwg==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "flatted": "^3.1.0",
         "rimraf": "^3.0.2"
@@ -3623,13 +3766,15 @@
     },
     "node_modules/flatted": {
       "version": "3.1.1",
-      "dev": true,
-      "license": "ISC"
+      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.1.1.tgz",
+      "integrity": "sha512-zAoAQiudy+r5SvnSw3KJy5os/oRJYHzrzja/tBDqrZtNhUw8bt6y8OBzMWcjWr+8liV8Eb6yOhw8WZ7VFZ5ZzA==",
+      "dev": true
     },
     "node_modules/formidable": {
       "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/formidable/-/formidable-2.0.1.tgz",
+      "integrity": "sha512-rjTMNbp2BpfQShhFbR3Ruk3qk2y9jKpvMW78nJgx8QKtxjDVrwbZG+wvDOmVbifHyOUOQJXxqEy6r0faRrPzTQ==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "dezalgo": "1.0.3",
         "hexoid": "1.0.0",
@@ -3642,8 +3787,9 @@
     },
     "node_modules/fs-extra": {
       "version": "8.1.0",
+      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-8.1.0.tgz",
+      "integrity": "sha512-yhlQgA6mnOJUKOsRUFsgJdQCvkKhcz8tlZG5HBQfReYZy46OwLcY+Zia0mtdHsOo9y/hP+CxMN0TU9QxoOtG4g==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "graceful-fs": "^4.2.0",
         "jsonfile": "^4.0.0",
@@ -3655,13 +3801,15 @@
     },
     "node_modules/fs-readdir-recursive": {
       "version": "1.1.0",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/fs-readdir-recursive/-/fs-readdir-recursive-1.1.0.tgz",
+      "integrity": "sha512-GNanXlVr2pf02+sPN40XN8HG+ePaNcvM0q5mZBd668Obwb0yD5GiUbZOFgwn8kGMY6I3mdyDJzieUy3PTYyTRA==",
+      "dev": true
     },
     "node_modules/fs.realpath": {
       "version": "1.0.0",
-      "dev": true,
-      "license": "ISC"
+      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
+      "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8=",
+      "dev": true
     },
     "node_modules/fsevents": {
       "version": "2.3.2",
@@ -3678,32 +3826,37 @@
     },
     "node_modules/function-bind": {
       "version": "1.1.1",
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
+      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
     },
     "node_modules/functional-red-black-tree": {
       "version": "1.0.1",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz",
+      "integrity": "sha1-GwqzvVU7Kg1jmdKcDj6gslIHgyc=",
+      "dev": true
     },
     "node_modules/gensync": {
       "version": "1.0.0-beta.2",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
+      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/get-caller-file": {
       "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
+      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
       "dev": true,
-      "license": "ISC",
       "engines": {
         "node": "6.* || 8.* || >= 10.*"
       }
     },
     "node_modules/get-intrinsic": {
       "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.1.1.tgz",
+      "integrity": "sha512-kWZrnVM42QCiEA2Ig1bG8zjoIMOgxWwYCEeNdwY6Tv/cOSeGpcoX4pXHfKUxNKVoArnrEr2e9srnAxxGIraS9Q==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "function-bind": "^1.1.1",
         "has": "^1.0.3",
@@ -3715,8 +3868,9 @@
     },
     "node_modules/get-stream": {
       "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
+      "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "pump": "^3.0.0"
       },
@@ -3729,8 +3883,9 @@
     },
     "node_modules/glob": {
       "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.0.tgz",
+      "integrity": "sha512-lmLf6gtyrPq8tTjSmrO94wBeQbFR3HbLHbuyD69wuyQkImp2hWqMGB47OX65FBkPffO641IP9jWa1z4ivqG26Q==",
       "dev": true,
-      "license": "ISC",
       "dependencies": {
         "fs.realpath": "^1.0.0",
         "inflight": "^1.0.4",
@@ -3748,8 +3903,9 @@
     },
     "node_modules/glob-parent": {
       "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
+      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
       "dev": true,
-      "license": "ISC",
       "dependencies": {
         "is-glob": "^4.0.1"
       },
@@ -3759,8 +3915,9 @@
     },
     "node_modules/global-agent": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/global-agent/-/global-agent-3.0.0.tgz",
+      "integrity": "sha512-PT6XReJ+D07JvGoxQMkT6qji/jVNfX/h364XHZOWeRzy64sSFr+xJ5OX7LI3b4MPQzdL4H8Y8M0xzPpsVMwA8Q==",
       "dev": true,
-      "license": "BSD-3-Clause",
       "optional": true,
       "dependencies": {
         "boolean": "^3.0.1",
@@ -3776,8 +3933,9 @@
     },
     "node_modules/global-agent/node_modules/semver": {
       "version": "7.3.7",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.7.tgz",
+      "integrity": "sha512-QlYTucUYOews+WeEujDoEGziz4K6c47V/Bd+LjSSYcA94p+DmINdf7ncaUinThfvZyu13lN9OY1XDxt8C0Tw0g==",
       "dev": true,
-      "license": "ISC",
       "optional": true,
       "dependencies": {
         "lru-cache": "^6.0.0"
@@ -3791,8 +3949,9 @@
     },
     "node_modules/global-tunnel-ng": {
       "version": "2.7.1",
+      "resolved": "https://registry.npmjs.org/global-tunnel-ng/-/global-tunnel-ng-2.7.1.tgz",
+      "integrity": "sha512-4s+DyciWBV0eK148wqXxcmVAbFVPqtc3sEtUE/GTQfuU80rySLcMhUmHKSHI7/LDj8q0gDYI1lIhRRB7ieRAqg==",
       "dev": true,
-      "license": "BSD-3-Clause",
       "optional": true,
       "dependencies": {
         "encodeurl": "^1.0.2",
@@ -3806,15 +3965,17 @@
     },
     "node_modules/globals": {
       "version": "11.12.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
+      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
       "engines": {
         "node": ">=4"
       }
     },
     "node_modules/globalthis": {
       "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.3.tgz",
+      "integrity": "sha512-sFdI5LyBiNTHjRd7cGPWapiHWMOXKyuBNX/cWJ3NfzrZQVa8GI/8cofCl74AOVqq9W5kNmguTIzJ/1s2gyI9wA==",
       "dev": true,
-      "license": "MIT",
       "optional": true,
       "dependencies": {
         "define-properties": "^1.1.3"
@@ -3828,8 +3989,9 @@
     },
     "node_modules/globby": {
       "version": "11.0.4",
+      "resolved": "https://registry.npmjs.org/globby/-/globby-11.0.4.tgz",
+      "integrity": "sha512-9O4MVG9ioZJ08ffbcyVYyLOJLk5JQ688pJ4eMGLpdWLHq/Wr1D9BlriLQyL0E+jbkuePVZXYFj47QM/v093wHg==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "array-union": "^2.1.0",
         "dir-glob": "^3.0.1",
@@ -3847,16 +4009,18 @@
     },
     "node_modules/globby/node_modules/slash": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
+      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=8"
       }
     },
     "node_modules/got": {
       "version": "9.6.0",
+      "resolved": "https://registry.npmjs.org/got/-/got-9.6.0.tgz",
+      "integrity": "sha512-R7eWptXuGYxwijs0eV+v3o6+XH1IqVK8dJOEecQfTmkncw9AV4dcw/Dhxi8MdlqPthxxpZyizMzyg8RTmEsG+Q==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@sindresorhus/is": "^0.14.0",
         "@szmarczak/http-timer": "^1.1.2",
@@ -3876,8 +4040,9 @@
     },
     "node_modules/got/node_modules/get-stream": {
       "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-4.1.0.tgz",
+      "integrity": "sha512-GMat4EJ5161kIy2HevLlr4luNjBgvmj413KaQA7jt4V8B4RDsfpHk7WQ9GVqfYyyx8OS/L66Kox+rJRNklLK7w==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "pump": "^3.0.0"
       },
@@ -3887,11 +4052,13 @@
     },
     "node_modules/graceful-fs": {
       "version": "4.2.9",
-      "license": "ISC"
+      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.9.tgz",
+      "integrity": "sha512-NtNxqUcXgpW2iMrfqSfR73Glt39K+BLwWsPs94yR63v45T0Wbej7eRmL5cWfwEgqXnmjQp3zaJTshdRW/qC2ZQ=="
     },
     "node_modules/has": {
       "version": "1.0.3",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
+      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
       "dependencies": {
         "function-bind": "^1.1.1"
       },
@@ -3901,15 +4068,17 @@
     },
     "node_modules/has-flag": {
       "version": "3.0.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
+      "integrity": "sha1-tdRU3CGZriJWmfNGfloH87lVuv0=",
       "engines": {
         "node": ">=4"
       }
     },
     "node_modules/has-symbols": {
       "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.2.tgz",
+      "integrity": "sha512-chXa79rL/UC2KlX17jo3vRGz0azaWEx5tGqZg5pO3NUyEJVB17dMruQlzCCOfUvElghKcm5194+BCRvi2Rv/Gw==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">= 0.4"
       },
@@ -3919,11 +4088,13 @@
     },
     "node_modules/hash-sum": {
       "version": "2.0.0",
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/hash-sum/-/hash-sum-2.0.0.tgz",
+      "integrity": "sha512-WdZTbAByD+pHfl/g9QSsBIIwy8IT+EsPiKDs0KNX+zSHhdDLFKdZu0BQHljvO+0QI/BasbMSUa8wYNCZTvhslg=="
     },
     "node_modules/he": {
       "version": "1.2.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/he/-/he-1.2.0.tgz",
+      "integrity": "sha512-F/1DnUGPopORZi0ni+CvrCgHQ5FyEAHRLSApuYWMmrbSwoN2Mn/7k+Gl38gJnR7yyDZk6WLXwiGod1JOWNDKGw==",
       "peer": true,
       "bin": {
         "he": "bin/he"
@@ -3931,20 +4102,18 @@
     },
     "node_modules/hexoid": {
       "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/hexoid/-/hexoid-1.0.0.tgz",
+      "integrity": "sha512-QFLV0taWQOZtvIRIAdBChesmogZrtuXvVWsFHZTk2SU+anspqZ2vMnoLg7IE1+Uk16N19APic1BuF8bC8c2m5g==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=8"
       }
     },
     "node_modules/hosted-git-info": {
       "version": "2.8.9",
-      "dev": true,
-      "license": "ISC"
-    },
-    "node_modules/html-entities": {
-      "version": "2.3.2",
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-2.8.9.tgz",
+      "integrity": "sha512-mxIDAb9Lsm6DoOJ7xH+5+X4y1LU/4Hi50L9C5sIswK3JzULS4bwk1FvjdBgvYR4bzT4tuUQiC15FE2f5HbLvYw==",
+      "dev": true
     },
     "node_modules/html-reporter": {
       "resolved": "packages/html-reporter",
@@ -3952,28 +4121,32 @@
     },
     "node_modules/html-tags": {
       "version": "2.0.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/html-tags/-/html-tags-2.0.0.tgz",
+      "integrity": "sha512-+Il6N8cCo2wB/Vd3gqy/8TZhTD3QvcVeQLCnZiGkGCH3JP28IgGAY41giccp2W4R3jfyJPAP318FQTa1yU7K7g==",
       "engines": {
         "node": ">=4"
       }
     },
     "node_modules/http-cache-semantics": {
       "version": "4.1.0",
-      "dev": true,
-      "license": "BSD-2-Clause"
+      "resolved": "https://registry.npmjs.org/http-cache-semantics/-/http-cache-semantics-4.1.0.tgz",
+      "integrity": "sha512-carPklcUh7ROWRK7Cv27RPtdhYhUsela/ue5/jKzjegVvXDqM2ILE9Q2BGn9JZJh1g87cp56su/FgQSzcWS8cQ==",
+      "dev": true
     },
     "node_modules/ignore": {
       "version": "5.1.9",
+      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.1.9.tgz",
+      "integrity": "sha512-2zeMQpbKz5dhZ9IwL0gbxSW5w0NK/MSAMtNuhgIHEPmaU3vPdKPL0UdvUCXs5SS4JAwsBxysK5sFMW8ocFiVjQ==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">= 4"
       }
     },
     "node_modules/import-fresh": {
       "version": "3.3.0",
+      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
+      "integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "parent-module": "^1.0.0",
         "resolve-from": "^4.0.0"
@@ -3987,16 +4160,18 @@
     },
     "node_modules/imurmurhash": {
       "version": "0.1.4",
+      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
+      "integrity": "sha1-khi5srkoojixPcT7a21XbyMUU+o=",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=0.8.19"
       }
     },
     "node_modules/inflight": {
       "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
+      "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
       "dev": true,
-      "license": "ISC",
       "dependencies": {
         "once": "^1.3.0",
         "wrappy": "1"
@@ -4004,23 +4179,27 @@
     },
     "node_modules/inherits": {
       "version": "2.0.4",
-      "dev": true,
-      "license": "ISC"
+      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
+      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
+      "dev": true
     },
     "node_modules/ini": {
       "version": "1.3.8",
+      "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.8.tgz",
+      "integrity": "sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==",
       "dev": true,
-      "license": "ISC",
       "optional": true
     },
     "node_modules/is-arrayish": {
       "version": "0.2.1",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
+      "integrity": "sha1-d8mYQFJ6qOyxqLppe4BkWnqSap0=",
+      "dev": true
     },
     "node_modules/is-core-module": {
       "version": "2.9.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.9.0.tgz",
+      "integrity": "sha512-+5FPy5PnwmO3lvfMb0AsoPaBG+5KHUI0wYFXOtYPnVVVspTFUuMZNfNaNVRt3FZadstu2c8x23vykRW/NBoU6A==",
       "dependencies": {
         "has": "^1.0.3"
       },
@@ -4030,24 +4209,27 @@
     },
     "node_modules/is-extglob": {
       "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
+      "integrity": "sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
       }
     },
     "node_modules/is-fullwidth-code-point": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
+      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=8"
       }
     },
     "node_modules/is-glob": {
       "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
+      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "is-extglob": "^2.1.1"
       },
@@ -4057,45 +4239,41 @@
     },
     "node_modules/is-number": {
       "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
+      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=0.12.0"
       }
     },
-    "node_modules/is-what": {
-      "version": "4.1.7",
-      "license": "MIT",
-      "engines": {
-        "node": ">=12.13"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/mesqueeb"
-      }
-    },
     "node_modules/isarray": {
       "version": "1.0.0",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
+      "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=",
+      "dev": true
     },
     "node_modules/isexe": {
       "version": "2.0.0",
-      "dev": true,
-      "license": "ISC"
+      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
+      "integrity": "sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=",
+      "dev": true
     },
     "node_modules/isstream": {
       "version": "0.1.2",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
+      "integrity": "sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo=",
+      "dev": true
     },
     "node_modules/js-tokens": {
       "version": "4.0.0",
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
+      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ=="
     },
     "node_modules/js-yaml": {
       "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
+      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "argparse": "^2.0.1"
       },
@@ -4105,7 +4283,8 @@
     },
     "node_modules/jsesc": {
       "version": "2.5.2",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-2.5.2.tgz",
+      "integrity": "sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==",
       "bin": {
         "jsesc": "bin/jsesc"
       },
@@ -4115,33 +4294,39 @@
     },
     "node_modules/json-buffer": {
       "version": "3.0.0",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.0.tgz",
+      "integrity": "sha1-Wx85evx11ne96Lz8Dkfh+aPZqJg=",
+      "dev": true
     },
     "node_modules/json-parse-even-better-errors": {
       "version": "2.3.1",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
+      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
+      "dev": true
     },
     "node_modules/json-schema-traverse": {
       "version": "0.4.1",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
+      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
+      "dev": true
     },
     "node_modules/json-stable-stringify-without-jsonify": {
       "version": "1.0.1",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
+      "integrity": "sha1-nbe1lJatPzz+8wp1FC0tkwrXJlE=",
+      "dev": true
     },
     "node_modules/json-stringify-safe": {
       "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
+      "integrity": "sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA==",
       "dev": true,
-      "license": "ISC",
       "optional": true
     },
     "node_modules/json5": {
       "version": "2.2.1",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.1.tgz",
+      "integrity": "sha512-1hqLFMSrGHRHxav9q9gNjJ5EXznIxGVO09xQRrwplcS8qs28pZ8s8hupZAmqDwZUmVZ2Qb2jnyPOWcDH8m8dlA==",
       "bin": {
         "json5": "lib/cli.js"
       },
@@ -4151,39 +4336,44 @@
     },
     "node_modules/jsonfile": {
       "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-4.0.0.tgz",
+      "integrity": "sha1-h3Gq4HmbZAdrdmQPygWPnBDjPss=",
       "dev": true,
-      "license": "MIT",
       "optionalDependencies": {
         "graceful-fs": "^4.1.6"
       }
     },
     "node_modules/keyv": {
       "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/keyv/-/keyv-3.1.0.tgz",
+      "integrity": "sha512-9ykJ/46SN/9KPM/sichzQ7OvXyGDYKGTaDlKMGCAlg2UK8KRy4jb0d8sFc+0Tt0YYnThq8X2RZgCg74RPxgcVA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "json-buffer": "3.0.0"
       }
     },
     "node_modules/kleur": {
       "version": "4.1.5",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/kleur/-/kleur-4.1.5.tgz",
+      "integrity": "sha512-o+NO+8WrRiQEE4/7nwRJhN1HWpVmJm511pBHUxPLtp0BUISzlBplORYSmTclCnJvQq2tKu/sgl3xVpkc7ZWuQQ==",
       "engines": {
         "node": ">=6"
       }
     },
     "node_modules/leven": {
       "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/leven/-/leven-2.1.0.tgz",
+      "integrity": "sha1-wuep93IJTe6dNCAq6KzORoeHVYA=",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
       }
     },
     "node_modules/levn": {
       "version": "0.4.1",
+      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
+      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "prelude-ls": "^1.2.1",
         "type-check": "~0.4.0"
@@ -4194,8 +4384,9 @@
     },
     "node_modules/license-checker": {
       "version": "25.0.1",
+      "resolved": "https://registry.npmjs.org/license-checker/-/license-checker-25.0.1.tgz",
+      "integrity": "sha512-mET5AIwl7MR2IAKYYoVBBpV0OnkKQ1xGj2IMMeEFIs42QAkEVjRtFZGWmQ28WeU7MP779iAgOaOy93Mn44mn6g==",
       "dev": true,
-      "license": "BSD-3-Clause",
       "dependencies": {
         "chalk": "^2.4.1",
         "debug": "^3.1.0",
@@ -4214,43 +4405,50 @@
     },
     "node_modules/license-checker/node_modules/debug": {
       "version": "3.2.7",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
+      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "ms": "^2.1.1"
       }
     },
     "node_modules/license-checker/node_modules/semver": {
       "version": "5.7.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
+      "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
       "dev": true,
-      "license": "ISC",
       "bin": {
         "semver": "bin/semver"
       }
     },
     "node_modules/lines-and-columns": {
       "version": "1.1.6",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.1.6.tgz",
+      "integrity": "sha1-HADHQ7QzzQpOgHWPe2SldEDZ/wA=",
+      "dev": true
     },
     "node_modules/lodash": {
       "version": "4.17.21",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
+      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
+      "dev": true
     },
     "node_modules/lodash.kebabcase": {
       "version": "4.1.1",
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/lodash.kebabcase/-/lodash.kebabcase-4.1.1.tgz",
+      "integrity": "sha512-N8XRTIMMqqDgSy4VLKPnJ/+hpGZN+PHQiJnSenYqPaVV/NCqEogTnAdZLQiGKhxX+JCs8waWq2t1XHWKOmlY8g=="
     },
     "node_modules/lodash.merge": {
       "version": "4.6.2",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
+      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
+      "dev": true
     },
     "node_modules/loose-envify": {
       "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
+      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "js-tokens": "^3.0.0 || ^4.0.0"
       },
@@ -4260,16 +4458,18 @@
     },
     "node_modules/lowercase-keys": {
       "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-1.0.1.tgz",
+      "integrity": "sha512-G2Lj61tXDnVFFOi8VZds+SoQjtQC3dgokKdDG2mTm1tx4m50NUHBOZSBwQQHyy0V12A0JTG4icfZQH+xPyh8VA==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
       }
     },
     "node_modules/lru-cache": {
       "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
+      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
       "dev": true,
-      "license": "ISC",
       "dependencies": {
         "yallist": "^4.0.0"
       },
@@ -4279,7 +4479,8 @@
     },
     "node_modules/magic-string": {
       "version": "0.26.2",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.26.2.tgz",
+      "integrity": "sha512-NzzlXpclt5zAbmo6h6jNc8zl2gNRGHvmsZW4IvZhTC4W7k4OlLP+S5YLussa/r3ixNT66KOQfNORlXHSOy/X4A==",
       "dependencies": {
         "sourcemap-codec": "^1.4.8"
       },
@@ -4289,8 +4490,9 @@
     },
     "node_modules/make-dir": {
       "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-2.1.0.tgz",
+      "integrity": "sha512-LS9X+dc8KLxXCb8dni79fLIIUA5VyZoyjSMCwTluaXA0o27cCK0bhXkpgw+sTXVpPy/lSO57ilRixqk0vDmtRA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "pify": "^4.0.1",
         "semver": "^5.6.0"
@@ -4301,16 +4503,18 @@
     },
     "node_modules/make-dir/node_modules/semver": {
       "version": "5.7.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
+      "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
       "dev": true,
-      "license": "ISC",
       "bin": {
         "semver": "bin/semver"
       }
     },
     "node_modules/matcher": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/matcher/-/matcher-3.0.0.tgz",
+      "integrity": "sha512-OkeDaAZ/bQCxeFAozM55PKcKU0yJMPGifLwV4Qgjitu+5MoAfSQN4lsLJeXZ1b8w0x+/Emda6MZgXS1jvsapng==",
       "dev": true,
-      "license": "MIT",
       "optional": true,
       "dependencies": {
         "escape-string-regexp": "^4.0.0"
@@ -4321,8 +4525,9 @@
     },
     "node_modules/matcher/node_modules/escape-string-regexp": {
       "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
+      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
       "dev": true,
-      "license": "MIT",
       "optional": true,
       "engines": {
         "node": ">=10"
@@ -4333,54 +4538,46 @@
     },
     "node_modules/mdurl": {
       "version": "1.0.1",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/merge-anything": {
-      "version": "5.0.2",
-      "license": "MIT",
-      "dependencies": {
-        "is-what": "^4.1.6",
-        "ts-toolbelt": "^9.6.0"
-      },
-      "engines": {
-        "node": ">=12.13"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/mesqueeb"
-      }
+      "resolved": "https://registry.npmjs.org/mdurl/-/mdurl-1.0.1.tgz",
+      "integrity": "sha1-/oWy7HWlkDfyrf7BAP1sYBdhFS4=",
+      "dev": true
     },
     "node_modules/merge-source-map": {
       "version": "1.1.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/merge-source-map/-/merge-source-map-1.1.0.tgz",
+      "integrity": "sha512-Qkcp7P2ygktpMPh2mCQZaf3jhN6D3Z/qVZHSdWvQ+2Ef5HgRAPBO57A77+ENm0CPx2+1Ce/MYKi3ymqdfuqibw==",
       "dependencies": {
         "source-map": "^0.6.1"
       }
     },
     "node_modules/merge-source-map/node_modules/source-map": {
       "version": "0.6.1",
-      "license": "BSD-3-Clause",
+      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
+      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
       "engines": {
         "node": ">=0.10.0"
       }
     },
     "node_modules/merge2": {
       "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
+      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">= 8"
       }
     },
     "node_modules/metric-lcs": {
       "version": "0.1.2",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/metric-lcs/-/metric-lcs-0.1.2.tgz",
+      "integrity": "sha512-+TZ5dUDPKPJaU/rscTzxyN8ZkX7eAVLAiQU/e+YINleXPv03SCmJShaMT1If1liTH8OcmWXZs0CmzCBRBLcMpA==",
+      "dev": true
     },
     "node_modules/micromatch": {
       "version": "4.0.4",
+      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.4.tgz",
+      "integrity": "sha512-pRmzw/XUcwXGpD9aI9q/0XOwLNygjETJ8y0ao0wdqprrzDa4YnxLcz7fQRZr8voh8V10kGhABbNcHVk5wHgWwg==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "braces": "^3.0.1",
         "picomatch": "^2.2.3"
@@ -4391,8 +4588,9 @@
     },
     "node_modules/mime": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/mime/-/mime-3.0.0.tgz",
+      "integrity": "sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A==",
       "dev": true,
-      "license": "MIT",
       "bin": {
         "mime": "cli.js"
       },
@@ -4402,16 +4600,18 @@
     },
     "node_modules/mimic-response": {
       "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-1.0.1.tgz",
+      "integrity": "sha512-j5EctnkH7amfV/q5Hgmoal1g2QHFJRraOtmx0JpIqkxhBhI/lJSl1nMpQ45hVarwNETOoWEimndZ4QK0RHxuxQ==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=4"
       }
     },
     "node_modules/minimatch": {
       "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz",
+      "integrity": "sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==",
       "dev": true,
-      "license": "ISC",
       "dependencies": {
         "brace-expansion": "^1.1.7"
       },
@@ -4421,13 +4621,15 @@
     },
     "node_modules/minimist": {
       "version": "1.2.6",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.6.tgz",
+      "integrity": "sha512-Jsjnk4bw3YJqYzbdyBiNsPWHPfO++UGG749Cxs6peCu5Xg4nrena6OVxOYxrQTqww0Jmwt+Ref8rggumkTLz9Q==",
+      "dev": true
     },
     "node_modules/mkdirp": {
       "version": "0.5.5",
+      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.5.tgz",
+      "integrity": "sha512-NKmAlESf6jMGym1++R0Ra7wvhV+wFW63FaSOFPwRahvea0gMUcGUhVeAg/0BC0wiv9ih5NYPB1Wn1UEI1/L+xQ==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "minimist": "^1.2.5"
       },
@@ -4437,19 +4639,22 @@
     },
     "node_modules/mri": {
       "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/mri/-/mri-1.1.4.tgz",
+      "integrity": "sha512-6y7IjGPm8AzlvoUrwAaw1tLnUBudaS3752vcd8JtrpGGQn+rXIe63LFVHm/YMwtqAuh+LJPCFdlLYPWM1nYn6w==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=4"
       }
     },
     "node_modules/ms": {
       "version": "2.1.2",
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
+      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
     },
     "node_modules/nanoid": {
       "version": "3.3.4",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.4.tgz",
+      "integrity": "sha512-MqBkQh/OHTS2egovRtLk45wEyNXwF+cokD+1YPf9u5VfJiRdAiRwB2froX5Co9Rh20xs4siNPm8naNotSD6RBw==",
       "bin": {
         "nanoid": "bin/nanoid.cjs"
       },
@@ -4459,25 +4664,29 @@
     },
     "node_modules/natural-compare": {
       "version": "1.4.0",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
+      "integrity": "sha1-Sr6/7tdUHywnrPspvbvRXI1bpPc=",
+      "dev": true
     },
     "node_modules/ncp": {
       "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/ncp/-/ncp-2.0.0.tgz",
+      "integrity": "sha1-GVoh1sRuNh0vsSgbo4uR6d9727M=",
       "dev": true,
-      "license": "MIT",
       "bin": {
         "ncp": "bin/ncp"
       }
     },
     "node_modules/node-releases": {
       "version": "2.0.5",
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.5.tgz",
+      "integrity": "sha512-U9h1NLROZTq9uE1SNffn6WuPDg8icmi3ns4rEl/oTfIle4iLjTliCzgTsbaIFMq/Xn078/lfY/BL0GWZ+psK4Q=="
     },
     "node_modules/node-stream-zip": {
       "version": "1.15.0",
+      "resolved": "https://registry.npmjs.org/node-stream-zip/-/node-stream-zip-1.15.0.tgz",
+      "integrity": "sha512-LN4fydt9TqhZhThkZIVQnF9cwjU3qmUH9h78Mx/K7d3VvfRqqwthLwJEUOEL0QPZ0XQmNN7be5Ggit5+4dq3Bw==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=0.12.0"
       },
@@ -4488,8 +4697,9 @@
     },
     "node_modules/nopt": {
       "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/nopt/-/nopt-4.0.3.tgz",
+      "integrity": "sha512-CvaGwVMztSMJLOeXPrez7fyfObdZqNUK1cPAEzLHrTybIua9pMdmmPR5YwtfNftIOMv3DPUhFaxsZMNTQO20Kg==",
       "dev": true,
-      "license": "ISC",
       "dependencies": {
         "abbrev": "1",
         "osenv": "^0.1.4"
@@ -4500,8 +4710,9 @@
     },
     "node_modules/normalize-package-data": {
       "version": "2.5.0",
+      "resolved": "https://registry.npmjs.org/normalize-package-data/-/normalize-package-data-2.5.0.tgz",
+      "integrity": "sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==",
       "dev": true,
-      "license": "BSD-2-Clause",
       "dependencies": {
         "hosted-git-info": "^2.1.4",
         "resolve": "^1.10.0",
@@ -4511,32 +4722,36 @@
     },
     "node_modules/normalize-package-data/node_modules/semver": {
       "version": "5.7.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
+      "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
       "dev": true,
-      "license": "ISC",
       "bin": {
         "semver": "bin/semver"
       }
     },
     "node_modules/normalize-path": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
+      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
       }
     },
     "node_modules/normalize-url": {
       "version": "4.5.1",
+      "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-4.5.1.tgz",
+      "integrity": "sha512-9UZCFRHQdNrfTpGg8+1INIg93B6zE0aXMVFkw1WFwvO4SlZywU6aLg5Of0Ap/PgcbSw4LNxvMWXMeugwMCX0AA==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=8"
       }
     },
     "node_modules/npm-conf": {
       "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/npm-conf/-/npm-conf-1.1.3.tgz",
+      "integrity": "sha512-Yic4bZHJOt9RCFbRP3GgpqhScOY4HH3V2P8yBj6CeYq118Qr+BLXqT2JvpJ00mryLESpgOxf5XlFv4ZjXxLScw==",
       "dev": true,
-      "license": "MIT",
       "optional": true,
       "dependencies": {
         "config-chain": "^1.1.11",
@@ -4548,8 +4763,9 @@
     },
     "node_modules/npm-conf/node_modules/pify": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/pify/-/pify-3.0.0.tgz",
+      "integrity": "sha1-5aSs0sEB/fPZpNB/DbxNtJ3SgXY=",
       "dev": true,
-      "license": "MIT",
       "optional": true,
       "engines": {
         "node": ">=4"
@@ -4557,21 +4773,24 @@
     },
     "node_modules/npm-normalize-package-bin": {
       "version": "1.0.1",
-      "dev": true,
-      "license": "ISC"
+      "resolved": "https://registry.npmjs.org/npm-normalize-package-bin/-/npm-normalize-package-bin-1.0.1.tgz",
+      "integrity": "sha512-EPfafl6JL5/rU+ot6P3gRSCpPDW5VmIzX959Ob1+ySFUuuYHWHekXpwdUZcKP5C+DS4GEtdJluwBjnsNDl+fSA==",
+      "dev": true
     },
     "node_modules/object-keys": {
       "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
+      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">= 0.4"
       }
     },
     "node_modules/object.assign": {
       "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.2.tgz",
+      "integrity": "sha512-ixT2L5THXsApyiUPYKmW+2EHpXXe5Ii3M+f4e+aJFAHao5amFRW6J0OO6c/LU8Be47utCx2GL89hxGB6XSmKuQ==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "call-bind": "^1.0.0",
         "define-properties": "^1.1.3",
@@ -4587,16 +4806,18 @@
     },
     "node_modules/once": {
       "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
+      "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
       "dev": true,
-      "license": "ISC",
       "dependencies": {
         "wrappy": "1"
       }
     },
     "node_modules/optionator": {
       "version": "0.9.1",
+      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.1.tgz",
+      "integrity": "sha512-74RlY5FCnhq4jRxVUPKDaRwrVNXMqsGsiW6AJw4XK8hmtm10wC0ypZBLw5IIp85NZMr91+qd1RvvENwg7jjRFw==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "deep-is": "^0.1.3",
         "fast-levenshtein": "^2.0.6",
@@ -4611,24 +4832,27 @@
     },
     "node_modules/os-homedir": {
       "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/os-homedir/-/os-homedir-1.0.2.tgz",
+      "integrity": "sha1-/7xJiDNuDoM94MFox+8VISGqf7M=",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
       }
     },
     "node_modules/os-tmpdir": {
       "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz",
+      "integrity": "sha1-u+Z0BseaqFxc/sdm/lc0VV36EnQ=",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
       }
     },
     "node_modules/osenv": {
       "version": "0.1.5",
+      "resolved": "https://registry.npmjs.org/osenv/-/osenv-0.1.5.tgz",
+      "integrity": "sha512-0CWcCECdMVc2Rw3U5w9ZjqX6ga6ubk1xDVKxtBQPK7wis/0F2r9T6k4ydGYhecl7YUBxBVxhL5oisPsNxAPe2g==",
       "dev": true,
-      "license": "ISC",
       "dependencies": {
         "os-homedir": "^1.0.0",
         "os-tmpdir": "^1.0.0"
@@ -4636,16 +4860,18 @@
     },
     "node_modules/p-cancelable": {
       "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/p-cancelable/-/p-cancelable-1.1.0.tgz",
+      "integrity": "sha512-s73XxOZ4zpt1edZYZzvhqFa6uvQc1vwUa0K0BdtIZgQMAJj9IbebH+JkgKZc9h+B05PKHLOTl4ajG1BmNrVZlw==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=6"
       }
     },
     "node_modules/parent-module": {
       "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
+      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "callsites": "^3.0.0"
       },
@@ -4655,8 +4881,9 @@
     },
     "node_modules/parse-json": {
       "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
+      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@babel/code-frame": "^7.0.0",
         "error-ex": "^1.3.1",
@@ -4672,44 +4899,51 @@
     },
     "node_modules/path-is-absolute": {
       "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
+      "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18=",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
       }
     },
     "node_modules/path-key": {
       "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
+      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=8"
       }
     },
     "node_modules/path-parse": {
       "version": "1.0.7",
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
+      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw=="
     },
     "node_modules/path-type": {
       "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
+      "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=8"
       }
     },
     "node_modules/pend": {
       "version": "1.2.0",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/pend/-/pend-1.2.0.tgz",
+      "integrity": "sha1-elfrVQpng/kRUzH89GY9XI4AelA=",
+      "dev": true
     },
     "node_modules/picocolors": {
       "version": "1.0.0",
-      "license": "ISC"
+      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz",
+      "integrity": "sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ=="
     },
     "node_modules/picomatch": {
       "version": "2.2.3",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.2.3.tgz",
+      "integrity": "sha512-KpELjfwcCDUb9PeigTs2mBJzXUPzAuP2oPcA989He8Rte0+YUAjw1JVedDhuTKPkHjSYzMN3npC9luThGYEKdg==",
       "engines": {
         "node": ">=8.6"
       },
@@ -4719,16 +4953,18 @@
     },
     "node_modules/pify": {
       "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/pify/-/pify-4.0.1.tgz",
+      "integrity": "sha512-uB80kBFb/tfd68bVleG9T5GGsGPjJrLAUpR5PZIrhBnIaRTQRjqdJSsIKkOP6OAIFbj7GOrcudc5pNjZ+geV2g==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=6"
       }
     },
     "node_modules/pkginfo": {
       "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/pkginfo/-/pkginfo-0.3.1.tgz",
+      "integrity": "sha1-Wyn2qB9wcXFC4J52W76rl7T4HiE=",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">= 0.4.0"
       }
@@ -4754,7 +4990,9 @@
       "link": true
     },
     "node_modules/postcss": {
-      "version": "8.4.16",
+      "version": "8.4.14",
+      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.14.tgz",
+      "integrity": "sha512-E398TUmfAYFPBSdzgeieK2Y1+1cpdxJx8yXbK/m57nRhKSmk1GB2tO4lbLBtlkfPQTDKfe4Xqv1ASWPpayPEig==",
       "funding": [
         {
           "type": "opencollective",
@@ -4765,7 +5003,6 @@
           "url": "https://tidelift.com/funding/github/npm/postcss"
         }
       ],
-      "license": "MIT",
       "dependencies": {
         "nanoid": "^3.3.4",
         "picocolors": "^1.0.0",
@@ -4777,7 +5014,8 @@
     },
     "node_modules/postcss-selector-parser": {
       "version": "6.0.10",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.0.10.tgz",
+      "integrity": "sha512-IQ7TZdoaqbT+LCpShg46jnZVlhWD2w6iQYAcYXfHARZ7X1t/UGhhceQDs5X0cGqKvYlHNOuv7Oa1xmb0oQuA3w==",
       "dependencies": {
         "cssesc": "^3.0.0",
         "util-deprecate": "^1.0.2"
@@ -4788,23 +5026,26 @@
     },
     "node_modules/prelude-ls": {
       "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
+      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">= 0.8.0"
       }
     },
     "node_modules/prepend-http": {
       "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/prepend-http/-/prepend-http-2.0.0.tgz",
+      "integrity": "sha1-6SQ0v6XqjBn0HN/UAddBo8gZ2Jc=",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=4"
       }
     },
     "node_modules/prettier": {
       "version": "2.6.2",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/prettier/-/prettier-2.6.2.tgz",
+      "integrity": "sha512-PkUpF+qoXTqhOeWL9fu7As8LXsIUZ1WYaJiY/a7McAQzxjk82OF0tibkFXVCDImZtWxbvojFjerkiLb0/q8mew==",
       "bin": {
         "prettier": "bin-prettier.js"
       },
@@ -4817,27 +5058,31 @@
     },
     "node_modules/process-nextick-args": {
       "version": "2.0.1",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
+      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==",
+      "dev": true
     },
     "node_modules/progress": {
       "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/progress/-/progress-2.0.3.tgz",
+      "integrity": "sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=0.4.0"
       }
     },
     "node_modules/proto-list": {
       "version": "1.2.4",
+      "resolved": "https://registry.npmjs.org/proto-list/-/proto-list-1.2.4.tgz",
+      "integrity": "sha1-IS1b/hMYMGpCD2QCuOJv85ZHqEk=",
       "dev": true,
-      "license": "ISC",
       "optional": true
     },
     "node_modules/proxy": {
       "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/proxy/-/proxy-1.0.2.tgz",
+      "integrity": "sha512-KNac2ueWRpjbUh77OAFPZuNdfEqNynm9DD4xHT14CccGpW8wKZwEkN0yjlb7X9G9Z9F55N0Q+1z+WfgAhwYdzQ==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "args": "5.0.1",
         "basic-auth-parser": "0.0.2",
@@ -4849,12 +5094,14 @@
     },
     "node_modules/pseudomap": {
       "version": "1.0.2",
-      "license": "ISC"
+      "resolved": "https://registry.npmjs.org/pseudomap/-/pseudomap-1.0.2.tgz",
+      "integrity": "sha1-8FKijacOYYkX7wqKw0wa5aaChrM="
     },
     "node_modules/pump": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.0.tgz",
+      "integrity": "sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "end-of-stream": "^1.1.0",
         "once": "^1.3.1"
@@ -4862,16 +5109,18 @@
     },
     "node_modules/punycode": {
       "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
+      "integrity": "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=6"
       }
     },
     "node_modules/qs": {
       "version": "6.9.3",
+      "resolved": "https://registry.npmjs.org/qs/-/qs-6.9.3.tgz",
+      "integrity": "sha512-EbZYNarm6138UKKq46tdx08Yo/q9ZhFoAXAI1meAFd2GtbRDhbZY2WQSICskT0c5q99aFzLG1D4nvTk9tqfXIw==",
       "dev": true,
-      "license": "BSD-3-Clause",
       "engines": {
         "node": ">=0.6"
       },
@@ -4881,13 +5130,17 @@
     },
     "node_modules/querystring": {
       "version": "0.2.1",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/querystring/-/querystring-0.2.1.tgz",
+      "integrity": "sha512-wkvS7mL/JMugcup3/rMitHmd9ecIGd2lhFhK9N3UUQ450h66d1r3Y9nvXzQAW1Lq+wyx61k/1pfKS5KuKiyEbg==",
+      "deprecated": "The querystring API is considered Legacy. new code should use the URLSearchParams API instead.",
       "engines": {
         "node": ">=0.4.x"
       }
     },
     "node_modules/queue-microtask": {
       "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
+      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
       "dev": true,
       "funding": [
         {
@@ -4902,13 +5155,13 @@
           "type": "consulting",
           "url": "https://feross.org/support"
         }
-      ],
-      "license": "MIT"
+      ]
     },
     "node_modules/react": {
       "version": "18.1.0",
+      "resolved": "https://registry.npmjs.org/react/-/react-18.1.0.tgz",
+      "integrity": "sha512-4oL8ivCz5ZEPyclFQXaNksK3adutVS8l2xzZU0cqEFrE9Sb7fC0EFK5uEk74wIreL1DERyjvsU915j1pcT2uEQ==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "loose-envify": "^1.1.0"
       },
@@ -4918,8 +5171,9 @@
     },
     "node_modules/react-dom": {
       "version": "18.1.0",
+      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.1.0.tgz",
+      "integrity": "sha512-fU1Txz7Budmvamp7bshe4Zi32d0ll7ect+ccxNu9FlObT605GOEB8BfO4tmRJ39R5Zj831VCpvQ05QPBW5yb+w==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "loose-envify": "^1.1.0",
         "scheduler": "^0.22.0"
@@ -4930,16 +5184,17 @@
     },
     "node_modules/react-refresh": {
       "version": "0.13.0",
-      "dev": true,
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.13.0.tgz",
+      "integrity": "sha512-XP8A9BT0CpRBD+NYLLeIhld/RqG9+gktUjW1FkE+Vm7OCinbG1SshcK5tb9ls4kzvjZr9mOQc7HYgBngEyPAXg==",
       "engines": {
         "node": ">=0.10.0"
       }
     },
     "node_modules/read-installed": {
       "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/read-installed/-/read-installed-4.0.3.tgz",
+      "integrity": "sha1-/5uLZ/GH0eTCm5/rMfayI6zRkGc=",
       "dev": true,
-      "license": "ISC",
       "dependencies": {
         "debuglog": "^1.0.1",
         "read-package-json": "^2.0.0",
@@ -4954,16 +5209,18 @@
     },
     "node_modules/read-installed/node_modules/semver": {
       "version": "5.7.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
+      "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
       "dev": true,
-      "license": "ISC",
       "bin": {
         "semver": "bin/semver"
       }
     },
     "node_modules/read-package-json": {
       "version": "2.1.2",
+      "resolved": "https://registry.npmjs.org/read-package-json/-/read-package-json-2.1.2.tgz",
+      "integrity": "sha512-D1KmuLQr6ZSJS0tW8hf3WGpRlwszJOXZ3E8Yd/DNRaM5d+1wVRZdHlpGBLAuovjr28LbWvjpWkBHMxpRGGjzNA==",
       "dev": true,
-      "license": "ISC",
       "dependencies": {
         "glob": "^7.1.1",
         "json-parse-even-better-errors": "^2.3.0",
@@ -4973,8 +5230,9 @@
     },
     "node_modules/read-pkg": {
       "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/read-pkg/-/read-pkg-5.2.0.tgz",
+      "integrity": "sha512-Ug69mNOpfvKDAc2Q8DRpMjjzdtrnv9HcSMX+4VsZxD1aZ6ZzrIE7rlzXBtWTyhULSMKg076AW6WR5iZpD0JiOg==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "@types/normalize-package-data": "^2.4.0",
         "normalize-package-data": "^2.5.0",
@@ -4987,8 +5245,9 @@
     },
     "node_modules/readable-stream": {
       "version": "2.3.7",
+      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.7.tgz",
+      "integrity": "sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "core-util-is": "~1.0.0",
         "inherits": "~2.0.3",
@@ -5001,8 +5260,9 @@
     },
     "node_modules/readdir-scoped-modules": {
       "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/readdir-scoped-modules/-/readdir-scoped-modules-1.1.0.tgz",
+      "integrity": "sha512-asaikDeqAQg7JifRsZn1NJZXo9E+VwlyCfbkZhwyISinqk5zNS6266HS5kah6P0SaQKGF6SkNnZVHUzHFYxYDw==",
       "dev": true,
-      "license": "ISC",
       "dependencies": {
         "debuglog": "^1.0.1",
         "dezalgo": "^1.0.0",
@@ -5012,8 +5272,9 @@
     },
     "node_modules/readdirp": {
       "version": "3.6.0",
+      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
+      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "picomatch": "^2.2.1"
       },
@@ -5027,8 +5288,9 @@
     },
     "node_modules/regexpp": {
       "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/regexpp/-/regexpp-3.2.0.tgz",
+      "integrity": "sha512-pq2bWo9mVD43nbts2wGv17XLiNLya+GklZ8kaDLV2Z08gDCsGpnKn9BFMepvWuHCbyVvY7J5o5+BVvoQbmlJLg==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=8"
       },
@@ -5038,15 +5300,17 @@
     },
     "node_modules/require-directory": {
       "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
+      "integrity": "sha1-jGStX9MNqxyXbiNE/+f3kqam30I=",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=0.10.0"
       }
     },
     "node_modules/resolve": {
       "version": "1.22.1",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.1.tgz",
+      "integrity": "sha512-nBpuuYuY5jFsli/JIs1oldw6fOQCBioohqWZg/2hiaOybXOft4lonv85uDOKXdf8rhyK159cxU5cDcK/NKk8zw==",
       "dependencies": {
         "is-core-module": "^2.9.0",
         "path-parse": "^1.0.7",
@@ -5061,24 +5325,27 @@
     },
     "node_modules/resolve-from": {
       "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
+      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=4"
       }
     },
     "node_modules/responselike": {
       "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/responselike/-/responselike-1.0.2.tgz",
+      "integrity": "sha1-kYcg7ztjHFZCvgaPFa3lpG9Loec=",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "lowercase-keys": "^1.0.0"
       }
     },
     "node_modules/reusify": {
       "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
+      "integrity": "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "iojs": ">=1.0.0",
         "node": ">=0.10.0"
@@ -5086,8 +5353,9 @@
     },
     "node_modules/rimraf": {
       "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
+      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
       "dev": true,
-      "license": "ISC",
       "dependencies": {
         "glob": "^7.1.3"
       },
@@ -5100,8 +5368,9 @@
     },
     "node_modules/roarr": {
       "version": "2.15.4",
+      "resolved": "https://registry.npmjs.org/roarr/-/roarr-2.15.4.tgz",
+      "integrity": "sha512-CHhPh+UNHD2GTXNYhPWLnU8ONHdI+5DI+4EYIAOaiD63rHeYlZvyh8P+in5999TTSFgUYuKUAjzRI4mdh/p+2A==",
       "dev": true,
-      "license": "BSD-3-Clause",
       "optional": true,
       "dependencies": {
         "boolean": "^3.0.1",
@@ -5117,7 +5386,8 @@
     },
     "node_modules/rollup": {
       "version": "2.77.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/rollup/-/rollup-2.77.0.tgz",
+      "integrity": "sha512-vL8xjY4yOQEw79DvyXLijhnhh+R/O9zpF/LEgkCebZFtb6ELeN9H3/2T0r8+mp+fFTBHZ5qGpOpW2ela2zRt3g==",
       "bin": {
         "rollup": "dist/bin/rollup"
       },
@@ -5130,6 +5400,8 @@
     },
     "node_modules/run-parallel": {
       "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
+      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
       "dev": true,
       "funding": [
         {
@@ -5145,15 +5417,15 @@
           "url": "https://feross.org/support"
         }
       ],
-      "license": "MIT",
       "dependencies": {
         "queue-microtask": "^1.2.2"
       }
     },
     "node_modules/rxjs": {
       "version": "6.6.7",
+      "resolved": "https://registry.npmjs.org/rxjs/-/rxjs-6.6.7.tgz",
+      "integrity": "sha512-hTdwr+7yYNIT5n4AMYp85KA6yw2Va0FLa3Rguvbpa4W3I5xynaBZo41cM3XM+4Q6fRMj3sBYIR1VAmZMXYJvRQ==",
       "dev": true,
-      "license": "Apache-2.0",
       "dependencies": {
         "tslib": "^1.9.0"
       },
@@ -5163,38 +5435,44 @@
     },
     "node_modules/safe-buffer": {
       "version": "5.1.2",
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
+      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
     },
     "node_modules/sax": {
       "version": "1.2.4",
-      "dev": true,
-      "license": "ISC"
+      "resolved": "https://registry.npmjs.org/sax/-/sax-1.2.4.tgz",
+      "integrity": "sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw==",
+      "dev": true
     },
     "node_modules/scheduler": {
       "version": "0.22.0",
+      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.22.0.tgz",
+      "integrity": "sha512-6QAm1BgQI88NPYymgGQLCZgvep4FyePDWFpXVK+zNSUgHwlqpJy8VEh8Et0KxTACS4VWwMousBElAZOH9nkkoQ==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "loose-envify": "^1.1.0"
       }
     },
     "node_modules/semver": {
       "version": "6.3.0",
-      "license": "ISC",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
+      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
       "bin": {
         "semver": "bin/semver.js"
       }
     },
     "node_modules/semver-compare": {
       "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/semver-compare/-/semver-compare-1.0.0.tgz",
+      "integrity": "sha512-YM3/ITh2MJ5MtzaM429anh+x2jiLVjqILF4m4oyQB18W7Ggea7BfqdH/wGMK7dDiMghv/6WG7znWMwUDzJiXow==",
       "dev": true,
-      "license": "MIT",
       "optional": true
     },
     "node_modules/serialize-error": {
       "version": "7.0.1",
+      "resolved": "https://registry.npmjs.org/serialize-error/-/serialize-error-7.0.1.tgz",
+      "integrity": "sha512-8I8TjW5KMOKsZQTvoxjuSIa7foAwPWGOts+6o7sgjz41/qMD9VQHEDxi6PBvK2l0MXUmqZyNpUK+T2tQaaElvw==",
       "dev": true,
-      "license": "MIT",
       "optional": true,
       "dependencies": {
         "type-fest": "^0.13.1"
@@ -5208,8 +5486,9 @@
     },
     "node_modules/serialize-error/node_modules/type-fest": {
       "version": "0.13.1",
+      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.13.1.tgz",
+      "integrity": "sha512-34R7HTnG0XIJcBSn5XhDd7nNFPRcXYRZrBB2O2jdKqYODldSzBAqzsWoZYYvduky73toYS/ESqxPvkDf/F0XMg==",
       "dev": true,
-      "license": "(MIT OR CC0-1.0)",
       "optional": true,
       "engines": {
         "node": ">=10"
@@ -5220,8 +5499,9 @@
     },
     "node_modules/shebang-command": {
       "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
+      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "shebang-regex": "^3.0.0"
       },
@@ -5231,30 +5511,35 @@
     },
     "node_modules/shebang-regex": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
+      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=8"
       }
     },
     "node_modules/slash": {
       "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/slash/-/slash-2.0.0.tgz",
+      "integrity": "sha512-ZYKh3Wh2z1PpEXWr0MpSBZ0V6mZHAQfYevttO11c51CaWjGTaadiKZ+wVt1PbMlDV5qhMFslpZCemhwOK7C89A==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=6"
       }
     },
     "node_modules/slide": {
       "version": "1.1.6",
+      "resolved": "https://registry.npmjs.org/slide/-/slide-1.1.6.tgz",
+      "integrity": "sha1-VusCfWW00tzmyy4tMsTUr8nh1wc=",
       "dev": true,
-      "license": "ISC",
       "engines": {
         "node": "*"
       }
     },
     "node_modules/socksv5": {
       "version": "0.0.6",
+      "resolved": "https://registry.npmjs.org/socksv5/-/socksv5-0.0.6.tgz",
+      "integrity": "sha512-tQpQ0MdNQAsQBDhCXy3OvGGJikh9QOl3PkbwT4POJiQCm/fK4z9AxKQQRG8WLeF6talphnPrSWiZRpTl42rApg==",
       "bundleDependencies": [
         "ipv6"
       ],
@@ -5292,49 +5577,38 @@
         "node": ">=0.2.4"
       }
     },
-    "node_modules/solid-js": {
-      "version": "1.4.8",
-      "license": "MIT"
-    },
-    "node_modules/solid-refresh": {
-      "version": "0.4.1",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/generator": "^7.18.2",
-        "@babel/helper-module-imports": "^7.16.7",
-        "@babel/types": "^7.18.4"
-      },
-      "peerDependencies": {
-        "solid-js": "^1.3"
-      }
-    },
     "node_modules/source-map": {
       "version": "0.5.7",
-      "license": "BSD-3-Clause",
+      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz",
+      "integrity": "sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=",
       "engines": {
         "node": ">=0.10.0"
       }
     },
     "node_modules/source-map-js": {
       "version": "1.0.2",
-      "license": "BSD-3-Clause",
+      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.0.2.tgz",
+      "integrity": "sha512-R0XvVJ9WusLiqTCEiGCmICCMplcCkIwwR11mOSD9CR5u+IXYdiseeEuXCVAjS54zqwkLcPNnmU4OeJ6tUrWhDw==",
       "engines": {
         "node": ">=0.10.0"
       }
     },
     "node_modules/sourcemap-codec": {
       "version": "1.4.8",
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/sourcemap-codec/-/sourcemap-codec-1.4.8.tgz",
+      "integrity": "sha512-9NykojV5Uih4lgo5So5dtw+f0JgJX30KCNI8gwhz2J9A15wD0Ml6tjHKwf6fTSa6fAdVBdZeNOs9eJ71qCk8vA=="
     },
     "node_modules/spawn-command": {
       "version": "0.0.2-1",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/spawn-command/-/spawn-command-0.0.2-1.tgz",
+      "integrity": "sha1-YvXpRmmBwbeW3Fkpk34RycaSG9A=",
+      "dev": true
     },
     "node_modules/spdx-compare": {
       "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/spdx-compare/-/spdx-compare-1.0.0.tgz",
+      "integrity": "sha512-C1mDZOX0hnu0ep9dfmuoi03+eOdDoz2yvK79RxbcrVEG1NO1Ph35yW102DHWKN4pk80nwCgeMmSY5L25VE4D9A==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "array-find-index": "^1.0.2",
         "spdx-expression-parse": "^3.0.0",
@@ -5343,8 +5617,9 @@
     },
     "node_modules/spdx-correct": {
       "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/spdx-correct/-/spdx-correct-3.1.1.tgz",
+      "integrity": "sha512-cOYcUWwhCuHCXi49RhFRCyJEK3iPj1Ziz9DpViV3tbZOwXD49QzIN3MpOLJNxh2qwq2lJJZaKMVw9qNi4jTC0w==",
       "dev": true,
-      "license": "Apache-2.0",
       "dependencies": {
         "spdx-expression-parse": "^3.0.0",
         "spdx-license-ids": "^3.0.0"
@@ -5352,13 +5627,15 @@
     },
     "node_modules/spdx-exceptions": {
       "version": "2.3.0",
-      "dev": true,
-      "license": "CC-BY-3.0"
+      "resolved": "https://registry.npmjs.org/spdx-exceptions/-/spdx-exceptions-2.3.0.tgz",
+      "integrity": "sha512-/tTrYOC7PPI1nUAgx34hUpqXuyJG+DTHJTnIULG4rDygi4xu/tfgmq1e1cIRwRzwZgo4NLySi+ricLkZkw4i5A==",
+      "dev": true
     },
     "node_modules/spdx-expression-parse": {
       "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/spdx-expression-parse/-/spdx-expression-parse-3.0.1.tgz",
+      "integrity": "sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "spdx-exceptions": "^2.1.0",
         "spdx-license-ids": "^3.0.0"
@@ -5366,18 +5643,21 @@
     },
     "node_modules/spdx-license-ids": {
       "version": "3.0.10",
-      "dev": true,
-      "license": "CC0-1.0"
+      "resolved": "https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-3.0.10.tgz",
+      "integrity": "sha512-oie3/+gKf7QtpitB0LYLETe+k8SifzsX4KixvpOsbI6S0kRiRQ5MKOio8eMSAKQ17N06+wdEOXRiId+zOxo0hA==",
+      "dev": true
     },
     "node_modules/spdx-ranges": {
       "version": "2.1.1",
-      "dev": true,
-      "license": "(MIT AND CC-BY-3.0)"
+      "resolved": "https://registry.npmjs.org/spdx-ranges/-/spdx-ranges-2.1.1.tgz",
+      "integrity": "sha512-mcdpQFV7UDAgLpXEE/jOMqvK4LBoO0uTQg0uvXUewmEFhpiZx5yJSZITHB8w1ZahKdhfZqP5GPEOKLyEq5p8XA==",
+      "dev": true
     },
     "node_modules/spdx-satisfies": {
       "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/spdx-satisfies/-/spdx-satisfies-4.0.1.tgz",
+      "integrity": "sha512-WVzZ/cXAzoNmjCWiEluEA3BjHp5tiUmmhn9MK+X0tBbR9sOqtC6UQwmgCNrAIZvNlMuBUYAaHYfb2oqlF9SwKA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "spdx-compare": "^1.0.0",
         "spdx-expression-parse": "^3.0.0",
@@ -5386,30 +5666,34 @@
     },
     "node_modules/sprintf-js": {
       "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.1.2.tgz",
+      "integrity": "sha512-VE0SOVEHCk7Qc8ulkWw3ntAzXuqf7S2lvwQaDLRnUeIEaKNQJzV6BwmLKhOqT61aGhfUMrXeaBk+oDGCzvhcug==",
       "dev": true,
-      "license": "BSD-3-Clause",
       "optional": true
     },
     "node_modules/stack-trace": {
       "version": "0.0.10",
+      "resolved": "https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.10.tgz",
+      "integrity": "sha1-VHxws0fo0ytOEI6hoqFZ5f3eGcA=",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": "*"
       }
     },
     "node_modules/string_decoder": {
       "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
+      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "safe-buffer": "~5.1.0"
       }
     },
     "node_modules/string-width": {
       "version": "4.2.2",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.2.tgz",
+      "integrity": "sha512-XBJbT3N4JhVumXE0eoLU9DCjcaF92KLNqTmFCnG1pf8duUxFGwtP6AD6nkjw9a3IdiRtL3E2w3JDiE/xi3vOeA==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "emoji-regex": "^8.0.0",
         "is-fullwidth-code-point": "^3.0.0",
@@ -5421,12 +5705,15 @@
     },
     "node_modules/string.prototype.repeat": {
       "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/string.prototype.repeat/-/string.prototype.repeat-0.2.0.tgz",
+      "integrity": "sha1-q6Nt4I3O5qWjN9SbLqHaGyj8Ds8=",
       "dev": true
     },
     "node_modules/strip-ansi": {
       "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "ansi-regex": "^5.0.1"
       },
@@ -5436,8 +5723,9 @@
     },
     "node_modules/strip-json-comments": {
       "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
+      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=8"
       },
@@ -5447,8 +5735,9 @@
     },
     "node_modules/sumchecker": {
       "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/sumchecker/-/sumchecker-3.0.1.tgz",
+      "integrity": "sha512-MvjXzkz/BOfyVDkG0oFOtBxHX2u3gKbMHIF/dXblZsgD3BWOFLmHovIpZY7BykJdAjcqRCBi1WYBNdEC9yI7vg==",
       "dev": true,
-      "license": "Apache-2.0",
       "dependencies": {
         "debug": "^4.1.0"
       },
@@ -5458,7 +5747,8 @@
     },
     "node_modules/supports-color": {
       "version": "5.5.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
+      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
       "dependencies": {
         "has-flag": "^3.0.0"
       },
@@ -5468,7 +5758,8 @@
     },
     "node_modules/supports-preserve-symlinks-flag": {
       "version": "1.0.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
+      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
       "engines": {
         "node": ">= 0.4"
       },
@@ -5478,14 +5769,16 @@
     },
     "node_modules/svelte": {
       "version": "3.49.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/svelte/-/svelte-3.49.0.tgz",
+      "integrity": "sha512-+lmjic1pApJWDfPCpUUTc1m8azDqYCG1JN9YEngrx/hUyIcFJo6VZhj0A1Ai0wqoHcEIuQy+e9tk+4uDgdtsFA==",
       "engines": {
         "node": ">= 8"
       }
     },
     "node_modules/svelte-hmr": {
       "version": "0.14.12",
-      "license": "ISC",
+      "resolved": "https://registry.npmjs.org/svelte-hmr/-/svelte-hmr-0.14.12.tgz",
+      "integrity": "sha512-4QSW/VvXuqVcFZ+RhxiR8/newmwOCTlbYIezvkeN6302YFRE8cXy0naamHcjz8Y9Ce3ITTZtrHrIL0AGfyo61w==",
       "engines": {
         "node": "^12.20 || ^14.13.1 || >= 16"
       },
@@ -5494,32 +5787,38 @@
       }
     },
     "node_modules/svg-tags": {
-      "version": "1.0.0"
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/svg-tags/-/svg-tags-1.0.0.tgz",
+      "integrity": "sha1-WPcc7jvVGbWdSyqEO2x95krAR2Q="
     },
     "node_modules/text-table": {
       "version": "0.2.0",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
+      "integrity": "sha1-f17oI66AUgfACvLfSoTsP8+lcLQ=",
+      "dev": true
     },
     "node_modules/to-fast-properties": {
       "version": "2.0.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-2.0.0.tgz",
+      "integrity": "sha1-3F5pjL0HkmW8c+A3doGk5Og/YW4=",
       "engines": {
         "node": ">=4"
       }
     },
     "node_modules/to-readable-stream": {
       "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/to-readable-stream/-/to-readable-stream-1.0.0.tgz",
+      "integrity": "sha512-Iq25XBt6zD5npPhlLVXGFN3/gyR2/qODcKNNyTMd4vbm39HUaOiAM4PMq0eMVC/Tkxz+Zjdsc55g9yyz+Yq00Q==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=6"
       }
     },
     "node_modules/to-regex-range": {
       "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
+      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "is-number": "^7.0.0"
       },
@@ -5533,33 +5832,33 @@
     },
     "node_modules/tree-kill": {
       "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/tree-kill/-/tree-kill-1.2.2.tgz",
+      "integrity": "sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A==",
       "dev": true,
-      "license": "MIT",
       "bin": {
         "tree-kill": "cli.js"
       }
     },
     "node_modules/treeify": {
       "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/treeify/-/treeify-1.1.0.tgz",
+      "integrity": "sha512-1m4RA7xVAJrSGrrXGs0L3YTwyvBs2S8PbRHaLZAkFw7JR8oIFwYtysxlBZhYIa7xSyiYJKZ3iGrrk55cGA3i9A==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">=0.6"
       }
     },
-    "node_modules/ts-toolbelt": {
-      "version": "9.6.0",
-      "license": "Apache-2.0"
-    },
     "node_modules/tslib": {
       "version": "1.14.1",
-      "dev": true,
-      "license": "0BSD"
+      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
+      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
+      "dev": true
     },
     "node_modules/tunnel": {
       "version": "0.0.6",
+      "resolved": "https://registry.npmjs.org/tunnel/-/tunnel-0.0.6.tgz",
+      "integrity": "sha512-1h/Lnq9yajKY2PEbBadPXj3VxsDDu844OnaAo52UVmIzIvwwtBPIuNvkjuzBlTWpfJyUbG3ez0KSBibQkj4ojg==",
       "dev": true,
-      "license": "MIT",
       "optional": true,
       "engines": {
         "node": ">=0.6.11 <=0.7.0 || >=0.7.3"
@@ -5567,8 +5866,9 @@
     },
     "node_modules/type-check": {
       "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
+      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "prelude-ls": "^1.2.1"
       },
@@ -5578,21 +5878,24 @@
     },
     "node_modules/type-fest": {
       "version": "0.6.0",
+      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.6.0.tgz",
+      "integrity": "sha512-q+MB8nYR1KDLrgr4G5yemftpMC7/QLqVndBmEEdqzmNj5dcFOO4Oo8qlwZE3ULT3+Zim1F8Kq4cBnikNhlCMlg==",
       "dev": true,
-      "license": "(MIT OR CC0-1.0)",
       "engines": {
         "node": ">=8"
       }
     },
     "node_modules/typedarray": {
       "version": "0.0.6",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/typedarray/-/typedarray-0.0.6.tgz",
+      "integrity": "sha1-hnrHTjhkGHsdPUfZlqeOxciDB3c=",
+      "dev": true
     },
     "node_modules/typescript": {
       "version": "4.7.3",
+      "resolved": "https://registry.npmjs.org/typescript/-/typescript-4.7.3.tgz",
+      "integrity": "sha512-WOkT3XYvrpXx4vMMqlD+8R8R37fZkjyLGlxavMc4iB8lrl8L0DeTcHbYgw/v0N/z9wAFsgBhcsF0ruoySS22mA==",
       "dev": true,
-      "license": "Apache-2.0",
       "bin": {
         "tsc": "bin/tsc",
         "tsserver": "bin/tsserver"
@@ -5603,24 +5906,27 @@
     },
     "node_modules/universalify": {
       "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/universalify/-/universalify-0.1.2.tgz",
+      "integrity": "sha512-rBJeI5CXAlmy1pV+617WB9J63U6XcazHHF2f2dbJix4XzpUF0RS3Zbj0FGIOCAva5P/d/GBOYaACQ1w+0azUkg==",
       "dev": true,
-      "license": "MIT",
       "engines": {
         "node": ">= 4.0.0"
       }
     },
     "node_modules/uri-js": {
       "version": "4.4.1",
+      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
+      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
       "dev": true,
-      "license": "BSD-2-Clause",
       "dependencies": {
         "punycode": "^2.1.0"
       }
     },
     "node_modules/url-parse-lax": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/url-parse-lax/-/url-parse-lax-3.0.0.tgz",
+      "integrity": "sha1-FrXK/Afb42dsGxmZF3gj1lA6yww=",
       "dev": true,
-      "license": "MIT",
       "dependencies": {
         "prepend-http": "^2.0.0"
       },
@@ -5630,35 +5936,40 @@
     },
     "node_modules/util-deprecate": {
       "version": "1.0.2",
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
+      "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8="
     },
     "node_modules/util-extend": {
       "version": "1.0.3",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/util-extend/-/util-extend-1.0.3.tgz",
+      "integrity": "sha1-p8IW0mdUUWljeztu3GypEZ4v+T8=",
+      "dev": true
     },
     "node_modules/v8-compile-cache": {
       "version": "2.3.0",
-      "dev": true,
-      "license": "MIT"
+      "resolved": "https://registry.npmjs.org/v8-compile-cache/-/v8-compile-cache-2.3.0.tgz",
+      "integrity": "sha512-l8lCEmLcLYZh4nbunNZvQCJc5pv7+RCwa8q/LdUx8u7lsWvPDKmpodJAJNwkAhJC//dFY48KuIEmjtd4RViDrA==",
+      "dev": true
     },
     "node_modules/validate-npm-package-license": {
       "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz",
+      "integrity": "sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==",
       "dev": true,
-      "license": "Apache-2.0",
       "dependencies": {
         "spdx-correct": "^3.0.0",
         "spdx-expression-parse": "^3.0.0"
       }
     },
     "node_modules/vite": {
-      "version": "2.9.15",
-      "license": "MIT",
+      "version": "2.9.9",
+      "resolved": "https://registry.npmjs.org/vite/-/vite-2.9.9.tgz",
+      "integrity": "sha512-ffaam+NgHfbEmfw/Vuh6BHKKlI/XIAhxE5QSS7gFLIngxg171mg1P3a4LSRME0z2ZU1ScxoKzphkipcYwSD5Ew==",
       "dependencies": {
         "esbuild": "^0.14.27",
         "postcss": "^8.4.13",
         "resolve": "^1.22.0",
-        "rollup": ">=2.59.0 <2.78.0"
+        "rollup": "^2.59.0"
       },
       "bin": {
         "vite": "bin/vite.js"
@@ -5688,7 +5999,8 @@
     },
     "node_modules/vite-plugin-vue2": {
       "version": "2.0.1",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/vite-plugin-vue2/-/vite-plugin-vue2-2.0.1.tgz",
+      "integrity": "sha512-8ixcIDZwk3PSbdaqKrPFYDot044lPLIqpjjuRXUDHdRhml87Kbc6JqLq6uwHERlPovwfI3DpluWRMVgn/Llmag==",
       "dependencies": {
         "@babel/core": "^7.17.9",
         "@babel/parser": "^7.17.9",
@@ -5727,7 +6039,8 @@
     },
     "node_modules/vite-plugin-vue2/node_modules/@babel/core": {
       "version": "7.18.2",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.18.2.tgz",
+      "integrity": "sha512-A8pri1YJiC5UnkdrWcmfZTJTV85b4UXTAfImGmCfYmax4TR9Cw8sDS0MOk++Gp2mE/BefVJ5nwy5yzqNJbP/DQ==",
       "dependencies": {
         "@ampproject/remapping": "^2.1.0",
         "@babel/code-frame": "^7.16.7",
@@ -5755,7 +6068,8 @@
     },
     "node_modules/vite-plugin-vue2/node_modules/fs-extra": {
       "version": "10.1.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
+      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
       "dependencies": {
         "graceful-fs": "^4.2.0",
         "jsonfile": "^6.0.1",
@@ -5767,7 +6081,8 @@
     },
     "node_modules/vite-plugin-vue2/node_modules/jsonfile": {
       "version": "6.1.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
+      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
       "dependencies": {
         "universalify": "^2.0.0"
       },
@@ -5777,1919 +6092,441 @@
     },
     "node_modules/vite-plugin-vue2/node_modules/slash": {
       "version": "3.0.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
+      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
       "engines": {
         "node": ">=8"
       }
     },
     "node_modules/vite-plugin-vue2/node_modules/source-map": {
       "version": "0.7.3",
-      "license": "BSD-3-Clause",
+      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.7.3.tgz",
+      "integrity": "sha512-CkCj6giN3S+n9qrYiBTX5gystlENnRW5jZeNLHpe6aue+SrHcG5VYwujhW9s4dY31mEGsxBDrHR6oI69fTXsaQ==",
       "engines": {
         "node": ">= 8"
       }
     },
     "node_modules/vite-plugin-vue2/node_modules/universalify": {
       "version": "2.0.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.0.tgz",
+      "integrity": "sha512-hAZsKq7Yy11Zu1DE0OzWjw7nnLZmJZYTDZZyEFHZdUhV8FkH5MCfoU1XMaxXovpyW5nq5scPqq0ZDP9Zyl04oQ==",
       "engines": {
         "node": ">= 10.0.0"
       }
     },
-    "node_modules/vite/node_modules/@esbuild/linux-loong64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.14.54.tgz",
-      "integrity": "sha512-bZBrLAIX1kpWelV0XemxBZllyRmM6vgFQQG2GdNb+r3Fkp0FOh1NJSvekXDs7jq70k4euu1cryLMfU+mTXlEpw==",
-      "cpu": [
-        "loong64"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
+    "node_modules/vue": {
+      "version": "2.6.14",
+      "resolved": "https://registry.npmjs.org/vue/-/vue-2.6.14.tgz",
+      "integrity": "sha512-x2284lgYvjOMj3Za7kqzRcUSxBboHqtgRE2zlos1qWaOye5yUmHn42LB1250NJBLRwEcdrB0JRwyPTEPhfQjiQ==",
+      "dev": true
+    },
+    "node_modules/vue-template-babel-compiler": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/vue-template-babel-compiler/-/vue-template-babel-compiler-1.2.0.tgz",
+      "integrity": "sha512-CScBSX1/wCdmmZ/Lvj/63p2CCVTS0FMj0F69VRBo73CuJrjvPAPGmeNJ7D/cwt/VS2PduowRWbO8N4Zh4Z3b0g==",
+      "dependencies": {
+        "@babel/core": "^7.14.3",
+        "@babel/plugin-proposal-nullish-coalescing-operator": "^7.14.5",
+        "@babel/plugin-proposal-object-rest-spread": "^7.15.6",
+        "@babel/plugin-proposal-optional-chaining": "^7.14.2",
+        "@babel/plugin-transform-arrow-functions": "^7.14.5",
+        "@babel/plugin-transform-block-scoping": "^7.14.5",
+        "@babel/plugin-transform-computed-properties": "^7.14.5",
+        "@babel/plugin-transform-destructuring": "^7.14.5",
+        "@babel/plugin-transform-parameters": "^7.14.5",
+        "@babel/plugin-transform-spread": "^7.14.5",
+        "@babel/types": "^7.14.5",
+        "deepmerge": "^4.2.2"
+      },
       "engines": {
-        "node": ">=12"
+        "node": ">=12.0.0"
+      },
+      "peerDependencies": {
+        "vue-template-compiler": "^2.6.0"
       }
     },
-    "node_modules/vite/node_modules/esbuild": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.14.54.tgz",
-      "integrity": "sha512-Cy9llcy8DvET5uznocPyqL3BFRrFXSVqbgpMJ9Wz8oVjZlh/zUSNbPRbov0VX7VxN2JH1Oa0uNxZ7eLRb62pJA==",
-      "hasInstallScript": true,
+    "node_modules/vue-template-compiler": {
+      "version": "2.6.14",
+      "resolved": "https://registry.npmjs.org/vue-template-compiler/-/vue-template-compiler-2.6.14.tgz",
+      "integrity": "sha512-ODQS1SyMbjKoO1JBJZojSw6FE4qnh9rIpUZn2EUT86FKizx9uH5z6uXiIrm4/Nb/gwxTi/o17ZDEGWAXHvtC7g==",
+      "peer": true,
+      "dependencies": {
+        "de-indent": "^1.0.2",
+        "he": "^1.1.0"
+      }
+    },
+    "node_modules/vue-template-es2015-compiler": {
+      "version": "1.9.1",
+      "resolved": "https://registry.npmjs.org/vue-template-es2015-compiler/-/vue-template-es2015-compiler-1.9.1.tgz",
+      "integrity": "sha512-4gDntzrifFnCEvyoO8PqyJDmguXgVPxKiIxrBKjIowvL9l+N66196+72XVYR8BBf1Uv1Fgt3bGevJ+sEmxfZzw=="
+    },
+    "node_modules/which": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
+      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
+      "dev": true,
+      "dependencies": {
+        "isexe": "^2.0.0"
+      },
       "bin": {
-        "esbuild": "bin/esbuild"
+        "node-which": "bin/node-which"
       },
       "engines": {
-        "node": ">=12"
+        "node": ">= 8"
+      }
+    },
+    "node_modules/winston": {
+      "version": "0.8.3",
+      "resolved": "https://registry.npmjs.org/winston/-/winston-0.8.3.tgz",
+      "integrity": "sha1-ZLar9M0Brcrv1QCTk7HY6L7BnbA=",
+      "dev": true,
+      "dependencies": {
+        "async": "0.2.x",
+        "colors": "0.6.x",
+        "cycle": "1.0.x",
+        "eyes": "0.1.x",
+        "isstream": "0.1.x",
+        "pkginfo": "0.3.x",
+        "stack-trace": "0.0.x"
       },
-      "optionalDependencies": {
-        "@esbuild/linux-loong64": "0.14.54",
-        "esbuild-android-64": "0.14.54",
-        "esbuild-android-arm64": "0.14.54",
-        "esbuild-darwin-64": "0.14.54",
-        "esbuild-darwin-arm64": "0.14.54",
-        "esbuild-freebsd-64": "0.14.54",
-        "esbuild-freebsd-arm64": "0.14.54",
-        "esbuild-linux-32": "0.14.54",
-        "esbuild-linux-64": "0.14.54",
-        "esbuild-linux-arm": "0.14.54",
-        "esbuild-linux-arm64": "0.14.54",
-        "esbuild-linux-mips64le": "0.14.54",
-        "esbuild-linux-ppc64le": "0.14.54",
-        "esbuild-linux-riscv64": "0.14.54",
-        "esbuild-linux-s390x": "0.14.54",
-        "esbuild-netbsd-64": "0.14.54",
-        "esbuild-openbsd-64": "0.14.54",
-        "esbuild-sunos-64": "0.14.54",
-        "esbuild-windows-32": "0.14.54",
-        "esbuild-windows-64": "0.14.54",
-        "esbuild-windows-arm64": "0.14.54"
-      }
-    },
-    "node_modules/vite/node_modules/esbuild-android-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-android-64/-/esbuild-android-64-0.14.54.tgz",
-      "integrity": "sha512-Tz2++Aqqz0rJ7kYBfz+iqyE3QMycD4vk7LBRyWaAVFgFtQ/O8EJOnVmTOiDWYZ/uYzB4kvP+bqejYdVKzE5lAQ==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "android"
-      ],
       "engines": {
-        "node": ">=12"
+        "node": ">= 0.6.0"
       }
     },
-    "node_modules/vite/node_modules/esbuild-android-arm64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-android-arm64/-/esbuild-android-arm64-0.14.54.tgz",
-      "integrity": "sha512-F9E+/QDi9sSkLaClO8SOV6etqPd+5DgJje1F9lOWoNncDdOBL2YF59IhsWATSt0TLZbYCf3pNlTHvVV5VfHdvg==",
-      "cpu": [
-        "arm64"
-      ],
-      "optional": true,
-      "os": [
-        "android"
-      ],
+    "node_modules/winston/node_modules/colors": {
+      "version": "0.6.2",
+      "resolved": "https://registry.npmjs.org/colors/-/colors-0.6.2.tgz",
+      "integrity": "sha1-JCP+ZnisDF2uiFLl0OW+CMmXq8w=",
+      "dev": true,
       "engines": {
-        "node": ">=12"
+        "node": ">=0.1.90"
       }
     },
-    "node_modules/vite/node_modules/esbuild-darwin-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-darwin-64/-/esbuild-darwin-64-0.14.54.tgz",
-      "integrity": "sha512-jtdKWV3nBviOd5v4hOpkVmpxsBy90CGzebpbO9beiqUYVMBtSc0AL9zGftFuBon7PNDcdvNCEuQqw2x0wP9yug==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "darwin"
-      ],
+    "node_modules/word-wrap": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.3.tgz",
+      "integrity": "sha512-Hz/mrNwitNRh/HUAtM/VT/5VH+ygD6DV7mYKZAtHOrbs8U7lvPS6xf7EJKMF0uW1KJCl0H701g3ZGus+muE5vQ==",
+      "dev": true,
       "engines": {
-        "node": ">=12"
+        "node": ">=0.10.0"
       }
     },
-    "node_modules/vite/node_modules/esbuild-darwin-arm64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-darwin-arm64/-/esbuild-darwin-arm64-0.14.54.tgz",
-      "integrity": "sha512-OPafJHD2oUPyvJMrsCvDGkRrVCar5aVyHfWGQzY1dWnzErjrDuSETxwA2HSsyg2jORLY8yBfzc1MIpUkXlctmw==",
-      "cpu": [
-        "arm64"
-      ],
-      "optional": true,
-      "os": [
-        "darwin"
-      ],
+    "node_modules/wrap-ansi": {
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
+      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
+      "dev": true,
+      "dependencies": {
+        "ansi-styles": "^4.0.0",
+        "string-width": "^4.1.0",
+        "strip-ansi": "^6.0.0"
+      },
       "engines": {
-        "node": ">=12"
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
       }
     },
-    "node_modules/vite/node_modules/esbuild-freebsd-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-freebsd-64/-/esbuild-freebsd-64-0.14.54.tgz",
-      "integrity": "sha512-OKwd4gmwHqOTp4mOGZKe/XUlbDJ4Q9TjX0hMPIDBUWWu/kwhBAudJdBoxnjNf9ocIB6GN6CPowYpR/hRCbSYAg==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "freebsd"
-      ],
+    "node_modules/wrap-ansi/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "dev": true,
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
       "engines": {
-        "node": ">=12"
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
       }
     },
-    "node_modules/vite/node_modules/esbuild-freebsd-arm64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-freebsd-arm64/-/esbuild-freebsd-arm64-0.14.54.tgz",
-      "integrity": "sha512-sFwueGr7OvIFiQT6WeG0jRLjkjdqWWSrfbVwZp8iMP+8UHEHRBvlaxL6IuKNDwAozNUmbb8nIMXa7oAOARGs1Q==",
-      "cpu": [
-        "arm64"
-      ],
-      "optional": true,
-      "os": [
-        "freebsd"
-      ],
+    "node_modules/wrap-ansi/node_modules/color-convert": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+      "dev": true,
+      "dependencies": {
+        "color-name": "~1.1.4"
+      },
       "engines": {
-        "node": ">=12"
+        "node": ">=7.0.0"
       }
     },
-    "node_modules/vite/node_modules/esbuild-linux-32": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-32/-/esbuild-linux-32-0.14.54.tgz",
-      "integrity": "sha512-1ZuY+JDI//WmklKlBgJnglpUL1owm2OX+8E1syCD6UAxcMM/XoWd76OHSjl/0MR0LisSAXDqgjT3uJqT67O3qw==",
-      "cpu": [
-        "ia32"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
+    "node_modules/wrap-ansi/node_modules/color-name": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+      "dev": true
     },
-    "node_modules/vite/node_modules/esbuild-linux-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-64/-/esbuild-linux-64-0.14.54.tgz",
-      "integrity": "sha512-EgjAgH5HwTbtNsTqQOXWApBaPVdDn7XcK+/PtJwZLT1UmpLoznPd8c5CxqsH2dQK3j05YsB3L17T8vE7cp4cCg==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
+    "node_modules/wrappy": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
+      "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=",
+      "dev": true
     },
-    "node_modules/vite/node_modules/esbuild-linux-arm": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-arm/-/esbuild-linux-arm-0.14.54.tgz",
-      "integrity": "sha512-qqz/SjemQhVMTnvcLGoLOdFpCYbz4v4fUo+TfsWG+1aOu70/80RV6bgNpR2JCrppV2moUQkww+6bWxXRL9YMGw==",
-      "cpu": [
-        "arm"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
+    "node_modules/ws": {
+      "version": "8.5.0",
+      "resolved": "https://registry.npmjs.org/ws/-/ws-8.5.0.tgz",
+      "integrity": "sha512-BWX0SWVgLPzYwF8lTzEy1egjhS4S4OEAHfsO8o65WOVsrnSRGaSiUaa9e0ggGlkMTtBlmOpEXiie9RUcBO86qg==",
+      "dev": true,
       "engines": {
-        "node": ">=12"
+        "node": ">=10.0.0"
+      },
+      "peerDependencies": {
+        "bufferutil": "^4.0.1",
+        "utf-8-validate": "^5.0.2"
+      },
+      "peerDependenciesMeta": {
+        "bufferutil": {
+          "optional": true
+        },
+        "utf-8-validate": {
+          "optional": true
+        }
       }
     },
-    "node_modules/vite/node_modules/esbuild-linux-arm64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-arm64/-/esbuild-linux-arm64-0.14.54.tgz",
-      "integrity": "sha512-WL71L+0Rwv+Gv/HTmxTEmpv0UgmxYa5ftZILVi2QmZBgX3q7+tDeOQNqGtdXSdsL8TQi1vIaVFHUPDe0O0kdig==",
-      "cpu": [
-        "arm64"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
+    "node_modules/xml2js": {
+      "version": "0.4.23",
+      "resolved": "https://registry.npmjs.org/xml2js/-/xml2js-0.4.23.tgz",
+      "integrity": "sha512-ySPiMjM0+pLDftHgXY4By0uswI3SPKLDw/i3UXbnO8M/p28zqexCUoPmQFrYD+/1BzhGJSs2i1ERWKJAtiLrug==",
+      "dev": true,
+      "dependencies": {
+        "sax": ">=0.6.0",
+        "xmlbuilder": "~11.0.0"
+      },
       "engines": {
-        "node": ">=12"
+        "node": ">=4.0.0"
       }
     },
-    "node_modules/vite/node_modules/esbuild-linux-mips64le": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-mips64le/-/esbuild-linux-mips64le-0.14.54.tgz",
-      "integrity": "sha512-qTHGQB8D1etd0u1+sB6p0ikLKRVuCWhYQhAHRPkO+OF3I/iSlTKNNS0Lh2Oc0g0UFGguaFZZiPJdJey3AGpAlw==",
-      "cpu": [
-        "mips64el"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
+    "node_modules/xmlbuilder": {
+      "version": "11.0.1",
+      "resolved": "https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-11.0.1.tgz",
+      "integrity": "sha512-fDlsI/kFEx7gLvbecc0/ohLG50fugQp8ryHzMTuW9vSa1GJ0XYWKnhsUx7oie3G98+r56aTQIUB4kht42R3JvA==",
+      "dev": true,
       "engines": {
-        "node": ">=12"
+        "node": ">=4.0"
       }
     },
-    "node_modules/vite/node_modules/esbuild-linux-ppc64le": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-ppc64le/-/esbuild-linux-ppc64le-0.14.54.tgz",
-      "integrity": "sha512-j3OMlzHiqwZBDPRCDFKcx595XVfOfOnv68Ax3U4UKZ3MTYQB5Yz3X1mn5GnodEVYzhtZgxEBidLWeIs8FDSfrQ==",
-      "cpu": [
-        "ppc64"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
+    "node_modules/yallist": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
+      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
+      "dev": true
+    },
+    "node_modules/yaml": {
+      "version": "1.10.2",
+      "resolved": "https://registry.npmjs.org/yaml/-/yaml-1.10.2.tgz",
+      "integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==",
+      "dev": true,
       "engines": {
-        "node": ">=12"
+        "node": ">= 6"
       }
     },
-    "node_modules/vite/node_modules/esbuild-linux-riscv64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-riscv64/-/esbuild-linux-riscv64-0.14.54.tgz",
-      "integrity": "sha512-y7Vt7Wl9dkOGZjxQZnDAqqn+XOqFD7IMWiewY5SPlNlzMX39ocPQlOaoxvT4FllA5viyV26/QzHtvTjVNOxHZg==",
-      "cpu": [
-        "riscv64"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
+    "node_modules/yargs": {
+      "version": "16.2.0",
+      "resolved": "https://registry.npmjs.org/yargs/-/yargs-16.2.0.tgz",
+      "integrity": "sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==",
+      "dev": true,
+      "dependencies": {
+        "cliui": "^7.0.2",
+        "escalade": "^3.1.1",
+        "get-caller-file": "^2.0.5",
+        "require-directory": "^2.1.1",
+        "string-width": "^4.2.0",
+        "y18n": "^5.0.5",
+        "yargs-parser": "^20.2.2"
+      },
       "engines": {
-        "node": ">=12"
+        "node": ">=10"
       }
     },
-    "node_modules/vite/node_modules/esbuild-linux-s390x": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-s390x/-/esbuild-linux-s390x-0.14.54.tgz",
-      "integrity": "sha512-zaHpW9dziAsi7lRcyV4r8dhfG1qBidQWUXweUjnw+lliChJqQr+6XD71K41oEIC3Mx1KStovEmlzm+MkGZHnHA==",
-      "cpu": [
-        "s390x"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
+    "node_modules/yargs-parser": {
+      "version": "20.2.9",
+      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-20.2.9.tgz",
+      "integrity": "sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w==",
+      "dev": true,
       "engines": {
-        "node": ">=12"
+        "node": ">=10"
       }
     },
-    "node_modules/vite/node_modules/esbuild-netbsd-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-netbsd-64/-/esbuild-netbsd-64-0.14.54.tgz",
-      "integrity": "sha512-PR01lmIMnfJTgeU9VJTDY9ZerDWVFIUzAtJuDHwwceppW7cQWjBBqP48NdeRtoP04/AtO9a7w3viI+PIDr6d+w==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "netbsd"
-      ],
+    "node_modules/yargs/node_modules/y18n": {
+      "version": "5.0.8",
+      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
+      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
+      "dev": true,
       "engines": {
-        "node": ">=12"
+        "node": ">=10"
       }
     },
-    "node_modules/vite/node_modules/esbuild-openbsd-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-openbsd-64/-/esbuild-openbsd-64-0.14.54.tgz",
-      "integrity": "sha512-Qyk7ikT2o7Wu76UsvvDS5q0amJvmRzDyVlL0qf5VLsLchjCa1+IAvd8kTBgUxD7VBUUVgItLkk609ZHUc1oCaw==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "openbsd"
-      ],
-      "engines": {
-        "node": ">=12"
+    "node_modules/yauzl": {
+      "version": "2.10.0",
+      "resolved": "https://registry.npmjs.org/yauzl/-/yauzl-2.10.0.tgz",
+      "integrity": "sha1-x+sXyT4RLLEIb6bY5R+wZnt5pfk=",
+      "dev": true,
+      "dependencies": {
+        "buffer-crc32": "~0.2.3",
+        "fd-slicer": "~1.1.0"
       }
     },
-    "node_modules/vite/node_modules/esbuild-sunos-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-sunos-64/-/esbuild-sunos-64-0.14.54.tgz",
-      "integrity": "sha512-28GZ24KmMSeKi5ueWzMcco6EBHStL3B6ubM7M51RmPwXQGLe0teBGJocmWhgwccA1GeFXqxzILIxXpHbl9Q/Kw==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "sunos"
-      ],
-      "engines": {
-        "node": ">=12"
+    "packages/babel-bundle": {
+      "version": "0.0.1",
+      "extraneous": true,
+      "dependencies": {
+        "@babel/code-frame": "7.16.7",
+        "@babel/core": "7.16.12",
+        "@babel/helper-plugin-utils": "7.16.7",
+        "@babel/plugin-proposal-class-properties": "7.16.7",
+        "@babel/plugin-proposal-dynamic-import": "7.16.7",
+        "@babel/plugin-proposal-export-namespace-from": "7.16.7",
+        "@babel/plugin-proposal-logical-assignment-operators": "7.16.7",
+        "@babel/plugin-proposal-nullish-coalescing-operator": "7.16.7",
+        "@babel/plugin-proposal-numeric-separator": "7.16.7",
+        "@babel/plugin-proposal-optional-chaining": "7.16.7",
+        "@babel/plugin-proposal-private-methods": "7.16.11",
+        "@babel/plugin-proposal-private-property-in-object": "7.16.7",
+        "@babel/plugin-syntax-async-generators": "7.8.4",
+        "@babel/plugin-syntax-json-strings": "7.8.3",
+        "@babel/plugin-syntax-object-rest-spread": "7.8.3",
+        "@babel/plugin-syntax-optional-catch-binding": "7.8.3",
+        "@babel/plugin-transform-modules-commonjs": "7.16.8",
+        "@babel/preset-typescript": "7.16.7"
+      }
+    },
+    "packages/bundle-babel": {
+      "version": "0.0.1",
+      "extraneous": true,
+      "dependencies": {
+        "@babel/code-frame": "7.16.7",
+        "@babel/core": "7.16.12",
+        "@babel/helper-plugin-utils": "7.16.7",
+        "@babel/plugin-proposal-class-properties": "7.16.7",
+        "@babel/plugin-proposal-dynamic-import": "7.16.7",
+        "@babel/plugin-proposal-export-namespace-from": "7.16.7",
+        "@babel/plugin-proposal-logical-assignment-operators": "7.16.7",
+        "@babel/plugin-proposal-nullish-coalescing-operator": "7.16.7",
+        "@babel/plugin-proposal-numeric-separator": "7.16.7",
+        "@babel/plugin-proposal-optional-chaining": "7.16.7",
+        "@babel/plugin-proposal-private-methods": "7.16.11",
+        "@babel/plugin-proposal-private-property-in-object": "7.16.7",
+        "@babel/plugin-syntax-async-generators": "7.8.4",
+        "@babel/plugin-syntax-json-strings": "7.8.3",
+        "@babel/plugin-syntax-object-rest-spread": "7.8.3",
+        "@babel/plugin-syntax-optional-catch-binding": "7.8.3",
+        "@babel/plugin-transform-modules-commonjs": "7.16.8",
+        "@babel/preset-typescript": "7.16.7"
+      }
+    },
+    "packages/expect-bundle": {
+      "version": "0.0.1",
+      "extraneous": true,
+      "dependencies": {
+        "expect": "27.2.5",
+        "jest-matcher-utils": "27.2.5"
       }
     },
-    "node_modules/vite/node_modules/esbuild-windows-32": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-windows-32/-/esbuild-windows-32-0.14.54.tgz",
-      "integrity": "sha512-T+rdZW19ql9MjS7pixmZYVObd9G7kcaZo+sETqNH4RCkuuYSuv9AGHUVnPoP9hhuE1WM1ZimHz1CIBHBboLU7w==",
-      "cpu": [
-        "ia32"
-      ],
-      "optional": true,
-      "os": [
-        "win32"
-      ],
+    "packages/html-reporter": {
+      "version": "0.0.0"
+    },
+    "packages/playwright": {
+      "version": "1.25.2",
+      "hasInstallScript": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "playwright-core": "1.25.2"
+      },
+      "bin": {
+        "playwright": "cli.js"
+      },
       "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/vite/node_modules/esbuild-windows-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-windows-64/-/esbuild-windows-64-0.14.54.tgz",
-      "integrity": "sha512-AoHTRBUuYwXtZhjXZbA1pGfTo8cJo3vZIcWGLiUcTNgHpJJMC1rVA44ZereBHMJtotyN71S8Qw0npiCIkW96cQ==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "win32"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/vite/node_modules/esbuild-windows-arm64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-windows-arm64/-/esbuild-windows-arm64-0.14.54.tgz",
-      "integrity": "sha512-M0kuUvXhot1zOISQGXwWn6YtS+Y/1RT9WrVIOywZnJHo3jCDyewAc79aKNQWFCQm+xNHVTq9h8dZKvygoXQQRg==",
-      "cpu": [
-        "arm64"
-      ],
-      "optional": true,
-      "os": [
-        "win32"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/vue": {
-      "version": "2.6.14",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/vue-template-babel-compiler": {
-      "version": "1.2.0",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/core": "^7.14.3",
-        "@babel/plugin-proposal-nullish-coalescing-operator": "^7.14.5",
-        "@babel/plugin-proposal-object-rest-spread": "^7.15.6",
-        "@babel/plugin-proposal-optional-chaining": "^7.14.2",
-        "@babel/plugin-transform-arrow-functions": "^7.14.5",
-        "@babel/plugin-transform-block-scoping": "^7.14.5",
-        "@babel/plugin-transform-computed-properties": "^7.14.5",
-        "@babel/plugin-transform-destructuring": "^7.14.5",
-        "@babel/plugin-transform-parameters": "^7.14.5",
-        "@babel/plugin-transform-spread": "^7.14.5",
-        "@babel/types": "^7.14.5",
-        "deepmerge": "^4.2.2"
-      },
-      "engines": {
-        "node": ">=12.0.0"
-      },
-      "peerDependencies": {
-        "vue-template-compiler": "^2.6.0"
-      }
-    },
-    "node_modules/vue-template-compiler": {
-      "version": "2.6.14",
-      "license": "MIT",
-      "peer": true,
-      "dependencies": {
-        "de-indent": "^1.0.2",
-        "he": "^1.1.0"
-      }
-    },
-    "node_modules/vue-template-es2015-compiler": {
-      "version": "1.9.1",
-      "license": "MIT"
-    },
-    "node_modules/which": {
-      "version": "2.0.2",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "isexe": "^2.0.0"
-      },
-      "bin": {
-        "node-which": "bin/node-which"
-      },
-      "engines": {
-        "node": ">= 8"
-      }
-    },
-    "node_modules/winston": {
-      "version": "0.8.3",
-      "dev": true,
-      "dependencies": {
-        "async": "0.2.x",
-        "colors": "0.6.x",
-        "cycle": "1.0.x",
-        "eyes": "0.1.x",
-        "isstream": "0.1.x",
-        "pkginfo": "0.3.x",
-        "stack-trace": "0.0.x"
-      },
-      "engines": {
-        "node": ">= 0.6.0"
-      }
-    },
-    "node_modules/winston/node_modules/colors": {
-      "version": "0.6.2",
-      "dev": true,
-      "engines": {
-        "node": ">=0.1.90"
-      }
-    },
-    "node_modules/word-wrap": {
-      "version": "1.2.3",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/wrap-ansi": {
-      "version": "7.0.0",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.0.0",
-        "string-width": "^4.1.0",
-        "strip-ansi": "^6.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
-      }
-    },
-    "node_modules/wrap-ansi/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/wrap-ansi/node_modules/color-convert": {
-      "version": "2.0.1",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-name": "~1.1.4"
-      },
-      "engines": {
-        "node": ">=7.0.0"
-      }
-    },
-    "node_modules/wrap-ansi/node_modules/color-name": {
-      "version": "1.1.4",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/wrappy": {
-      "version": "1.0.2",
-      "dev": true,
-      "license": "ISC"
-    },
-    "node_modules/ws": {
-      "version": "8.5.0",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=10.0.0"
-      },
-      "peerDependencies": {
-        "bufferutil": "^4.0.1",
-        "utf-8-validate": "^5.0.2"
-      },
-      "peerDependenciesMeta": {
-        "bufferutil": {
-          "optional": true
-        },
-        "utf-8-validate": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/xml2js": {
-      "version": "0.4.23",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "sax": ">=0.6.0",
-        "xmlbuilder": "~11.0.0"
-      },
-      "engines": {
-        "node": ">=4.0.0"
-      }
-    },
-    "node_modules/xmlbuilder": {
-      "version": "11.0.1",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=4.0"
-      }
-    },
-    "node_modules/yallist": {
-      "version": "4.0.0",
-      "dev": true,
-      "license": "ISC"
-    },
-    "node_modules/yaml": {
-      "version": "1.10.2",
-      "dev": true,
-      "license": "ISC",
-      "engines": {
-        "node": ">= 6"
-      }
-    },
-    "node_modules/yargs": {
-      "version": "16.2.0",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "cliui": "^7.0.2",
-        "escalade": "^3.1.1",
-        "get-caller-file": "^2.0.5",
-        "require-directory": "^2.1.1",
-        "string-width": "^4.2.0",
-        "y18n": "^5.0.5",
-        "yargs-parser": "^20.2.2"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/yargs-parser": {
-      "version": "20.2.9",
-      "dev": true,
-      "license": "ISC",
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/yargs/node_modules/y18n": {
-      "version": "5.0.8",
-      "dev": true,
-      "license": "ISC",
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/yauzl": {
-      "version": "2.10.0",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "buffer-crc32": "~0.2.3",
-        "fd-slicer": "~1.1.0"
-      }
-    },
-    "packages/html-reporter": {
-      "version": "0.0.0"
-    },
-    "packages/playwright": {
-      "version": "1.27.0-next",
-      "hasInstallScript": true,
-      "license": "Apache-2.0",
-      "dependencies": {
-        "playwright-core": "1.27.0-next"
-      },
-      "bin": {
-        "playwright": "cli.js"
-      },
-      "engines": {
-        "node": ">=14"
+        "node": ">=14"
       }
     },
     "packages/playwright-chromium": {
-      "version": "1.27.0-next",
+      "version": "1.25.2",
       "hasInstallScript": true,
       "license": "Apache-2.0",
       "dependencies": {
-        "playwright-core": "1.27.0-next"
+        "playwright-core": "1.25.2"
       },
       "bin": {
         "playwright": "cli.js"
       },
       "engines": {
-        "node": ">=14"
-      }
-    },
-    "packages/playwright-core": {
-      "version": "1.27.0-next",
-      "license": "Apache-2.0",
-      "bin": {
-        "playwright": "cli.js"
-      },
-      "engines": {
-        "node": ">=14"
-      }
-    },
-    "packages/playwright-ct-react": {
-      "name": "@playwright/experimental-ct-react",
-      "version": "1.27.0-next",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@playwright/test": "1.27.0-next",
-        "@vitejs/plugin-react": "^2.0.1",
-        "vite": "^3.0.9"
-      },
-      "engines": {
-        "node": ">=14"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/@babel/core": {
-      "version": "7.18.10",
-      "license": "MIT",
-      "dependencies": {
-        "@ampproject/remapping": "^2.1.0",
-        "@babel/code-frame": "^7.18.6",
-        "@babel/generator": "^7.18.10",
-        "@babel/helper-compilation-targets": "^7.18.9",
-        "@babel/helper-module-transforms": "^7.18.9",
-        "@babel/helpers": "^7.18.9",
-        "@babel/parser": "^7.18.10",
-        "@babel/template": "^7.18.10",
-        "@babel/traverse": "^7.18.10",
-        "@babel/types": "^7.18.10",
-        "convert-source-map": "^1.7.0",
-        "debug": "^4.1.0",
-        "gensync": "^1.0.0-beta.2",
-        "json5": "^2.2.1",
-        "semver": "^6.3.0"
-      },
-      "engines": {
-        "node": ">=6.9.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/babel"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/@esbuild/linux-loong64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.14.54.tgz",
-      "integrity": "sha512-bZBrLAIX1kpWelV0XemxBZllyRmM6vgFQQG2GdNb+r3Fkp0FOh1NJSvekXDs7jq70k4euu1cryLMfU+mTXlEpw==",
-      "cpu": [
-        "loong64"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/@vitejs/plugin-react": {
-      "version": "2.0.1",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/core": "^7.18.10",
-        "@babel/plugin-transform-react-jsx": "^7.18.10",
-        "@babel/plugin-transform-react-jsx-development": "^7.18.6",
-        "@babel/plugin-transform-react-jsx-self": "^7.18.6",
-        "@babel/plugin-transform-react-jsx-source": "^7.18.6",
-        "magic-string": "^0.26.2",
-        "react-refresh": "^0.14.0"
-      },
-      "engines": {
-        "node": "^14.18.0 || >=16.0.0"
-      },
-      "peerDependencies": {
-        "vite": "^3.0.0"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/esbuild": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.14.54.tgz",
-      "integrity": "sha512-Cy9llcy8DvET5uznocPyqL3BFRrFXSVqbgpMJ9Wz8oVjZlh/zUSNbPRbov0VX7VxN2JH1Oa0uNxZ7eLRb62pJA==",
-      "hasInstallScript": true,
-      "bin": {
-        "esbuild": "bin/esbuild"
-      },
-      "engines": {
-        "node": ">=12"
-      },
-      "optionalDependencies": {
-        "@esbuild/linux-loong64": "0.14.54",
-        "esbuild-android-64": "0.14.54",
-        "esbuild-android-arm64": "0.14.54",
-        "esbuild-darwin-64": "0.14.54",
-        "esbuild-darwin-arm64": "0.14.54",
-        "esbuild-freebsd-64": "0.14.54",
-        "esbuild-freebsd-arm64": "0.14.54",
-        "esbuild-linux-32": "0.14.54",
-        "esbuild-linux-64": "0.14.54",
-        "esbuild-linux-arm": "0.14.54",
-        "esbuild-linux-arm64": "0.14.54",
-        "esbuild-linux-mips64le": "0.14.54",
-        "esbuild-linux-ppc64le": "0.14.54",
-        "esbuild-linux-riscv64": "0.14.54",
-        "esbuild-linux-s390x": "0.14.54",
-        "esbuild-netbsd-64": "0.14.54",
-        "esbuild-openbsd-64": "0.14.54",
-        "esbuild-sunos-64": "0.14.54",
-        "esbuild-windows-32": "0.14.54",
-        "esbuild-windows-64": "0.14.54",
-        "esbuild-windows-arm64": "0.14.54"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/esbuild-android-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-android-64/-/esbuild-android-64-0.14.54.tgz",
-      "integrity": "sha512-Tz2++Aqqz0rJ7kYBfz+iqyE3QMycD4vk7LBRyWaAVFgFtQ/O8EJOnVmTOiDWYZ/uYzB4kvP+bqejYdVKzE5lAQ==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "android"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/esbuild-android-arm64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-android-arm64/-/esbuild-android-arm64-0.14.54.tgz",
-      "integrity": "sha512-F9E+/QDi9sSkLaClO8SOV6etqPd+5DgJje1F9lOWoNncDdOBL2YF59IhsWATSt0TLZbYCf3pNlTHvVV5VfHdvg==",
-      "cpu": [
-        "arm64"
-      ],
-      "optional": true,
-      "os": [
-        "android"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/esbuild-darwin-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-darwin-64/-/esbuild-darwin-64-0.14.54.tgz",
-      "integrity": "sha512-jtdKWV3nBviOd5v4hOpkVmpxsBy90CGzebpbO9beiqUYVMBtSc0AL9zGftFuBon7PNDcdvNCEuQqw2x0wP9yug==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "darwin"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/esbuild-darwin-arm64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-darwin-arm64/-/esbuild-darwin-arm64-0.14.54.tgz",
-      "integrity": "sha512-OPafJHD2oUPyvJMrsCvDGkRrVCar5aVyHfWGQzY1dWnzErjrDuSETxwA2HSsyg2jORLY8yBfzc1MIpUkXlctmw==",
-      "cpu": [
-        "arm64"
-      ],
-      "optional": true,
-      "os": [
-        "darwin"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/esbuild-freebsd-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-freebsd-64/-/esbuild-freebsd-64-0.14.54.tgz",
-      "integrity": "sha512-OKwd4gmwHqOTp4mOGZKe/XUlbDJ4Q9TjX0hMPIDBUWWu/kwhBAudJdBoxnjNf9ocIB6GN6CPowYpR/hRCbSYAg==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "freebsd"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/esbuild-freebsd-arm64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-freebsd-arm64/-/esbuild-freebsd-arm64-0.14.54.tgz",
-      "integrity": "sha512-sFwueGr7OvIFiQT6WeG0jRLjkjdqWWSrfbVwZp8iMP+8UHEHRBvlaxL6IuKNDwAozNUmbb8nIMXa7oAOARGs1Q==",
-      "cpu": [
-        "arm64"
-      ],
-      "optional": true,
-      "os": [
-        "freebsd"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/esbuild-linux-32": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-32/-/esbuild-linux-32-0.14.54.tgz",
-      "integrity": "sha512-1ZuY+JDI//WmklKlBgJnglpUL1owm2OX+8E1syCD6UAxcMM/XoWd76OHSjl/0MR0LisSAXDqgjT3uJqT67O3qw==",
-      "cpu": [
-        "ia32"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/esbuild-linux-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-64/-/esbuild-linux-64-0.14.54.tgz",
-      "integrity": "sha512-EgjAgH5HwTbtNsTqQOXWApBaPVdDn7XcK+/PtJwZLT1UmpLoznPd8c5CxqsH2dQK3j05YsB3L17T8vE7cp4cCg==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/esbuild-linux-arm": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-arm/-/esbuild-linux-arm-0.14.54.tgz",
-      "integrity": "sha512-qqz/SjemQhVMTnvcLGoLOdFpCYbz4v4fUo+TfsWG+1aOu70/80RV6bgNpR2JCrppV2moUQkww+6bWxXRL9YMGw==",
-      "cpu": [
-        "arm"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/esbuild-linux-arm64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-arm64/-/esbuild-linux-arm64-0.14.54.tgz",
-      "integrity": "sha512-WL71L+0Rwv+Gv/HTmxTEmpv0UgmxYa5ftZILVi2QmZBgX3q7+tDeOQNqGtdXSdsL8TQi1vIaVFHUPDe0O0kdig==",
-      "cpu": [
-        "arm64"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/esbuild-linux-mips64le": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-mips64le/-/esbuild-linux-mips64le-0.14.54.tgz",
-      "integrity": "sha512-qTHGQB8D1etd0u1+sB6p0ikLKRVuCWhYQhAHRPkO+OF3I/iSlTKNNS0Lh2Oc0g0UFGguaFZZiPJdJey3AGpAlw==",
-      "cpu": [
-        "mips64el"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/esbuild-linux-ppc64le": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-ppc64le/-/esbuild-linux-ppc64le-0.14.54.tgz",
-      "integrity": "sha512-j3OMlzHiqwZBDPRCDFKcx595XVfOfOnv68Ax3U4UKZ3MTYQB5Yz3X1mn5GnodEVYzhtZgxEBidLWeIs8FDSfrQ==",
-      "cpu": [
-        "ppc64"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/esbuild-linux-riscv64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-riscv64/-/esbuild-linux-riscv64-0.14.54.tgz",
-      "integrity": "sha512-y7Vt7Wl9dkOGZjxQZnDAqqn+XOqFD7IMWiewY5SPlNlzMX39ocPQlOaoxvT4FllA5viyV26/QzHtvTjVNOxHZg==",
-      "cpu": [
-        "riscv64"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/esbuild-linux-s390x": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-s390x/-/esbuild-linux-s390x-0.14.54.tgz",
-      "integrity": "sha512-zaHpW9dziAsi7lRcyV4r8dhfG1qBidQWUXweUjnw+lliChJqQr+6XD71K41oEIC3Mx1KStovEmlzm+MkGZHnHA==",
-      "cpu": [
-        "s390x"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/esbuild-netbsd-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-netbsd-64/-/esbuild-netbsd-64-0.14.54.tgz",
-      "integrity": "sha512-PR01lmIMnfJTgeU9VJTDY9ZerDWVFIUzAtJuDHwwceppW7cQWjBBqP48NdeRtoP04/AtO9a7w3viI+PIDr6d+w==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "netbsd"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/esbuild-openbsd-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-openbsd-64/-/esbuild-openbsd-64-0.14.54.tgz",
-      "integrity": "sha512-Qyk7ikT2o7Wu76UsvvDS5q0amJvmRzDyVlL0qf5VLsLchjCa1+IAvd8kTBgUxD7VBUUVgItLkk609ZHUc1oCaw==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "openbsd"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/esbuild-sunos-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-sunos-64/-/esbuild-sunos-64-0.14.54.tgz",
-      "integrity": "sha512-28GZ24KmMSeKi5ueWzMcco6EBHStL3B6ubM7M51RmPwXQGLe0teBGJocmWhgwccA1GeFXqxzILIxXpHbl9Q/Kw==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "sunos"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/esbuild-windows-32": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-windows-32/-/esbuild-windows-32-0.14.54.tgz",
-      "integrity": "sha512-T+rdZW19ql9MjS7pixmZYVObd9G7kcaZo+sETqNH4RCkuuYSuv9AGHUVnPoP9hhuE1WM1ZimHz1CIBHBboLU7w==",
-      "cpu": [
-        "ia32"
-      ],
-      "optional": true,
-      "os": [
-        "win32"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/esbuild-windows-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-windows-64/-/esbuild-windows-64-0.14.54.tgz",
-      "integrity": "sha512-AoHTRBUuYwXtZhjXZbA1pGfTo8cJo3vZIcWGLiUcTNgHpJJMC1rVA44ZereBHMJtotyN71S8Qw0npiCIkW96cQ==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "win32"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/esbuild-windows-arm64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-windows-arm64/-/esbuild-windows-arm64-0.14.54.tgz",
-      "integrity": "sha512-M0kuUvXhot1zOISQGXwWn6YtS+Y/1RT9WrVIOywZnJHo3jCDyewAc79aKNQWFCQm+xNHVTq9h8dZKvygoXQQRg==",
-      "cpu": [
-        "arm64"
-      ],
-      "optional": true,
-      "os": [
-        "win32"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/react-refresh": {
-      "version": "0.14.0",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "packages/playwright-ct-react/node_modules/vite": {
-      "version": "3.0.9",
-      "license": "MIT",
-      "dependencies": {
-        "esbuild": "^0.14.47",
-        "postcss": "^8.4.16",
-        "resolve": "^1.22.1",
-        "rollup": ">=2.75.6 <2.77.0 || ~2.77.0"
-      },
-      "bin": {
-        "vite": "bin/vite.js"
-      },
-      "engines": {
-        "node": "^14.18.0 || >=16.0.0"
-      },
-      "optionalDependencies": {
-        "fsevents": "~2.3.2"
-      },
-      "peerDependencies": {
-        "less": "*",
-        "sass": "*",
-        "stylus": "*",
-        "terser": "^5.4.0"
-      },
-      "peerDependenciesMeta": {
-        "less": {
-          "optional": true
-        },
-        "sass": {
-          "optional": true
-        },
-        "stylus": {
-          "optional": true
-        },
-        "terser": {
-          "optional": true
-        }
-      }
-    },
-    "packages/playwright-ct-solid": {
-      "name": "@playwright/experimental-ct-solid",
-      "version": "1.27.0-next",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@playwright/test": "1.27.0-next",
-        "vite": "^3.0.0",
-        "vite-plugin-solid": "^2.3.0"
-      },
-      "devDependencies": {
-        "solid-js": "^1.4.7"
-      },
-      "engines": {
-        "node": ">=14"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/@esbuild/linux-loong64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.14.54.tgz",
-      "integrity": "sha512-bZBrLAIX1kpWelV0XemxBZllyRmM6vgFQQG2GdNb+r3Fkp0FOh1NJSvekXDs7jq70k4euu1cryLMfU+mTXlEpw==",
-      "cpu": [
-        "loong64"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/esbuild": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.14.54.tgz",
-      "integrity": "sha512-Cy9llcy8DvET5uznocPyqL3BFRrFXSVqbgpMJ9Wz8oVjZlh/zUSNbPRbov0VX7VxN2JH1Oa0uNxZ7eLRb62pJA==",
-      "hasInstallScript": true,
-      "bin": {
-        "esbuild": "bin/esbuild"
-      },
-      "engines": {
-        "node": ">=12"
-      },
-      "optionalDependencies": {
-        "@esbuild/linux-loong64": "0.14.54",
-        "esbuild-android-64": "0.14.54",
-        "esbuild-android-arm64": "0.14.54",
-        "esbuild-darwin-64": "0.14.54",
-        "esbuild-darwin-arm64": "0.14.54",
-        "esbuild-freebsd-64": "0.14.54",
-        "esbuild-freebsd-arm64": "0.14.54",
-        "esbuild-linux-32": "0.14.54",
-        "esbuild-linux-64": "0.14.54",
-        "esbuild-linux-arm": "0.14.54",
-        "esbuild-linux-arm64": "0.14.54",
-        "esbuild-linux-mips64le": "0.14.54",
-        "esbuild-linux-ppc64le": "0.14.54",
-        "esbuild-linux-riscv64": "0.14.54",
-        "esbuild-linux-s390x": "0.14.54",
-        "esbuild-netbsd-64": "0.14.54",
-        "esbuild-openbsd-64": "0.14.54",
-        "esbuild-sunos-64": "0.14.54",
-        "esbuild-windows-32": "0.14.54",
-        "esbuild-windows-64": "0.14.54",
-        "esbuild-windows-arm64": "0.14.54"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/esbuild-android-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-android-64/-/esbuild-android-64-0.14.54.tgz",
-      "integrity": "sha512-Tz2++Aqqz0rJ7kYBfz+iqyE3QMycD4vk7LBRyWaAVFgFtQ/O8EJOnVmTOiDWYZ/uYzB4kvP+bqejYdVKzE5lAQ==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "android"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/esbuild-android-arm64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-android-arm64/-/esbuild-android-arm64-0.14.54.tgz",
-      "integrity": "sha512-F9E+/QDi9sSkLaClO8SOV6etqPd+5DgJje1F9lOWoNncDdOBL2YF59IhsWATSt0TLZbYCf3pNlTHvVV5VfHdvg==",
-      "cpu": [
-        "arm64"
-      ],
-      "optional": true,
-      "os": [
-        "android"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/esbuild-darwin-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-darwin-64/-/esbuild-darwin-64-0.14.54.tgz",
-      "integrity": "sha512-jtdKWV3nBviOd5v4hOpkVmpxsBy90CGzebpbO9beiqUYVMBtSc0AL9zGftFuBon7PNDcdvNCEuQqw2x0wP9yug==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "darwin"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/esbuild-darwin-arm64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-darwin-arm64/-/esbuild-darwin-arm64-0.14.54.tgz",
-      "integrity": "sha512-OPafJHD2oUPyvJMrsCvDGkRrVCar5aVyHfWGQzY1dWnzErjrDuSETxwA2HSsyg2jORLY8yBfzc1MIpUkXlctmw==",
-      "cpu": [
-        "arm64"
-      ],
-      "optional": true,
-      "os": [
-        "darwin"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/esbuild-freebsd-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-freebsd-64/-/esbuild-freebsd-64-0.14.54.tgz",
-      "integrity": "sha512-OKwd4gmwHqOTp4mOGZKe/XUlbDJ4Q9TjX0hMPIDBUWWu/kwhBAudJdBoxnjNf9ocIB6GN6CPowYpR/hRCbSYAg==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "freebsd"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/esbuild-freebsd-arm64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-freebsd-arm64/-/esbuild-freebsd-arm64-0.14.54.tgz",
-      "integrity": "sha512-sFwueGr7OvIFiQT6WeG0jRLjkjdqWWSrfbVwZp8iMP+8UHEHRBvlaxL6IuKNDwAozNUmbb8nIMXa7oAOARGs1Q==",
-      "cpu": [
-        "arm64"
-      ],
-      "optional": true,
-      "os": [
-        "freebsd"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/esbuild-linux-32": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-32/-/esbuild-linux-32-0.14.54.tgz",
-      "integrity": "sha512-1ZuY+JDI//WmklKlBgJnglpUL1owm2OX+8E1syCD6UAxcMM/XoWd76OHSjl/0MR0LisSAXDqgjT3uJqT67O3qw==",
-      "cpu": [
-        "ia32"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/esbuild-linux-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-64/-/esbuild-linux-64-0.14.54.tgz",
-      "integrity": "sha512-EgjAgH5HwTbtNsTqQOXWApBaPVdDn7XcK+/PtJwZLT1UmpLoznPd8c5CxqsH2dQK3j05YsB3L17T8vE7cp4cCg==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/esbuild-linux-arm": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-arm/-/esbuild-linux-arm-0.14.54.tgz",
-      "integrity": "sha512-qqz/SjemQhVMTnvcLGoLOdFpCYbz4v4fUo+TfsWG+1aOu70/80RV6bgNpR2JCrppV2moUQkww+6bWxXRL9YMGw==",
-      "cpu": [
-        "arm"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/esbuild-linux-arm64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-arm64/-/esbuild-linux-arm64-0.14.54.tgz",
-      "integrity": "sha512-WL71L+0Rwv+Gv/HTmxTEmpv0UgmxYa5ftZILVi2QmZBgX3q7+tDeOQNqGtdXSdsL8TQi1vIaVFHUPDe0O0kdig==",
-      "cpu": [
-        "arm64"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/esbuild-linux-mips64le": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-mips64le/-/esbuild-linux-mips64le-0.14.54.tgz",
-      "integrity": "sha512-qTHGQB8D1etd0u1+sB6p0ikLKRVuCWhYQhAHRPkO+OF3I/iSlTKNNS0Lh2Oc0g0UFGguaFZZiPJdJey3AGpAlw==",
-      "cpu": [
-        "mips64el"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/esbuild-linux-ppc64le": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-ppc64le/-/esbuild-linux-ppc64le-0.14.54.tgz",
-      "integrity": "sha512-j3OMlzHiqwZBDPRCDFKcx595XVfOfOnv68Ax3U4UKZ3MTYQB5Yz3X1mn5GnodEVYzhtZgxEBidLWeIs8FDSfrQ==",
-      "cpu": [
-        "ppc64"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/esbuild-linux-riscv64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-riscv64/-/esbuild-linux-riscv64-0.14.54.tgz",
-      "integrity": "sha512-y7Vt7Wl9dkOGZjxQZnDAqqn+XOqFD7IMWiewY5SPlNlzMX39ocPQlOaoxvT4FllA5viyV26/QzHtvTjVNOxHZg==",
-      "cpu": [
-        "riscv64"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/esbuild-linux-s390x": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-s390x/-/esbuild-linux-s390x-0.14.54.tgz",
-      "integrity": "sha512-zaHpW9dziAsi7lRcyV4r8dhfG1qBidQWUXweUjnw+lliChJqQr+6XD71K41oEIC3Mx1KStovEmlzm+MkGZHnHA==",
-      "cpu": [
-        "s390x"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/esbuild-netbsd-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-netbsd-64/-/esbuild-netbsd-64-0.14.54.tgz",
-      "integrity": "sha512-PR01lmIMnfJTgeU9VJTDY9ZerDWVFIUzAtJuDHwwceppW7cQWjBBqP48NdeRtoP04/AtO9a7w3viI+PIDr6d+w==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "netbsd"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/esbuild-openbsd-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-openbsd-64/-/esbuild-openbsd-64-0.14.54.tgz",
-      "integrity": "sha512-Qyk7ikT2o7Wu76UsvvDS5q0amJvmRzDyVlL0qf5VLsLchjCa1+IAvd8kTBgUxD7VBUUVgItLkk609ZHUc1oCaw==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "openbsd"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/esbuild-sunos-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-sunos-64/-/esbuild-sunos-64-0.14.54.tgz",
-      "integrity": "sha512-28GZ24KmMSeKi5ueWzMcco6EBHStL3B6ubM7M51RmPwXQGLe0teBGJocmWhgwccA1GeFXqxzILIxXpHbl9Q/Kw==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "sunos"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/esbuild-windows-32": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-windows-32/-/esbuild-windows-32-0.14.54.tgz",
-      "integrity": "sha512-T+rdZW19ql9MjS7pixmZYVObd9G7kcaZo+sETqNH4RCkuuYSuv9AGHUVnPoP9hhuE1WM1ZimHz1CIBHBboLU7w==",
-      "cpu": [
-        "ia32"
-      ],
-      "optional": true,
-      "os": [
-        "win32"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/esbuild-windows-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-windows-64/-/esbuild-windows-64-0.14.54.tgz",
-      "integrity": "sha512-AoHTRBUuYwXtZhjXZbA1pGfTo8cJo3vZIcWGLiUcTNgHpJJMC1rVA44ZereBHMJtotyN71S8Qw0npiCIkW96cQ==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "win32"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/esbuild-windows-arm64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-windows-arm64/-/esbuild-windows-arm64-0.14.54.tgz",
-      "integrity": "sha512-M0kuUvXhot1zOISQGXwWn6YtS+Y/1RT9WrVIOywZnJHo3jCDyewAc79aKNQWFCQm+xNHVTq9h8dZKvygoXQQRg==",
-      "cpu": [
-        "arm64"
-      ],
-      "optional": true,
-      "os": [
-        "win32"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/vite": {
-      "version": "3.0.9",
-      "license": "MIT",
-      "dependencies": {
-        "esbuild": "^0.14.47",
-        "postcss": "^8.4.16",
-        "resolve": "^1.22.1",
-        "rollup": ">=2.75.6 <2.77.0 || ~2.77.0"
-      },
-      "bin": {
-        "vite": "bin/vite.js"
-      },
-      "engines": {
-        "node": "^14.18.0 || >=16.0.0"
-      },
-      "optionalDependencies": {
-        "fsevents": "~2.3.2"
-      },
-      "peerDependencies": {
-        "less": "*",
-        "sass": "*",
-        "stylus": "*",
-        "terser": "^5.4.0"
-      },
-      "peerDependenciesMeta": {
-        "less": {
-          "optional": true
-        },
-        "sass": {
-          "optional": true
-        },
-        "stylus": {
-          "optional": true
-        },
-        "terser": {
-          "optional": true
-        }
-      }
-    },
-    "packages/playwright-ct-solid/node_modules/vite-plugin-solid": {
-      "version": "2.3.0",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/core": "^7.18.6",
-        "@babel/preset-typescript": "^7.18.6",
-        "babel-preset-solid": "^1.4.6",
-        "merge-anything": "^5.0.2",
-        "solid-refresh": "^0.4.1"
-      },
-      "peerDependencies": {
-        "solid-js": "^1.3.17",
-        "vite": "^3.0.0"
-      }
-    },
-    "packages/playwright-ct-svelte": {
-      "name": "@playwright/experimental-ct-svelte",
-      "version": "1.27.0-next",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@playwright/test": "1.27.0-next",
-        "@sveltejs/vite-plugin-svelte": "^1.0.1",
-        "vite": "^3.0.0"
-      },
-      "devDependencies": {
-        "svelte": "^3.49.0"
-      },
-      "engines": {
-        "node": ">=14"
-      }
-    },
-    "packages/playwright-ct-svelte/node_modules/@esbuild/linux-loong64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.14.54.tgz",
-      "integrity": "sha512-bZBrLAIX1kpWelV0XemxBZllyRmM6vgFQQG2GdNb+r3Fkp0FOh1NJSvekXDs7jq70k4euu1cryLMfU+mTXlEpw==",
-      "cpu": [
-        "loong64"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-svelte/node_modules/@sveltejs/vite-plugin-svelte": {
-      "version": "1.0.1",
-      "license": "MIT",
-      "dependencies": {
-        "@rollup/pluginutils": "^4.2.1",
-        "debug": "^4.3.4",
-        "deepmerge": "^4.2.2",
-        "kleur": "^4.1.5",
-        "magic-string": "^0.26.2",
-        "svelte-hmr": "^0.14.12"
-      },
-      "engines": {
-        "node": "^14.18.0 || >= 16"
-      },
-      "peerDependencies": {
-        "diff-match-patch": "^1.0.5",
-        "svelte": "^3.44.0",
-        "vite": "^3.0.0"
-      },
-      "peerDependenciesMeta": {
-        "diff-match-patch": {
-          "optional": true
-        }
-      }
-    },
-    "packages/playwright-ct-svelte/node_modules/esbuild": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.14.54.tgz",
-      "integrity": "sha512-Cy9llcy8DvET5uznocPyqL3BFRrFXSVqbgpMJ9Wz8oVjZlh/zUSNbPRbov0VX7VxN2JH1Oa0uNxZ7eLRb62pJA==",
-      "hasInstallScript": true,
-      "bin": {
-        "esbuild": "bin/esbuild"
-      },
-      "engines": {
-        "node": ">=12"
-      },
-      "optionalDependencies": {
-        "@esbuild/linux-loong64": "0.14.54",
-        "esbuild-android-64": "0.14.54",
-        "esbuild-android-arm64": "0.14.54",
-        "esbuild-darwin-64": "0.14.54",
-        "esbuild-darwin-arm64": "0.14.54",
-        "esbuild-freebsd-64": "0.14.54",
-        "esbuild-freebsd-arm64": "0.14.54",
-        "esbuild-linux-32": "0.14.54",
-        "esbuild-linux-64": "0.14.54",
-        "esbuild-linux-arm": "0.14.54",
-        "esbuild-linux-arm64": "0.14.54",
-        "esbuild-linux-mips64le": "0.14.54",
-        "esbuild-linux-ppc64le": "0.14.54",
-        "esbuild-linux-riscv64": "0.14.54",
-        "esbuild-linux-s390x": "0.14.54",
-        "esbuild-netbsd-64": "0.14.54",
-        "esbuild-openbsd-64": "0.14.54",
-        "esbuild-sunos-64": "0.14.54",
-        "esbuild-windows-32": "0.14.54",
-        "esbuild-windows-64": "0.14.54",
-        "esbuild-windows-arm64": "0.14.54"
-      }
-    },
-    "packages/playwright-ct-svelte/node_modules/esbuild-android-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-android-64/-/esbuild-android-64-0.14.54.tgz",
-      "integrity": "sha512-Tz2++Aqqz0rJ7kYBfz+iqyE3QMycD4vk7LBRyWaAVFgFtQ/O8EJOnVmTOiDWYZ/uYzB4kvP+bqejYdVKzE5lAQ==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "android"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-svelte/node_modules/esbuild-android-arm64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-android-arm64/-/esbuild-android-arm64-0.14.54.tgz",
-      "integrity": "sha512-F9E+/QDi9sSkLaClO8SOV6etqPd+5DgJje1F9lOWoNncDdOBL2YF59IhsWATSt0TLZbYCf3pNlTHvVV5VfHdvg==",
-      "cpu": [
-        "arm64"
-      ],
-      "optional": true,
-      "os": [
-        "android"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-svelte/node_modules/esbuild-darwin-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-darwin-64/-/esbuild-darwin-64-0.14.54.tgz",
-      "integrity": "sha512-jtdKWV3nBviOd5v4hOpkVmpxsBy90CGzebpbO9beiqUYVMBtSc0AL9zGftFuBon7PNDcdvNCEuQqw2x0wP9yug==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "darwin"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-svelte/node_modules/esbuild-darwin-arm64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-darwin-arm64/-/esbuild-darwin-arm64-0.14.54.tgz",
-      "integrity": "sha512-OPafJHD2oUPyvJMrsCvDGkRrVCar5aVyHfWGQzY1dWnzErjrDuSETxwA2HSsyg2jORLY8yBfzc1MIpUkXlctmw==",
-      "cpu": [
-        "arm64"
-      ],
-      "optional": true,
-      "os": [
-        "darwin"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-svelte/node_modules/esbuild-freebsd-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-freebsd-64/-/esbuild-freebsd-64-0.14.54.tgz",
-      "integrity": "sha512-OKwd4gmwHqOTp4mOGZKe/XUlbDJ4Q9TjX0hMPIDBUWWu/kwhBAudJdBoxnjNf9ocIB6GN6CPowYpR/hRCbSYAg==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "freebsd"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-svelte/node_modules/esbuild-freebsd-arm64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-freebsd-arm64/-/esbuild-freebsd-arm64-0.14.54.tgz",
-      "integrity": "sha512-sFwueGr7OvIFiQT6WeG0jRLjkjdqWWSrfbVwZp8iMP+8UHEHRBvlaxL6IuKNDwAozNUmbb8nIMXa7oAOARGs1Q==",
-      "cpu": [
-        "arm64"
-      ],
-      "optional": true,
-      "os": [
-        "freebsd"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-svelte/node_modules/esbuild-linux-32": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-32/-/esbuild-linux-32-0.14.54.tgz",
-      "integrity": "sha512-1ZuY+JDI//WmklKlBgJnglpUL1owm2OX+8E1syCD6UAxcMM/XoWd76OHSjl/0MR0LisSAXDqgjT3uJqT67O3qw==",
-      "cpu": [
-        "ia32"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-svelte/node_modules/esbuild-linux-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-64/-/esbuild-linux-64-0.14.54.tgz",
-      "integrity": "sha512-EgjAgH5HwTbtNsTqQOXWApBaPVdDn7XcK+/PtJwZLT1UmpLoznPd8c5CxqsH2dQK3j05YsB3L17T8vE7cp4cCg==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-svelte/node_modules/esbuild-linux-arm": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-arm/-/esbuild-linux-arm-0.14.54.tgz",
-      "integrity": "sha512-qqz/SjemQhVMTnvcLGoLOdFpCYbz4v4fUo+TfsWG+1aOu70/80RV6bgNpR2JCrppV2moUQkww+6bWxXRL9YMGw==",
-      "cpu": [
-        "arm"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-svelte/node_modules/esbuild-linux-arm64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-arm64/-/esbuild-linux-arm64-0.14.54.tgz",
-      "integrity": "sha512-WL71L+0Rwv+Gv/HTmxTEmpv0UgmxYa5ftZILVi2QmZBgX3q7+tDeOQNqGtdXSdsL8TQi1vIaVFHUPDe0O0kdig==",
-      "cpu": [
-        "arm64"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-svelte/node_modules/esbuild-linux-mips64le": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-mips64le/-/esbuild-linux-mips64le-0.14.54.tgz",
-      "integrity": "sha512-qTHGQB8D1etd0u1+sB6p0ikLKRVuCWhYQhAHRPkO+OF3I/iSlTKNNS0Lh2Oc0g0UFGguaFZZiPJdJey3AGpAlw==",
-      "cpu": [
-        "mips64el"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-svelte/node_modules/esbuild-linux-ppc64le": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-ppc64le/-/esbuild-linux-ppc64le-0.14.54.tgz",
-      "integrity": "sha512-j3OMlzHiqwZBDPRCDFKcx595XVfOfOnv68Ax3U4UKZ3MTYQB5Yz3X1mn5GnodEVYzhtZgxEBidLWeIs8FDSfrQ==",
-      "cpu": [
-        "ppc64"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-svelte/node_modules/esbuild-linux-riscv64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-riscv64/-/esbuild-linux-riscv64-0.14.54.tgz",
-      "integrity": "sha512-y7Vt7Wl9dkOGZjxQZnDAqqn+XOqFD7IMWiewY5SPlNlzMX39ocPQlOaoxvT4FllA5viyV26/QzHtvTjVNOxHZg==",
-      "cpu": [
-        "riscv64"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-svelte/node_modules/esbuild-linux-s390x": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-s390x/-/esbuild-linux-s390x-0.14.54.tgz",
-      "integrity": "sha512-zaHpW9dziAsi7lRcyV4r8dhfG1qBidQWUXweUjnw+lliChJqQr+6XD71K41oEIC3Mx1KStovEmlzm+MkGZHnHA==",
-      "cpu": [
-        "s390x"
-      ],
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-svelte/node_modules/esbuild-netbsd-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-netbsd-64/-/esbuild-netbsd-64-0.14.54.tgz",
-      "integrity": "sha512-PR01lmIMnfJTgeU9VJTDY9ZerDWVFIUzAtJuDHwwceppW7cQWjBBqP48NdeRtoP04/AtO9a7w3viI+PIDr6d+w==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "netbsd"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-svelte/node_modules/esbuild-openbsd-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-openbsd-64/-/esbuild-openbsd-64-0.14.54.tgz",
-      "integrity": "sha512-Qyk7ikT2o7Wu76UsvvDS5q0amJvmRzDyVlL0qf5VLsLchjCa1+IAvd8kTBgUxD7VBUUVgItLkk609ZHUc1oCaw==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "openbsd"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "packages/playwright-ct-svelte/node_modules/esbuild-sunos-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-sunos-64/-/esbuild-sunos-64-0.14.54.tgz",
-      "integrity": "sha512-28GZ24KmMSeKi5ueWzMcco6EBHStL3B6ubM7M51RmPwXQGLe0teBGJocmWhgwccA1GeFXqxzILIxXpHbl9Q/Kw==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "sunos"
-      ],
+        "node": ">=14"
+      }
+    },
+    "packages/playwright-core": {
+      "version": "1.25.2",
+      "license": "Apache-2.0",
+      "bin": {
+        "playwright": "cli.js"
+      },
       "engines": {
-        "node": ">=12"
+        "node": ">=14"
       }
     },
-    "packages/playwright-ct-svelte/node_modules/esbuild-windows-32": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-windows-32/-/esbuild-windows-32-0.14.54.tgz",
-      "integrity": "sha512-T+rdZW19ql9MjS7pixmZYVObd9G7kcaZo+sETqNH4RCkuuYSuv9AGHUVnPoP9hhuE1WM1ZimHz1CIBHBboLU7w==",
-      "cpu": [
-        "ia32"
-      ],
-      "optional": true,
-      "os": [
-        "win32"
-      ],
+    "packages/playwright-ct-react": {
+      "name": "@playwright/experimental-ct-react",
+      "version": "1.25.2",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@playwright/test": "1.25.2",
+        "@vitejs/plugin-react": "^1.0.7",
+        "vite": "^2.9.5"
+      },
       "engines": {
-        "node": ">=12"
+        "node": ">=14"
       }
     },
-    "packages/playwright-ct-svelte/node_modules/esbuild-windows-64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-windows-64/-/esbuild-windows-64-0.14.54.tgz",
-      "integrity": "sha512-AoHTRBUuYwXtZhjXZbA1pGfTo8cJo3vZIcWGLiUcTNgHpJJMC1rVA44ZereBHMJtotyN71S8Qw0npiCIkW96cQ==",
-      "cpu": [
-        "x64"
-      ],
-      "optional": true,
-      "os": [
-        "win32"
-      ],
+    "packages/playwright-ct-svelte": {
+      "name": "@playwright/experimental-ct-svelte",
+      "version": "1.25.2",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@playwright/test": "1.25.2",
+        "@sveltejs/vite-plugin-svelte": "^1.0.1",
+        "vite": "^3.0.0"
+      },
+      "devDependencies": {
+        "svelte": "^3.49.0"
+      },
       "engines": {
-        "node": ">=12"
+        "node": ">=14"
       }
     },
-    "packages/playwright-ct-svelte/node_modules/esbuild-windows-arm64": {
-      "version": "0.14.54",
-      "resolved": "https://registry.npmjs.org/esbuild-windows-arm64/-/esbuild-windows-arm64-0.14.54.tgz",
-      "integrity": "sha512-M0kuUvXhot1zOISQGXwWn6YtS+Y/1RT9WrVIOywZnJHo3jCDyewAc79aKNQWFCQm+xNHVTq9h8dZKvygoXQQRg==",
-      "cpu": [
-        "arm64"
-      ],
-      "optional": true,
-      "os": [
-        "win32"
-      ],
+    "packages/playwright-ct-svelte/node_modules/@sveltejs/vite-plugin-svelte": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/@sveltejs/vite-plugin-svelte/-/vite-plugin-svelte-1.0.1.tgz",
+      "integrity": "sha512-PorCgUounn0VXcpeJu+hOweZODKmGuLHsLomwqSj+p26IwjjGffmYQfVHtiTWq+NqaUuuHWWG7vPge6UFw4Aeg==",
+      "dependencies": {
+        "@rollup/pluginutils": "^4.2.1",
+        "debug": "^4.3.4",
+        "deepmerge": "^4.2.2",
+        "kleur": "^4.1.5",
+        "magic-string": "^0.26.2",
+        "svelte-hmr": "^0.14.12"
+      },
       "engines": {
-        "node": ">=12"
+        "node": "^14.18.0 || >= 16"
+      },
+      "peerDependencies": {
+        "diff-match-patch": "^1.0.5",
+        "svelte": "^3.44.0",
+        "vite": "^3.0.0"
+      },
+      "peerDependenciesMeta": {
+        "diff-match-patch": {
+          "optional": true
+        }
       }
     },
     "packages/playwright-ct-svelte/node_modules/vite": {
       "version": "3.0.0",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/vite/-/vite-3.0.0.tgz",
+      "integrity": "sha512-M7phQhY3+fRZa0H+1WzI6N+/onruwPTBTMvaj7TzgZ0v2TE+N2sdLKxJOfOv9CckDWt5C4HmyQP81xB4dwRKzA==",
       "dependencies": {
         "esbuild": "^0.14.47",
         "postcss": "^8.4.14",
@@ -7728,10 +6565,10 @@
     },
     "packages/playwright-ct-vue": {
       "name": "@playwright/experimental-ct-vue",
-      "version": "1.27.0-next",
+      "version": "1.25.2",
       "license": "Apache-2.0",
       "dependencies": {
-        "@playwright/test": "1.27.0-next",
+        "@playwright/test": "1.25.2",
         "@vitejs/plugin-vue": "^2.3.1",
         "vite": "^2.9.5"
       },
@@ -7741,7 +6578,8 @@
     },
     "packages/playwright-ct-vue/node_modules/@vitejs/plugin-vue": {
       "version": "2.3.3",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@vitejs/plugin-vue/-/plugin-vue-2.3.3.tgz",
+      "integrity": "sha512-SmQLDyhz+6lGJhPELsBdzXGc+AcaT8stgkbiTFGpXPe8Tl1tJaBw1A6pxDqDuRsVkD8uscrkx3hA7QDOoKYtyw==",
       "engines": {
         "node": ">=12.0.0"
       },
@@ -7752,7 +6590,8 @@
     },
     "packages/playwright-ct-vue/node_modules/@vue/server-renderer": {
       "version": "3.2.36",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/@vue/server-renderer/-/server-renderer-3.2.36.tgz",
+      "integrity": "sha512-uZE0+jfye6yYXWvAQYeHZv+f50sRryvy16uiqzk3jn8hEY8zTjI+rzlmZSGoE915k+W/Ol9XSw6vxOUD8dGkUg==",
       "peer": true,
       "dependencies": {
         "@vue/compiler-ssr": "3.2.36",
@@ -7764,7 +6603,8 @@
     },
     "packages/playwright-ct-vue/node_modules/vue": {
       "version": "3.2.36",
-      "license": "MIT",
+      "resolved": "https://registry.npmjs.org/vue/-/vue-3.2.36.tgz",
+      "integrity": "sha512-5yTXmrE6gW8IQgttzHW5bfBiFA6mx35ZXHjGLDmKYzW6MMmYvCwuKybANRepwkMYeXw2v1buGg3/lPICY5YlZw==",
       "peer": true,
       "dependencies": {
         "@vue/compiler-dom": "3.2.36",
@@ -7776,10 +6616,10 @@
     },
     "packages/playwright-ct-vue2": {
       "name": "@playwright/experimental-ct-vue2",
-      "version": "1.27.0-next",
+      "version": "1.25.2",
       "license": "Apache-2.0",
       "dependencies": {
-        "@playwright/test": "1.27.0-next",
+        "@playwright/test": "1.25.2",
         "vite": "^2.9.5",
         "vite-plugin-vue2": "^2.0.1"
       },
@@ -7791,11 +6631,11 @@
       }
     },
     "packages/playwright-firefox": {
-      "version": "1.27.0-next",
+      "version": "1.25.2",
       "hasInstallScript": true,
       "license": "Apache-2.0",
       "dependencies": {
-        "playwright-core": "1.27.0-next"
+        "playwright-core": "1.25.2"
       },
       "bin": {
         "playwright": "cli.js"
@@ -7806,11 +6646,11 @@
     },
     "packages/playwright-test": {
       "name": "@playwright/test",
-      "version": "1.27.0-next",
+      "version": "1.25.2",
       "license": "Apache-2.0",
       "dependencies": {
         "@types/node": "*",
-        "playwright-core": "1.27.0-next"
+        "playwright-core": "1.25.2"
       },
       "bin": {
         "playwright": "cli.js"
@@ -7820,11 +6660,11 @@
       }
     },
     "packages/playwright-webkit": {
-      "version": "1.27.0-next",
+      "version": "1.25.2",
       "hasInstallScript": true,
       "license": "Apache-2.0",
       "dependencies": {
-        "playwright-core": "1.27.0-next"
+        "playwright-core": "1.25.2"
       },
       "bin": {
         "playwright": "cli.js"
@@ -7838,11 +6678,22 @@
     },
     "packages/trace-viewer": {
       "version": "0.0.0"
+    },
+    "packages/zip-bundle": {
+      "version": "0.0.1",
+      "extraneous": true,
+      "dependencies": {
+        "extract-zip": "2.0.1",
+        "yauzl": "2.10.0",
+        "yazl": "2.5.1"
+      }
     }
   },
   "dependencies": {
     "@ampproject/remapping": {
       "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.2.0.tgz",
+      "integrity": "sha512-qRmjj8nj9qmLTQXXmaR1cck3UXSRMPrbsLJAasZpF+t3riI71BXed5ebIOYwQntykeZuhjsdweEc9BxH5Jc26w==",
       "requires": {
         "@jridgewell/gen-mapping": "^0.1.0",
         "@jridgewell/trace-mapping": "^0.3.9"
@@ -7850,6 +6701,8 @@
       "dependencies": {
         "@jridgewell/gen-mapping": {
           "version": "0.1.1",
+          "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.1.1.tgz",
+          "integrity": "sha512-sQXCasFk+U8lWYEe66WxRDOE9PjVz4vSM51fTu3Hw+ClTpUSQb718772vH3pyS5pShp6lvQM7SxgIDXXXmOX7w==",
           "requires": {
             "@jridgewell/set-array": "^1.0.0",
             "@jridgewell/sourcemap-codec": "^1.4.10"
@@ -7859,6 +6712,8 @@
     },
     "@babel/cli": {
       "version": "7.16.8",
+      "resolved": "https://registry.npmjs.org/@babel/cli/-/cli-7.16.8.tgz",
+      "integrity": "sha512-FTKBbxyk5TclXOGmwYyqelqP5IF6hMxaeJskd85jbR5jBfYlwqgwAbJwnixi1ZBbTqKfFuAA95mdmUFeSRwyJA==",
       "dev": true,
       "requires": {
         "@nicolo-ribaudo/chokidar-2": "2.1.8-no-fsevents.3",
@@ -7874,15 +6729,21 @@
     },
     "@babel/code-frame": {
       "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.16.7.tgz",
+      "integrity": "sha512-iAXqUn8IIeBTNd72xsFlgaXHkMBMt6y4HJp1tIaK465CWLT/fG1aqB7ykr95gHHmlBdGbFeWWfyB4NJJ0nmeIg==",
       "requires": {
         "@babel/highlight": "^7.16.7"
       }
     },
     "@babel/compat-data": {
-      "version": "7.18.8"
+      "version": "7.17.10",
+      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.17.10.tgz",
+      "integrity": "sha512-GZt/TCsG70Ms19gfZO1tM4CVnXsPgEPBCpJu+Qz3L0LUDsY5nZqFZglIoPC1kIYOtNBZlrnFT+klg12vFGZXrw=="
     },
     "@babel/core": {
       "version": "7.16.12",
+      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.16.12.tgz",
+      "integrity": "sha512-dK5PtG1uiN2ikk++5OzSYsitZKny4wOCD0nrO4TqnW4BVBTQ2NGS3NgilvT/TEyxTST7LNyWV/T4tXDoD3fOgg==",
       "requires": {
         "@babel/code-frame": "^7.16.7",
         "@babel/generator": "^7.16.8",
@@ -7902,148 +6763,189 @@
       }
     },
     "@babel/generator": {
-      "version": "7.18.12",
+      "version": "7.18.2",
+      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.18.2.tgz",
+      "integrity": "sha512-W1lG5vUwFvfMd8HVXqdfbuG7RuaSrTCCD8cl8fP8wOivdbtbIg2Db3IWUcgvfxKbbn6ZBGYRW/Zk1MIwK49mgw==",
       "requires": {
-        "@babel/types": "^7.18.10",
-        "@jridgewell/gen-mapping": "^0.3.2",
+        "@babel/types": "^7.18.2",
+        "@jridgewell/gen-mapping": "^0.3.0",
         "jsesc": "^2.5.1"
       }
     },
     "@babel/helper-annotate-as-pure": {
-      "version": "7.18.6",
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.16.7.tgz",
+      "integrity": "sha512-s6t2w/IPQVTAET1HitoowRGXooX8mCgtuP5195wD/QJPV6wYjpujCGF7JuMODVX2ZAJOf1GT6DT9MHEZvLOFSw==",
       "requires": {
-        "@babel/types": "^7.18.6"
+        "@babel/types": "^7.16.7"
       }
     },
     "@babel/helper-compilation-targets": {
-      "version": "7.18.9",
+      "version": "7.18.2",
+      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.18.2.tgz",
+      "integrity": "sha512-s1jnPotJS9uQnzFtiZVBUxe67CuBa679oWFHpxYYnTpRL/1ffhyX44R9uYiXoa/pLXcY9H2moJta0iaanlk/rQ==",
       "requires": {
-        "@babel/compat-data": "^7.18.8",
-        "@babel/helper-validator-option": "^7.18.6",
+        "@babel/compat-data": "^7.17.10",
+        "@babel/helper-validator-option": "^7.16.7",
         "browserslist": "^4.20.2",
         "semver": "^6.3.0"
       }
     },
     "@babel/helper-create-class-features-plugin": {
-      "version": "7.18.9",
+      "version": "7.18.0",
+      "resolved": "https://registry.npmjs.org/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.18.0.tgz",
+      "integrity": "sha512-Kh8zTGR9de3J63e5nS0rQUdRs/kbtwoeQQ0sriS0lItjC96u8XXZN6lKpuyWd2coKSU13py/y+LTmThLuVX0Pg==",
       "requires": {
-        "@babel/helper-annotate-as-pure": "^7.18.6",
-        "@babel/helper-environment-visitor": "^7.18.9",
-        "@babel/helper-function-name": "^7.18.9",
-        "@babel/helper-member-expression-to-functions": "^7.18.9",
-        "@babel/helper-optimise-call-expression": "^7.18.6",
-        "@babel/helper-replace-supers": "^7.18.9",
-        "@babel/helper-split-export-declaration": "^7.18.6"
+        "@babel/helper-annotate-as-pure": "^7.16.7",
+        "@babel/helper-environment-visitor": "^7.16.7",
+        "@babel/helper-function-name": "^7.17.9",
+        "@babel/helper-member-expression-to-functions": "^7.17.7",
+        "@babel/helper-optimise-call-expression": "^7.16.7",
+        "@babel/helper-replace-supers": "^7.16.7",
+        "@babel/helper-split-export-declaration": "^7.16.7"
       }
     },
     "@babel/helper-environment-visitor": {
-      "version": "7.18.9"
+      "version": "7.18.2",
+      "resolved": "https://registry.npmjs.org/@babel/helper-environment-visitor/-/helper-environment-visitor-7.18.2.tgz",
+      "integrity": "sha512-14GQKWkX9oJzPiQQ7/J36FTXcD4kSp8egKjO9nINlSKiHITRA9q/R74qu8S9xlc/b/yjsJItQUeeh3xnGN0voQ=="
     },
     "@babel/helper-function-name": {
-      "version": "7.18.9",
+      "version": "7.17.9",
+      "resolved": "https://registry.npmjs.org/@babel/helper-function-name/-/helper-function-name-7.17.9.tgz",
+      "integrity": "sha512-7cRisGlVtiVqZ0MW0/yFB4atgpGLWEHUVYnb448hZK4x+vih0YO5UoS11XIYtZYqHd0dIPMdUSv8q5K4LdMnIg==",
       "requires": {
-        "@babel/template": "^7.18.6",
-        "@babel/types": "^7.18.9"
+        "@babel/template": "^7.16.7",
+        "@babel/types": "^7.17.0"
       }
     },
     "@babel/helper-hoist-variables": {
-      "version": "7.18.6",
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/helper-hoist-variables/-/helper-hoist-variables-7.16.7.tgz",
+      "integrity": "sha512-m04d/0Op34H5v7pbZw6pSKP7weA6lsMvfiIAMeIvkY/R4xQtBSMFEigu9QTZ2qB/9l22vsxtM8a+Q8CzD255fg==",
       "requires": {
-        "@babel/types": "^7.18.6"
+        "@babel/types": "^7.16.7"
       }
     },
     "@babel/helper-member-expression-to-functions": {
-      "version": "7.18.9",
+      "version": "7.17.7",
+      "resolved": "https://registry.npmjs.org/@babel/helper-member-expression-to-functions/-/helper-member-expression-to-functions-7.17.7.tgz",
+      "integrity": "sha512-thxXgnQ8qQ11W2wVUObIqDL4p148VMxkt5T/qpN5k2fboRyzFGFmKsTGViquyM5QHKUy48OZoca8kw4ajaDPyw==",
       "requires": {
-        "@babel/types": "^7.18.9"
+        "@babel/types": "^7.17.0"
       }
     },
     "@babel/helper-module-imports": {
-      "version": "7.18.6",
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.16.7.tgz",
+      "integrity": "sha512-LVtS6TqjJHFc+nYeITRo6VLXve70xmq7wPhWTqDJusJEgGmkAACWwMiTNrvfoQo6hEhFwAIixNkvB0jPXDL8Wg==",
       "requires": {
-        "@babel/types": "^7.18.6"
+        "@babel/types": "^7.16.7"
       }
     },
     "@babel/helper-module-transforms": {
-      "version": "7.18.9",
+      "version": "7.18.0",
+      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.18.0.tgz",
+      "integrity": "sha512-kclUYSUBIjlvnzN2++K9f2qzYKFgjmnmjwL4zlmU5f8ZtzgWe8s0rUPSTGy2HmK4P8T52MQsS+HTQAgZd3dMEA==",
       "requires": {
-        "@babel/helper-environment-visitor": "^7.18.9",
-        "@babel/helper-module-imports": "^7.18.6",
-        "@babel/helper-simple-access": "^7.18.6",
-        "@babel/helper-split-export-declaration": "^7.18.6",
-        "@babel/helper-validator-identifier": "^7.18.6",
-        "@babel/template": "^7.18.6",
-        "@babel/traverse": "^7.18.9",
-        "@babel/types": "^7.18.9"
+        "@babel/helper-environment-visitor": "^7.16.7",
+        "@babel/helper-module-imports": "^7.16.7",
+        "@babel/helper-simple-access": "^7.17.7",
+        "@babel/helper-split-export-declaration": "^7.16.7",
+        "@babel/helper-validator-identifier": "^7.16.7",
+        "@babel/template": "^7.16.7",
+        "@babel/traverse": "^7.18.0",
+        "@babel/types": "^7.18.0"
       }
     },
     "@babel/helper-optimise-call-expression": {
-      "version": "7.18.6",
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/helper-optimise-call-expression/-/helper-optimise-call-expression-7.16.7.tgz",
+      "integrity": "sha512-EtgBhg7rd/JcnpZFXpBy0ze1YRfdm7BnBX4uKMBd3ixa3RGAE002JZB66FJyNH7g0F38U05pXmA5P8cBh7z+1w==",
       "requires": {
-        "@babel/types": "^7.18.6"
+        "@babel/types": "^7.16.7"
       }
     },
     "@babel/helper-plugin-utils": {
-      "version": "7.16.7"
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.16.7.tgz",
+      "integrity": "sha512-Qg3Nk7ZxpgMrsox6HreY1ZNKdBq7K72tDSliA6dCl5f007jR4ne8iD5UzuNnCJH2xBf2BEEVGr+/OL6Gdp7RxA=="
     },
     "@babel/helper-replace-supers": {
-      "version": "7.18.9",
+      "version": "7.18.2",
+      "resolved": "https://registry.npmjs.org/@babel/helper-replace-supers/-/helper-replace-supers-7.18.2.tgz",
+      "integrity": "sha512-XzAIyxx+vFnrOxiQrToSUOzUOn0e1J2Li40ntddek1Y69AXUTXoDJ40/D5RdjFu7s7qHiaeoTiempZcbuVXh2Q==",
       "requires": {
-        "@babel/helper-environment-visitor": "^7.18.9",
-        "@babel/helper-member-expression-to-functions": "^7.18.9",
-        "@babel/helper-optimise-call-expression": "^7.18.6",
-        "@babel/traverse": "^7.18.9",
-        "@babel/types": "^7.18.9"
+        "@babel/helper-environment-visitor": "^7.18.2",
+        "@babel/helper-member-expression-to-functions": "^7.17.7",
+        "@babel/helper-optimise-call-expression": "^7.16.7",
+        "@babel/traverse": "^7.18.2",
+        "@babel/types": "^7.18.2"
       }
     },
     "@babel/helper-simple-access": {
-      "version": "7.18.6",
+      "version": "7.17.7",
+      "resolved": "https://registry.npmjs.org/@babel/helper-simple-access/-/helper-simple-access-7.17.7.tgz",
+      "integrity": "sha512-txyMCGroZ96i+Pxr3Je3lzEJjqwaRC9buMUgtomcrLe5Nd0+fk1h0LLA+ixUF5OW7AhHuQ7Es1WcQJZmZsz2XA==",
       "requires": {
-        "@babel/types": "^7.18.6"
+        "@babel/types": "^7.17.0"
       }
     },
     "@babel/helper-skip-transparent-expression-wrappers": {
       "version": "7.16.0",
+      "resolved": "https://registry.npmjs.org/@babel/helper-skip-transparent-expression-wrappers/-/helper-skip-transparent-expression-wrappers-7.16.0.tgz",
+      "integrity": "sha512-+il1gTy0oHwUsBQZyJvukbB4vPMdcYBrFHa0Uc4AizLxbq6BOYC51Rv4tWocX9BLBDLZ4kc6qUFpQ6HRgL+3zw==",
       "requires": {
         "@babel/types": "^7.16.0"
       }
     },
     "@babel/helper-split-export-declaration": {
-      "version": "7.18.6",
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.16.7.tgz",
+      "integrity": "sha512-xbWoy/PFoxSWazIToT9Sif+jJTlrMcndIsaOKvTA6u7QEo7ilkRZpjew18/W3c7nm8fXdUDXh02VXTbZ0pGDNw==",
       "requires": {
-        "@babel/types": "^7.18.6"
+        "@babel/types": "^7.16.7"
       }
     },
-    "@babel/helper-string-parser": {
-      "version": "7.18.10"
-    },
     "@babel/helper-validator-identifier": {
-      "version": "7.18.6"
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.16.7.tgz",
+      "integrity": "sha512-hsEnFemeiW4D08A5gUAZxLBTXpZ39P+a+DGDsHw1yxqyQ/jzFEnxf5uTEGp+3bzAbNOxU1paTgYS4ECU/IgfDw=="
     },
     "@babel/helper-validator-option": {
-      "version": "7.18.6"
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.16.7.tgz",
+      "integrity": "sha512-TRtenOuRUVo9oIQGPC5G9DgK4743cdxvtOw0weQNpZXaS16SCBi5MNjZF8vba3ETURjZpTbVn7Vvcf2eAwFozQ=="
     },
     "@babel/helpers": {
-      "version": "7.18.9",
+      "version": "7.18.2",
+      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.18.2.tgz",
+      "integrity": "sha512-j+d+u5xT5utcQSzrh9p+PaJX94h++KN+ng9b9WEJq7pkUPAd61FGqhjuUEdfknb3E/uDBb7ruwEeKkIxNJPIrg==",
       "requires": {
-        "@babel/template": "^7.18.6",
-        "@babel/traverse": "^7.18.9",
-        "@babel/types": "^7.18.9"
+        "@babel/template": "^7.16.7",
+        "@babel/traverse": "^7.18.2",
+        "@babel/types": "^7.18.2"
       }
     },
     "@babel/highlight": {
-      "version": "7.18.6",
+      "version": "7.16.10",
+      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.16.10.tgz",
+      "integrity": "sha512-5FnTQLSLswEj6IkgVw5KusNUUFY9ZGqe/TRFnP/BKYHYgfh7tc+C7mwiy95/yNP7Dh9x580Vv8r7u7ZfTBFxdw==",
       "requires": {
-        "@babel/helper-validator-identifier": "^7.18.6",
+        "@babel/helper-validator-identifier": "^7.16.7",
         "chalk": "^2.0.0",
         "js-tokens": "^4.0.0"
       }
     },
     "@babel/parser": {
-      "version": "7.18.11"
+      "version": "7.18.4",
+      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.18.4.tgz",
+      "integrity": "sha512-FDge0dFazETFcxGw/EXzOkN8uJp0PC7Qbm+Pe9T+av2zlBpOgunFHkQPPn+eRuClU73JF+98D531UgayY89tow=="
     },
     "@babel/plugin-proposal-class-properties": {
       "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-class-properties/-/plugin-proposal-class-properties-7.16.7.tgz",
+      "integrity": "sha512-IobU0Xme31ewjYOShSIqd/ZGM/r/cuOz2z0MDbNrhF5FW+ZVgi0f2lyeoj9KFPDOAqsYxmLWZte1WOwlvY9aww==",
       "requires": {
         "@babel/helper-create-class-features-plugin": "^7.16.7",
         "@babel/helper-plugin-utils": "^7.16.7"
@@ -8051,6 +6953,8 @@
     },
     "@babel/plugin-proposal-decorators": {
       "version": "7.18.2",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-decorators/-/plugin-proposal-decorators-7.18.2.tgz",
+      "integrity": "sha512-kbDISufFOxeczi0v4NQP3p5kIeW6izn/6klfWBrIIdGZZe4UpHR+QU03FAoWjGGd9SUXAwbw2pup1kaL4OQsJQ==",
       "requires": {
         "@babel/helper-create-class-features-plugin": "^7.18.0",
         "@babel/helper-plugin-utils": "^7.17.12",
@@ -8061,12 +6965,16 @@
       },
       "dependencies": {
         "@babel/helper-plugin-utils": {
-          "version": "7.17.12"
+          "version": "7.17.12",
+          "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
+          "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA=="
         }
       }
     },
     "@babel/plugin-proposal-export-namespace-from": {
       "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-export-namespace-from/-/plugin-proposal-export-namespace-from-7.16.7.tgz",
+      "integrity": "sha512-ZxdtqDXLRGBL64ocZcs7ovt71L3jhC1RGSyR996svrCi3PYqHNkb3SwPJCs8RIzD86s+WPpt2S73+EHCGO+NUA==",
       "dev": true,
       "requires": {
         "@babel/helper-plugin-utils": "^7.16.7",
@@ -8075,6 +6983,8 @@
     },
     "@babel/plugin-proposal-logical-assignment-operators": {
       "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-logical-assignment-operators/-/plugin-proposal-logical-assignment-operators-7.16.7.tgz",
+      "integrity": "sha512-K3XzyZJGQCr00+EtYtrDjmwX7o7PLK6U9bi1nCwkQioRFVUv6dJoxbQjtWVtP+bCPy82bONBKG8NPyQ4+i6yjg==",
       "dev": true,
       "requires": {
         "@babel/helper-plugin-utils": "^7.16.7",
@@ -8083,6 +6993,8 @@
     },
     "@babel/plugin-proposal-nullish-coalescing-operator": {
       "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-nullish-coalescing-operator/-/plugin-proposal-nullish-coalescing-operator-7.16.7.tgz",
+      "integrity": "sha512-aUOrYU3EVtjf62jQrCj63pYZ7k6vns2h/DQvHPWGmsJRYzWXZ6/AsfgpiRy6XiuIDADhJzP2Q9MwSMKauBQ+UQ==",
       "requires": {
         "@babel/helper-plugin-utils": "^7.16.7",
         "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3"
@@ -8090,6 +7002,8 @@
     },
     "@babel/plugin-proposal-object-rest-spread": {
       "version": "7.18.0",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-object-rest-spread/-/plugin-proposal-object-rest-spread-7.18.0.tgz",
+      "integrity": "sha512-nbTv371eTrFabDfHLElkn9oyf9VG+VKK6WMzhY2o4eHKaG19BToD9947zzGMO6I/Irstx9d8CwX6njPNIAR/yw==",
       "requires": {
         "@babel/compat-data": "^7.17.10",
         "@babel/helper-compilation-targets": "^7.17.10",
@@ -8099,12 +7013,16 @@
       },
       "dependencies": {
         "@babel/helper-plugin-utils": {
-          "version": "7.17.12"
+          "version": "7.17.12",
+          "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
+          "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA=="
         }
       }
     },
     "@babel/plugin-proposal-optional-chaining": {
       "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-optional-chaining/-/plugin-proposal-optional-chaining-7.16.7.tgz",
+      "integrity": "sha512-eC3xy+ZrUcBtP7x+sq62Q/HYd674pPTb/77XZMb5wbDPGWIdUbSr4Agr052+zaUPSb+gGRnjxXfKFvx5iMJ+DA==",
       "requires": {
         "@babel/helper-plugin-utils": "^7.16.7",
         "@babel/helper-skip-transparent-expression-wrappers": "^7.16.0",
@@ -8113,35 +7031,47 @@
     },
     "@babel/plugin-syntax-decorators": {
       "version": "7.17.12",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-decorators/-/plugin-syntax-decorators-7.17.12.tgz",
+      "integrity": "sha512-D1Hz0qtGTza8K2xGyEdVNCYLdVHukAcbQr4K3/s6r/esadyEriZovpJimQOpu8ju4/jV8dW/1xdaE0UpDroidw==",
       "requires": {
         "@babel/helper-plugin-utils": "^7.17.12"
       },
       "dependencies": {
         "@babel/helper-plugin-utils": {
-          "version": "7.17.12"
+          "version": "7.17.12",
+          "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
+          "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA=="
         }
       }
     },
     "@babel/plugin-syntax-export-namespace-from": {
       "version": "7.8.3",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-export-namespace-from/-/plugin-syntax-export-namespace-from-7.8.3.tgz",
+      "integrity": "sha512-MXf5laXo6c1IbEbegDmzGPwGNTsHZmEy6QGznu5Sh2UCWvueywb2ee+CCE4zQiZstxU9BMoQO9i6zUFSY0Kj0Q==",
       "dev": true,
       "requires": {
         "@babel/helper-plugin-utils": "^7.8.3"
       }
     },
     "@babel/plugin-syntax-jsx": {
-      "version": "7.18.6",
+      "version": "7.17.12",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.17.12.tgz",
+      "integrity": "sha512-spyY3E3AURfxh/RHtjx5j6hs8am5NbUBGfcZ2vB3uShSpZdQyXSf5rR5Mk76vbtlAZOelyVQ71Fg0x9SG4fsog==",
       "requires": {
-        "@babel/helper-plugin-utils": "^7.18.6"
+        "@babel/helper-plugin-utils": "^7.17.12"
       },
       "dependencies": {
         "@babel/helper-plugin-utils": {
-          "version": "7.18.6"
+          "version": "7.17.12",
+          "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
+          "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA=="
         }
       }
     },
     "@babel/plugin-syntax-logical-assignment-operators": {
       "version": "7.10.4",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
+      "integrity": "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==",
       "dev": true,
       "requires": {
         "@babel/helper-plugin-utils": "^7.10.4"
@@ -8149,79 +7079,100 @@
     },
     "@babel/plugin-syntax-nullish-coalescing-operator": {
       "version": "7.8.3",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz",
+      "integrity": "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==",
       "requires": {
         "@babel/helper-plugin-utils": "^7.8.0"
       }
     },
     "@babel/plugin-syntax-object-rest-spread": {
       "version": "7.8.3",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz",
+      "integrity": "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==",
       "requires": {
         "@babel/helper-plugin-utils": "^7.8.0"
       }
     },
     "@babel/plugin-syntax-optional-chaining": {
       "version": "7.8.3",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz",
+      "integrity": "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==",
       "requires": {
         "@babel/helper-plugin-utils": "^7.8.0"
       }
     },
     "@babel/plugin-syntax-typescript": {
-      "version": "7.18.6",
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.16.7.tgz",
+      "integrity": "sha512-YhUIJHHGkqPgEcMYkPCKTyGUdoGKWtopIycQyjJH8OjvRgOYsXsaKehLVPScKJWAULPxMa4N1vCe6szREFlZ7A==",
       "requires": {
-        "@babel/helper-plugin-utils": "^7.18.6"
-      },
-      "dependencies": {
-        "@babel/helper-plugin-utils": {
-          "version": "7.18.9"
-        }
+        "@babel/helper-plugin-utils": "^7.16.7"
       }
     },
     "@babel/plugin-transform-arrow-functions": {
       "version": "7.17.12",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-arrow-functions/-/plugin-transform-arrow-functions-7.17.12.tgz",
+      "integrity": "sha512-PHln3CNi/49V+mza4xMwrg+WGYevSF1oaiXaC2EQfdp4HWlSjRsrDXWJiQBKpP7749u6vQ9mcry2uuFOv5CXvA==",
       "requires": {
         "@babel/helper-plugin-utils": "^7.17.12"
       },
       "dependencies": {
         "@babel/helper-plugin-utils": {
-          "version": "7.17.12"
+          "version": "7.17.12",
+          "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
+          "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA=="
         }
       }
     },
     "@babel/plugin-transform-block-scoping": {
       "version": "7.18.4",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-block-scoping/-/plugin-transform-block-scoping-7.18.4.tgz",
+      "integrity": "sha512-+Hq10ye+jlvLEogSOtq4mKvtk7qwcUQ1f0Mrueai866C82f844Yom2cttfJdMdqRLTxWpsbfbkIkOIfovyUQXw==",
       "requires": {
         "@babel/helper-plugin-utils": "^7.17.12"
       },
       "dependencies": {
         "@babel/helper-plugin-utils": {
-          "version": "7.17.12"
+          "version": "7.17.12",
+          "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
+          "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA=="
         }
       }
     },
     "@babel/plugin-transform-computed-properties": {
       "version": "7.17.12",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-computed-properties/-/plugin-transform-computed-properties-7.17.12.tgz",
+      "integrity": "sha512-a7XINeplB5cQUWMg1E/GI1tFz3LfK021IjV1rj1ypE+R7jHm+pIHmHl25VNkZxtx9uuYp7ThGk8fur1HHG7PgQ==",
       "requires": {
         "@babel/helper-plugin-utils": "^7.17.12"
       },
       "dependencies": {
         "@babel/helper-plugin-utils": {
-          "version": "7.17.12"
+          "version": "7.17.12",
+          "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
+          "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA=="
         }
       }
     },
     "@babel/plugin-transform-destructuring": {
       "version": "7.18.0",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-destructuring/-/plugin-transform-destructuring-7.18.0.tgz",
+      "integrity": "sha512-Mo69klS79z6KEfrLg/1WkmVnB8javh75HX4pi2btjvlIoasuxilEyjtsQW6XPrubNd7AQy0MMaNIaQE4e7+PQw==",
       "requires": {
         "@babel/helper-plugin-utils": "^7.17.12"
       },
       "dependencies": {
         "@babel/helper-plugin-utils": {
-          "version": "7.17.12"
+          "version": "7.17.12",
+          "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
+          "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA=="
         }
       }
     },
     "@babel/plugin-transform-modules-commonjs": {
       "version": "7.17.9",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-commonjs/-/plugin-transform-modules-commonjs-7.17.9.tgz",
+      "integrity": "sha512-2TBFd/r2I6VlYn0YRTz2JdazS+FoUuQ2rIFHoAxtyP/0G3D82SBLaRq9rnUkpqlLg03Byfl/+M32mpxjO6KaPw==",
       "dev": true,
       "requires": {
         "@babel/helper-module-transforms": "^7.17.7",
@@ -8232,67 +7183,75 @@
     },
     "@babel/plugin-transform-parameters": {
       "version": "7.17.12",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-parameters/-/plugin-transform-parameters-7.17.12.tgz",
+      "integrity": "sha512-6qW4rWo1cyCdq1FkYri7AHpauchbGLXpdwnYsfxFb+KtddHENfsY5JZb35xUwkK5opOLcJ3BNd2l7PhRYGlwIA==",
       "requires": {
         "@babel/helper-plugin-utils": "^7.17.12"
       },
       "dependencies": {
         "@babel/helper-plugin-utils": {
-          "version": "7.17.12"
+          "version": "7.17.12",
+          "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
+          "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA=="
         }
       }
     },
     "@babel/plugin-transform-react-display-name": {
       "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-display-name/-/plugin-transform-react-display-name-7.16.7.tgz",
+      "integrity": "sha512-qgIg8BcZgd0G/Cz916D5+9kqX0c7nPZyXaP8R2tLNN5tkyIZdG5fEwBrxwplzSnjC1jvQmyMNVwUCZPcbGY7Pg==",
       "dev": true,
       "requires": {
         "@babel/helper-plugin-utils": "^7.16.7"
       }
     },
     "@babel/plugin-transform-react-jsx": {
-      "version": "7.18.10",
+      "version": "7.17.12",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx/-/plugin-transform-react-jsx-7.17.12.tgz",
+      "integrity": "sha512-Lcaw8bxd1DKht3thfD4A12dqo1X16he1Lm8rIv8sTwjAYNInRS1qHa9aJoqvzpscItXvftKDCfaEQzwoVyXpEQ==",
       "requires": {
-        "@babel/helper-annotate-as-pure": "^7.18.6",
-        "@babel/helper-module-imports": "^7.18.6",
-        "@babel/helper-plugin-utils": "^7.18.9",
-        "@babel/plugin-syntax-jsx": "^7.18.6",
-        "@babel/types": "^7.18.10"
+        "@babel/helper-annotate-as-pure": "^7.16.7",
+        "@babel/helper-module-imports": "^7.16.7",
+        "@babel/helper-plugin-utils": "^7.17.12",
+        "@babel/plugin-syntax-jsx": "^7.17.12",
+        "@babel/types": "^7.17.12"
       },
       "dependencies": {
         "@babel/helper-plugin-utils": {
-          "version": "7.18.9"
+          "version": "7.17.12",
+          "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
+          "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA=="
         }
       }
     },
     "@babel/plugin-transform-react-jsx-development": {
-      "version": "7.18.6",
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-development/-/plugin-transform-react-jsx-development-7.16.7.tgz",
+      "integrity": "sha512-RMvQWvpla+xy6MlBpPlrKZCMRs2AGiHOGHY3xRwl0pEeim348dDyxeH4xBsMPbIMhujeq7ihE702eM2Ew0Wo+A==",
       "requires": {
-        "@babel/plugin-transform-react-jsx": "^7.18.6"
+        "@babel/plugin-transform-react-jsx": "^7.16.7"
       }
     },
     "@babel/plugin-transform-react-jsx-self": {
-      "version": "7.18.6",
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.16.7.tgz",
+      "integrity": "sha512-oe5VuWs7J9ilH3BCCApGoYjHoSO48vkjX2CbA5bFVhIuO2HKxA3vyF7rleA4o6/4rTDbk6r8hBW7Ul8E+UZrpA==",
       "requires": {
-        "@babel/helper-plugin-utils": "^7.18.6"
-      },
-      "dependencies": {
-        "@babel/helper-plugin-utils": {
-          "version": "7.18.6"
-        }
+        "@babel/helper-plugin-utils": "^7.16.7"
       }
     },
     "@babel/plugin-transform-react-jsx-source": {
-      "version": "7.18.6",
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.16.7.tgz",
+      "integrity": "sha512-rONFiQz9vgbsnaMtQlZCjIRwhJvlrPET8TabIUK2hzlXw9B9s2Ieaxte1SCOOXMbWRHodbKixNf3BLcWVOQ8Bw==",
       "requires": {
-        "@babel/helper-plugin-utils": "^7.18.6"
-      },
-      "dependencies": {
-        "@babel/helper-plugin-utils": {
-          "version": "7.18.6"
-        }
+        "@babel/helper-plugin-utils": "^7.16.7"
       }
     },
     "@babel/plugin-transform-react-pure-annotations": {
       "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-pure-annotations/-/plugin-transform-react-pure-annotations-7.16.7.tgz",
+      "integrity": "sha512-hs71ToC97k3QWxswh2ElzMFABXHvGiJ01IB1TbYQDGeWRKWz/MPUTh5jGExdHvosYKpnJW5Pm3S4+TA3FyX+GA==",
       "dev": true,
       "requires": {
         "@babel/helper-annotate-as-pure": "^7.16.7",
@@ -8301,31 +7260,34 @@
     },
     "@babel/plugin-transform-spread": {
       "version": "7.17.12",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-spread/-/plugin-transform-spread-7.17.12.tgz",
+      "integrity": "sha512-9pgmuQAtFi3lpNUstvG9nGfk9DkrdmWNp9KeKPFmuZCpEnxRzYlS8JgwPjYj+1AWDOSvoGN0H30p1cBOmT/Svg==",
       "requires": {
         "@babel/helper-plugin-utils": "^7.17.12",
         "@babel/helper-skip-transparent-expression-wrappers": "^7.16.0"
       },
       "dependencies": {
         "@babel/helper-plugin-utils": {
-          "version": "7.17.12"
+          "version": "7.17.12",
+          "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
+          "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA=="
         }
       }
     },
     "@babel/plugin-transform-typescript": {
-      "version": "7.18.12",
+      "version": "7.16.8",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-typescript/-/plugin-transform-typescript-7.16.8.tgz",
+      "integrity": "sha512-bHdQ9k7YpBDO2d0NVfkj51DpQcvwIzIusJ7mEUaMlbZq3Kt/U47j24inXZHQ5MDiYpCs+oZiwnXyKedE8+q7AQ==",
       "requires": {
-        "@babel/helper-create-class-features-plugin": "^7.18.9",
-        "@babel/helper-plugin-utils": "^7.18.9",
-        "@babel/plugin-syntax-typescript": "^7.18.6"
-      },
-      "dependencies": {
-        "@babel/helper-plugin-utils": {
-          "version": "7.18.9"
-        }
+        "@babel/helper-create-class-features-plugin": "^7.16.7",
+        "@babel/helper-plugin-utils": "^7.16.7",
+        "@babel/plugin-syntax-typescript": "^7.16.7"
       }
     },
     "@babel/preset-react": {
       "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/preset-react/-/preset-react-7.16.7.tgz",
+      "integrity": "sha512-fWpyI8UM/HE6DfPBzD8LnhQ/OcH8AgTaqcqP2nGOXEUV+VKBR5JRN9hCk9ai+zQQ57vtm9oWeXguBCPNUjytgA==",
       "dev": true,
       "requires": {
         "@babel/helper-plugin-utils": "^7.16.7",
@@ -8336,68 +7298,46 @@
         "@babel/plugin-transform-react-pure-annotations": "^7.16.7"
       }
     },
-    "@babel/preset-typescript": {
-      "version": "7.18.6",
-      "requires": {
-        "@babel/helper-plugin-utils": "^7.18.6",
-        "@babel/helper-validator-option": "^7.18.6",
-        "@babel/plugin-transform-typescript": "^7.18.6"
-      },
-      "dependencies": {
-        "@babel/helper-plugin-utils": {
-          "version": "7.18.9"
-        }
-      }
-    },
     "@babel/template": {
-      "version": "7.18.10",
+      "version": "7.16.7",
+      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.16.7.tgz",
+      "integrity": "sha512-I8j/x8kHUrbYRTUxXrrMbfCa7jxkE7tZre39x3kjr9hvI82cK1FfqLygotcWN5kdPGWcLdWMHpSBavse5tWw3w==",
       "requires": {
-        "@babel/code-frame": "^7.18.6",
-        "@babel/parser": "^7.18.10",
-        "@babel/types": "^7.18.10"
-      },
-      "dependencies": {
-        "@babel/code-frame": {
-          "version": "7.18.6",
-          "requires": {
-            "@babel/highlight": "^7.18.6"
-          }
-        }
+        "@babel/code-frame": "^7.16.7",
+        "@babel/parser": "^7.16.7",
+        "@babel/types": "^7.16.7"
       }
     },
     "@babel/traverse": {
-      "version": "7.18.11",
-      "requires": {
-        "@babel/code-frame": "^7.18.6",
-        "@babel/generator": "^7.18.10",
-        "@babel/helper-environment-visitor": "^7.18.9",
-        "@babel/helper-function-name": "^7.18.9",
-        "@babel/helper-hoist-variables": "^7.18.6",
-        "@babel/helper-split-export-declaration": "^7.18.6",
-        "@babel/parser": "^7.18.11",
-        "@babel/types": "^7.18.10",
+      "version": "7.18.2",
+      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.18.2.tgz",
+      "integrity": "sha512-9eNwoeovJ6KH9zcCNnENY7DMFwTU9JdGCFtqNLfUAqtUHRCOsTOqWoffosP8vKmNYeSBUv3yVJXjfd8ucwOjUA==",
+      "requires": {
+        "@babel/code-frame": "^7.16.7",
+        "@babel/generator": "^7.18.2",
+        "@babel/helper-environment-visitor": "^7.18.2",
+        "@babel/helper-function-name": "^7.17.9",
+        "@babel/helper-hoist-variables": "^7.16.7",
+        "@babel/helper-split-export-declaration": "^7.16.7",
+        "@babel/parser": "^7.18.0",
+        "@babel/types": "^7.18.2",
         "debug": "^4.1.0",
         "globals": "^11.1.0"
-      },
-      "dependencies": {
-        "@babel/code-frame": {
-          "version": "7.18.6",
-          "requires": {
-            "@babel/highlight": "^7.18.6"
-          }
-        }
       }
     },
     "@babel/types": {
-      "version": "7.18.10",
+      "version": "7.18.4",
+      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.18.4.tgz",
+      "integrity": "sha512-ThN1mBcMq5pG/Vm2IcBmPPfyPXbd8S02rS+OBIDENdufvqC7Z/jHPCv9IcP01277aKtDI8g/2XysBN4hA8niiw==",
       "requires": {
-        "@babel/helper-string-parser": "^7.18.10",
-        "@babel/helper-validator-identifier": "^7.18.6",
+        "@babel/helper-validator-identifier": "^7.16.7",
         "to-fast-properties": "^2.0.0"
       }
     },
     "@electron/get": {
       "version": "1.14.1",
+      "resolved": "https://registry.npmjs.org/@electron/get/-/get-1.14.1.tgz",
+      "integrity": "sha512-BrZYyL/6m0ZXz/lDxy/nlVhQz+WF+iPS6qXolEU8atw7h6v1aYkjwJZ63m+bJMBTxDE66X+r2tPS4a/8C82sZw==",
       "dev": true,
       "requires": {
         "debug": "^4.1.1",
@@ -8411,15 +7351,10 @@
         "sumchecker": "^3.0.1"
       }
     },
-    "@esbuild/linux-loong64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.15.6.tgz",
-      "integrity": "sha512-hqmVU2mUjH6J2ZivHphJ/Pdse2ZD+uGCHK0uvsiLDk/JnSedEVj77CiVUnbMKuU4tih1TZZL8tG9DExQg/GZsw==",
-      "dev": true,
-      "optional": true
-    },
     "@eslint/eslintrc": {
       "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-1.0.5.tgz",
+      "integrity": "sha512-BLxsnmK3KyPunz5wmCCpqy0YelEoxxGmH73Is+Z74oOTMtExcjkr3dDR6quwrjh1YspA8DH9gnX1o069KiS9AQ==",
       "dev": true,
       "requires": {
         "ajv": "^6.12.4",
@@ -8435,6 +7370,8 @@
       "dependencies": {
         "globals": {
           "version": "13.12.0",
+          "resolved": "https://registry.npmjs.org/globals/-/globals-13.12.0.tgz",
+          "integrity": "sha512-uS8X6lSKN2JumVoXrbUz+uG4BYG+eiawqm3qFcT7ammfbUHeCBoJMlHcec/S3krSk73/AE/f0szYFmgAA3kYZg==",
           "dev": true,
           "requires": {
             "type-fest": "^0.20.2"
@@ -8442,16 +7379,22 @@
         },
         "ignore": {
           "version": "4.0.6",
+          "resolved": "https://registry.npmjs.org/ignore/-/ignore-4.0.6.tgz",
+          "integrity": "sha512-cyFDKrqc/YdcWFniJhzI42+AzS+gNwmUzOSFcRCQYwySuBBBy/KjuxWLZ/FHEH6Moq1NizMOBWyTcv8O4OZIMg==",
           "dev": true
         },
         "type-fest": {
           "version": "0.20.2",
+          "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
+          "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
           "dev": true
         }
       }
     },
     "@humanwhocodes/config-array": {
       "version": "0.9.3",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.9.3.tgz",
+      "integrity": "sha512-3xSMlXHh03hCcCmFc0rbKp3Ivt2PFEJnQUJDDMTJQ2wkECZWdq4GePs2ctc5H8zV+cHPaq8k2vU8mrQjA6iHdQ==",
       "dev": true,
       "requires": {
         "@humanwhocodes/object-schema": "^1.2.1",
@@ -8461,27 +7404,39 @@
     },
     "@humanwhocodes/object-schema": {
       "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-1.2.1.tgz",
+      "integrity": "sha512-ZnQMnLV4e7hDlUvw8H+U8ASL02SS2Gn6+9Ac3wGGLIe7+je2AeAOxPY+izIPJDfFDb7eDjev0Us8MO1iFRN8hA==",
       "dev": true
     },
     "@jridgewell/gen-mapping": {
-      "version": "0.3.2",
+      "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.1.tgz",
+      "integrity": "sha512-GcHwniMlA2z+WFPWuY8lp3fsza0I8xPFMWL5+n8LYyP6PSvPrXf4+n8stDHZY2DM0zy9sVkRDy1jDI4XGzYVqg==",
       "requires": {
-        "@jridgewell/set-array": "^1.0.1",
+        "@jridgewell/set-array": "^1.0.0",
         "@jridgewell/sourcemap-codec": "^1.4.10",
         "@jridgewell/trace-mapping": "^0.3.9"
       }
     },
     "@jridgewell/resolve-uri": {
-      "version": "3.0.7"
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.0.7.tgz",
+      "integrity": "sha512-8cXDaBBHOr2pQ7j77Y6Vp5VDT2sIqWyWQ56TjEq4ih/a4iST3dItRe8Q9fp0rrIl9DoKhWQtUQz/YpOxLkXbNA=="
     },
     "@jridgewell/set-array": {
-      "version": "1.1.1"
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.1.1.tgz",
+      "integrity": "sha512-Ct5MqZkLGEXTVmQYbGtx9SVqD2fqwvdubdps5D3djjAkgkKwT918VNOz65pEHFaYTeWcukmJmH5SwsA9Tn2ObQ=="
     },
     "@jridgewell/sourcemap-codec": {
-      "version": "1.4.13"
+      "version": "1.4.13",
+      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.13.tgz",
+      "integrity": "sha512-GryiOJmNcWbovBxTfZSF71V/mXbgcV3MewDe3kIMCLyIh5e7SKAeUZs+rMnJ8jkMolZ/4/VsdBmMrw3l+VdZ3w=="
     },
     "@jridgewell/trace-mapping": {
       "version": "0.3.13",
+      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.13.tgz",
+      "integrity": "sha512-o1xbKhp9qnIAoHJSWd6KlCZfqslL4valSF81H8ImioOAxluWYWOpWkpyktY2vnt4tbrX9XYaxovq6cgowaJp2w==",
       "requires": {
         "@jridgewell/resolve-uri": "^3.0.3",
         "@jridgewell/sourcemap-codec": "^1.4.10"
@@ -8489,11 +7444,15 @@
     },
     "@nicolo-ribaudo/chokidar-2": {
       "version": "2.1.8-no-fsevents.3",
+      "resolved": "https://registry.npmjs.org/@nicolo-ribaudo/chokidar-2/-/chokidar-2-2.1.8-no-fsevents.3.tgz",
+      "integrity": "sha512-s88O1aVtXftvp5bCPB7WnmXc5IwOZZ7YPuwNPt+GtOOXpPvad1LfbmjYv+qII7zP6RU2QGnqve27dnLycEnyEQ==",
       "dev": true,
       "optional": true
     },
     "@nodelib/fs.scandir": {
       "version": "2.1.5",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
+      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
       "dev": true,
       "requires": {
         "@nodelib/fs.stat": "2.0.5",
@@ -8502,427 +7461,41 @@
     },
     "@nodelib/fs.stat": {
       "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
+      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
       "dev": true
     },
     "@nodelib/fs.walk": {
       "version": "1.2.8",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
+      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
       "dev": true,
-      "requires": {
-        "@nodelib/fs.scandir": "2.1.5",
-        "fastq": "^1.6.0"
-      }
-    },
-    "@playwright/experimental-ct-react": {
-      "version": "file:packages/playwright-ct-react",
-      "requires": {
-        "@playwright/test": "1.27.0-next",
-        "@vitejs/plugin-react": "^2.0.1",
-        "vite": "^3.0.9"
-      },
-      "dependencies": {
-        "@babel/core": {
-          "version": "7.18.10",
-          "requires": {
-            "@ampproject/remapping": "^2.1.0",
-            "@babel/code-frame": "^7.18.6",
-            "@babel/generator": "^7.18.10",
-            "@babel/helper-compilation-targets": "^7.18.9",
-            "@babel/helper-module-transforms": "^7.18.9",
-            "@babel/helpers": "^7.18.9",
-            "@babel/parser": "^7.18.10",
-            "@babel/template": "^7.18.10",
-            "@babel/traverse": "^7.18.10",
-            "@babel/types": "^7.18.10",
-            "convert-source-map": "^1.7.0",
-            "debug": "^4.1.0",
-            "gensync": "^1.0.0-beta.2",
-            "json5": "^2.2.1",
-            "semver": "^6.3.0"
-          }
-        },
-        "@esbuild/linux-loong64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.14.54.tgz",
-          "integrity": "sha512-bZBrLAIX1kpWelV0XemxBZllyRmM6vgFQQG2GdNb+r3Fkp0FOh1NJSvekXDs7jq70k4euu1cryLMfU+mTXlEpw==",
-          "optional": true
-        },
-        "@vitejs/plugin-react": {
-          "version": "2.0.1",
-          "requires": {
-            "@babel/core": "^7.18.10",
-            "@babel/plugin-transform-react-jsx": "^7.18.10",
-            "@babel/plugin-transform-react-jsx-development": "^7.18.6",
-            "@babel/plugin-transform-react-jsx-self": "^7.18.6",
-            "@babel/plugin-transform-react-jsx-source": "^7.18.6",
-            "magic-string": "^0.26.2",
-            "react-refresh": "^0.14.0"
-          }
-        },
-        "esbuild": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.14.54.tgz",
-          "integrity": "sha512-Cy9llcy8DvET5uznocPyqL3BFRrFXSVqbgpMJ9Wz8oVjZlh/zUSNbPRbov0VX7VxN2JH1Oa0uNxZ7eLRb62pJA==",
-          "requires": {
-            "@esbuild/linux-loong64": "0.14.54",
-            "esbuild-android-64": "0.14.54",
-            "esbuild-android-arm64": "0.14.54",
-            "esbuild-darwin-64": "0.14.54",
-            "esbuild-darwin-arm64": "0.14.54",
-            "esbuild-freebsd-64": "0.14.54",
-            "esbuild-freebsd-arm64": "0.14.54",
-            "esbuild-linux-32": "0.14.54",
-            "esbuild-linux-64": "0.14.54",
-            "esbuild-linux-arm": "0.14.54",
-            "esbuild-linux-arm64": "0.14.54",
-            "esbuild-linux-mips64le": "0.14.54",
-            "esbuild-linux-ppc64le": "0.14.54",
-            "esbuild-linux-riscv64": "0.14.54",
-            "esbuild-linux-s390x": "0.14.54",
-            "esbuild-netbsd-64": "0.14.54",
-            "esbuild-openbsd-64": "0.14.54",
-            "esbuild-sunos-64": "0.14.54",
-            "esbuild-windows-32": "0.14.54",
-            "esbuild-windows-64": "0.14.54",
-            "esbuild-windows-arm64": "0.14.54"
-          }
-        },
-        "esbuild-android-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-android-64/-/esbuild-android-64-0.14.54.tgz",
-          "integrity": "sha512-Tz2++Aqqz0rJ7kYBfz+iqyE3QMycD4vk7LBRyWaAVFgFtQ/O8EJOnVmTOiDWYZ/uYzB4kvP+bqejYdVKzE5lAQ==",
-          "optional": true
-        },
-        "esbuild-android-arm64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-android-arm64/-/esbuild-android-arm64-0.14.54.tgz",
-          "integrity": "sha512-F9E+/QDi9sSkLaClO8SOV6etqPd+5DgJje1F9lOWoNncDdOBL2YF59IhsWATSt0TLZbYCf3pNlTHvVV5VfHdvg==",
-          "optional": true
-        },
-        "esbuild-darwin-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-darwin-64/-/esbuild-darwin-64-0.14.54.tgz",
-          "integrity": "sha512-jtdKWV3nBviOd5v4hOpkVmpxsBy90CGzebpbO9beiqUYVMBtSc0AL9zGftFuBon7PNDcdvNCEuQqw2x0wP9yug==",
-          "optional": true
-        },
-        "esbuild-darwin-arm64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-darwin-arm64/-/esbuild-darwin-arm64-0.14.54.tgz",
-          "integrity": "sha512-OPafJHD2oUPyvJMrsCvDGkRrVCar5aVyHfWGQzY1dWnzErjrDuSETxwA2HSsyg2jORLY8yBfzc1MIpUkXlctmw==",
-          "optional": true
-        },
-        "esbuild-freebsd-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-freebsd-64/-/esbuild-freebsd-64-0.14.54.tgz",
-          "integrity": "sha512-OKwd4gmwHqOTp4mOGZKe/XUlbDJ4Q9TjX0hMPIDBUWWu/kwhBAudJdBoxnjNf9ocIB6GN6CPowYpR/hRCbSYAg==",
-          "optional": true
-        },
-        "esbuild-freebsd-arm64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-freebsd-arm64/-/esbuild-freebsd-arm64-0.14.54.tgz",
-          "integrity": "sha512-sFwueGr7OvIFiQT6WeG0jRLjkjdqWWSrfbVwZp8iMP+8UHEHRBvlaxL6IuKNDwAozNUmbb8nIMXa7oAOARGs1Q==",
-          "optional": true
-        },
-        "esbuild-linux-32": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-32/-/esbuild-linux-32-0.14.54.tgz",
-          "integrity": "sha512-1ZuY+JDI//WmklKlBgJnglpUL1owm2OX+8E1syCD6UAxcMM/XoWd76OHSjl/0MR0LisSAXDqgjT3uJqT67O3qw==",
-          "optional": true
-        },
-        "esbuild-linux-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-64/-/esbuild-linux-64-0.14.54.tgz",
-          "integrity": "sha512-EgjAgH5HwTbtNsTqQOXWApBaPVdDn7XcK+/PtJwZLT1UmpLoznPd8c5CxqsH2dQK3j05YsB3L17T8vE7cp4cCg==",
-          "optional": true
-        },
-        "esbuild-linux-arm": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-arm/-/esbuild-linux-arm-0.14.54.tgz",
-          "integrity": "sha512-qqz/SjemQhVMTnvcLGoLOdFpCYbz4v4fUo+TfsWG+1aOu70/80RV6bgNpR2JCrppV2moUQkww+6bWxXRL9YMGw==",
-          "optional": true
-        },
-        "esbuild-linux-arm64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-arm64/-/esbuild-linux-arm64-0.14.54.tgz",
-          "integrity": "sha512-WL71L+0Rwv+Gv/HTmxTEmpv0UgmxYa5ftZILVi2QmZBgX3q7+tDeOQNqGtdXSdsL8TQi1vIaVFHUPDe0O0kdig==",
-          "optional": true
-        },
-        "esbuild-linux-mips64le": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-mips64le/-/esbuild-linux-mips64le-0.14.54.tgz",
-          "integrity": "sha512-qTHGQB8D1etd0u1+sB6p0ikLKRVuCWhYQhAHRPkO+OF3I/iSlTKNNS0Lh2Oc0g0UFGguaFZZiPJdJey3AGpAlw==",
-          "optional": true
-        },
-        "esbuild-linux-ppc64le": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-ppc64le/-/esbuild-linux-ppc64le-0.14.54.tgz",
-          "integrity": "sha512-j3OMlzHiqwZBDPRCDFKcx595XVfOfOnv68Ax3U4UKZ3MTYQB5Yz3X1mn5GnodEVYzhtZgxEBidLWeIs8FDSfrQ==",
-          "optional": true
-        },
-        "esbuild-linux-riscv64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-riscv64/-/esbuild-linux-riscv64-0.14.54.tgz",
-          "integrity": "sha512-y7Vt7Wl9dkOGZjxQZnDAqqn+XOqFD7IMWiewY5SPlNlzMX39ocPQlOaoxvT4FllA5viyV26/QzHtvTjVNOxHZg==",
-          "optional": true
-        },
-        "esbuild-linux-s390x": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-s390x/-/esbuild-linux-s390x-0.14.54.tgz",
-          "integrity": "sha512-zaHpW9dziAsi7lRcyV4r8dhfG1qBidQWUXweUjnw+lliChJqQr+6XD71K41oEIC3Mx1KStovEmlzm+MkGZHnHA==",
-          "optional": true
-        },
-        "esbuild-netbsd-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-netbsd-64/-/esbuild-netbsd-64-0.14.54.tgz",
-          "integrity": "sha512-PR01lmIMnfJTgeU9VJTDY9ZerDWVFIUzAtJuDHwwceppW7cQWjBBqP48NdeRtoP04/AtO9a7w3viI+PIDr6d+w==",
-          "optional": true
-        },
-        "esbuild-openbsd-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-openbsd-64/-/esbuild-openbsd-64-0.14.54.tgz",
-          "integrity": "sha512-Qyk7ikT2o7Wu76UsvvDS5q0amJvmRzDyVlL0qf5VLsLchjCa1+IAvd8kTBgUxD7VBUUVgItLkk609ZHUc1oCaw==",
-          "optional": true
-        },
-        "esbuild-sunos-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-sunos-64/-/esbuild-sunos-64-0.14.54.tgz",
-          "integrity": "sha512-28GZ24KmMSeKi5ueWzMcco6EBHStL3B6ubM7M51RmPwXQGLe0teBGJocmWhgwccA1GeFXqxzILIxXpHbl9Q/Kw==",
-          "optional": true
-        },
-        "esbuild-windows-32": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-windows-32/-/esbuild-windows-32-0.14.54.tgz",
-          "integrity": "sha512-T+rdZW19ql9MjS7pixmZYVObd9G7kcaZo+sETqNH4RCkuuYSuv9AGHUVnPoP9hhuE1WM1ZimHz1CIBHBboLU7w==",
-          "optional": true
-        },
-        "esbuild-windows-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-windows-64/-/esbuild-windows-64-0.14.54.tgz",
-          "integrity": "sha512-AoHTRBUuYwXtZhjXZbA1pGfTo8cJo3vZIcWGLiUcTNgHpJJMC1rVA44ZereBHMJtotyN71S8Qw0npiCIkW96cQ==",
-          "optional": true
-        },
-        "esbuild-windows-arm64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-windows-arm64/-/esbuild-windows-arm64-0.14.54.tgz",
-          "integrity": "sha512-M0kuUvXhot1zOISQGXwWn6YtS+Y/1RT9WrVIOywZnJHo3jCDyewAc79aKNQWFCQm+xNHVTq9h8dZKvygoXQQRg==",
-          "optional": true
-        },
-        "react-refresh": {
-          "version": "0.14.0"
-        },
-        "vite": {
-          "version": "3.0.9",
-          "requires": {
-            "esbuild": "^0.14.47",
-            "fsevents": "~2.3.2",
-            "postcss": "^8.4.16",
-            "resolve": "^1.22.1",
-            "rollup": ">=2.75.6 <2.77.0 || ~2.77.0"
-          }
-        }
+      "requires": {
+        "@nodelib/fs.scandir": "2.1.5",
+        "fastq": "^1.6.0"
       }
     },
-    "@playwright/experimental-ct-solid": {
-      "version": "file:packages/playwright-ct-solid",
+    "@playwright/experimental-ct-react": {
+      "version": "file:packages/playwright-ct-react",
       "requires": {
-        "@playwright/test": "1.27.0-next",
-        "solid-js": "^1.4.7",
-        "vite": "^3.0.0",
-        "vite-plugin-solid": "^2.3.0"
-      },
-      "dependencies": {
-        "@esbuild/linux-loong64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.14.54.tgz",
-          "integrity": "sha512-bZBrLAIX1kpWelV0XemxBZllyRmM6vgFQQG2GdNb+r3Fkp0FOh1NJSvekXDs7jq70k4euu1cryLMfU+mTXlEpw==",
-          "optional": true
-        },
-        "esbuild": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.14.54.tgz",
-          "integrity": "sha512-Cy9llcy8DvET5uznocPyqL3BFRrFXSVqbgpMJ9Wz8oVjZlh/zUSNbPRbov0VX7VxN2JH1Oa0uNxZ7eLRb62pJA==",
-          "requires": {
-            "@esbuild/linux-loong64": "0.14.54",
-            "esbuild-android-64": "0.14.54",
-            "esbuild-android-arm64": "0.14.54",
-            "esbuild-darwin-64": "0.14.54",
-            "esbuild-darwin-arm64": "0.14.54",
-            "esbuild-freebsd-64": "0.14.54",
-            "esbuild-freebsd-arm64": "0.14.54",
-            "esbuild-linux-32": "0.14.54",
-            "esbuild-linux-64": "0.14.54",
-            "esbuild-linux-arm": "0.14.54",
-            "esbuild-linux-arm64": "0.14.54",
-            "esbuild-linux-mips64le": "0.14.54",
-            "esbuild-linux-ppc64le": "0.14.54",
-            "esbuild-linux-riscv64": "0.14.54",
-            "esbuild-linux-s390x": "0.14.54",
-            "esbuild-netbsd-64": "0.14.54",
-            "esbuild-openbsd-64": "0.14.54",
-            "esbuild-sunos-64": "0.14.54",
-            "esbuild-windows-32": "0.14.54",
-            "esbuild-windows-64": "0.14.54",
-            "esbuild-windows-arm64": "0.14.54"
-          }
-        },
-        "esbuild-android-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-android-64/-/esbuild-android-64-0.14.54.tgz",
-          "integrity": "sha512-Tz2++Aqqz0rJ7kYBfz+iqyE3QMycD4vk7LBRyWaAVFgFtQ/O8EJOnVmTOiDWYZ/uYzB4kvP+bqejYdVKzE5lAQ==",
-          "optional": true
-        },
-        "esbuild-android-arm64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-android-arm64/-/esbuild-android-arm64-0.14.54.tgz",
-          "integrity": "sha512-F9E+/QDi9sSkLaClO8SOV6etqPd+5DgJje1F9lOWoNncDdOBL2YF59IhsWATSt0TLZbYCf3pNlTHvVV5VfHdvg==",
-          "optional": true
-        },
-        "esbuild-darwin-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-darwin-64/-/esbuild-darwin-64-0.14.54.tgz",
-          "integrity": "sha512-jtdKWV3nBviOd5v4hOpkVmpxsBy90CGzebpbO9beiqUYVMBtSc0AL9zGftFuBon7PNDcdvNCEuQqw2x0wP9yug==",
-          "optional": true
-        },
-        "esbuild-darwin-arm64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-darwin-arm64/-/esbuild-darwin-arm64-0.14.54.tgz",
-          "integrity": "sha512-OPafJHD2oUPyvJMrsCvDGkRrVCar5aVyHfWGQzY1dWnzErjrDuSETxwA2HSsyg2jORLY8yBfzc1MIpUkXlctmw==",
-          "optional": true
-        },
-        "esbuild-freebsd-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-freebsd-64/-/esbuild-freebsd-64-0.14.54.tgz",
-          "integrity": "sha512-OKwd4gmwHqOTp4mOGZKe/XUlbDJ4Q9TjX0hMPIDBUWWu/kwhBAudJdBoxnjNf9ocIB6GN6CPowYpR/hRCbSYAg==",
-          "optional": true
-        },
-        "esbuild-freebsd-arm64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-freebsd-arm64/-/esbuild-freebsd-arm64-0.14.54.tgz",
-          "integrity": "sha512-sFwueGr7OvIFiQT6WeG0jRLjkjdqWWSrfbVwZp8iMP+8UHEHRBvlaxL6IuKNDwAozNUmbb8nIMXa7oAOARGs1Q==",
-          "optional": true
-        },
-        "esbuild-linux-32": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-32/-/esbuild-linux-32-0.14.54.tgz",
-          "integrity": "sha512-1ZuY+JDI//WmklKlBgJnglpUL1owm2OX+8E1syCD6UAxcMM/XoWd76OHSjl/0MR0LisSAXDqgjT3uJqT67O3qw==",
-          "optional": true
-        },
-        "esbuild-linux-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-64/-/esbuild-linux-64-0.14.54.tgz",
-          "integrity": "sha512-EgjAgH5HwTbtNsTqQOXWApBaPVdDn7XcK+/PtJwZLT1UmpLoznPd8c5CxqsH2dQK3j05YsB3L17T8vE7cp4cCg==",
-          "optional": true
-        },
-        "esbuild-linux-arm": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-arm/-/esbuild-linux-arm-0.14.54.tgz",
-          "integrity": "sha512-qqz/SjemQhVMTnvcLGoLOdFpCYbz4v4fUo+TfsWG+1aOu70/80RV6bgNpR2JCrppV2moUQkww+6bWxXRL9YMGw==",
-          "optional": true
-        },
-        "esbuild-linux-arm64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-arm64/-/esbuild-linux-arm64-0.14.54.tgz",
-          "integrity": "sha512-WL71L+0Rwv+Gv/HTmxTEmpv0UgmxYa5ftZILVi2QmZBgX3q7+tDeOQNqGtdXSdsL8TQi1vIaVFHUPDe0O0kdig==",
-          "optional": true
-        },
-        "esbuild-linux-mips64le": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-mips64le/-/esbuild-linux-mips64le-0.14.54.tgz",
-          "integrity": "sha512-qTHGQB8D1etd0u1+sB6p0ikLKRVuCWhYQhAHRPkO+OF3I/iSlTKNNS0Lh2Oc0g0UFGguaFZZiPJdJey3AGpAlw==",
-          "optional": true
-        },
-        "esbuild-linux-ppc64le": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-ppc64le/-/esbuild-linux-ppc64le-0.14.54.tgz",
-          "integrity": "sha512-j3OMlzHiqwZBDPRCDFKcx595XVfOfOnv68Ax3U4UKZ3MTYQB5Yz3X1mn5GnodEVYzhtZgxEBidLWeIs8FDSfrQ==",
-          "optional": true
-        },
-        "esbuild-linux-riscv64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-riscv64/-/esbuild-linux-riscv64-0.14.54.tgz",
-          "integrity": "sha512-y7Vt7Wl9dkOGZjxQZnDAqqn+XOqFD7IMWiewY5SPlNlzMX39ocPQlOaoxvT4FllA5viyV26/QzHtvTjVNOxHZg==",
-          "optional": true
-        },
-        "esbuild-linux-s390x": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-s390x/-/esbuild-linux-s390x-0.14.54.tgz",
-          "integrity": "sha512-zaHpW9dziAsi7lRcyV4r8dhfG1qBidQWUXweUjnw+lliChJqQr+6XD71K41oEIC3Mx1KStovEmlzm+MkGZHnHA==",
-          "optional": true
-        },
-        "esbuild-netbsd-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-netbsd-64/-/esbuild-netbsd-64-0.14.54.tgz",
-          "integrity": "sha512-PR01lmIMnfJTgeU9VJTDY9ZerDWVFIUzAtJuDHwwceppW7cQWjBBqP48NdeRtoP04/AtO9a7w3viI+PIDr6d+w==",
-          "optional": true
-        },
-        "esbuild-openbsd-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-openbsd-64/-/esbuild-openbsd-64-0.14.54.tgz",
-          "integrity": "sha512-Qyk7ikT2o7Wu76UsvvDS5q0amJvmRzDyVlL0qf5VLsLchjCa1+IAvd8kTBgUxD7VBUUVgItLkk609ZHUc1oCaw==",
-          "optional": true
-        },
-        "esbuild-sunos-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-sunos-64/-/esbuild-sunos-64-0.14.54.tgz",
-          "integrity": "sha512-28GZ24KmMSeKi5ueWzMcco6EBHStL3B6ubM7M51RmPwXQGLe0teBGJocmWhgwccA1GeFXqxzILIxXpHbl9Q/Kw==",
-          "optional": true
-        },
-        "esbuild-windows-32": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-windows-32/-/esbuild-windows-32-0.14.54.tgz",
-          "integrity": "sha512-T+rdZW19ql9MjS7pixmZYVObd9G7kcaZo+sETqNH4RCkuuYSuv9AGHUVnPoP9hhuE1WM1ZimHz1CIBHBboLU7w==",
-          "optional": true
-        },
-        "esbuild-windows-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-windows-64/-/esbuild-windows-64-0.14.54.tgz",
-          "integrity": "sha512-AoHTRBUuYwXtZhjXZbA1pGfTo8cJo3vZIcWGLiUcTNgHpJJMC1rVA44ZereBHMJtotyN71S8Qw0npiCIkW96cQ==",
-          "optional": true
-        },
-        "esbuild-windows-arm64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-windows-arm64/-/esbuild-windows-arm64-0.14.54.tgz",
-          "integrity": "sha512-M0kuUvXhot1zOISQGXwWn6YtS+Y/1RT9WrVIOywZnJHo3jCDyewAc79aKNQWFCQm+xNHVTq9h8dZKvygoXQQRg==",
-          "optional": true
-        },
-        "vite": {
-          "version": "3.0.9",
-          "requires": {
-            "esbuild": "^0.14.47",
-            "fsevents": "~2.3.2",
-            "postcss": "^8.4.16",
-            "resolve": "^1.22.1",
-            "rollup": ">=2.75.6 <2.77.0 || ~2.77.0"
-          }
-        },
-        "vite-plugin-solid": {
-          "version": "2.3.0",
-          "requires": {
-            "@babel/core": "^7.18.6",
-            "@babel/preset-typescript": "^7.18.6",
-            "babel-preset-solid": "^1.4.6",
-            "merge-anything": "^5.0.2",
-            "solid-refresh": "^0.4.1"
-          }
-        }
+        "@playwright/test": "1.25.2",
+        "@vitejs/plugin-react": "^1.0.7",
+        "vite": "^2.9.5"
       }
     },
     "@playwright/experimental-ct-svelte": {
       "version": "file:packages/playwright-ct-svelte",
       "requires": {
-        "@playwright/test": "1.27.0-next",
+        "@playwright/test": "1.25.2",
         "@sveltejs/vite-plugin-svelte": "^1.0.1",
         "svelte": "^3.49.0",
         "vite": "^3.0.0"
       },
       "dependencies": {
-        "@esbuild/linux-loong64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.14.54.tgz",
-          "integrity": "sha512-bZBrLAIX1kpWelV0XemxBZllyRmM6vgFQQG2GdNb+r3Fkp0FOh1NJSvekXDs7jq70k4euu1cryLMfU+mTXlEpw==",
-          "optional": true
-        },
         "@sveltejs/vite-plugin-svelte": {
           "version": "1.0.1",
+          "resolved": "https://registry.npmjs.org/@sveltejs/vite-plugin-svelte/-/vite-plugin-svelte-1.0.1.tgz",
+          "integrity": "sha512-PorCgUounn0VXcpeJu+hOweZODKmGuLHsLomwqSj+p26IwjjGffmYQfVHtiTWq+NqaUuuHWWG7vPge6UFw4Aeg==",
           "requires": {
             "@rollup/pluginutils": "^4.2.1",
             "debug": "^4.3.4",
@@ -8932,156 +7505,10 @@
             "svelte-hmr": "^0.14.12"
           }
         },
-        "esbuild": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.14.54.tgz",
-          "integrity": "sha512-Cy9llcy8DvET5uznocPyqL3BFRrFXSVqbgpMJ9Wz8oVjZlh/zUSNbPRbov0VX7VxN2JH1Oa0uNxZ7eLRb62pJA==",
-          "requires": {
-            "@esbuild/linux-loong64": "0.14.54",
-            "esbuild-android-64": "0.14.54",
-            "esbuild-android-arm64": "0.14.54",
-            "esbuild-darwin-64": "0.14.54",
-            "esbuild-darwin-arm64": "0.14.54",
-            "esbuild-freebsd-64": "0.14.54",
-            "esbuild-freebsd-arm64": "0.14.54",
-            "esbuild-linux-32": "0.14.54",
-            "esbuild-linux-64": "0.14.54",
-            "esbuild-linux-arm": "0.14.54",
-            "esbuild-linux-arm64": "0.14.54",
-            "esbuild-linux-mips64le": "0.14.54",
-            "esbuild-linux-ppc64le": "0.14.54",
-            "esbuild-linux-riscv64": "0.14.54",
-            "esbuild-linux-s390x": "0.14.54",
-            "esbuild-netbsd-64": "0.14.54",
-            "esbuild-openbsd-64": "0.14.54",
-            "esbuild-sunos-64": "0.14.54",
-            "esbuild-windows-32": "0.14.54",
-            "esbuild-windows-64": "0.14.54",
-            "esbuild-windows-arm64": "0.14.54"
-          }
-        },
-        "esbuild-android-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-android-64/-/esbuild-android-64-0.14.54.tgz",
-          "integrity": "sha512-Tz2++Aqqz0rJ7kYBfz+iqyE3QMycD4vk7LBRyWaAVFgFtQ/O8EJOnVmTOiDWYZ/uYzB4kvP+bqejYdVKzE5lAQ==",
-          "optional": true
-        },
-        "esbuild-android-arm64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-android-arm64/-/esbuild-android-arm64-0.14.54.tgz",
-          "integrity": "sha512-F9E+/QDi9sSkLaClO8SOV6etqPd+5DgJje1F9lOWoNncDdOBL2YF59IhsWATSt0TLZbYCf3pNlTHvVV5VfHdvg==",
-          "optional": true
-        },
-        "esbuild-darwin-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-darwin-64/-/esbuild-darwin-64-0.14.54.tgz",
-          "integrity": "sha512-jtdKWV3nBviOd5v4hOpkVmpxsBy90CGzebpbO9beiqUYVMBtSc0AL9zGftFuBon7PNDcdvNCEuQqw2x0wP9yug==",
-          "optional": true
-        },
-        "esbuild-darwin-arm64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-darwin-arm64/-/esbuild-darwin-arm64-0.14.54.tgz",
-          "integrity": "sha512-OPafJHD2oUPyvJMrsCvDGkRrVCar5aVyHfWGQzY1dWnzErjrDuSETxwA2HSsyg2jORLY8yBfzc1MIpUkXlctmw==",
-          "optional": true
-        },
-        "esbuild-freebsd-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-freebsd-64/-/esbuild-freebsd-64-0.14.54.tgz",
-          "integrity": "sha512-OKwd4gmwHqOTp4mOGZKe/XUlbDJ4Q9TjX0hMPIDBUWWu/kwhBAudJdBoxnjNf9ocIB6GN6CPowYpR/hRCbSYAg==",
-          "optional": true
-        },
-        "esbuild-freebsd-arm64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-freebsd-arm64/-/esbuild-freebsd-arm64-0.14.54.tgz",
-          "integrity": "sha512-sFwueGr7OvIFiQT6WeG0jRLjkjdqWWSrfbVwZp8iMP+8UHEHRBvlaxL6IuKNDwAozNUmbb8nIMXa7oAOARGs1Q==",
-          "optional": true
-        },
-        "esbuild-linux-32": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-32/-/esbuild-linux-32-0.14.54.tgz",
-          "integrity": "sha512-1ZuY+JDI//WmklKlBgJnglpUL1owm2OX+8E1syCD6UAxcMM/XoWd76OHSjl/0MR0LisSAXDqgjT3uJqT67O3qw==",
-          "optional": true
-        },
-        "esbuild-linux-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-64/-/esbuild-linux-64-0.14.54.tgz",
-          "integrity": "sha512-EgjAgH5HwTbtNsTqQOXWApBaPVdDn7XcK+/PtJwZLT1UmpLoznPd8c5CxqsH2dQK3j05YsB3L17T8vE7cp4cCg==",
-          "optional": true
-        },
-        "esbuild-linux-arm": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-arm/-/esbuild-linux-arm-0.14.54.tgz",
-          "integrity": "sha512-qqz/SjemQhVMTnvcLGoLOdFpCYbz4v4fUo+TfsWG+1aOu70/80RV6bgNpR2JCrppV2moUQkww+6bWxXRL9YMGw==",
-          "optional": true
-        },
-        "esbuild-linux-arm64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-arm64/-/esbuild-linux-arm64-0.14.54.tgz",
-          "integrity": "sha512-WL71L+0Rwv+Gv/HTmxTEmpv0UgmxYa5ftZILVi2QmZBgX3q7+tDeOQNqGtdXSdsL8TQi1vIaVFHUPDe0O0kdig==",
-          "optional": true
-        },
-        "esbuild-linux-mips64le": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-mips64le/-/esbuild-linux-mips64le-0.14.54.tgz",
-          "integrity": "sha512-qTHGQB8D1etd0u1+sB6p0ikLKRVuCWhYQhAHRPkO+OF3I/iSlTKNNS0Lh2Oc0g0UFGguaFZZiPJdJey3AGpAlw==",
-          "optional": true
-        },
-        "esbuild-linux-ppc64le": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-ppc64le/-/esbuild-linux-ppc64le-0.14.54.tgz",
-          "integrity": "sha512-j3OMlzHiqwZBDPRCDFKcx595XVfOfOnv68Ax3U4UKZ3MTYQB5Yz3X1mn5GnodEVYzhtZgxEBidLWeIs8FDSfrQ==",
-          "optional": true
-        },
-        "esbuild-linux-riscv64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-riscv64/-/esbuild-linux-riscv64-0.14.54.tgz",
-          "integrity": "sha512-y7Vt7Wl9dkOGZjxQZnDAqqn+XOqFD7IMWiewY5SPlNlzMX39ocPQlOaoxvT4FllA5viyV26/QzHtvTjVNOxHZg==",
-          "optional": true
-        },
-        "esbuild-linux-s390x": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-s390x/-/esbuild-linux-s390x-0.14.54.tgz",
-          "integrity": "sha512-zaHpW9dziAsi7lRcyV4r8dhfG1qBidQWUXweUjnw+lliChJqQr+6XD71K41oEIC3Mx1KStovEmlzm+MkGZHnHA==",
-          "optional": true
-        },
-        "esbuild-netbsd-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-netbsd-64/-/esbuild-netbsd-64-0.14.54.tgz",
-          "integrity": "sha512-PR01lmIMnfJTgeU9VJTDY9ZerDWVFIUzAtJuDHwwceppW7cQWjBBqP48NdeRtoP04/AtO9a7w3viI+PIDr6d+w==",
-          "optional": true
-        },
-        "esbuild-openbsd-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-openbsd-64/-/esbuild-openbsd-64-0.14.54.tgz",
-          "integrity": "sha512-Qyk7ikT2o7Wu76UsvvDS5q0amJvmRzDyVlL0qf5VLsLchjCa1+IAvd8kTBgUxD7VBUUVgItLkk609ZHUc1oCaw==",
-          "optional": true
-        },
-        "esbuild-sunos-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-sunos-64/-/esbuild-sunos-64-0.14.54.tgz",
-          "integrity": "sha512-28GZ24KmMSeKi5ueWzMcco6EBHStL3B6ubM7M51RmPwXQGLe0teBGJocmWhgwccA1GeFXqxzILIxXpHbl9Q/Kw==",
-          "optional": true
-        },
-        "esbuild-windows-32": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-windows-32/-/esbuild-windows-32-0.14.54.tgz",
-          "integrity": "sha512-T+rdZW19ql9MjS7pixmZYVObd9G7kcaZo+sETqNH4RCkuuYSuv9AGHUVnPoP9hhuE1WM1ZimHz1CIBHBboLU7w==",
-          "optional": true
-        },
-        "esbuild-windows-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-windows-64/-/esbuild-windows-64-0.14.54.tgz",
-          "integrity": "sha512-AoHTRBUuYwXtZhjXZbA1pGfTo8cJo3vZIcWGLiUcTNgHpJJMC1rVA44ZereBHMJtotyN71S8Qw0npiCIkW96cQ==",
-          "optional": true
-        },
-        "esbuild-windows-arm64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-windows-arm64/-/esbuild-windows-arm64-0.14.54.tgz",
-          "integrity": "sha512-M0kuUvXhot1zOISQGXwWn6YtS+Y/1RT9WrVIOywZnJHo3jCDyewAc79aKNQWFCQm+xNHVTq9h8dZKvygoXQQRg==",
-          "optional": true
-        },
         "vite": {
           "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/vite/-/vite-3.0.0.tgz",
+          "integrity": "sha512-M7phQhY3+fRZa0H+1WzI6N+/onruwPTBTMvaj7TzgZ0v2TE+N2sdLKxJOfOv9CckDWt5C4HmyQP81xB4dwRKzA==",
           "requires": {
             "esbuild": "^0.14.47",
             "fsevents": "~2.3.2",
@@ -9095,17 +7522,21 @@
     "@playwright/experimental-ct-vue": {
       "version": "file:packages/playwright-ct-vue",
       "requires": {
-        "@playwright/test": "1.27.0-next",
+        "@playwright/test": "1.25.2",
         "@vitejs/plugin-vue": "^2.3.1",
         "vite": "^2.9.5"
       },
       "dependencies": {
         "@vitejs/plugin-vue": {
           "version": "2.3.3",
+          "resolved": "https://registry.npmjs.org/@vitejs/plugin-vue/-/plugin-vue-2.3.3.tgz",
+          "integrity": "sha512-SmQLDyhz+6lGJhPELsBdzXGc+AcaT8stgkbiTFGpXPe8Tl1tJaBw1A6pxDqDuRsVkD8uscrkx3hA7QDOoKYtyw==",
           "requires": {}
         },
         "@vue/server-renderer": {
           "version": "3.2.36",
+          "resolved": "https://registry.npmjs.org/@vue/server-renderer/-/server-renderer-3.2.36.tgz",
+          "integrity": "sha512-uZE0+jfye6yYXWvAQYeHZv+f50sRryvy16uiqzk3jn8hEY8zTjI+rzlmZSGoE915k+W/Ol9XSw6vxOUD8dGkUg==",
           "peer": true,
           "requires": {
             "@vue/compiler-ssr": "3.2.36",
@@ -9114,6 +7545,8 @@
         },
         "vue": {
           "version": "3.2.36",
+          "resolved": "https://registry.npmjs.org/vue/-/vue-3.2.36.tgz",
+          "integrity": "sha512-5yTXmrE6gW8IQgttzHW5bfBiFA6mx35ZXHjGLDmKYzW6MMmYvCwuKybANRepwkMYeXw2v1buGg3/lPICY5YlZw==",
           "peer": true,
           "requires": {
             "@vue/compiler-dom": "3.2.36",
@@ -9128,7 +7561,7 @@
     "@playwright/experimental-ct-vue2": {
       "version": "file:packages/playwright-ct-vue2",
       "requires": {
-        "@playwright/test": "1.27.0-next",
+        "@playwright/test": "1.25.2",
         "vite": "^2.9.5",
         "vite-plugin-vue2": "^2.0.1",
         "vue": "^2.6.14"
@@ -9138,11 +7571,13 @@
       "version": "file:packages/playwright-test",
       "requires": {
         "@types/node": "*",
-        "playwright-core": "1.27.0-next"
+        "playwright-core": "1.25.2"
       }
     },
     "@rollup/pluginutils": {
       "version": "4.2.1",
+      "resolved": "https://registry.npmjs.org/@rollup/pluginutils/-/pluginutils-4.2.1.tgz",
+      "integrity": "sha512-iKnFXr7NkdZAIHiIWE+BX5ULi/ucVFYWD6TbAV+rZctiRTY2PL6tsIKhoIOaoskiWAkgu+VsbXgUVDNLHf+InQ==",
       "requires": {
         "estree-walker": "^2.0.1",
         "picomatch": "^2.2.2"
@@ -9150,10 +7585,14 @@
     },
     "@sindresorhus/is": {
       "version": "0.14.0",
+      "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-0.14.0.tgz",
+      "integrity": "sha512-9NET910DNaIPngYnLLPeg+Ogzqsi9uM4mSboU5y6p8S5DzMTVEsJZrawi+BoDNUVBa2DhJqQYUFvMDfgU062LQ==",
       "dev": true
     },
     "@szmarczak/http-timer": {
       "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/@szmarczak/http-timer/-/http-timer-1.1.2.tgz",
+      "integrity": "sha512-XIB2XbzHTN6ieIjfIMV9hlVcfPU26s2vafYWQcZHWXHOxiaRZYEDKEwdl129Zyg50+foYV2jCgtrqSA6qNuNSA==",
       "dev": true,
       "requires": {
         "defer-to-connect": "^1.0.1"
@@ -9161,6 +7600,8 @@
     },
     "@types/formidable": {
       "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/@types/formidable/-/formidable-2.0.4.tgz",
+      "integrity": "sha512-6HYcnmBCeby/nNGgX9kq1DxUpK2UcB3yoHCr3GzFjjqkpivOdcBSbsXP9NbxLcPEi11Fl/L41rbFCIsteF9sbg==",
       "dev": true,
       "requires": {
         "@types/node": "*"
@@ -9168,21 +7609,31 @@
     },
     "@types/json-schema": {
       "version": "7.0.9",
+      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.9.tgz",
+      "integrity": "sha512-qcUXuemtEu+E5wZSJHNxUXeCZhAfXKQ41D+duX+VYPde7xyEVZci+/oXKJL13tnRs9lR2pr4fod59GT6/X1/yQ==",
       "dev": true
     },
     "@types/node": {
-      "version": "14.18.24"
+      "version": "14.17.15",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-14.17.15.tgz",
+      "integrity": "sha512-D1sdW0EcSCmNdLKBGMYb38YsHUS6JcM7yQ6sLQ9KuZ35ck7LYCKE7kYFHOO59ayFOY3zobWVZxf4KXhYHcHYFA=="
     },
     "@types/normalize-package-data": {
       "version": "2.4.1",
+      "resolved": "https://registry.npmjs.org/@types/normalize-package-data/-/normalize-package-data-2.4.1.tgz",
+      "integrity": "sha512-Gj7cI7z+98M282Tqmp2K5EIsoouUEzbBJhQQzDE3jSIRk6r9gsz0oUokqIUR4u1R3dMHo0pDHM7sNOHyhulypw==",
       "dev": true
     },
     "@types/prop-types": {
       "version": "15.7.3",
+      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.3.tgz",
+      "integrity": "sha512-KfRL3PuHmqQLOG+2tGpRO26Ctg+Cq1E01D2DMriKEATHgWLfeNDmq9e29Q9WIky0dQ3NPkd1mzYH8Lm936Z9qw==",
       "dev": true
     },
     "@types/react": {
       "version": "18.0.12",
+      "resolved": "https://registry.npmjs.org/@types/react/-/react-18.0.12.tgz",
+      "integrity": "sha512-duF1OTASSBQtcigUvhuiTB1Ya3OvSy+xORCiEf20H0P0lzx+/KeVsA99U5UjLXSbyo1DRJDlLKqTeM1ngosqtg==",
       "dev": true,
       "requires": {
         "@types/prop-types": "*",
@@ -9192,6 +7643,8 @@
     },
     "@types/react-dom": {
       "version": "18.0.5",
+      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-18.0.5.tgz",
+      "integrity": "sha512-OWPWTUrY/NIrjsAPkAk1wW9LZeIjSvkXRhclsFO8CZcZGCOg2G0YZy4ft+rOyYxy8B7ui5iZzi9OkDebZ7/QSA==",
       "dev": true,
       "requires": {
         "@types/react": "*"
@@ -9199,14 +7652,20 @@
     },
     "@types/resize-observer-browser": {
       "version": "0.1.7",
+      "resolved": "https://registry.npmjs.org/@types/resize-observer-browser/-/resize-observer-browser-0.1.7.tgz",
+      "integrity": "sha512-G9eN0Sn0ii9PWQ3Vl72jDPgeJwRWhv2Qk/nQkJuWmRmOB4HX3/BhD5SE1dZs/hzPZL/WKnvF0RHdTSG54QJFyg==",
       "dev": true
     },
     "@types/scheduler": {
       "version": "0.16.1",
+      "resolved": "https://registry.npmjs.org/@types/scheduler/-/scheduler-0.16.1.tgz",
+      "integrity": "sha512-EaCxbanVeyxDRTQBkdLb3Bvl/HK7PBK6UJjsSixB0iHKoWxE5uu2Q/DgtpOhPIojN0Zl1whvOd7PoHs2P0s5eA==",
       "dev": true
     },
     "@types/xml2js": {
       "version": "0.4.9",
+      "resolved": "https://registry.npmjs.org/@types/xml2js/-/xml2js-0.4.9.tgz",
+      "integrity": "sha512-CHiCKIihl1pychwR2RNX5mAYmJDACgFVCMT5OArMaO3erzwXVcBqPcusr+Vl8yeeXukxZqtF8mZioqX+mpjjdw==",
       "dev": true,
       "requires": {
         "@types/node": "*"
@@ -9214,6 +7673,8 @@
     },
     "@typescript-eslint/eslint-plugin": {
       "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-5.10.2.tgz",
+      "integrity": "sha512-4W/9lLuE+v27O/oe7hXJKjNtBLnZE8tQAFpapdxwSVHqtmIoPB1gph3+ahNwVuNL37BX7YQHyGF9Xv6XCnIX2Q==",
       "dev": true,
       "requires": {
         "@typescript-eslint/scope-manager": "5.10.2",
@@ -9229,6 +7690,8 @@
       "dependencies": {
         "semver": {
           "version": "7.3.5",
+          "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.5.tgz",
+          "integrity": "sha512-PoeGJYh8HK4BTO/a9Tf6ZG3veo/A7ZVsYrSA6J8ny9nb3B1VrpkuN+z9OE5wfE5p6H4LchYZsegiQgbJD94ZFQ==",
           "dev": true,
           "requires": {
             "lru-cache": "^6.0.0"
@@ -9236,6 +7699,8 @@
         },
         "tsutils": {
           "version": "3.21.0",
+          "resolved": "https://registry.npmjs.org/tsutils/-/tsutils-3.21.0.tgz",
+          "integrity": "sha512-mHKK3iUXL+3UF6xL5k0PEhKRUBKPBCv/+RkEOpjRWxxx27KKRBmmA60A9pgOUvMi8GKhRMPEmjBRPzs2W7O1OA==",
           "dev": true,
           "requires": {
             "tslib": "^1.8.1"
@@ -9245,6 +7710,8 @@
     },
     "@typescript-eslint/parser": {
       "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-5.10.2.tgz",
+      "integrity": "sha512-JaNYGkaQVhP6HNF+lkdOr2cAs2wdSZBoalE22uYWq8IEv/OVH0RksSGydk+sW8cLoSeYmC+OHvRyv2i4AQ7Czg==",
       "dev": true,
       "requires": {
         "@typescript-eslint/scope-manager": "5.10.2",
@@ -9255,6 +7722,8 @@
     },
     "@typescript-eslint/scope-manager": {
       "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-5.10.2.tgz",
+      "integrity": "sha512-39Tm6f4RoZoVUWBYr3ekS75TYgpr5Y+X0xLZxXqcZNDWZdJdYbKd3q2IR4V9y5NxxiPu/jxJ8XP7EgHiEQtFnw==",
       "dev": true,
       "requires": {
         "@typescript-eslint/types": "5.10.2",
@@ -9263,6 +7732,8 @@
     },
     "@typescript-eslint/type-utils": {
       "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-5.10.2.tgz",
+      "integrity": "sha512-uRKSvw/Ccs5FYEoXW04Z5VfzF2iiZcx8Fu7DGIB7RHozuP0VbKNzP1KfZkHBTM75pCpsWxIthEH1B33dmGBKHw==",
       "dev": true,
       "requires": {
         "@typescript-eslint/utils": "5.10.2",
@@ -9272,6 +7743,8 @@
       "dependencies": {
         "tsutils": {
           "version": "3.21.0",
+          "resolved": "https://registry.npmjs.org/tsutils/-/tsutils-3.21.0.tgz",
+          "integrity": "sha512-mHKK3iUXL+3UF6xL5k0PEhKRUBKPBCv/+RkEOpjRWxxx27KKRBmmA60A9pgOUvMi8GKhRMPEmjBRPzs2W7O1OA==",
           "dev": true,
           "requires": {
             "tslib": "^1.8.1"
@@ -9281,10 +7754,14 @@
     },
     "@typescript-eslint/types": {
       "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-5.10.2.tgz",
+      "integrity": "sha512-Qfp0qk/5j2Rz3p3/WhWgu4S1JtMcPgFLnmAKAW061uXxKSa7VWKZsDXVaMXh2N60CX9h6YLaBoy9PJAfCOjk3w==",
       "dev": true
     },
     "@typescript-eslint/typescript-estree": {
       "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-5.10.2.tgz",
+      "integrity": "sha512-WHHw6a9vvZls6JkTgGljwCsMkv8wu8XU8WaYKeYhxhWXH/atZeiMW6uDFPLZOvzNOGmuSMvHtZKd6AuC8PrwKQ==",
       "dev": true,
       "requires": {
         "@typescript-eslint/types": "5.10.2",
@@ -9298,6 +7775,8 @@
       "dependencies": {
         "semver": {
           "version": "7.3.5",
+          "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.5.tgz",
+          "integrity": "sha512-PoeGJYh8HK4BTO/a9Tf6ZG3veo/A7ZVsYrSA6J8ny9nb3B1VrpkuN+z9OE5wfE5p6H4LchYZsegiQgbJD94ZFQ==",
           "dev": true,
           "requires": {
             "lru-cache": "^6.0.0"
@@ -9305,6 +7784,8 @@
         },
         "tsutils": {
           "version": "3.21.0",
+          "resolved": "https://registry.npmjs.org/tsutils/-/tsutils-3.21.0.tgz",
+          "integrity": "sha512-mHKK3iUXL+3UF6xL5k0PEhKRUBKPBCv/+RkEOpjRWxxx27KKRBmmA60A9pgOUvMi8GKhRMPEmjBRPzs2W7O1OA==",
           "dev": true,
           "requires": {
             "tslib": "^1.8.1"
@@ -9314,6 +7795,8 @@
     },
     "@typescript-eslint/utils": {
       "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-5.10.2.tgz",
+      "integrity": "sha512-vuJaBeig1NnBRkf7q9tgMLREiYD7zsMrsN1DA3wcoMDvr3BTFiIpKjGiYZoKPllfEwN7spUjv7ZqD+JhbVjEPg==",
       "dev": true,
       "requires": {
         "@types/json-schema": "^7.0.9",
@@ -9326,6 +7809,8 @@
     },
     "@typescript-eslint/visitor-keys": {
       "version": "5.10.2",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-5.10.2.tgz",
+      "integrity": "sha512-zHIhYGGGrFJvvyfwHk5M08C5B5K4bewkm+rrvNTKk1/S15YHR+SA/QUF8ZWscXSfEaB8Nn2puZj+iHcoxVOD/Q==",
       "dev": true,
       "requires": {
         "@typescript-eslint/types": "5.10.2",
@@ -9334,7 +7819,8 @@
     },
     "@vitejs/plugin-react": {
       "version": "1.3.2",
-      "dev": true,
+      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-1.3.2.tgz",
+      "integrity": "sha512-aurBNmMo0kz1O4qRoY+FM4epSA39y3ShWGuqfLRA/3z0oEJAdtoSfgA3aO98/PCCHAqMaduLxIxErWrVKIFzXA==",
       "requires": {
         "@babel/core": "^7.17.10",
         "@babel/plugin-transform-react-jsx": "^7.17.3",
@@ -9348,7 +7834,8 @@
       "dependencies": {
         "@babel/core": {
           "version": "7.18.2",
-          "dev": true,
+          "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.18.2.tgz",
+          "integrity": "sha512-A8pri1YJiC5UnkdrWcmfZTJTV85b4UXTAfImGmCfYmax4TR9Cw8sDS0MOk++Gp2mE/BefVJ5nwy5yzqNJbP/DQ==",
           "requires": {
             "@ampproject/remapping": "^2.1.0",
             "@babel/code-frame": "^7.16.7",
@@ -9370,10 +7857,14 @@
       }
     },
     "@vue/babel-helper-vue-jsx-merge-props": {
-      "version": "1.2.1"
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/@vue/babel-helper-vue-jsx-merge-props/-/babel-helper-vue-jsx-merge-props-1.2.1.tgz",
+      "integrity": "sha512-QOi5OW45e2R20VygMSNhyQHvpdUwQZqGPc748JLGCYEy+yp8fNFNdbNIGAgZmi9e+2JHPd6i6idRuqivyicIkA=="
     },
     "@vue/babel-plugin-transform-vue-jsx": {
       "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/@vue/babel-plugin-transform-vue-jsx/-/babel-plugin-transform-vue-jsx-1.2.1.tgz",
+      "integrity": "sha512-HJuqwACYehQwh1fNT8f4kyzqlNMpBuUK4rSiSES5D4QsYncv5fxFsLyrxFPG2ksO7t5WP+Vgix6tt6yKClwPzA==",
       "requires": {
         "@babel/helper-module-imports": "^7.0.0",
         "@babel/plugin-syntax-jsx": "^7.2.0",
@@ -9385,6 +7876,8 @@
     },
     "@vue/babel-preset-jsx": {
       "version": "1.2.4",
+      "resolved": "https://registry.npmjs.org/@vue/babel-preset-jsx/-/babel-preset-jsx-1.2.4.tgz",
+      "integrity": "sha512-oRVnmN2a77bYDJzeGSt92AuHXbkIxbf/XXSE3klINnh9AXBmVS1DGa1f0d+dDYpLfsAKElMnqKTQfKn7obcL4w==",
       "requires": {
         "@vue/babel-helper-vue-jsx-merge-props": "^1.2.1",
         "@vue/babel-plugin-transform-vue-jsx": "^1.2.1",
@@ -9398,30 +7891,40 @@
     },
     "@vue/babel-sugar-composition-api-inject-h": {
       "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/@vue/babel-sugar-composition-api-inject-h/-/babel-sugar-composition-api-inject-h-1.2.1.tgz",
+      "integrity": "sha512-4B3L5Z2G+7s+9Bwbf+zPIifkFNcKth7fQwekVbnOA3cr3Pq71q71goWr97sk4/yyzH8phfe5ODVzEjX7HU7ItQ==",
       "requires": {
         "@babel/plugin-syntax-jsx": "^7.2.0"
       }
     },
     "@vue/babel-sugar-composition-api-render-instance": {
       "version": "1.2.4",
+      "resolved": "https://registry.npmjs.org/@vue/babel-sugar-composition-api-render-instance/-/babel-sugar-composition-api-render-instance-1.2.4.tgz",
+      "integrity": "sha512-joha4PZznQMsxQYXtR3MnTgCASC9u3zt9KfBxIeuI5g2gscpTsSKRDzWQt4aqNIpx6cv8On7/m6zmmovlNsG7Q==",
       "requires": {
         "@babel/plugin-syntax-jsx": "^7.2.0"
       }
     },
     "@vue/babel-sugar-functional-vue": {
       "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/@vue/babel-sugar-functional-vue/-/babel-sugar-functional-vue-1.2.2.tgz",
+      "integrity": "sha512-JvbgGn1bjCLByIAU1VOoepHQ1vFsroSA/QkzdiSs657V79q6OwEWLCQtQnEXD/rLTA8rRit4rMOhFpbjRFm82w==",
       "requires": {
         "@babel/plugin-syntax-jsx": "^7.2.0"
       }
     },
     "@vue/babel-sugar-inject-h": {
       "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/@vue/babel-sugar-inject-h/-/babel-sugar-inject-h-1.2.2.tgz",
+      "integrity": "sha512-y8vTo00oRkzQTgufeotjCLPAvlhnpSkcHFEp60+LJUwygGcd5Chrpn5480AQp/thrxVm8m2ifAk0LyFel9oCnw==",
       "requires": {
         "@babel/plugin-syntax-jsx": "^7.2.0"
       }
     },
     "@vue/babel-sugar-v-model": {
       "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/@vue/babel-sugar-v-model/-/babel-sugar-v-model-1.2.3.tgz",
+      "integrity": "sha512-A2jxx87mySr/ulAsSSyYE8un6SIH0NWHiLaCWpodPCVOlQVODCaSpiR4+IMsmBr73haG+oeCuSvMOM+ttWUqRQ==",
       "requires": {
         "@babel/plugin-syntax-jsx": "^7.2.0",
         "@vue/babel-helper-vue-jsx-merge-props": "^1.2.1",
@@ -9433,6 +7936,8 @@
     },
     "@vue/babel-sugar-v-on": {
       "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/@vue/babel-sugar-v-on/-/babel-sugar-v-on-1.2.3.tgz",
+      "integrity": "sha512-kt12VJdz/37D3N3eglBywV8GStKNUhNrsxChXIV+o0MwVXORYuhDTHJRKPgLJRb/EY3vM2aRFQdxJBp9CLikjw==",
       "requires": {
         "@babel/plugin-syntax-jsx": "^7.2.0",
         "@vue/babel-plugin-transform-vue-jsx": "^1.2.1",
@@ -9441,6 +7946,8 @@
     },
     "@vue/compiler-core": {
       "version": "3.2.36",
+      "resolved": "https://registry.npmjs.org/@vue/compiler-core/-/compiler-core-3.2.36.tgz",
+      "integrity": "sha512-bbyZM5hvBicv0PW3KUfVi+x3ylHnfKG7DOn5wM+f2OztTzTjLEyBb/5yrarIYpmnGitVGbjZqDbODyW4iK8hqw==",
       "peer": true,
       "requires": {
         "@babel/parser": "^7.16.4",
@@ -9451,12 +7958,16 @@
       "dependencies": {
         "source-map": {
           "version": "0.6.1",
+          "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
+          "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
           "peer": true
         }
       }
     },
     "@vue/compiler-dom": {
       "version": "3.2.36",
+      "resolved": "https://registry.npmjs.org/@vue/compiler-dom/-/compiler-dom-3.2.36.tgz",
+      "integrity": "sha512-tcOTAOiW4s24QLnq+ON6J+GRONXJ+A/mqKCORi0LSlIh8XQlNnlm24y8xIL8la+ZDgkdbjarQ9ZqYSvEja6gVA==",
       "peer": true,
       "requires": {
         "@vue/compiler-core": "3.2.36",
@@ -9465,6 +7976,8 @@
     },
     "@vue/compiler-sfc": {
       "version": "3.2.36",
+      "resolved": "https://registry.npmjs.org/@vue/compiler-sfc/-/compiler-sfc-3.2.36.tgz",
+      "integrity": "sha512-AvGb4bTj4W8uQ4BqaSxo7UwTEqX5utdRSMyHy58OragWlt8nEACQ9mIeQh3K4di4/SX+41+pJrLIY01lHAOFOA==",
       "peer": true,
       "requires": {
         "@babel/parser": "^7.16.4",
@@ -9481,6 +7994,8 @@
       "dependencies": {
         "magic-string": {
           "version": "0.25.9",
+          "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.25.9.tgz",
+          "integrity": "sha512-RmF0AsMzgt25qzqqLc1+MbHmhdx0ojF2Fvs4XnOqz2ZOBXzzkEwc/dJQZCYHAn7v1jbVOjAZfK8msRn4BxO4VQ==",
           "peer": true,
           "requires": {
             "sourcemap-codec": "^1.4.8"
@@ -9488,12 +8003,16 @@
         },
         "source-map": {
           "version": "0.6.1",
+          "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
+          "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
           "peer": true
         }
       }
     },
     "@vue/compiler-ssr": {
       "version": "3.2.36",
+      "resolved": "https://registry.npmjs.org/@vue/compiler-ssr/-/compiler-ssr-3.2.36.tgz",
+      "integrity": "sha512-+KugInUFRvOxEdLkZwE+W43BqHyhBh0jpYXhmqw1xGq2dmE6J9eZ8UUSOKNhdHtQ/iNLWWeK/wPZkVLUf3YGaw==",
       "peer": true,
       "requires": {
         "@vue/compiler-dom": "3.2.36",
@@ -9502,6 +8021,8 @@
     },
     "@vue/component-compiler-utils": {
       "version": "3.3.0",
+      "resolved": "https://registry.npmjs.org/@vue/component-compiler-utils/-/component-compiler-utils-3.3.0.tgz",
+      "integrity": "sha512-97sfH2mYNU+2PzGrmK2haqffDpVASuib9/w2/noxiFi31Z54hW+q3izKQXXQZSNhtiUpAI36uSuYepeBe4wpHQ==",
       "requires": {
         "consolidate": "^0.15.1",
         "hash-sum": "^1.0.2",
@@ -9516,40 +8037,56 @@
       "dependencies": {
         "consolidate": {
           "version": "0.15.1",
+          "resolved": "https://registry.npmjs.org/consolidate/-/consolidate-0.15.1.tgz",
+          "integrity": "sha512-DW46nrsMJgy9kqAbPt5rKaCr7uFtpo4mSUvLHIUbJEjm0vo+aY5QLwBUq3FK4tRnJr/X0Psc0C4jf/h+HtXSMw==",
           "requires": {
             "bluebird": "^3.1.1"
           }
         },
         "hash-sum": {
-          "version": "1.0.2"
+          "version": "1.0.2",
+          "resolved": "https://registry.npmjs.org/hash-sum/-/hash-sum-1.0.2.tgz",
+          "integrity": "sha512-fUs4B4L+mlt8/XAtSOGMUO1TXmAelItBPtJG7CyHJfYTdDjwisntGO2JQz7oUsatOY9o68+57eziUVNw/mRHmA=="
         },
         "lru-cache": {
           "version": "4.1.5",
+          "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-4.1.5.tgz",
+          "integrity": "sha512-sWZlbEP2OsHNkXrMl5GYk/jKk70MBng6UU4YI/qGDYbgf6YbP4EvmqISbXCoJiRKs+1bSpFHVgQxvJ17F2li5g==",
           "requires": {
             "pseudomap": "^1.0.2",
             "yallist": "^2.1.2"
           }
         },
         "picocolors": {
-          "version": "0.2.1"
+          "version": "0.2.1",
+          "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-0.2.1.tgz",
+          "integrity": "sha512-cMlDqaLEqfSaW8Z7N5Jw+lyIW869EzT73/F5lhtY9cLGoVxSXznfgfXMO0Z5K0o0Q2TkTXq+0KFsdnSe3jDViA=="
         },
         "postcss": {
           "version": "7.0.39",
+          "resolved": "https://registry.npmjs.org/postcss/-/postcss-7.0.39.tgz",
+          "integrity": "sha512-yioayjNbHn6z1/Bywyb2Y4s3yvDAeXGOyxqD+LnVOinq6Mdmd++SW2wUNVzavyyHxd6+DxzWGIuosg6P1Rj8uA==",
           "requires": {
             "picocolors": "^0.2.1",
             "source-map": "^0.6.1"
           }
         },
         "source-map": {
-          "version": "0.6.1"
+          "version": "0.6.1",
+          "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
+          "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g=="
         },
         "yallist": {
-          "version": "2.1.2"
+          "version": "2.1.2",
+          "resolved": "https://registry.npmjs.org/yallist/-/yallist-2.1.2.tgz",
+          "integrity": "sha1-HBH5IY8HYImkfdUS+TxmmaaoHVI="
         }
       }
     },
     "@vue/reactivity": {
       "version": "3.2.36",
+      "resolved": "https://registry.npmjs.org/@vue/reactivity/-/reactivity-3.2.36.tgz",
+      "integrity": "sha512-c2qvopo0crh9A4GXi2/2kfGYMxsJW4tVILrqRPydVGZHhq0fnzy6qmclWOhBFckEhmyxmpHpdJtIRYGeKcuhnA==",
       "peer": true,
       "requires": {
         "@vue/shared": "3.2.36"
@@ -9557,6 +8094,8 @@
     },
     "@vue/reactivity-transform": {
       "version": "3.2.36",
+      "resolved": "https://registry.npmjs.org/@vue/reactivity-transform/-/reactivity-transform-3.2.36.tgz",
+      "integrity": "sha512-Jk5o2BhpODC9XTA7o4EL8hSJ4JyrFWErLtClG3NH8wDS7ri9jBDWxI7/549T7JY9uilKsaNM+4pJASLj5dtRwA==",
       "peer": true,
       "requires": {
         "@babel/parser": "^7.16.4",
@@ -9568,6 +8107,8 @@
       "dependencies": {
         "magic-string": {
           "version": "0.25.9",
+          "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.25.9.tgz",
+          "integrity": "sha512-RmF0AsMzgt25qzqqLc1+MbHmhdx0ojF2Fvs4XnOqz2ZOBXzzkEwc/dJQZCYHAn7v1jbVOjAZfK8msRn4BxO4VQ==",
           "peer": true,
           "requires": {
             "sourcemap-codec": "^1.4.8"
@@ -9577,6 +8118,8 @@
     },
     "@vue/runtime-core": {
       "version": "3.2.36",
+      "resolved": "https://registry.npmjs.org/@vue/runtime-core/-/runtime-core-3.2.36.tgz",
+      "integrity": "sha512-PTWBD+Lub+1U3/KhbCExrfxyS14hstLX+cBboxVHaz+kXoiDLNDEYAovPtxeTutbqtClIXtft+wcGdC+FUQ9qQ==",
       "peer": true,
       "requires": {
         "@vue/reactivity": "3.2.36",
@@ -9585,6 +8128,8 @@
     },
     "@vue/runtime-dom": {
       "version": "3.2.36",
+      "resolved": "https://registry.npmjs.org/@vue/runtime-dom/-/runtime-dom-3.2.36.tgz",
+      "integrity": "sha512-gYPYblm7QXHVuBohqNRRT7Wez0f2Mx2D40rb4fleehrJU9CnkjG0phhcGEZFfGwCmHZRqBCRgbFWE98bPULqkg==",
       "peer": true,
       "requires": {
         "@vue/runtime-core": "3.2.36",
@@ -9594,33 +8139,53 @@
       "dependencies": {
         "csstype": {
           "version": "2.6.20",
+          "resolved": "https://registry.npmjs.org/csstype/-/csstype-2.6.20.tgz",
+          "integrity": "sha512-/WwNkdXfckNgw6S5R125rrW8ez139lBHWouiBvX8dfMFtcn6V81REDqnH7+CRpRipfYlyU1CmOnOxrmGcFOjeA==",
           "peer": true
         }
       }
     },
     "@vue/shared": {
       "version": "3.2.36",
+      "resolved": "https://registry.npmjs.org/@vue/shared/-/shared-3.2.36.tgz",
+      "integrity": "sha512-JtB41wXl7Au3+Nl3gD16Cfpj7k/6aCroZ6BbOiCMFCMvrOpkg/qQUXTso2XowaNqBbnkuGHurLAqkLBxNGc1hQ==",
       "peer": true
     },
     "@zip.js/zip.js": {
       "version": "2.4.2",
+      "resolved": "https://registry.npmjs.org/@zip.js/zip.js/-/zip.js-2.4.2.tgz",
+      "integrity": "sha512-D4xr9g7U625Q01lQASr9g1sQWEGhndyd+G3v3OvY/qH3pwaJDpbVDy+TO6yEq7c8teQdjjTiiBvlcQcVtT+itg==",
       "dev": true
     },
     "abbrev": {
       "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
+      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==",
       "dev": true
     },
     "acorn": {
       "version": "8.7.0",
+      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.7.0.tgz",
+      "integrity": "sha512-V/LGr1APy+PXIwKebEWrkZPwoeoF+w1jiOBUmuxuiUIaOHtob8Qc9BTrYo7VuI5fR8tqsy+buA2WFooR5olqvQ==",
       "dev": true
     },
     "acorn-jsx": {
       "version": "5.3.2",
+      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
+      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
       "dev": true,
       "requires": {}
     },
+    "adm-zip": {
+      "version": "0.5.9",
+      "resolved": "https://registry.npmjs.org/adm-zip/-/adm-zip-0.5.9.tgz",
+      "integrity": "sha512-s+3fXLkeeLjZ2kLjCBwQufpI5fuN+kIGBxu6530nVQZGVol0d7Y/M88/xw9HGGUcJjKf8LutN3VPRUBq6N7Ajg==",
+      "dev": true
+    },
     "ajv": {
       "version": "6.12.6",
+      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
+      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
       "dev": true,
       "requires": {
         "fast-deep-equal": "^3.1.1",
@@ -9631,20 +8196,28 @@
     },
     "ansi-colors": {
       "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/ansi-colors/-/ansi-colors-4.1.1.tgz",
+      "integrity": "sha512-JoX0apGbHaUJBNl6yF+p6JAFYZ666/hhCGKN5t9QFjbJQKUU/g8MNbFDbvfrgKXvI1QpZplPOnwIo99lX/AAmA==",
       "dev": true
     },
     "ansi-regex": {
       "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
+      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
       "dev": true
     },
     "ansi-styles": {
       "version": "3.2.1",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
+      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
       "requires": {
         "color-convert": "^1.9.0"
       }
     },
     "ansi-to-html": {
       "version": "0.7.2",
+      "resolved": "https://registry.npmjs.org/ansi-to-html/-/ansi-to-html-0.7.2.tgz",
+      "integrity": "sha512-v6MqmEpNlxF+POuyhKkidusCHWWkaLcGRURzivcU3I9tv7k4JVhFcnukrM5Rlk2rUywdZuzYAZ+kbZqWCnfN3g==",
       "dev": true,
       "requires": {
         "entities": "^2.2.0"
@@ -9652,10 +8225,14 @@
     },
     "argparse": {
       "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
+      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
       "dev": true
     },
     "args": {
       "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/args/-/args-5.0.1.tgz",
+      "integrity": "sha512-1kqmFCFsPffavQFGt8OxJdIcETti99kySRUPMpOhaGjL6mRJn8HFU1OxKY5bMqfZKUwTQc1mZkAjmGYaVOHFtQ==",
       "dev": true,
       "requires": {
         "camelcase": "5.0.0",
@@ -9666,68 +8243,65 @@
     },
     "array-find-index": {
       "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/array-find-index/-/array-find-index-1.0.2.tgz",
+      "integrity": "sha1-3wEKoSh+Fku9pvlyOwqWoexBh6E=",
       "dev": true
     },
     "array-union": {
       "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz",
+      "integrity": "sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==",
       "dev": true
     },
     "asap": {
       "version": "2.0.6",
+      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
+      "integrity": "sha1-5QNHYR1+aQlDIIu9r+vLwvuGbUY=",
       "dev": true
     },
     "async": {
       "version": "0.2.10",
+      "resolved": "https://registry.npmjs.org/async/-/async-0.2.10.tgz",
+      "integrity": "sha512-eAkdoKxU6/LkKDBzLpT+t6Ff5EtfSF4wx1WfJiPEEV7WNLnDaRXk0oVysiEPm262roaachGexwUv94WhSgN5TQ==",
       "dev": true
     },
     "babel-plugin-dynamic-import-node": {
       "version": "2.3.3",
+      "resolved": "https://registry.npmjs.org/babel-plugin-dynamic-import-node/-/babel-plugin-dynamic-import-node-2.3.3.tgz",
+      "integrity": "sha512-jZVI+s9Zg3IqA/kdi0i6UDCybUI3aSBLnglhYbSSjKlV7yF1F/5LWv8MakQmvYpnbJDS6fcBL2KzHSxNCMtWSQ==",
       "dev": true,
       "requires": {
         "object.assign": "^4.1.0"
       }
     },
-    "babel-plugin-jsx-dom-expressions": {
-      "version": "0.33.14",
-      "requires": {
-        "@babel/helper-module-imports": "7.16.0",
-        "@babel/plugin-syntax-jsx": "^7.16.5",
-        "@babel/types": "^7.16.0",
-        "html-entities": "2.3.2"
-      },
-      "dependencies": {
-        "@babel/helper-module-imports": {
-          "version": "7.16.0",
-          "requires": {
-            "@babel/types": "^7.16.0"
-          }
-        }
-      }
-    },
-    "babel-preset-solid": {
-      "version": "1.4.8",
-      "requires": {
-        "babel-plugin-jsx-dom-expressions": "^0.33.14"
-      }
-    },
     "balanced-match": {
       "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
+      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
       "dev": true
     },
     "basic-auth-parser": {
       "version": "0.0.2",
+      "resolved": "https://registry.npmjs.org/basic-auth-parser/-/basic-auth-parser-0.0.2.tgz",
+      "integrity": "sha1-zp5xp38jwSee7NJlmypGJEwVbkE=",
       "dev": true
     },
     "bluebird": {
-      "version": "3.7.2"
+      "version": "3.7.2",
+      "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.7.2.tgz",
+      "integrity": "sha512-XpNj6GDQzdfW+r2Wnn7xiSAd7TM3jzkxGXBGTtWKuSXv1xUV+azxAm8jdWZN06QTQk+2N2XB9jRDkvbmQmcRtg=="
     },
     "boolean": {
       "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/boolean/-/boolean-3.2.0.tgz",
+      "integrity": "sha512-d0II/GO9uf9lfUHH2BQsjxzRJZBdsjgsBiW4BvhWk/3qoKwQFjIDVN19PfX8F2D/r9PCMTtLWjYVCFrpeYUzsw==",
       "dev": true,
       "optional": true
     },
     "brace-expansion": {
       "version": "1.1.11",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
+      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
       "dev": true,
       "requires": {
         "balanced-match": "^1.0.0",
@@ -9736,6 +8310,8 @@
     },
     "braces": {
       "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
+      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
       "dev": true,
       "requires": {
         "fill-range": "^7.0.1"
@@ -9743,6 +8319,8 @@
     },
     "browserslist": {
       "version": "4.20.3",
+      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.20.3.tgz",
+      "integrity": "sha512-NBhymBQl1zM0Y5dQT/O+xiLP9/rzOIQdKM/eMJBAq7yBgaB6krIYLGejrwVYnSHZdqjscB1SPuAjHwxjvN6Wdg==",
       "requires": {
         "caniuse-lite": "^1.0.30001332",
         "electron-to-chromium": "^1.4.118",
@@ -9753,14 +8331,20 @@
     },
     "buffer-crc32": {
       "version": "0.2.13",
+      "resolved": "https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.13.tgz",
+      "integrity": "sha1-DTM+PwDqxQqhRUq9MO+MKl2ackI=",
       "dev": true
     },
     "buffer-from": {
-      "version": "1.1.2",
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.1.tgz",
+      "integrity": "sha512-MQcXEUbCKtEo7bhqEs6560Hyd4XaovZlO/k9V3hjVUF/zwW7KBVdSK4gIt/bzwS9MbR5qob+F5jusZsb0YQK2A==",
       "dev": true
     },
     "cacheable-request": {
       "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/cacheable-request/-/cacheable-request-6.1.0.tgz",
+      "integrity": "sha512-Oj3cAGPCqOZX7Rz64Uny2GYAZNliQSqfbePrgAQ1wKAihYmCUnraBtJtKcGR4xz7wF+LoJC+ssFZvv5BgF9Igg==",
       "dev": true,
       "requires": {
         "clone-response": "^1.0.2",
@@ -9774,12 +8358,16 @@
       "dependencies": {
         "lowercase-keys": {
           "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-2.0.0.tgz",
+          "integrity": "sha512-tqNXrS78oMOE73NMxK4EMLQsQowWf8jKooH9g7xPavRT706R6bkQJ6DY2Te7QukaZsulxa30wQ7bk0pm4XiHmA==",
           "dev": true
         }
       }
     },
     "call-bind": {
       "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
+      "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
       "dev": true,
       "requires": {
         "function-bind": "^1.1.1",
@@ -9788,16 +8376,24 @@
     },
     "callsites": {
       "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
+      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
       "dev": true
     },
     "camelcase": {
-      "version": "5.0.0"
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.0.0.tgz",
+      "integrity": "sha512-faqwZqnWxbxn+F1d399ygeamQNy3lPp/H9H6rNrqYh4FSVCtcY+3cub1MxA8o9mDd55mM8Aghuu/kuyYA6VTsA=="
     },
     "caniuse-lite": {
-      "version": "1.0.30001344"
+      "version": "1.0.30001344",
+      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001344.tgz",
+      "integrity": "sha512-0ZFjnlCaXNOAYcV7i+TtdKBp0L/3XEU2MF/x6Du1lrh+SRX4IfzIVL4HNJg5pB2PmFb8rszIGyOvsZnqqRoc2g=="
     },
     "chalk": {
       "version": "2.4.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
+      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
       "requires": {
         "ansi-styles": "^3.2.1",
         "escape-string-regexp": "^1.0.5",
@@ -9805,10 +8401,14 @@
       }
     },
     "charcodes": {
-      "version": "0.2.0"
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/charcodes/-/charcodes-0.2.0.tgz",
+      "integrity": "sha512-Y4kiDb+AM4Ecy58YkuZrrSRJBDQdQ2L+NyS1vHHFtNtUjgutcZfx3yp1dAONI/oPaPmyGfCLx5CxL+zauIMyKQ=="
     },
     "chokidar": {
       "version": "3.5.3",
+      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
+      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
       "dev": true,
       "requires": {
         "anymatch": "~3.1.2",
@@ -9823,6 +8423,8 @@
       "dependencies": {
         "anymatch": {
           "version": "3.1.2",
+          "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.2.tgz",
+          "integrity": "sha512-P43ePfOAIupkguHUycrc4qJ9kz8ZiuOUijaETwX7THt0Y/GNK7v0aa8rY816xWjZ7rJdA5XdMcpVFTKMq+RvWg==",
           "dev": true,
           "requires": {
             "normalize-path": "^3.0.0",
@@ -9831,10 +8433,14 @@
         },
         "binary-extensions": {
           "version": "2.2.0",
+          "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
+          "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
           "dev": true
         },
         "is-binary-path": {
           "version": "2.1.0",
+          "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
+          "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
           "dev": true,
           "requires": {
             "binary-extensions": "^2.0.0"
@@ -9844,6 +8450,8 @@
     },
     "cli": {
       "version": "0.4.5",
+      "resolved": "https://registry.npmjs.org/cli/-/cli-0.4.5.tgz",
+      "integrity": "sha512-dbn5HyeJWSOU58RwOEiF1VWrl7HRvDsKLpu0uiI/vExH6iNoyUzjB5Mr3IJY5DVUfnbpe9793xw4DFJVzC9nWQ==",
       "dev": true,
       "requires": {
         "glob": ">= 3.1.4"
@@ -9851,6 +8459,8 @@
     },
     "cliff": {
       "version": "0.1.10",
+      "resolved": "https://registry.npmjs.org/cliff/-/cliff-0.1.10.tgz",
+      "integrity": "sha1-U74z6p9ZvshWCe4wCsQgdgPlIBM=",
       "dev": true,
       "requires": {
         "colors": "~1.0.3",
@@ -9860,12 +8470,16 @@
       "dependencies": {
         "colors": {
           "version": "1.0.3",
+          "resolved": "https://registry.npmjs.org/colors/-/colors-1.0.3.tgz",
+          "integrity": "sha1-BDP0TYCWgP3rYO0mDxsMJi6CpAs=",
           "dev": true
         }
       }
     },
     "cliui": {
       "version": "7.0.4",
+      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
+      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
       "dev": true,
       "requires": {
         "string-width": "^4.2.0",
@@ -9875,6 +8489,8 @@
     },
     "clone-response": {
       "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/clone-response/-/clone-response-1.0.2.tgz",
+      "integrity": "sha1-0dyXOSAxTfZ/vrlCI7TuNQI56Ws=",
       "dev": true,
       "requires": {
         "mimic-response": "^1.0.0"
@@ -9882,23 +8498,33 @@
     },
     "color-convert": {
       "version": "1.9.3",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
+      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
       "requires": {
         "color-name": "1.1.3"
       }
     },
     "color-name": {
-      "version": "1.1.3"
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
+      "integrity": "sha1-p9BVi9icQveV3UIyj3QIMcpTvCU="
     },
     "colors": {
       "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/colors/-/colors-1.4.0.tgz",
+      "integrity": "sha512-a+UqTh4kgZg/SlGvfbzDHpgRu7AAQOmmqRHJnxhRZICKFUT91brVhNNt58CMWU9PsBbv3PDCZUHbVxuDiH2mtA==",
       "dev": true
     },
     "commander": {
       "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/commander/-/commander-4.1.1.tgz",
+      "integrity": "sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==",
       "dev": true
     },
     "commonmark": {
       "version": "0.30.0",
+      "resolved": "https://registry.npmjs.org/commonmark/-/commonmark-0.30.0.tgz",
+      "integrity": "sha512-j1yoUo4gxPND1JWV9xj5ELih0yMv1iCWDG6eEQIPLSWLxzCXiFoyS7kvB+WwU+tZMf4snwJMMtaubV0laFpiBA==",
       "dev": true,
       "requires": {
         "entities": "~2.0",
@@ -9909,16 +8535,22 @@
       "dependencies": {
         "entities": {
           "version": "2.0.3",
+          "resolved": "https://registry.npmjs.org/entities/-/entities-2.0.3.tgz",
+          "integrity": "sha512-MyoZ0jgnLvB2X3Lg5HqpFmn1kybDiIfEQmKzTb5apr51Rb+T3KdmMiqa70T+bhGnyv7bQ6WMj2QMHpGMmlrUYQ==",
           "dev": true
         }
       }
     },
     "concat-map": {
       "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
+      "integrity": "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=",
       "dev": true
     },
     "concat-stream": {
       "version": "1.6.2",
+      "resolved": "https://registry.npmjs.org/concat-stream/-/concat-stream-1.6.2.tgz",
+      "integrity": "sha512-27HBghJxjiZtIk3Ycvn/4kbJk/1uZuJFfuPEns6LaEvpvG1f0hTea8lilrouyo9mVc2GWdcEZ8OLoGmSADlrCw==",
       "dev": true,
       "requires": {
         "buffer-from": "^1.0.0",
@@ -9929,6 +8561,8 @@
     },
     "concurrently": {
       "version": "6.2.1",
+      "resolved": "https://registry.npmjs.org/concurrently/-/concurrently-6.2.1.tgz",
+      "integrity": "sha512-emgwhH+ezkuYKSHZQ+AkgEpoUZZlbpPVYCVv7YZx0r+T7fny1H03r2nYRebpi2DudHR4n1Rgbo2YTxKOxVJ4+g==",
       "dev": true,
       "requires": {
         "chalk": "^4.1.0",
@@ -9944,6 +8578,8 @@
       "dependencies": {
         "ansi-styles": {
           "version": "4.3.0",
+          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+          "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
           "dev": true,
           "requires": {
             "color-convert": "^2.0.1"
@@ -9951,6 +8587,8 @@
         },
         "chalk": {
           "version": "4.1.2",
+          "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+          "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
           "dev": true,
           "requires": {
             "ansi-styles": "^4.1.0",
@@ -9959,6 +8597,8 @@
           "dependencies": {
             "supports-color": {
               "version": "7.2.0",
+              "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
+              "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
               "dev": true,
               "requires": {
                 "has-flag": "^4.0.0"
@@ -9968,6 +8608,8 @@
         },
         "color-convert": {
           "version": "2.0.1",
+          "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+          "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
           "dev": true,
           "requires": {
             "color-name": "~1.1.4"
@@ -9975,14 +8617,20 @@
         },
         "color-name": {
           "version": "1.1.4",
+          "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+          "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
           "dev": true
         },
         "has-flag": {
           "version": "4.0.0",
+          "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
+          "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
           "dev": true
         },
         "supports-color": {
           "version": "8.1.1",
+          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
+          "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
           "dev": true,
           "requires": {
             "has-flag": "^4.0.0"
@@ -9992,6 +8640,8 @@
     },
     "config-chain": {
       "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/config-chain/-/config-chain-1.1.12.tgz",
+      "integrity": "sha512-a1eOIcu8+7lUInge4Rpf/n4Krkf3Dd9lqhljRzII1/Zno/kRtUWnznPO3jOKBmTEktkt3fkxisUcivoj0ebzoA==",
       "dev": true,
       "optional": true,
       "requires": {
@@ -10001,22 +8651,30 @@
     },
     "consolidate": {
       "version": "0.16.0",
+      "resolved": "https://registry.npmjs.org/consolidate/-/consolidate-0.16.0.tgz",
+      "integrity": "sha512-Nhl1wzCslqXYTJVDyJCu3ODohy9OfBMB5uD2BiBTzd7w+QY0lBzafkR8y8755yMYHAaMD4NuzbAw03/xzfw+eQ==",
       "requires": {
         "bluebird": "^3.7.2"
       }
     },
     "convert-source-map": {
       "version": "1.7.0",
+      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.7.0.tgz",
+      "integrity": "sha512-4FJkXzKXEDB1snCFZlLP4gpC3JILicCpGbzG9f9G7tGqGCzETQ2hWPrcinA9oU4wtf2biUaEH5065UnMeR33oA==",
       "requires": {
         "safe-buffer": "~5.1.1"
       }
     },
     "core-util-is": {
-      "version": "1.0.3",
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
+      "integrity": "sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=",
       "dev": true
     },
     "cross-env": {
       "version": "7.0.3",
+      "resolved": "https://registry.npmjs.org/cross-env/-/cross-env-7.0.3.tgz",
+      "integrity": "sha512-+/HKd6EgcQCJGh2PSjZuUitQBQynKor4wrFbRg4DtAgS1aWO+gU52xpH7M9ScGgXSYmAVS9bIJ8EzuaGw0oNAw==",
       "dev": true,
       "requires": {
         "cross-spawn": "^7.0.1"
@@ -10024,6 +8682,8 @@
     },
     "cross-spawn": {
       "version": "7.0.3",
+      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
+      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
       "dev": true,
       "requires": {
         "path-key": "^3.1.0",
@@ -10032,36 +8692,52 @@
       }
     },
     "cssesc": {
-      "version": "3.0.0"
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
+      "integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg=="
     },
     "csstype": {
       "version": "3.0.8",
+      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.0.8.tgz",
+      "integrity": "sha512-jXKhWqXPmlUeoQnF/EhTtTl4C9SnrxSH/jZUih3jmO6lBKr99rP3/+FmrMj4EFpOXzMtXHAZkd3x0E6h6Fgflw==",
       "dev": true
     },
     "cycle": {
       "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/cycle/-/cycle-1.0.3.tgz",
+      "integrity": "sha1-IegLK+hYD5i0aPN5QwZisEbDStI=",
       "dev": true
     },
     "date-fns": {
       "version": "2.23.0",
+      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-2.23.0.tgz",
+      "integrity": "sha512-5ycpauovVyAk0kXNZz6ZoB9AYMZB4DObse7P3BPWmyEjXNORTI8EJ6X0uaSAq4sCHzM1uajzrkr6HnsLQpxGXA==",
       "dev": true
     },
     "de-indent": {
       "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/de-indent/-/de-indent-1.0.2.tgz",
+      "integrity": "sha512-e/1zu3xH5MQryN2zdVaF0OrdNLUbvWxzMbi+iNA6Bky7l1RoP8a2fIbRocyHclXt/arDrrR6lL3TqFD9pMQTsg==",
       "peer": true
     },
     "debug": {
       "version": "4.3.4",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
+      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
       "requires": {
         "ms": "2.1.2"
       }
     },
     "debuglog": {
       "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/debuglog/-/debuglog-1.0.1.tgz",
+      "integrity": "sha1-qiT/uaw9+aI1GDfPstJ5NgzXhJI=",
       "dev": true
     },
     "decompress-response": {
       "version": "3.3.0",
+      "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-3.3.0.tgz",
+      "integrity": "sha1-gKTdMjdIOEv6JICDYirt7Jgq3/M=",
       "dev": true,
       "requires": {
         "mimic-response": "^1.0.0"
@@ -10069,17 +8745,25 @@
     },
     "deep-is": {
       "version": "0.1.3",
+      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.3.tgz",
+      "integrity": "sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ=",
       "dev": true
     },
     "deepmerge": {
-      "version": "4.2.2"
+      "version": "4.2.2",
+      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.2.2.tgz",
+      "integrity": "sha512-FJ3UgI4gIl+PHZm53knsuSFpE+nESMr7M4v9QcgB7S63Kj/6WqMiFQJpBBYz1Pt+66bZpP3Q7Lye0Oo9MPKEdg=="
     },
     "defer-to-connect": {
       "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/defer-to-connect/-/defer-to-connect-1.1.3.tgz",
+      "integrity": "sha512-0ISdNousHvZT2EiFlZeZAHBUvSxmKswVCEf8hW7KWgG4a8MVEu/3Vb6uWYozkjylyCxe0JBIiRB1jV45S70WVQ==",
       "dev": true
     },
     "define-properties": {
       "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.1.3.tgz",
+      "integrity": "sha512-3MqfYKj2lLzdMSf8ZIZE/V+Zuy+BgD6f164e8K2w7dgnpKArBDerGYpM46IYYcjnkdPNMjPk9A6VFB8+3SKlXQ==",
       "dev": true,
       "requires": {
         "object-keys": "^1.0.12"
@@ -10087,11 +8771,15 @@
     },
     "detect-node": {
       "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/detect-node/-/detect-node-2.1.0.tgz",
+      "integrity": "sha512-T0NIuQpnTvFDATNuHN5roPwSBG83rFsuO+MXXH9/3N1eFbn4wcPjttvjMLEPWJ0RGUYgQE7cGgS3tNxbqCGM7g==",
       "dev": true,
       "optional": true
     },
     "dezalgo": {
       "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/dezalgo/-/dezalgo-1.0.3.tgz",
+      "integrity": "sha1-f3Qt4Gb8dIvI24IFad3c5Jvw1FY=",
       "dev": true,
       "requires": {
         "asap": "^2.0.0",
@@ -10100,6 +8788,8 @@
     },
     "dir-glob": {
       "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz",
+      "integrity": "sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==",
       "dev": true,
       "requires": {
         "path-type": "^4.0.0"
@@ -10107,6 +8797,8 @@
     },
     "doctrine": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
+      "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
       "dev": true,
       "requires": {
         "esutils": "^2.0.2"
@@ -10114,29 +8806,37 @@
     },
     "dotenv": {
       "version": "16.0.0",
+      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.0.0.tgz",
+      "integrity": "sha512-qD9WU0MPM4SWLPJy/r2Be+2WgQj8plChsyrCNQzW/0WjvcJQiKQJ9mH3ZgB3fxbUUxgc/11ZJ0Fi5KiimWGz2Q==",
       "dev": true
     },
     "duplexer3": {
       "version": "0.1.4",
+      "resolved": "https://registry.npmjs.org/duplexer3/-/duplexer3-0.1.4.tgz",
+      "integrity": "sha1-7gHdHKwO08vH/b6jfcCo8c4ALOI=",
       "dev": true
     },
     "electron": {
-      "version": "19.0.11",
-      "resolved": "https://registry.npmjs.org/electron/-/electron-19.0.11.tgz",
-      "integrity": "sha512-GPM6C1Ze17/gR4koTE171MxrI5unYfFRgXQdkMdpWM2Cd55LMUrVa0QHCsfKpsaloufv9T65lsOn0uZuzCw5UA==",
+      "version": "16.2.8",
+      "resolved": "https://registry.npmjs.org/electron/-/electron-16.2.8.tgz",
+      "integrity": "sha512-KSOytY6SPLsh3iCziztqa/WgJyfDOKzCvNqku9gGIqSdT8CqtV66dTU1SOrKZQjRFLxHaF8LbyxUL1vwe4taqw==",
       "dev": true,
       "requires": {
-        "@electron/get": "^1.14.1",
-        "@types/node": "^16.11.26",
+        "@electron/get": "^1.13.0",
+        "@types/node": "^14.6.2",
         "extract-zip": "^1.0.3"
       },
       "dependencies": {
         "@types/node": {
-          "version": "16.11.47",
+          "version": "14.18.10",
+          "resolved": "https://registry.npmjs.org/@types/node/-/node-14.18.10.tgz",
+          "integrity": "sha512-6iihJ/Pp5fsFJ/aEDGyvT4pHGmCpq7ToQ/yf4bl5SbVAvwpspYJ+v3jO7n8UyjhQVHTy+KNszOozDdv+O6sovQ==",
           "dev": true
         },
         "debug": {
           "version": "2.6.9",
+          "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
+          "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
           "dev": true,
           "requires": {
             "ms": "2.0.0"
@@ -10144,6 +8844,8 @@
         },
         "extract-zip": {
           "version": "1.7.0",
+          "resolved": "https://registry.npmjs.org/extract-zip/-/extract-zip-1.7.0.tgz",
+          "integrity": "sha512-xoh5G1W/PB0/27lXgMQyIhP5DSY/LhoCsOyZgb+6iMmRtCwVBo55uKaMoEYrDCKQhWvqEip5ZPKAc6eFNyf/MA==",
           "dev": true,
           "requires": {
             "concat-stream": "^1.6.2",
@@ -10154,24 +8856,34 @@
         },
         "ms": {
           "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
+          "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=",
           "dev": true
         }
       }
     },
     "electron-to-chromium": {
-      "version": "1.4.212"
+      "version": "1.4.204",
+      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.4.204.tgz",
+      "integrity": "sha512-5Ojjtw9/c9HCXtMVE6SXVSHSNjmbFOXpKprl6mY/5moLSxLeWatuYA7KTD+RzJMxLRH6yNNQrqGz9p6IoNBMgw=="
     },
     "emoji-regex": {
       "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
+      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
       "dev": true
     },
     "encodeurl": {
       "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
+      "integrity": "sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k=",
       "dev": true,
       "optional": true
     },
     "end-of-stream": {
       "version": "1.4.4",
+      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
+      "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
       "dev": true,
       "requires": {
         "once": "^1.4.0"
@@ -10179,6 +8891,8 @@
     },
     "enquirer": {
       "version": "2.3.6",
+      "resolved": "https://registry.npmjs.org/enquirer/-/enquirer-2.3.6.tgz",
+      "integrity": "sha512-yjNnPr315/FjS4zIsUxYguYUPP2e1NK4d7E7ZOLiyYCcbFBiTMyID+2wvm2w6+pZ/odMA7cRkjhsPbltwBOrLg==",
       "dev": true,
       "requires": {
         "ansi-colors": "^4.1.1"
@@ -10186,14 +8900,20 @@
     },
     "entities": {
       "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/entities/-/entities-2.2.0.tgz",
+      "integrity": "sha512-p92if5Nz619I0w+akJrLZH0MX0Pb5DX39XOwQTtXSdQQOaYH03S1uIQp4mhOZtAXrxq4ViO67YTiLBo2638o9A==",
       "dev": true
     },
     "env-paths": {
       "version": "2.2.1",
+      "resolved": "https://registry.npmjs.org/env-paths/-/env-paths-2.2.1.tgz",
+      "integrity": "sha512-+h1lkLKhZMTYjog1VEpJNG7NZJWcuc2DDk/qsqSTRRCOXiLjeQ1d1/udrUGhqMxUgAlwKNZ0cf2uqan5GLuS2A==",
       "dev": true
     },
     "error-ex": {
       "version": "1.3.2",
+      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
+      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
       "dev": true,
       "requires": {
         "is-arrayish": "^0.2.1"
@@ -10201,186 +8921,172 @@
     },
     "es6-error": {
       "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/es6-error/-/es6-error-4.1.1.tgz",
+      "integrity": "sha512-Um/+FxMr9CISWh0bi5Zv0iOD+4cFh5qLeks1qhAopKVAJw3drgKbKySikp7wGhDL0HPeaja0P5ULZrxLkniUVg==",
       "dev": true,
       "optional": true
     },
     "esbuild": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.15.6.tgz",
-      "integrity": "sha512-sgLOv3l4xklvXzzczhRwKRotyrfyZ2i1fCS6PTOLPd9wevDPArGU8HFtHrHCOcsMwTjLjzGm15gvC8uxVzQf+w==",
-      "dev": true,
-      "requires": {
-        "@esbuild/linux-loong64": "0.15.6",
-        "esbuild-android-64": "0.15.6",
-        "esbuild-android-arm64": "0.15.6",
-        "esbuild-darwin-64": "0.15.6",
-        "esbuild-darwin-arm64": "0.15.6",
-        "esbuild-freebsd-64": "0.15.6",
-        "esbuild-freebsd-arm64": "0.15.6",
-        "esbuild-linux-32": "0.15.6",
-        "esbuild-linux-64": "0.15.6",
-        "esbuild-linux-arm": "0.15.6",
-        "esbuild-linux-arm64": "0.15.6",
-        "esbuild-linux-mips64le": "0.15.6",
-        "esbuild-linux-ppc64le": "0.15.6",
-        "esbuild-linux-riscv64": "0.15.6",
-        "esbuild-linux-s390x": "0.15.6",
-        "esbuild-netbsd-64": "0.15.6",
-        "esbuild-openbsd-64": "0.15.6",
-        "esbuild-sunos-64": "0.15.6",
-        "esbuild-windows-32": "0.15.6",
-        "esbuild-windows-64": "0.15.6",
-        "esbuild-windows-arm64": "0.15.6"
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.14.49.tgz",
+      "integrity": "sha512-/TlVHhOaq7Yz8N1OJrjqM3Auzo5wjvHFLk+T8pIue+fhnhIMpfAzsG6PLVMbFveVxqD2WOp3QHei+52IMUNmCw==",
+      "requires": {
+        "esbuild-android-64": "0.14.49",
+        "esbuild-android-arm64": "0.14.49",
+        "esbuild-darwin-64": "0.14.49",
+        "esbuild-darwin-arm64": "0.14.49",
+        "esbuild-freebsd-64": "0.14.49",
+        "esbuild-freebsd-arm64": "0.14.49",
+        "esbuild-linux-32": "0.14.49",
+        "esbuild-linux-64": "0.14.49",
+        "esbuild-linux-arm": "0.14.49",
+        "esbuild-linux-arm64": "0.14.49",
+        "esbuild-linux-mips64le": "0.14.49",
+        "esbuild-linux-ppc64le": "0.14.49",
+        "esbuild-linux-riscv64": "0.14.49",
+        "esbuild-linux-s390x": "0.14.49",
+        "esbuild-netbsd-64": "0.14.49",
+        "esbuild-openbsd-64": "0.14.49",
+        "esbuild-sunos-64": "0.14.49",
+        "esbuild-windows-32": "0.14.49",
+        "esbuild-windows-64": "0.14.49",
+        "esbuild-windows-arm64": "0.14.49"
       }
     },
     "esbuild-android-64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-android-64/-/esbuild-android-64-0.15.6.tgz",
-      "integrity": "sha512-Z1CHSgB1crVQi2LKSBwSkpaGtaloVz0ZIYcRMsvHc3uSXcR/x5/bv9wcZspvH/25lIGTaViosciS/NS09ERmVA==",
-      "dev": true,
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-android-64/-/esbuild-android-64-0.14.49.tgz",
+      "integrity": "sha512-vYsdOTD+yi+kquhBiFWl3tyxnj2qZJsl4tAqwhT90ktUdnyTizgle7TjNx6Ar1bN7wcwWqZ9QInfdk2WVagSww==",
       "optional": true
     },
     "esbuild-android-arm64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-android-arm64/-/esbuild-android-arm64-0.15.6.tgz",
-      "integrity": "sha512-mvM+gqNxqKm2pCa3dnjdRzl7gIowuc4ga7P7c3yHzs58Im8v/Lfk1ixSgQ2USgIywT48QWaACRa3F4MG7djpSw==",
-      "dev": true,
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-android-arm64/-/esbuild-android-arm64-0.14.49.tgz",
+      "integrity": "sha512-g2HGr/hjOXCgSsvQZ1nK4nW/ei8JUx04Li74qub9qWrStlysaVmadRyTVuW32FGIpLQyc5sUjjZopj49eGGM2g==",
       "optional": true
     },
     "esbuild-darwin-64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-darwin-64/-/esbuild-darwin-64-0.15.6.tgz",
-      "integrity": "sha512-BsfVt3usScAfGlXJiGtGamwVEOTM8AiYiw1zqDWhGv6BncLXCnTg1As+90mxWewdTZKq3iIy8s9g8CKkrrAXVw==",
-      "dev": true,
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-darwin-64/-/esbuild-darwin-64-0.14.49.tgz",
+      "integrity": "sha512-3rvqnBCtX9ywso5fCHixt2GBCUsogNp9DjGmvbBohh31Ces34BVzFltMSxJpacNki96+WIcX5s/vum+ckXiLYg==",
       "optional": true
     },
     "esbuild-darwin-arm64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-darwin-arm64/-/esbuild-darwin-arm64-0.15.6.tgz",
-      "integrity": "sha512-CnrAeJaEpPakUobhqO4wVSA4Zm6TPaI5UY4EsI62j9mTrjIyQPXA1n4Ju6Iu5TVZRnEqV6q8blodgYJ6CJuwCA==",
-      "dev": true,
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-darwin-arm64/-/esbuild-darwin-arm64-0.14.49.tgz",
+      "integrity": "sha512-XMaqDxO846srnGlUSJnwbijV29MTKUATmOLyQSfswbK/2X5Uv28M9tTLUJcKKxzoo9lnkYPsx2o8EJcTYwCs/A==",
       "optional": true
     },
     "esbuild-freebsd-64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-freebsd-64/-/esbuild-freebsd-64-0.15.6.tgz",
-      "integrity": "sha512-+qFdmqi+jkAsxsNJkaWVrnxEUUI50nu6c3MBVarv3RCDCbz7ZS1a4ZrdkwEYFnKcVWu6UUE0Kkb1SQ1yGEG6sg==",
-      "dev": true,
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-freebsd-64/-/esbuild-freebsd-64-0.14.49.tgz",
+      "integrity": "sha512-NJ5Q6AjV879mOHFri+5lZLTp5XsO2hQ+KSJYLbfY9DgCu8s6/Zl2prWXVANYTeCDLlrIlNNYw8y34xqyLDKOmQ==",
       "optional": true
     },
     "esbuild-freebsd-arm64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-freebsd-arm64/-/esbuild-freebsd-arm64-0.15.6.tgz",
-      "integrity": "sha512-KtQkQOhnNciXm2yrTYZMD3MOm2zBiiwFSU+dkwNbcfDumzzUprr1x70ClTdGuZwieBS1BM/k0KajRQX7r504Xw==",
-      "dev": true,
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-freebsd-arm64/-/esbuild-freebsd-arm64-0.14.49.tgz",
+      "integrity": "sha512-lFLtgXnAc3eXYqj5koPlBZvEbBSOSUbWO3gyY/0+4lBdRqELyz4bAuamHvmvHW5swJYL7kngzIZw6kdu25KGOA==",
       "optional": true
     },
     "esbuild-linux-32": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-32/-/esbuild-linux-32-0.15.6.tgz",
-      "integrity": "sha512-IAkDNz3TpxwISTGVdQijwyHBZrbFgLlRi5YXcvaEHtgbmayLSDcJmH5nV1MFgo/x2QdKcHBkOYHdjhKxUAcPwg==",
-      "dev": true,
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-linux-32/-/esbuild-linux-32-0.14.49.tgz",
+      "integrity": "sha512-zTTH4gr2Kb8u4QcOpTDVn7Z8q7QEIvFl/+vHrI3cF6XOJS7iEI1FWslTo3uofB2+mn6sIJEQD9PrNZKoAAMDiA==",
       "optional": true
     },
     "esbuild-linux-64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-64/-/esbuild-linux-64-0.15.6.tgz",
-      "integrity": "sha512-gQPksyrEYfA4LJwyfTQWAZaVZCx4wpaLrSzo2+Xc9QLC+i/sMWmX31jBjrn4nLJCd79KvwCinto36QC7BEIU/A==",
-      "dev": true,
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-linux-64/-/esbuild-linux-64-0.14.49.tgz",
+      "integrity": "sha512-hYmzRIDzFfLrB5c1SknkxzM8LdEUOusp6M2TnuQZJLRtxTgyPnZZVtyMeCLki0wKgYPXkFsAVhi8vzo2mBNeTg==",
       "optional": true
     },
     "esbuild-linux-arm": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-arm/-/esbuild-linux-arm-0.15.6.tgz",
-      "integrity": "sha512-xZ0Bq2aivsthDjA/ytQZzxrxIZbG0ATJYMJxNeOIBc1zUjpbVpzBKgllOZMsTSXMHFHGrow6TnCcgwqY0+oEoQ==",
-      "dev": true,
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-linux-arm/-/esbuild-linux-arm-0.14.49.tgz",
+      "integrity": "sha512-iE3e+ZVv1Qz1Sy0gifIsarJMQ89Rpm9mtLSRtG3AH0FPgAzQ5Z5oU6vYzhc/3gSPi2UxdCOfRhw2onXuFw/0lg==",
       "optional": true
     },
     "esbuild-linux-arm64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-arm64/-/esbuild-linux-arm64-0.15.6.tgz",
-      "integrity": "sha512-aovDkclFa6C9EdZVBuOXxqZx83fuoq8097xZKhEPSygwuy4Lxs8J4anHG7kojAsR+31lfUuxzOo2tHxv7EiNHA==",
-      "dev": true,
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-linux-arm64/-/esbuild-linux-arm64-0.14.49.tgz",
+      "integrity": "sha512-KLQ+WpeuY+7bxukxLz5VgkAAVQxUv67Ft4DmHIPIW+2w3ObBPQhqNoeQUHxopoW/aiOn3m99NSmSV+bs4BSsdA==",
       "optional": true
     },
     "esbuild-linux-mips64le": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-mips64le/-/esbuild-linux-mips64le-0.15.6.tgz",
-      "integrity": "sha512-wVpW8wkWOGizsCqCwOR/G3SHwhaecpGy3fic9BF1r7vq4djLjUcA8KunDaBCjJ6TgLQFhJ98RjDuyEf8AGjAvw==",
-      "dev": true,
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-linux-mips64le/-/esbuild-linux-mips64le-0.14.49.tgz",
+      "integrity": "sha512-n+rGODfm8RSum5pFIqFQVQpYBw+AztL8s6o9kfx7tjfK0yIGF6tm5HlG6aRjodiiKkH2xAiIM+U4xtQVZYU4rA==",
       "optional": true
     },
     "esbuild-linux-ppc64le": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-ppc64le/-/esbuild-linux-ppc64le-0.15.6.tgz",
-      "integrity": "sha512-z6w6gsPH/Y77uchocluDC8tkCg9rfkcPTePzZKNr879bF4tu7j9t255wuNOCE396IYEGxY7y8u2HJ9i7kjCLVw==",
-      "dev": true,
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-linux-ppc64le/-/esbuild-linux-ppc64le-0.14.49.tgz",
+      "integrity": "sha512-WP9zR4HX6iCBmMFH+XHHng2LmdoIeUmBpL4aL2TR8ruzXyT4dWrJ5BSbT8iNo6THN8lod6GOmYDLq/dgZLalGw==",
       "optional": true
     },
     "esbuild-linux-riscv64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-riscv64/-/esbuild-linux-riscv64-0.15.6.tgz",
-      "integrity": "sha512-pfK/3MJcmbfU399TnXW5RTPS1S+ID6ra+CVj9TFZ2s0q9Ja1F5A1VirUUvViPkjiw+Kq3zveyn6U09Wg1zJXrw==",
-      "dev": true,
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-linux-riscv64/-/esbuild-linux-riscv64-0.14.49.tgz",
+      "integrity": "sha512-h66ORBz+Dg+1KgLvzTVQEA1LX4XBd1SK0Fgbhhw4akpG/YkN8pS6OzYI/7SGENiN6ao5hETRDSkVcvU9NRtkMQ==",
       "optional": true
     },
     "esbuild-linux-s390x": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-linux-s390x/-/esbuild-linux-s390x-0.15.6.tgz",
-      "integrity": "sha512-OZeeDu32liefcwAE63FhVqM4heWTC8E3MglOC7SK0KYocDdY/6jyApw0UDkDHlcEK9mW6alX/SH9r3PDjcCo/Q==",
-      "dev": true,
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-linux-s390x/-/esbuild-linux-s390x-0.14.49.tgz",
+      "integrity": "sha512-DhrUoFVWD+XmKO1y7e4kNCqQHPs6twz6VV6Uezl/XHYGzM60rBewBF5jlZjG0nCk5W/Xy6y1xWeopkrhFFM0sQ==",
       "optional": true
     },
     "esbuild-netbsd-64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-netbsd-64/-/esbuild-netbsd-64-0.15.6.tgz",
-      "integrity": "sha512-kaxw61wcHMyiEsSsi5ut1YYs/hvTC2QkxJwyRvC2Cnsz3lfMLEu8zAjpBKWh9aU/N0O/gsRap4wTur5GRuSvBA==",
-      "dev": true,
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-netbsd-64/-/esbuild-netbsd-64-0.14.49.tgz",
+      "integrity": "sha512-BXaUwFOfCy2T+hABtiPUIpWjAeWK9P8O41gR4Pg73hpzoygVGnj0nI3YK4SJhe52ELgtdgWP/ckIkbn2XaTxjQ==",
       "optional": true
     },
     "esbuild-openbsd-64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-openbsd-64/-/esbuild-openbsd-64-0.15.6.tgz",
-      "integrity": "sha512-CuoY60alzYfIZapUHqFXqXbj88bbRJu8Fp9okCSHRX2zWIcGz4BXAHXiG7dlCye5nFVrY72psesLuWdusyf2qw==",
-      "dev": true,
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-openbsd-64/-/esbuild-openbsd-64-0.14.49.tgz",
+      "integrity": "sha512-lP06UQeLDGmVPw9Rg437Btu6J9/BmyhdoefnQ4gDEJTtJvKtQaUcOQrhjTq455ouZN4EHFH1h28WOJVANK41kA==",
       "optional": true
     },
     "esbuild-sunos-64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-sunos-64/-/esbuild-sunos-64-0.15.6.tgz",
-      "integrity": "sha512-1ceefLdPWcd1nW/ZLruPEYxeUEAVX0YHbG7w+BB4aYgfknaLGotI/ZvPWUZpzhC8l1EybrVlz++lm3E6ODIJOg==",
-      "dev": true,
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-sunos-64/-/esbuild-sunos-64-0.14.49.tgz",
+      "integrity": "sha512-4c8Zowp+V3zIWje329BeLbGh6XI9c/rqARNaj5yPHdC61pHI9UNdDxT3rePPJeWcEZVKjkiAS6AP6kiITp7FSw==",
       "optional": true
     },
     "esbuild-windows-32": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-windows-32/-/esbuild-windows-32-0.15.6.tgz",
-      "integrity": "sha512-pBqdOsKqCD5LRYiwF29PJRDJZi7/Wgkz46u3d17MRFmrLFcAZDke3nbdDa1c8YgY78RiemudfCeAemN8EBlIpA==",
-      "dev": true,
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-windows-32/-/esbuild-windows-32-0.14.49.tgz",
+      "integrity": "sha512-q7Rb+J9yHTeKr9QTPDYkqfkEj8/kcKz9lOabDuvEXpXuIcosWCJgo5Z7h/L4r7rbtTH4a8U2FGKb6s1eeOHmJA==",
       "optional": true
     },
     "esbuild-windows-64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-windows-64/-/esbuild-windows-64-0.15.6.tgz",
-      "integrity": "sha512-KpPOh4aTOo//g9Pk2oVAzXMpc9Sz9n5A9sZTmWqDSXCiiachfFhbuFlsKBGATYCVitXfmBIJ4nNYYWSOdz4hQg==",
-      "dev": true,
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-windows-64/-/esbuild-windows-64-0.14.49.tgz",
+      "integrity": "sha512-+Cme7Ongv0UIUTniPqfTX6mJ8Deo7VXw9xN0yJEN1lQMHDppTNmKwAM3oGbD/Vqff+07K2gN0WfNkMohmG+dVw==",
       "optional": true
     },
     "esbuild-windows-arm64": {
-      "version": "0.15.6",
-      "resolved": "https://registry.npmjs.org/esbuild-windows-arm64/-/esbuild-windows-arm64-0.15.6.tgz",
-      "integrity": "sha512-DB3G2x9OvFEa00jV+OkDBYpufq5x/K7a6VW6E2iM896DG4ZnAvJKQksOsCPiM1DUaa+DrijXAQ/ZOcKAqf/3Hg==",
-      "dev": true,
+      "version": "0.14.49",
+      "resolved": "https://registry.npmjs.org/esbuild-windows-arm64/-/esbuild-windows-arm64-0.14.49.tgz",
+      "integrity": "sha512-v+HYNAXzuANrCbbLFJ5nmO3m5y2PGZWLe3uloAkLt87aXiO2mZr3BTmacZdjwNkNEHuH3bNtN8cak+mzVjVPfA==",
       "optional": true
     },
     "escalade": {
-      "version": "3.1.1"
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
+      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw=="
     },
     "escape-string-regexp": {
-      "version": "1.0.5"
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
+      "integrity": "sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ="
     },
     "eslint": {
       "version": "8.8.0",
+      "resolved": "https://registry.npmjs.org/eslint/-/eslint-8.8.0.tgz",
+      "integrity": "sha512-H3KXAzQGBH1plhYS3okDix2ZthuYJlQQEGE5k0IKuEqUSiyu4AmxxlJ2MtTYeJ3xB4jDhcYCwGOg2TXYdnDXlQ==",
       "dev": true,
       "requires": {
         "@eslint/eslintrc": "^1.0.5",
@@ -10422,6 +9128,8 @@
       "dependencies": {
         "ansi-styles": {
           "version": "4.3.0",
+          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+          "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
           "dev": true,
           "requires": {
             "color-convert": "^2.0.1"
@@ -10429,6 +9137,8 @@
         },
         "chalk": {
           "version": "4.1.2",
+          "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+          "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
           "dev": true,
           "requires": {
             "ansi-styles": "^4.1.0",
@@ -10437,6 +9147,8 @@
         },
         "color-convert": {
           "version": "2.0.1",
+          "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+          "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
           "dev": true,
           "requires": {
             "color-name": "~1.1.4"
@@ -10444,14 +9156,20 @@
         },
         "color-name": {
           "version": "1.1.4",
+          "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+          "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
           "dev": true
         },
         "escape-string-regexp": {
           "version": "4.0.0",
+          "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
+          "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
           "dev": true
         },
         "eslint-scope": {
           "version": "7.1.0",
+          "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.1.0.tgz",
+          "integrity": "sha512-aWwkhnS0qAXqNOgKOK0dJ2nvzEbhEvpy8OlJ9kZ0FeZnA6zpjv1/Vei+puGFFX7zkPCkHHXb7IDX3A+7yPrRWg==",
           "dev": true,
           "requires": {
             "esrecurse": "^4.3.0",
@@ -10460,10 +9178,14 @@
         },
         "estraverse": {
           "version": "5.3.0",
+          "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
+          "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
           "dev": true
         },
         "glob-parent": {
           "version": "6.0.2",
+          "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
+          "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
           "dev": true,
           "requires": {
             "is-glob": "^4.0.3"
@@ -10471,6 +9193,8 @@
         },
         "globals": {
           "version": "13.10.0",
+          "resolved": "https://registry.npmjs.org/globals/-/globals-13.10.0.tgz",
+          "integrity": "sha512-piHC3blgLGFjvOuMmWZX60f+na1lXFDhQXBf1UYp2fXPXqvEUbOhNwi6BsQ0bQishwedgnjkwv1d9zKf+MWw3g==",
           "dev": true,
           "requires": {
             "type-fest": "^0.20.2"
@@ -10478,14 +9202,20 @@
         },
         "has-flag": {
           "version": "4.0.0",
+          "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
+          "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
           "dev": true
         },
         "ignore": {
           "version": "5.2.0",
+          "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.2.0.tgz",
+          "integrity": "sha512-CmxgYGiEPCLhfLnpPp1MoRmifwEIOgjcHXxOBjv7mY96c+eWScsOP9c112ZyLdWHi0FxHjI+4uVhKYp/gcdRmQ==",
           "dev": true
         },
         "supports-color": {
           "version": "7.2.0",
+          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
+          "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
           "dev": true,
           "requires": {
             "has-flag": "^4.0.0"
@@ -10493,12 +9223,16 @@
         },
         "type-fest": {
           "version": "0.20.2",
+          "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
+          "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
           "dev": true
         }
       }
     },
     "eslint-plugin-notice": {
       "version": "0.9.10",
+      "resolved": "https://registry.npmjs.org/eslint-plugin-notice/-/eslint-plugin-notice-0.9.10.tgz",
+      "integrity": "sha512-rF79EuqdJKu9hhTmwUkNeSvLmmq03m/NXq/NHwUENHbdJ0wtoyOjxZBhW4QCug8v5xYE6cGe3AWkGqSIe9KUbQ==",
       "dev": true,
       "requires": {
         "find-root": "^1.1.0",
@@ -10508,11 +9242,15 @@
     },
     "eslint-plugin-react-hooks": {
       "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-4.3.0.tgz",
+      "integrity": "sha512-XslZy0LnMn+84NEG9jSGR6eGqaZB3133L8xewQo3fQagbQuGt7a63gf+P1NGKZavEYEC3UXaWEAA/AqDkuN6xA==",
       "dev": true,
       "requires": {}
     },
     "eslint-scope": {
       "version": "5.1.1",
+      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.1.1.tgz",
+      "integrity": "sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==",
       "dev": true,
       "requires": {
         "esrecurse": "^4.3.0",
@@ -10521,6 +9259,8 @@
     },
     "eslint-utils": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/eslint-utils/-/eslint-utils-3.0.0.tgz",
+      "integrity": "sha512-uuQC43IGctw68pJA1RgbQS8/NP7rch6Cwd4j3ZBtgo4/8Flj4eGE7ZYSZRN3iq5pVUv6GPdW5Z1RFleo84uLDA==",
       "dev": true,
       "requires": {
         "eslint-visitor-keys": "^2.0.0"
@@ -10528,16 +9268,22 @@
       "dependencies": {
         "eslint-visitor-keys": {
           "version": "2.1.0",
+          "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-2.1.0.tgz",
+          "integrity": "sha512-0rSmRBzXgDzIsD6mGdJgevzgezI534Cer5L/vyMX0kHzT/jiB43jRhd9YUlMGYLQy2zprNmoT8qasCGtY+QaKw==",
           "dev": true
         }
       }
     },
     "eslint-visitor-keys": {
       "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.2.0.tgz",
+      "integrity": "sha512-IOzT0X126zn7ALX0dwFiUQEdsfzrm4+ISsQS8nukaJXwEyYKRSnEIIDULYg1mCtGp7UUXgfGl7BIolXREQK+XQ==",
       "dev": true
     },
     "espree": {
       "version": "9.3.0",
+      "resolved": "https://registry.npmjs.org/espree/-/espree-9.3.0.tgz",
+      "integrity": "sha512-d/5nCsb0JcqsSEeQzFZ8DH1RmxPcglRWh24EFTlUEmCKoehXGdpsx0RkHDubqUI8LSAIKMQp4r9SzQ3n+sm4HQ==",
       "dev": true,
       "requires": {
         "acorn": "^8.7.0",
@@ -10547,6 +9293,8 @@
     },
     "esquery": {
       "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.4.0.tgz",
+      "integrity": "sha512-cCDispWt5vHHtwMY2YrAQ4ibFkAL8RbH5YGBnZBc90MolvvfkkQcJro/aZiAQUlQ3qgrYS6D6v8Gc5G5CQsc9w==",
       "dev": true,
       "requires": {
         "estraverse": "^5.1.0"
@@ -10554,12 +9302,16 @@
       "dependencies": {
         "estraverse": {
           "version": "5.2.0",
+          "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.2.0.tgz",
+          "integrity": "sha512-BxbNGGNm0RyRYvUdHpIwv9IWzeM9XClbOxwoATuFdOE7ZE6wHL+HQ5T8hoPM+zHvmKzzsEqhgy0GrQ5X13afiQ==",
           "dev": true
         }
       }
     },
     "esrecurse": {
       "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
+      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
       "dev": true,
       "requires": {
         "estraverse": "^5.2.0"
@@ -10567,31 +9319,45 @@
       "dependencies": {
         "estraverse": {
           "version": "5.2.0",
+          "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.2.0.tgz",
+          "integrity": "sha512-BxbNGGNm0RyRYvUdHpIwv9IWzeM9XClbOxwoATuFdOE7ZE6wHL+HQ5T8hoPM+zHvmKzzsEqhgy0GrQ5X13afiQ==",
           "dev": true
         }
       }
     },
     "estraverse": {
       "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
+      "integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
       "dev": true
     },
     "estree-walker": {
-      "version": "2.0.2"
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-2.0.2.tgz",
+      "integrity": "sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w=="
     },
     "esutils": {
       "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
+      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
       "dev": true
     },
     "eyes": {
       "version": "0.1.8",
+      "resolved": "https://registry.npmjs.org/eyes/-/eyes-0.1.8.tgz",
+      "integrity": "sha1-Ys8SAjTGg3hdkCNIqADvPgzCC8A=",
       "dev": true
     },
     "fast-deep-equal": {
       "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
+      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
       "dev": true
     },
     "fast-glob": {
       "version": "3.2.7",
+      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.2.7.tgz",
+      "integrity": "sha512-rYGMRwip6lUMvYD3BTScMwT1HtAs2d71SMv66Vrxs0IekGZEjhM0pcMfjQPnknBt2zeCwQMEupiN02ZP4DiT1Q==",
       "dev": true,
       "requires": {
         "@nodelib/fs.stat": "^2.0.2",
@@ -10603,14 +9369,20 @@
     },
     "fast-json-stable-stringify": {
       "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
+      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
       "dev": true
     },
     "fast-levenshtein": {
       "version": "2.0.6",
+      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
+      "integrity": "sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=",
       "dev": true
     },
     "fastq": {
       "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.11.1.tgz",
+      "integrity": "sha512-HOnr8Mc60eNYl1gzwp6r5RoUyAn5/glBolUzP/Ez6IFVPMPirxn/9phgL6zhOtaTy7ISwPvQ+wT+hfcRZh/bzw==",
       "dev": true,
       "requires": {
         "reusify": "^1.0.4"
@@ -10618,6 +9390,8 @@
     },
     "fd-slicer": {
       "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/fd-slicer/-/fd-slicer-1.1.0.tgz",
+      "integrity": "sha1-JcfInLH5B3+IkbvmHY85Dq4lbx4=",
       "dev": true,
       "requires": {
         "pend": "~1.2.0"
@@ -10625,6 +9399,8 @@
     },
     "file-entry-cache": {
       "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
+      "integrity": "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
       "dev": true,
       "requires": {
         "flat-cache": "^3.0.4"
@@ -10632,6 +9408,8 @@
     },
     "fill-range": {
       "version": "7.0.1",
+      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
+      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
       "dev": true,
       "requires": {
         "to-regex-range": "^5.0.1"
@@ -10639,10 +9417,14 @@
     },
     "find-root": {
       "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/find-root/-/find-root-1.1.0.tgz",
+      "integrity": "sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng==",
       "dev": true
     },
     "flat-cache": {
       "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-3.0.4.tgz",
+      "integrity": "sha512-dm9s5Pw7Jc0GvMYbshN6zchCA9RgQlzzEZX3vylR9IqFfS8XciblUXOKfW6SiuJ0e13eDYZoZV5wdrev7P3Nwg==",
       "dev": true,
       "requires": {
         "flatted": "^3.1.0",
@@ -10651,10 +9433,14 @@
     },
     "flatted": {
       "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.1.1.tgz",
+      "integrity": "sha512-zAoAQiudy+r5SvnSw3KJy5os/oRJYHzrzja/tBDqrZtNhUw8bt6y8OBzMWcjWr+8liV8Eb6yOhw8WZ7VFZ5ZzA==",
       "dev": true
     },
     "formidable": {
       "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/formidable/-/formidable-2.0.1.tgz",
+      "integrity": "sha512-rjTMNbp2BpfQShhFbR3Ruk3qk2y9jKpvMW78nJgx8QKtxjDVrwbZG+wvDOmVbifHyOUOQJXxqEy6r0faRrPzTQ==",
       "dev": true,
       "requires": {
         "dezalgo": "1.0.3",
@@ -10665,6 +9451,8 @@
     },
     "fs-extra": {
       "version": "8.1.0",
+      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-8.1.0.tgz",
+      "integrity": "sha512-yhlQgA6mnOJUKOsRUFsgJdQCvkKhcz8tlZG5HBQfReYZy46OwLcY+Zia0mtdHsOo9y/hP+CxMN0TU9QxoOtG4g==",
       "dev": true,
       "requires": {
         "graceful-fs": "^4.2.0",
@@ -10674,10 +9462,14 @@
     },
     "fs-readdir-recursive": {
       "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/fs-readdir-recursive/-/fs-readdir-recursive-1.1.0.tgz",
+      "integrity": "sha512-GNanXlVr2pf02+sPN40XN8HG+ePaNcvM0q5mZBd668Obwb0yD5GiUbZOFgwn8kGMY6I3mdyDJzieUy3PTYyTRA==",
       "dev": true
     },
     "fs.realpath": {
       "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
+      "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8=",
       "dev": true
     },
     "fsevents": {
@@ -10687,21 +9479,31 @@
       "optional": true
     },
     "function-bind": {
-      "version": "1.1.1"
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
+      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
     },
     "functional-red-black-tree": {
       "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz",
+      "integrity": "sha1-GwqzvVU7Kg1jmdKcDj6gslIHgyc=",
       "dev": true
     },
     "gensync": {
-      "version": "1.0.0-beta.2"
+      "version": "1.0.0-beta.2",
+      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
+      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg=="
     },
     "get-caller-file": {
       "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
+      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
       "dev": true
     },
     "get-intrinsic": {
       "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.1.1.tgz",
+      "integrity": "sha512-kWZrnVM42QCiEA2Ig1bG8zjoIMOgxWwYCEeNdwY6Tv/cOSeGpcoX4pXHfKUxNKVoArnrEr2e9srnAxxGIraS9Q==",
       "dev": true,
       "requires": {
         "function-bind": "^1.1.1",
@@ -10711,6 +9513,8 @@
     },
     "get-stream": {
       "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
+      "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
       "dev": true,
       "requires": {
         "pump": "^3.0.0"
@@ -10718,6 +9522,8 @@
     },
     "glob": {
       "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.0.tgz",
+      "integrity": "sha512-lmLf6gtyrPq8tTjSmrO94wBeQbFR3HbLHbuyD69wuyQkImp2hWqMGB47OX65FBkPffO641IP9jWa1z4ivqG26Q==",
       "dev": true,
       "requires": {
         "fs.realpath": "^1.0.0",
@@ -10730,6 +9536,8 @@
     },
     "glob-parent": {
       "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
+      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
       "dev": true,
       "requires": {
         "is-glob": "^4.0.1"
@@ -10737,6 +9545,8 @@
     },
     "global-agent": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/global-agent/-/global-agent-3.0.0.tgz",
+      "integrity": "sha512-PT6XReJ+D07JvGoxQMkT6qji/jVNfX/h364XHZOWeRzy64sSFr+xJ5OX7LI3b4MPQzdL4H8Y8M0xzPpsVMwA8Q==",
       "dev": true,
       "optional": true,
       "requires": {
@@ -10750,6 +9560,8 @@
       "dependencies": {
         "semver": {
           "version": "7.3.7",
+          "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.7.tgz",
+          "integrity": "sha512-QlYTucUYOews+WeEujDoEGziz4K6c47V/Bd+LjSSYcA94p+DmINdf7ncaUinThfvZyu13lN9OY1XDxt8C0Tw0g==",
           "dev": true,
           "optional": true,
           "requires": {
@@ -10760,6 +9572,8 @@
     },
     "global-tunnel-ng": {
       "version": "2.7.1",
+      "resolved": "https://registry.npmjs.org/global-tunnel-ng/-/global-tunnel-ng-2.7.1.tgz",
+      "integrity": "sha512-4s+DyciWBV0eK148wqXxcmVAbFVPqtc3sEtUE/GTQfuU80rySLcMhUmHKSHI7/LDj8q0gDYI1lIhRRB7ieRAqg==",
       "dev": true,
       "optional": true,
       "requires": {
@@ -10770,10 +9584,14 @@
       }
     },
     "globals": {
-      "version": "11.12.0"
+      "version": "11.12.0",
+      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
+      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA=="
     },
     "globalthis": {
       "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.3.tgz",
+      "integrity": "sha512-sFdI5LyBiNTHjRd7cGPWapiHWMOXKyuBNX/cWJ3NfzrZQVa8GI/8cofCl74AOVqq9W5kNmguTIzJ/1s2gyI9wA==",
       "dev": true,
       "optional": true,
       "requires": {
@@ -10782,6 +9600,8 @@
     },
     "globby": {
       "version": "11.0.4",
+      "resolved": "https://registry.npmjs.org/globby/-/globby-11.0.4.tgz",
+      "integrity": "sha512-9O4MVG9ioZJ08ffbcyVYyLOJLk5JQ688pJ4eMGLpdWLHq/Wr1D9BlriLQyL0E+jbkuePVZXYFj47QM/v093wHg==",
       "dev": true,
       "requires": {
         "array-union": "^2.1.0",
@@ -10794,12 +9614,16 @@
       "dependencies": {
         "slash": {
           "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
+          "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
           "dev": true
         }
       }
     },
     "got": {
       "version": "9.6.0",
+      "resolved": "https://registry.npmjs.org/got/-/got-9.6.0.tgz",
+      "integrity": "sha512-R7eWptXuGYxwijs0eV+v3o6+XH1IqVK8dJOEecQfTmkncw9AV4dcw/Dhxi8MdlqPthxxpZyizMzyg8RTmEsG+Q==",
       "dev": true,
       "requires": {
         "@sindresorhus/is": "^0.14.0",
@@ -10817,6 +9641,8 @@
       "dependencies": {
         "get-stream": {
           "version": "4.1.0",
+          "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-4.1.0.tgz",
+          "integrity": "sha512-GMat4EJ5161kIy2HevLlr4luNjBgvmj413KaQA7jt4V8B4RDsfpHk7WQ9GVqfYyyx8OS/L66Kox+rJRNklLK7w==",
           "dev": true,
           "requires": {
             "pump": "^3.0.0"
@@ -10825,55 +9651,76 @@
       }
     },
     "graceful-fs": {
-      "version": "4.2.9"
+      "version": "4.2.9",
+      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.9.tgz",
+      "integrity": "sha512-NtNxqUcXgpW2iMrfqSfR73Glt39K+BLwWsPs94yR63v45T0Wbej7eRmL5cWfwEgqXnmjQp3zaJTshdRW/qC2ZQ=="
     },
     "has": {
       "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
+      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
       "requires": {
         "function-bind": "^1.1.1"
       }
     },
     "has-flag": {
-      "version": "3.0.0"
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
+      "integrity": "sha1-tdRU3CGZriJWmfNGfloH87lVuv0="
     },
     "has-symbols": {
       "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.2.tgz",
+      "integrity": "sha512-chXa79rL/UC2KlX17jo3vRGz0azaWEx5tGqZg5pO3NUyEJVB17dMruQlzCCOfUvElghKcm5194+BCRvi2Rv/Gw==",
       "dev": true
     },
     "hash-sum": {
-      "version": "2.0.0"
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/hash-sum/-/hash-sum-2.0.0.tgz",
+      "integrity": "sha512-WdZTbAByD+pHfl/g9QSsBIIwy8IT+EsPiKDs0KNX+zSHhdDLFKdZu0BQHljvO+0QI/BasbMSUa8wYNCZTvhslg=="
     },
     "he": {
       "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/he/-/he-1.2.0.tgz",
+      "integrity": "sha512-F/1DnUGPopORZi0ni+CvrCgHQ5FyEAHRLSApuYWMmrbSwoN2Mn/7k+Gl38gJnR7yyDZk6WLXwiGod1JOWNDKGw==",
       "peer": true
     },
     "hexoid": {
       "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/hexoid/-/hexoid-1.0.0.tgz",
+      "integrity": "sha512-QFLV0taWQOZtvIRIAdBChesmogZrtuXvVWsFHZTk2SU+anspqZ2vMnoLg7IE1+Uk16N19APic1BuF8bC8c2m5g==",
       "dev": true
     },
     "hosted-git-info": {
       "version": "2.8.9",
+      "resolved": "https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-2.8.9.tgz",
+      "integrity": "sha512-mxIDAb9Lsm6DoOJ7xH+5+X4y1LU/4Hi50L9C5sIswK3JzULS4bwk1FvjdBgvYR4bzT4tuUQiC15FE2f5HbLvYw==",
       "dev": true
     },
-    "html-entities": {
-      "version": "2.3.2"
-    },
     "html-reporter": {
       "version": "file:packages/html-reporter"
     },
     "html-tags": {
-      "version": "2.0.0"
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/html-tags/-/html-tags-2.0.0.tgz",
+      "integrity": "sha512-+Il6N8cCo2wB/Vd3gqy/8TZhTD3QvcVeQLCnZiGkGCH3JP28IgGAY41giccp2W4R3jfyJPAP318FQTa1yU7K7g=="
     },
     "http-cache-semantics": {
       "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/http-cache-semantics/-/http-cache-semantics-4.1.0.tgz",
+      "integrity": "sha512-carPklcUh7ROWRK7Cv27RPtdhYhUsela/ue5/jKzjegVvXDqM2ILE9Q2BGn9JZJh1g87cp56su/FgQSzcWS8cQ==",
       "dev": true
     },
     "ignore": {
       "version": "5.1.9",
+      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.1.9.tgz",
+      "integrity": "sha512-2zeMQpbKz5dhZ9IwL0gbxSW5w0NK/MSAMtNuhgIHEPmaU3vPdKPL0UdvUCXs5SS4JAwsBxysK5sFMW8ocFiVjQ==",
       "dev": true
     },
     "import-fresh": {
       "version": "3.3.0",
+      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
+      "integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
       "dev": true,
       "requires": {
         "parent-module": "^1.0.0",
@@ -10882,10 +9729,14 @@
     },
     "imurmurhash": {
       "version": "0.1.4",
+      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
+      "integrity": "sha1-khi5srkoojixPcT7a21XbyMUU+o=",
       "dev": true
     },
     "inflight": {
       "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
+      "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
       "dev": true,
       "requires": {
         "once": "^1.3.0",
@@ -10894,33 +9745,47 @@
     },
     "inherits": {
       "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
+      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
       "dev": true
     },
     "ini": {
       "version": "1.3.8",
+      "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.8.tgz",
+      "integrity": "sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==",
       "dev": true,
       "optional": true
     },
     "is-arrayish": {
       "version": "0.2.1",
+      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
+      "integrity": "sha1-d8mYQFJ6qOyxqLppe4BkWnqSap0=",
       "dev": true
     },
     "is-core-module": {
       "version": "2.9.0",
+      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.9.0.tgz",
+      "integrity": "sha512-+5FPy5PnwmO3lvfMb0AsoPaBG+5KHUI0wYFXOtYPnVVVspTFUuMZNfNaNVRt3FZadstu2c8x23vykRW/NBoU6A==",
       "requires": {
         "has": "^1.0.3"
       }
     },
     "is-extglob": {
       "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
+      "integrity": "sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=",
       "dev": true
     },
     "is-fullwidth-code-point": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
+      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
       "dev": true
     },
     "is-glob": {
       "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
+      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
       "dev": true,
       "requires": {
         "is-extglob": "^2.1.1"
@@ -10928,62 +9793,87 @@
     },
     "is-number": {
       "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
+      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
       "dev": true
     },
-    "is-what": {
-      "version": "4.1.7"
-    },
     "isarray": {
       "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
+      "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=",
       "dev": true
     },
     "isexe": {
       "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
+      "integrity": "sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=",
       "dev": true
     },
     "isstream": {
       "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
+      "integrity": "sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo=",
       "dev": true
     },
     "js-tokens": {
-      "version": "4.0.0"
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
+      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ=="
     },
     "js-yaml": {
       "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
+      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
       "dev": true,
       "requires": {
         "argparse": "^2.0.1"
       }
     },
     "jsesc": {
-      "version": "2.5.2"
+      "version": "2.5.2",
+      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-2.5.2.tgz",
+      "integrity": "sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA=="
     },
     "json-buffer": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.0.tgz",
+      "integrity": "sha1-Wx85evx11ne96Lz8Dkfh+aPZqJg=",
       "dev": true
     },
     "json-parse-even-better-errors": {
       "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
+      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
       "dev": true
     },
     "json-schema-traverse": {
       "version": "0.4.1",
+      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
+      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
       "dev": true
     },
     "json-stable-stringify-without-jsonify": {
       "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
+      "integrity": "sha1-nbe1lJatPzz+8wp1FC0tkwrXJlE=",
       "dev": true
     },
     "json-stringify-safe": {
       "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
+      "integrity": "sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA==",
       "dev": true,
       "optional": true
     },
     "json5": {
-      "version": "2.2.1"
+      "version": "2.2.1",
+      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.1.tgz",
+      "integrity": "sha512-1hqLFMSrGHRHxav9q9gNjJ5EXznIxGVO09xQRrwplcS8qs28pZ8s8hupZAmqDwZUmVZ2Qb2jnyPOWcDH8m8dlA=="
     },
     "jsonfile": {
       "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-4.0.0.tgz",
+      "integrity": "sha1-h3Gq4HmbZAdrdmQPygWPnBDjPss=",
       "dev": true,
       "requires": {
         "graceful-fs": "^4.1.6"
@@ -10991,20 +9881,28 @@
     },
     "keyv": {
       "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/keyv/-/keyv-3.1.0.tgz",
+      "integrity": "sha512-9ykJ/46SN/9KPM/sichzQ7OvXyGDYKGTaDlKMGCAlg2UK8KRy4jb0d8sFc+0Tt0YYnThq8X2RZgCg74RPxgcVA==",
       "dev": true,
       "requires": {
         "json-buffer": "3.0.0"
       }
     },
     "kleur": {
-      "version": "4.1.5"
+      "version": "4.1.5",
+      "resolved": "https://registry.npmjs.org/kleur/-/kleur-4.1.5.tgz",
+      "integrity": "sha512-o+NO+8WrRiQEE4/7nwRJhN1HWpVmJm511pBHUxPLtp0BUISzlBplORYSmTclCnJvQq2tKu/sgl3xVpkc7ZWuQQ=="
     },
     "leven": {
       "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/leven/-/leven-2.1.0.tgz",
+      "integrity": "sha1-wuep93IJTe6dNCAq6KzORoeHVYA=",
       "dev": true
     },
     "levn": {
       "version": "0.4.1",
+      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
+      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
       "dev": true,
       "requires": {
         "prelude-ls": "^1.2.1",
@@ -11013,6 +9911,8 @@
     },
     "license-checker": {
       "version": "25.0.1",
+      "resolved": "https://registry.npmjs.org/license-checker/-/license-checker-25.0.1.tgz",
+      "integrity": "sha512-mET5AIwl7MR2IAKYYoVBBpV0OnkKQ1xGj2IMMeEFIs42QAkEVjRtFZGWmQ28WeU7MP779iAgOaOy93Mn44mn6g==",
       "dev": true,
       "requires": {
         "chalk": "^2.4.1",
@@ -11029,6 +9929,8 @@
       "dependencies": {
         "debug": {
           "version": "3.2.7",
+          "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
+          "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
           "dev": true,
           "requires": {
             "ms": "^2.1.1"
@@ -11036,27 +9938,39 @@
         },
         "semver": {
           "version": "5.7.1",
+          "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
+          "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
           "dev": true
         }
       }
     },
     "lines-and-columns": {
       "version": "1.1.6",
+      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.1.6.tgz",
+      "integrity": "sha1-HADHQ7QzzQpOgHWPe2SldEDZ/wA=",
       "dev": true
     },
     "lodash": {
       "version": "4.17.21",
+      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
+      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
       "dev": true
     },
     "lodash.kebabcase": {
-      "version": "4.1.1"
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/lodash.kebabcase/-/lodash.kebabcase-4.1.1.tgz",
+      "integrity": "sha512-N8XRTIMMqqDgSy4VLKPnJ/+hpGZN+PHQiJnSenYqPaVV/NCqEogTnAdZLQiGKhxX+JCs8waWq2t1XHWKOmlY8g=="
     },
     "lodash.merge": {
       "version": "4.6.2",
+      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
+      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
       "dev": true
     },
     "loose-envify": {
       "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
+      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
       "dev": true,
       "requires": {
         "js-tokens": "^3.0.0 || ^4.0.0"
@@ -11064,10 +9978,14 @@
     },
     "lowercase-keys": {
       "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-1.0.1.tgz",
+      "integrity": "sha512-G2Lj61tXDnVFFOi8VZds+SoQjtQC3dgokKdDG2mTm1tx4m50NUHBOZSBwQQHyy0V12A0JTG4icfZQH+xPyh8VA==",
       "dev": true
     },
     "lru-cache": {
       "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
+      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
       "dev": true,
       "requires": {
         "yallist": "^4.0.0"
@@ -11075,12 +9993,16 @@
     },
     "magic-string": {
       "version": "0.26.2",
+      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.26.2.tgz",
+      "integrity": "sha512-NzzlXpclt5zAbmo6h6jNc8zl2gNRGHvmsZW4IvZhTC4W7k4OlLP+S5YLussa/r3ixNT66KOQfNORlXHSOy/X4A==",
       "requires": {
         "sourcemap-codec": "^1.4.8"
       }
     },
     "make-dir": {
       "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-2.1.0.tgz",
+      "integrity": "sha512-LS9X+dc8KLxXCb8dni79fLIIUA5VyZoyjSMCwTluaXA0o27cCK0bhXkpgw+sTXVpPy/lSO57ilRixqk0vDmtRA==",
       "dev": true,
       "requires": {
         "pify": "^4.0.1",
@@ -11089,12 +10011,16 @@
       "dependencies": {
         "semver": {
           "version": "5.7.1",
+          "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
+          "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
           "dev": true
         }
       }
     },
     "matcher": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/matcher/-/matcher-3.0.0.tgz",
+      "integrity": "sha512-OkeDaAZ/bQCxeFAozM55PKcKU0yJMPGifLwV4Qgjitu+5MoAfSQN4lsLJeXZ1b8w0x+/Emda6MZgXS1jvsapng==",
       "dev": true,
       "optional": true,
       "requires": {
@@ -11103,6 +10029,8 @@
       "dependencies": {
         "escape-string-regexp": {
           "version": "4.0.0",
+          "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
+          "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
           "dev": true,
           "optional": true
         }
@@ -11110,36 +10038,41 @@
     },
     "mdurl": {
       "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/mdurl/-/mdurl-1.0.1.tgz",
+      "integrity": "sha1-/oWy7HWlkDfyrf7BAP1sYBdhFS4=",
       "dev": true
     },
-    "merge-anything": {
-      "version": "5.0.2",
-      "requires": {
-        "is-what": "^4.1.6",
-        "ts-toolbelt": "^9.6.0"
-      }
-    },
     "merge-source-map": {
       "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/merge-source-map/-/merge-source-map-1.1.0.tgz",
+      "integrity": "sha512-Qkcp7P2ygktpMPh2mCQZaf3jhN6D3Z/qVZHSdWvQ+2Ef5HgRAPBO57A77+ENm0CPx2+1Ce/MYKi3ymqdfuqibw==",
       "requires": {
         "source-map": "^0.6.1"
       },
       "dependencies": {
         "source-map": {
-          "version": "0.6.1"
+          "version": "0.6.1",
+          "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
+          "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g=="
         }
       }
     },
     "merge2": {
       "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
+      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
       "dev": true
     },
     "metric-lcs": {
       "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/metric-lcs/-/metric-lcs-0.1.2.tgz",
+      "integrity": "sha512-+TZ5dUDPKPJaU/rscTzxyN8ZkX7eAVLAiQU/e+YINleXPv03SCmJShaMT1If1liTH8OcmWXZs0CmzCBRBLcMpA==",
       "dev": true
     },
     "micromatch": {
       "version": "4.0.4",
+      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.4.tgz",
+      "integrity": "sha512-pRmzw/XUcwXGpD9aI9q/0XOwLNygjETJ8y0ao0wdqprrzDa4YnxLcz7fQRZr8voh8V10kGhABbNcHVk5wHgWwg==",
       "dev": true,
       "requires": {
         "braces": "^3.0.1",
@@ -11148,14 +10081,20 @@
     },
     "mime": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/mime/-/mime-3.0.0.tgz",
+      "integrity": "sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A==",
       "dev": true
     },
     "mimic-response": {
       "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-1.0.1.tgz",
+      "integrity": "sha512-j5EctnkH7amfV/q5Hgmoal1g2QHFJRraOtmx0JpIqkxhBhI/lJSl1nMpQ45hVarwNETOoWEimndZ4QK0RHxuxQ==",
       "dev": true
     },
     "minimatch": {
       "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz",
+      "integrity": "sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==",
       "dev": true,
       "requires": {
         "brace-expansion": "^1.1.7"
@@ -11163,10 +10102,14 @@
     },
     "minimist": {
       "version": "1.2.6",
+      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.6.tgz",
+      "integrity": "sha512-Jsjnk4bw3YJqYzbdyBiNsPWHPfO++UGG749Cxs6peCu5Xg4nrena6OVxOYxrQTqww0Jmwt+Ref8rggumkTLz9Q==",
       "dev": true
     },
     "mkdirp": {
       "version": "0.5.5",
+      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.5.tgz",
+      "integrity": "sha512-NKmAlESf6jMGym1++R0Ra7wvhV+wFW63FaSOFPwRahvea0gMUcGUhVeAg/0BC0wiv9ih5NYPB1Wn1UEI1/L+xQ==",
       "dev": true,
       "requires": {
         "minimist": "^1.2.5"
@@ -11174,31 +10117,47 @@
     },
     "mri": {
       "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/mri/-/mri-1.1.4.tgz",
+      "integrity": "sha512-6y7IjGPm8AzlvoUrwAaw1tLnUBudaS3752vcd8JtrpGGQn+rXIe63LFVHm/YMwtqAuh+LJPCFdlLYPWM1nYn6w==",
       "dev": true
     },
     "ms": {
-      "version": "2.1.2"
+      "version": "2.1.2",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
+      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
     },
     "nanoid": {
-      "version": "3.3.4"
+      "version": "3.3.4",
+      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.4.tgz",
+      "integrity": "sha512-MqBkQh/OHTS2egovRtLk45wEyNXwF+cokD+1YPf9u5VfJiRdAiRwB2froX5Co9Rh20xs4siNPm8naNotSD6RBw=="
     },
     "natural-compare": {
       "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
+      "integrity": "sha1-Sr6/7tdUHywnrPspvbvRXI1bpPc=",
       "dev": true
     },
     "ncp": {
       "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/ncp/-/ncp-2.0.0.tgz",
+      "integrity": "sha1-GVoh1sRuNh0vsSgbo4uR6d9727M=",
       "dev": true
     },
     "node-releases": {
-      "version": "2.0.5"
+      "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.5.tgz",
+      "integrity": "sha512-U9h1NLROZTq9uE1SNffn6WuPDg8icmi3ns4rEl/oTfIle4iLjTliCzgTsbaIFMq/Xn078/lfY/BL0GWZ+psK4Q=="
     },
     "node-stream-zip": {
       "version": "1.15.0",
+      "resolved": "https://registry.npmjs.org/node-stream-zip/-/node-stream-zip-1.15.0.tgz",
+      "integrity": "sha512-LN4fydt9TqhZhThkZIVQnF9cwjU3qmUH9h78Mx/K7d3VvfRqqwthLwJEUOEL0QPZ0XQmNN7be5Ggit5+4dq3Bw==",
       "dev": true
     },
     "nopt": {
       "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/nopt/-/nopt-4.0.3.tgz",
+      "integrity": "sha512-CvaGwVMztSMJLOeXPrez7fyfObdZqNUK1cPAEzLHrTybIua9pMdmmPR5YwtfNftIOMv3DPUhFaxsZMNTQO20Kg==",
       "dev": true,
       "requires": {
         "abbrev": "1",
@@ -11207,6 +10166,8 @@
     },
     "normalize-package-data": {
       "version": "2.5.0",
+      "resolved": "https://registry.npmjs.org/normalize-package-data/-/normalize-package-data-2.5.0.tgz",
+      "integrity": "sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==",
       "dev": true,
       "requires": {
         "hosted-git-info": "^2.1.4",
@@ -11217,20 +10178,28 @@
       "dependencies": {
         "semver": {
           "version": "5.7.1",
+          "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
+          "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
           "dev": true
         }
       }
     },
     "normalize-path": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
+      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
       "dev": true
     },
     "normalize-url": {
       "version": "4.5.1",
+      "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-4.5.1.tgz",
+      "integrity": "sha512-9UZCFRHQdNrfTpGg8+1INIg93B6zE0aXMVFkw1WFwvO4SlZywU6aLg5Of0Ap/PgcbSw4LNxvMWXMeugwMCX0AA==",
       "dev": true
     },
     "npm-conf": {
       "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/npm-conf/-/npm-conf-1.1.3.tgz",
+      "integrity": "sha512-Yic4bZHJOt9RCFbRP3GgpqhScOY4HH3V2P8yBj6CeYq118Qr+BLXqT2JvpJ00mryLESpgOxf5XlFv4ZjXxLScw==",
       "dev": true,
       "optional": true,
       "requires": {
@@ -11240,6 +10209,8 @@
       "dependencies": {
         "pify": {
           "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/pify/-/pify-3.0.0.tgz",
+          "integrity": "sha1-5aSs0sEB/fPZpNB/DbxNtJ3SgXY=",
           "dev": true,
           "optional": true
         }
@@ -11247,14 +10218,20 @@
     },
     "npm-normalize-package-bin": {
       "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/npm-normalize-package-bin/-/npm-normalize-package-bin-1.0.1.tgz",
+      "integrity": "sha512-EPfafl6JL5/rU+ot6P3gRSCpPDW5VmIzX959Ob1+ySFUuuYHWHekXpwdUZcKP5C+DS4GEtdJluwBjnsNDl+fSA==",
       "dev": true
     },
     "object-keys": {
       "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
+      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
       "dev": true
     },
     "object.assign": {
       "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.2.tgz",
+      "integrity": "sha512-ixT2L5THXsApyiUPYKmW+2EHpXXe5Ii3M+f4e+aJFAHao5amFRW6J0OO6c/LU8Be47utCx2GL89hxGB6XSmKuQ==",
       "dev": true,
       "requires": {
         "call-bind": "^1.0.0",
@@ -11265,6 +10242,8 @@
     },
     "once": {
       "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
+      "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
       "dev": true,
       "requires": {
         "wrappy": "1"
@@ -11272,6 +10251,8 @@
     },
     "optionator": {
       "version": "0.9.1",
+      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.1.tgz",
+      "integrity": "sha512-74RlY5FCnhq4jRxVUPKDaRwrVNXMqsGsiW6AJw4XK8hmtm10wC0ypZBLw5IIp85NZMr91+qd1RvvENwg7jjRFw==",
       "dev": true,
       "requires": {
         "deep-is": "^0.1.3",
@@ -11284,14 +10265,20 @@
     },
     "os-homedir": {
       "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/os-homedir/-/os-homedir-1.0.2.tgz",
+      "integrity": "sha1-/7xJiDNuDoM94MFox+8VISGqf7M=",
       "dev": true
     },
     "os-tmpdir": {
       "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz",
+      "integrity": "sha1-u+Z0BseaqFxc/sdm/lc0VV36EnQ=",
       "dev": true
     },
     "osenv": {
       "version": "0.1.5",
+      "resolved": "https://registry.npmjs.org/osenv/-/osenv-0.1.5.tgz",
+      "integrity": "sha512-0CWcCECdMVc2Rw3U5w9ZjqX6ga6ubk1xDVKxtBQPK7wis/0F2r9T6k4ydGYhecl7YUBxBVxhL5oisPsNxAPe2g==",
       "dev": true,
       "requires": {
         "os-homedir": "^1.0.0",
@@ -11300,10 +10287,14 @@
     },
     "p-cancelable": {
       "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/p-cancelable/-/p-cancelable-1.1.0.tgz",
+      "integrity": "sha512-s73XxOZ4zpt1edZYZzvhqFa6uvQc1vwUa0K0BdtIZgQMAJj9IbebH+JkgKZc9h+B05PKHLOTl4ajG1BmNrVZlw==",
       "dev": true
     },
     "parent-module": {
       "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
+      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
       "dev": true,
       "requires": {
         "callsites": "^3.0.0"
@@ -11311,6 +10302,8 @@
     },
     "parse-json": {
       "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
+      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
       "dev": true,
       "requires": {
         "@babel/code-frame": "^7.0.0",
@@ -11321,47 +10314,65 @@
     },
     "path-is-absolute": {
       "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
+      "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18=",
       "dev": true
     },
     "path-key": {
       "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
+      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
       "dev": true
     },
     "path-parse": {
-      "version": "1.0.7"
+      "version": "1.0.7",
+      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
+      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw=="
     },
     "path-type": {
       "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
+      "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
       "dev": true
     },
     "pend": {
       "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/pend/-/pend-1.2.0.tgz",
+      "integrity": "sha1-elfrVQpng/kRUzH89GY9XI4AelA=",
       "dev": true
     },
     "picocolors": {
-      "version": "1.0.0"
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz",
+      "integrity": "sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ=="
     },
     "picomatch": {
-      "version": "2.2.3"
+      "version": "2.2.3",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.2.3.tgz",
+      "integrity": "sha512-KpELjfwcCDUb9PeigTs2mBJzXUPzAuP2oPcA989He8Rte0+YUAjw1JVedDhuTKPkHjSYzMN3npC9luThGYEKdg=="
     },
     "pify": {
       "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/pify/-/pify-4.0.1.tgz",
+      "integrity": "sha512-uB80kBFb/tfd68bVleG9T5GGsGPjJrLAUpR5PZIrhBnIaRTQRjqdJSsIKkOP6OAIFbj7GOrcudc5pNjZ+geV2g==",
       "dev": true
     },
     "pkginfo": {
       "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/pkginfo/-/pkginfo-0.3.1.tgz",
+      "integrity": "sha1-Wyn2qB9wcXFC4J52W76rl7T4HiE=",
       "dev": true
     },
     "playwright": {
       "version": "file:packages/playwright",
       "requires": {
-        "playwright-core": "1.27.0-next"
+        "playwright-core": "1.25.2"
       }
     },
     "playwright-chromium": {
       "version": "file:packages/playwright-chromium",
       "requires": {
-        "playwright-core": "1.27.0-next"
+        "playwright-core": "1.25.2"
       }
     },
     "playwright-core": {
@@ -11370,17 +10381,19 @@
     "playwright-firefox": {
       "version": "file:packages/playwright-firefox",
       "requires": {
-        "playwright-core": "1.27.0-next"
+        "playwright-core": "1.25.2"
       }
     },
     "playwright-webkit": {
       "version": "file:packages/playwright-webkit",
       "requires": {
-        "playwright-core": "1.27.0-next"
+        "playwright-core": "1.25.2"
       }
     },
     "postcss": {
-      "version": "8.4.16",
+      "version": "8.4.14",
+      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.14.tgz",
+      "integrity": "sha512-E398TUmfAYFPBSdzgeieK2Y1+1cpdxJx8yXbK/m57nRhKSmk1GB2tO4lbLBtlkfPQTDKfe4Xqv1ASWPpayPEig==",
       "requires": {
         "nanoid": "^3.3.4",
         "picocolors": "^1.0.0",
@@ -11389,6 +10402,8 @@
     },
     "postcss-selector-parser": {
       "version": "6.0.10",
+      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.0.10.tgz",
+      "integrity": "sha512-IQ7TZdoaqbT+LCpShg46jnZVlhWD2w6iQYAcYXfHARZ7X1t/UGhhceQDs5X0cGqKvYlHNOuv7Oa1xmb0oQuA3w==",
       "requires": {
         "cssesc": "^3.0.0",
         "util-deprecate": "^1.0.2"
@@ -11396,30 +10411,44 @@
     },
     "prelude-ls": {
       "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
+      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
       "dev": true
     },
     "prepend-http": {
       "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/prepend-http/-/prepend-http-2.0.0.tgz",
+      "integrity": "sha1-6SQ0v6XqjBn0HN/UAddBo8gZ2Jc=",
       "dev": true
     },
     "prettier": {
-      "version": "2.6.2"
+      "version": "2.6.2",
+      "resolved": "https://registry.npmjs.org/prettier/-/prettier-2.6.2.tgz",
+      "integrity": "sha512-PkUpF+qoXTqhOeWL9fu7As8LXsIUZ1WYaJiY/a7McAQzxjk82OF0tibkFXVCDImZtWxbvojFjerkiLb0/q8mew=="
     },
     "process-nextick-args": {
       "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
+      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==",
       "dev": true
     },
     "progress": {
       "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/progress/-/progress-2.0.3.tgz",
+      "integrity": "sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==",
       "dev": true
     },
     "proto-list": {
       "version": "1.2.4",
+      "resolved": "https://registry.npmjs.org/proto-list/-/proto-list-1.2.4.tgz",
+      "integrity": "sha1-IS1b/hMYMGpCD2QCuOJv85ZHqEk=",
       "dev": true,
       "optional": true
     },
     "proxy": {
       "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/proxy/-/proxy-1.0.2.tgz",
+      "integrity": "sha512-KNac2ueWRpjbUh77OAFPZuNdfEqNynm9DD4xHT14CccGpW8wKZwEkN0yjlb7X9G9Z9F55N0Q+1z+WfgAhwYdzQ==",
       "dev": true,
       "requires": {
         "args": "5.0.1",
@@ -11428,10 +10457,14 @@
       }
     },
     "pseudomap": {
-      "version": "1.0.2"
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/pseudomap/-/pseudomap-1.0.2.tgz",
+      "integrity": "sha1-8FKijacOYYkX7wqKw0wa5aaChrM="
     },
     "pump": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.0.tgz",
+      "integrity": "sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==",
       "dev": true,
       "requires": {
         "end-of-stream": "^1.1.0",
@@ -11440,21 +10473,31 @@
     },
     "punycode": {
       "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
+      "integrity": "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==",
       "dev": true
     },
     "qs": {
       "version": "6.9.3",
+      "resolved": "https://registry.npmjs.org/qs/-/qs-6.9.3.tgz",
+      "integrity": "sha512-EbZYNarm6138UKKq46tdx08Yo/q9ZhFoAXAI1meAFd2GtbRDhbZY2WQSICskT0c5q99aFzLG1D4nvTk9tqfXIw==",
       "dev": true
     },
     "querystring": {
-      "version": "0.2.1"
+      "version": "0.2.1",
+      "resolved": "https://registry.npmjs.org/querystring/-/querystring-0.2.1.tgz",
+      "integrity": "sha512-wkvS7mL/JMugcup3/rMitHmd9ecIGd2lhFhK9N3UUQ450h66d1r3Y9nvXzQAW1Lq+wyx61k/1pfKS5KuKiyEbg=="
     },
     "queue-microtask": {
       "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
+      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
       "dev": true
     },
     "react": {
       "version": "18.1.0",
+      "resolved": "https://registry.npmjs.org/react/-/react-18.1.0.tgz",
+      "integrity": "sha512-4oL8ivCz5ZEPyclFQXaNksK3adutVS8l2xzZU0cqEFrE9Sb7fC0EFK5uEk74wIreL1DERyjvsU915j1pcT2uEQ==",
       "dev": true,
       "requires": {
         "loose-envify": "^1.1.0"
@@ -11462,6 +10505,8 @@
     },
     "react-dom": {
       "version": "18.1.0",
+      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.1.0.tgz",
+      "integrity": "sha512-fU1Txz7Budmvamp7bshe4Zi32d0ll7ect+ccxNu9FlObT605GOEB8BfO4tmRJ39R5Zj831VCpvQ05QPBW5yb+w==",
       "dev": true,
       "requires": {
         "loose-envify": "^1.1.0",
@@ -11470,10 +10515,13 @@
     },
     "react-refresh": {
       "version": "0.13.0",
-      "dev": true
+      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.13.0.tgz",
+      "integrity": "sha512-XP8A9BT0CpRBD+NYLLeIhld/RqG9+gktUjW1FkE+Vm7OCinbG1SshcK5tb9ls4kzvjZr9mOQc7HYgBngEyPAXg=="
     },
     "read-installed": {
       "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/read-installed/-/read-installed-4.0.3.tgz",
+      "integrity": "sha1-/5uLZ/GH0eTCm5/rMfayI6zRkGc=",
       "dev": true,
       "requires": {
         "debuglog": "^1.0.1",
@@ -11487,12 +10535,16 @@
       "dependencies": {
         "semver": {
           "version": "5.7.1",
+          "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
+          "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
           "dev": true
         }
       }
     },
     "read-package-json": {
       "version": "2.1.2",
+      "resolved": "https://registry.npmjs.org/read-package-json/-/read-package-json-2.1.2.tgz",
+      "integrity": "sha512-D1KmuLQr6ZSJS0tW8hf3WGpRlwszJOXZ3E8Yd/DNRaM5d+1wVRZdHlpGBLAuovjr28LbWvjpWkBHMxpRGGjzNA==",
       "dev": true,
       "requires": {
         "glob": "^7.1.1",
@@ -11503,6 +10555,8 @@
     },
     "read-pkg": {
       "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/read-pkg/-/read-pkg-5.2.0.tgz",
+      "integrity": "sha512-Ug69mNOpfvKDAc2Q8DRpMjjzdtrnv9HcSMX+4VsZxD1aZ6ZzrIE7rlzXBtWTyhULSMKg076AW6WR5iZpD0JiOg==",
       "dev": true,
       "requires": {
         "@types/normalize-package-data": "^2.4.0",
@@ -11513,6 +10567,8 @@
     },
     "readable-stream": {
       "version": "2.3.7",
+      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.7.tgz",
+      "integrity": "sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==",
       "dev": true,
       "requires": {
         "core-util-is": "~1.0.0",
@@ -11526,6 +10582,8 @@
     },
     "readdir-scoped-modules": {
       "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/readdir-scoped-modules/-/readdir-scoped-modules-1.1.0.tgz",
+      "integrity": "sha512-asaikDeqAQg7JifRsZn1NJZXo9E+VwlyCfbkZhwyISinqk5zNS6266HS5kah6P0SaQKGF6SkNnZVHUzHFYxYDw==",
       "dev": true,
       "requires": {
         "debuglog": "^1.0.1",
@@ -11536,6 +10594,8 @@
     },
     "readdirp": {
       "version": "3.6.0",
+      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
+      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
       "dev": true,
       "requires": {
         "picomatch": "^2.2.1"
@@ -11546,14 +10606,20 @@
     },
     "regexpp": {
       "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/regexpp/-/regexpp-3.2.0.tgz",
+      "integrity": "sha512-pq2bWo9mVD43nbts2wGv17XLiNLya+GklZ8kaDLV2Z08gDCsGpnKn9BFMepvWuHCbyVvY7J5o5+BVvoQbmlJLg==",
       "dev": true
     },
     "require-directory": {
       "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
+      "integrity": "sha1-jGStX9MNqxyXbiNE/+f3kqam30I=",
       "dev": true
     },
     "resolve": {
       "version": "1.22.1",
+      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.1.tgz",
+      "integrity": "sha512-nBpuuYuY5jFsli/JIs1oldw6fOQCBioohqWZg/2hiaOybXOft4lonv85uDOKXdf8rhyK159cxU5cDcK/NKk8zw==",
       "requires": {
         "is-core-module": "^2.9.0",
         "path-parse": "^1.0.7",
@@ -11562,10 +10628,14 @@
     },
     "resolve-from": {
       "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
+      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
       "dev": true
     },
     "responselike": {
       "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/responselike/-/responselike-1.0.2.tgz",
+      "integrity": "sha1-kYcg7ztjHFZCvgaPFa3lpG9Loec=",
       "dev": true,
       "requires": {
         "lowercase-keys": "^1.0.0"
@@ -11573,10 +10643,14 @@
     },
     "reusify": {
       "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
+      "integrity": "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
       "dev": true
     },
     "rimraf": {
       "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
+      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
       "dev": true,
       "requires": {
         "glob": "^7.1.3"
@@ -11584,6 +10658,8 @@
     },
     "roarr": {
       "version": "2.15.4",
+      "resolved": "https://registry.npmjs.org/roarr/-/roarr-2.15.4.tgz",
+      "integrity": "sha512-CHhPh+UNHD2GTXNYhPWLnU8ONHdI+5DI+4EYIAOaiD63rHeYlZvyh8P+in5999TTSFgUYuKUAjzRI4mdh/p+2A==",
       "dev": true,
       "optional": true,
       "requires": {
@@ -11597,12 +10673,16 @@
     },
     "rollup": {
       "version": "2.77.0",
+      "resolved": "https://registry.npmjs.org/rollup/-/rollup-2.77.0.tgz",
+      "integrity": "sha512-vL8xjY4yOQEw79DvyXLijhnhh+R/O9zpF/LEgkCebZFtb6ELeN9H3/2T0r8+mp+fFTBHZ5qGpOpW2ela2zRt3g==",
       "requires": {
         "fsevents": "~2.3.2"
       }
     },
     "run-parallel": {
       "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
+      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
       "dev": true,
       "requires": {
         "queue-microtask": "^1.2.2"
@@ -11610,35 +10690,49 @@
     },
     "rxjs": {
       "version": "6.6.7",
+      "resolved": "https://registry.npmjs.org/rxjs/-/rxjs-6.6.7.tgz",
+      "integrity": "sha512-hTdwr+7yYNIT5n4AMYp85KA6yw2Va0FLa3Rguvbpa4W3I5xynaBZo41cM3XM+4Q6fRMj3sBYIR1VAmZMXYJvRQ==",
       "dev": true,
       "requires": {
         "tslib": "^1.9.0"
       }
     },
     "safe-buffer": {
-      "version": "5.1.2"
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
+      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
     },
     "sax": {
       "version": "1.2.4",
+      "resolved": "https://registry.npmjs.org/sax/-/sax-1.2.4.tgz",
+      "integrity": "sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw==",
       "dev": true
     },
     "scheduler": {
       "version": "0.22.0",
+      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.22.0.tgz",
+      "integrity": "sha512-6QAm1BgQI88NPYymgGQLCZgvep4FyePDWFpXVK+zNSUgHwlqpJy8VEh8Et0KxTACS4VWwMousBElAZOH9nkkoQ==",
       "dev": true,
       "requires": {
         "loose-envify": "^1.1.0"
       }
     },
     "semver": {
-      "version": "6.3.0"
+      "version": "6.3.0",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
+      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw=="
     },
     "semver-compare": {
       "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/semver-compare/-/semver-compare-1.0.0.tgz",
+      "integrity": "sha512-YM3/ITh2MJ5MtzaM429anh+x2jiLVjqILF4m4oyQB18W7Ggea7BfqdH/wGMK7dDiMghv/6WG7znWMwUDzJiXow==",
       "dev": true,
       "optional": true
     },
     "serialize-error": {
       "version": "7.0.1",
+      "resolved": "https://registry.npmjs.org/serialize-error/-/serialize-error-7.0.1.tgz",
+      "integrity": "sha512-8I8TjW5KMOKsZQTvoxjuSIa7foAwPWGOts+6o7sgjz41/qMD9VQHEDxi6PBvK2l0MXUmqZyNpUK+T2tQaaElvw==",
       "dev": true,
       "optional": true,
       "requires": {
@@ -11647,6 +10741,8 @@
       "dependencies": {
         "type-fest": {
           "version": "0.13.1",
+          "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.13.1.tgz",
+          "integrity": "sha512-34R7HTnG0XIJcBSn5XhDd7nNFPRcXYRZrBB2O2jdKqYODldSzBAqzsWoZYYvduky73toYS/ESqxPvkDf/F0XMg==",
           "dev": true,
           "optional": true
         }
@@ -11654,6 +10750,8 @@
     },
     "shebang-command": {
       "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
+      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
       "dev": true,
       "requires": {
         "shebang-regex": "^3.0.0"
@@ -11661,18 +10759,26 @@
     },
     "shebang-regex": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
+      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
       "dev": true
     },
     "slash": {
       "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/slash/-/slash-2.0.0.tgz",
+      "integrity": "sha512-ZYKh3Wh2z1PpEXWr0MpSBZ0V6mZHAQfYevttO11c51CaWjGTaadiKZ+wVt1PbMlDV5qhMFslpZCemhwOK7C89A==",
       "dev": true
     },
     "slide": {
       "version": "1.1.6",
+      "resolved": "https://registry.npmjs.org/slide/-/slide-1.1.6.tgz",
+      "integrity": "sha1-VusCfWW00tzmyy4tMsTUr8nh1wc=",
       "dev": true
     },
     "socksv5": {
       "version": "0.0.6",
+      "resolved": "https://registry.npmjs.org/socksv5/-/socksv5-0.0.6.tgz",
+      "integrity": "sha512-tQpQ0MdNQAsQBDhCXy3OvGGJikh9QOl3PkbwT4POJiQCm/fK4z9AxKQQRG8WLeF6talphnPrSWiZRpTl42rApg==",
       "dev": true,
       "requires": {
         "ipv6": "*"
@@ -11697,32 +10803,31 @@
         }
       }
     },
-    "solid-js": {
-      "version": "1.4.8"
-    },
-    "solid-refresh": {
-      "version": "0.4.1",
-      "requires": {
-        "@babel/generator": "^7.18.2",
-        "@babel/helper-module-imports": "^7.16.7",
-        "@babel/types": "^7.18.4"
-      }
-    },
     "source-map": {
-      "version": "0.5.7"
+      "version": "0.5.7",
+      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz",
+      "integrity": "sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w="
     },
     "source-map-js": {
-      "version": "1.0.2"
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.0.2.tgz",
+      "integrity": "sha512-R0XvVJ9WusLiqTCEiGCmICCMplcCkIwwR11mOSD9CR5u+IXYdiseeEuXCVAjS54zqwkLcPNnmU4OeJ6tUrWhDw=="
     },
     "sourcemap-codec": {
-      "version": "1.4.8"
+      "version": "1.4.8",
+      "resolved": "https://registry.npmjs.org/sourcemap-codec/-/sourcemap-codec-1.4.8.tgz",
+      "integrity": "sha512-9NykojV5Uih4lgo5So5dtw+f0JgJX30KCNI8gwhz2J9A15wD0Ml6tjHKwf6fTSa6fAdVBdZeNOs9eJ71qCk8vA=="
     },
     "spawn-command": {
       "version": "0.0.2-1",
+      "resolved": "https://registry.npmjs.org/spawn-command/-/spawn-command-0.0.2-1.tgz",
+      "integrity": "sha1-YvXpRmmBwbeW3Fkpk34RycaSG9A=",
       "dev": true
     },
     "spdx-compare": {
       "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/spdx-compare/-/spdx-compare-1.0.0.tgz",
+      "integrity": "sha512-C1mDZOX0hnu0ep9dfmuoi03+eOdDoz2yvK79RxbcrVEG1NO1Ph35yW102DHWKN4pk80nwCgeMmSY5L25VE4D9A==",
       "dev": true,
       "requires": {
         "array-find-index": "^1.0.2",
@@ -11732,6 +10837,8 @@
     },
     "spdx-correct": {
       "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/spdx-correct/-/spdx-correct-3.1.1.tgz",
+      "integrity": "sha512-cOYcUWwhCuHCXi49RhFRCyJEK3iPj1Ziz9DpViV3tbZOwXD49QzIN3MpOLJNxh2qwq2lJJZaKMVw9qNi4jTC0w==",
       "dev": true,
       "requires": {
         "spdx-expression-parse": "^3.0.0",
@@ -11740,10 +10847,14 @@
     },
     "spdx-exceptions": {
       "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/spdx-exceptions/-/spdx-exceptions-2.3.0.tgz",
+      "integrity": "sha512-/tTrYOC7PPI1nUAgx34hUpqXuyJG+DTHJTnIULG4rDygi4xu/tfgmq1e1cIRwRzwZgo4NLySi+ricLkZkw4i5A==",
       "dev": true
     },
     "spdx-expression-parse": {
       "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/spdx-expression-parse/-/spdx-expression-parse-3.0.1.tgz",
+      "integrity": "sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==",
       "dev": true,
       "requires": {
         "spdx-exceptions": "^2.1.0",
@@ -11752,14 +10863,20 @@
     },
     "spdx-license-ids": {
       "version": "3.0.10",
+      "resolved": "https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-3.0.10.tgz",
+      "integrity": "sha512-oie3/+gKf7QtpitB0LYLETe+k8SifzsX4KixvpOsbI6S0kRiRQ5MKOio8eMSAKQ17N06+wdEOXRiId+zOxo0hA==",
       "dev": true
     },
     "spdx-ranges": {
       "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/spdx-ranges/-/spdx-ranges-2.1.1.tgz",
+      "integrity": "sha512-mcdpQFV7UDAgLpXEE/jOMqvK4LBoO0uTQg0uvXUewmEFhpiZx5yJSZITHB8w1ZahKdhfZqP5GPEOKLyEq5p8XA==",
       "dev": true
     },
     "spdx-satisfies": {
       "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/spdx-satisfies/-/spdx-satisfies-4.0.1.tgz",
+      "integrity": "sha512-WVzZ/cXAzoNmjCWiEluEA3BjHp5tiUmmhn9MK+X0tBbR9sOqtC6UQwmgCNrAIZvNlMuBUYAaHYfb2oqlF9SwKA==",
       "dev": true,
       "requires": {
         "spdx-compare": "^1.0.0",
@@ -11769,15 +10886,21 @@
     },
     "sprintf-js": {
       "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.1.2.tgz",
+      "integrity": "sha512-VE0SOVEHCk7Qc8ulkWw3ntAzXuqf7S2lvwQaDLRnUeIEaKNQJzV6BwmLKhOqT61aGhfUMrXeaBk+oDGCzvhcug==",
       "dev": true,
       "optional": true
     },
     "stack-trace": {
       "version": "0.0.10",
+      "resolved": "https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.10.tgz",
+      "integrity": "sha1-VHxws0fo0ytOEI6hoqFZ5f3eGcA=",
       "dev": true
     },
     "string_decoder": {
       "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
+      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
       "dev": true,
       "requires": {
         "safe-buffer": "~5.1.0"
@@ -11785,6 +10908,8 @@
     },
     "string-width": {
       "version": "4.2.2",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.2.tgz",
+      "integrity": "sha512-XBJbT3N4JhVumXE0eoLU9DCjcaF92KLNqTmFCnG1pf8duUxFGwtP6AD6nkjw9a3IdiRtL3E2w3JDiE/xi3vOeA==",
       "dev": true,
       "requires": {
         "emoji-regex": "^8.0.0",
@@ -11794,10 +10919,14 @@
     },
     "string.prototype.repeat": {
       "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/string.prototype.repeat/-/string.prototype.repeat-0.2.0.tgz",
+      "integrity": "sha1-q6Nt4I3O5qWjN9SbLqHaGyj8Ds8=",
       "dev": true
     },
     "strip-ansi": {
       "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
       "dev": true,
       "requires": {
         "ansi-regex": "^5.0.1"
@@ -11805,10 +10934,14 @@
     },
     "strip-json-comments": {
       "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
+      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
       "dev": true
     },
     "sumchecker": {
       "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/sumchecker/-/sumchecker-3.0.1.tgz",
+      "integrity": "sha512-MvjXzkz/BOfyVDkG0oFOtBxHX2u3gKbMHIF/dXblZsgD3BWOFLmHovIpZY7BykJdAjcqRCBi1WYBNdEC9yI7vg==",
       "dev": true,
       "requires": {
         "debug": "^4.1.0"
@@ -11816,36 +10949,54 @@
     },
     "supports-color": {
       "version": "5.5.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
+      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
       "requires": {
         "has-flag": "^3.0.0"
       }
     },
     "supports-preserve-symlinks-flag": {
-      "version": "1.0.0"
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
+      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w=="
     },
     "svelte": {
-      "version": "3.49.0"
+      "version": "3.49.0",
+      "resolved": "https://registry.npmjs.org/svelte/-/svelte-3.49.0.tgz",
+      "integrity": "sha512-+lmjic1pApJWDfPCpUUTc1m8azDqYCG1JN9YEngrx/hUyIcFJo6VZhj0A1Ai0wqoHcEIuQy+e9tk+4uDgdtsFA=="
     },
     "svelte-hmr": {
       "version": "0.14.12",
+      "resolved": "https://registry.npmjs.org/svelte-hmr/-/svelte-hmr-0.14.12.tgz",
+      "integrity": "sha512-4QSW/VvXuqVcFZ+RhxiR8/newmwOCTlbYIezvkeN6302YFRE8cXy0naamHcjz8Y9Ce3ITTZtrHrIL0AGfyo61w==",
       "requires": {}
     },
     "svg-tags": {
-      "version": "1.0.0"
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/svg-tags/-/svg-tags-1.0.0.tgz",
+      "integrity": "sha1-WPcc7jvVGbWdSyqEO2x95krAR2Q="
     },
     "text-table": {
       "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
+      "integrity": "sha1-f17oI66AUgfACvLfSoTsP8+lcLQ=",
       "dev": true
     },
     "to-fast-properties": {
-      "version": "2.0.0"
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-2.0.0.tgz",
+      "integrity": "sha1-3F5pjL0HkmW8c+A3doGk5Og/YW4="
     },
     "to-readable-stream": {
       "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/to-readable-stream/-/to-readable-stream-1.0.0.tgz",
+      "integrity": "sha512-Iq25XBt6zD5npPhlLVXGFN3/gyR2/qODcKNNyTMd4vbm39HUaOiAM4PMq0eMVC/Tkxz+Zjdsc55g9yyz+Yq00Q==",
       "dev": true
     },
     "to-regex-range": {
       "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
+      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
       "dev": true,
       "requires": {
         "is-number": "^7.0.0"
@@ -11856,26 +11007,33 @@
     },
     "tree-kill": {
       "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/tree-kill/-/tree-kill-1.2.2.tgz",
+      "integrity": "sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A==",
       "dev": true
     },
     "treeify": {
       "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/treeify/-/treeify-1.1.0.tgz",
+      "integrity": "sha512-1m4RA7xVAJrSGrrXGs0L3YTwyvBs2S8PbRHaLZAkFw7JR8oIFwYtysxlBZhYIa7xSyiYJKZ3iGrrk55cGA3i9A==",
       "dev": true
     },
-    "ts-toolbelt": {
-      "version": "9.6.0"
-    },
     "tslib": {
       "version": "1.14.1",
+      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
+      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
       "dev": true
     },
     "tunnel": {
       "version": "0.0.6",
+      "resolved": "https://registry.npmjs.org/tunnel/-/tunnel-0.0.6.tgz",
+      "integrity": "sha512-1h/Lnq9yajKY2PEbBadPXj3VxsDDu844OnaAo52UVmIzIvwwtBPIuNvkjuzBlTWpfJyUbG3ez0KSBibQkj4ojg==",
       "dev": true,
       "optional": true
     },
     "type-check": {
       "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
+      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
       "dev": true,
       "requires": {
         "prelude-ls": "^1.2.1"
@@ -11883,22 +11041,32 @@
     },
     "type-fest": {
       "version": "0.6.0",
+      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.6.0.tgz",
+      "integrity": "sha512-q+MB8nYR1KDLrgr4G5yemftpMC7/QLqVndBmEEdqzmNj5dcFOO4Oo8qlwZE3ULT3+Zim1F8Kq4cBnikNhlCMlg==",
       "dev": true
     },
     "typedarray": {
       "version": "0.0.6",
+      "resolved": "https://registry.npmjs.org/typedarray/-/typedarray-0.0.6.tgz",
+      "integrity": "sha1-hnrHTjhkGHsdPUfZlqeOxciDB3c=",
       "dev": true
     },
     "typescript": {
       "version": "4.7.3",
+      "resolved": "https://registry.npmjs.org/typescript/-/typescript-4.7.3.tgz",
+      "integrity": "sha512-WOkT3XYvrpXx4vMMqlD+8R8R37fZkjyLGlxavMc4iB8lrl8L0DeTcHbYgw/v0N/z9wAFsgBhcsF0ruoySS22mA==",
       "dev": true
     },
     "universalify": {
       "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/universalify/-/universalify-0.1.2.tgz",
+      "integrity": "sha512-rBJeI5CXAlmy1pV+617WB9J63U6XcazHHF2f2dbJix4XzpUF0RS3Zbj0FGIOCAva5P/d/GBOYaACQ1w+0azUkg==",
       "dev": true
     },
     "uri-js": {
       "version": "4.4.1",
+      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
+      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
       "dev": true,
       "requires": {
         "punycode": "^2.1.0"
@@ -11906,24 +11074,34 @@
     },
     "url-parse-lax": {
       "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/url-parse-lax/-/url-parse-lax-3.0.0.tgz",
+      "integrity": "sha1-FrXK/Afb42dsGxmZF3gj1lA6yww=",
       "dev": true,
       "requires": {
         "prepend-http": "^2.0.0"
       }
     },
     "util-deprecate": {
-      "version": "1.0.2"
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
+      "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8="
     },
     "util-extend": {
       "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/util-extend/-/util-extend-1.0.3.tgz",
+      "integrity": "sha1-p8IW0mdUUWljeztu3GypEZ4v+T8=",
       "dev": true
     },
     "v8-compile-cache": {
       "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/v8-compile-cache/-/v8-compile-cache-2.3.0.tgz",
+      "integrity": "sha512-l8lCEmLcLYZh4nbunNZvQCJc5pv7+RCwa8q/LdUx8u7lsWvPDKmpodJAJNwkAhJC//dFY48KuIEmjtd4RViDrA==",
       "dev": true
     },
     "validate-npm-package-license": {
       "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz",
+      "integrity": "sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==",
       "dev": true,
       "requires": {
         "spdx-correct": "^3.0.0",
@@ -11931,173 +11109,21 @@
       }
     },
     "vite": {
-      "version": "2.9.15",
+      "version": "2.9.9",
+      "resolved": "https://registry.npmjs.org/vite/-/vite-2.9.9.tgz",
+      "integrity": "sha512-ffaam+NgHfbEmfw/Vuh6BHKKlI/XIAhxE5QSS7gFLIngxg171mg1P3a4LSRME0z2ZU1ScxoKzphkipcYwSD5Ew==",
       "requires": {
         "esbuild": "^0.14.27",
         "fsevents": "~2.3.2",
         "postcss": "^8.4.13",
         "resolve": "^1.22.0",
-        "rollup": ">=2.59.0 <2.78.0"
-      },
-      "dependencies": {
-        "@esbuild/linux-loong64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.14.54.tgz",
-          "integrity": "sha512-bZBrLAIX1kpWelV0XemxBZllyRmM6vgFQQG2GdNb+r3Fkp0FOh1NJSvekXDs7jq70k4euu1cryLMfU+mTXlEpw==",
-          "optional": true
-        },
-        "esbuild": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.14.54.tgz",
-          "integrity": "sha512-Cy9llcy8DvET5uznocPyqL3BFRrFXSVqbgpMJ9Wz8oVjZlh/zUSNbPRbov0VX7VxN2JH1Oa0uNxZ7eLRb62pJA==",
-          "requires": {
-            "@esbuild/linux-loong64": "0.14.54",
-            "esbuild-android-64": "0.14.54",
-            "esbuild-android-arm64": "0.14.54",
-            "esbuild-darwin-64": "0.14.54",
-            "esbuild-darwin-arm64": "0.14.54",
-            "esbuild-freebsd-64": "0.14.54",
-            "esbuild-freebsd-arm64": "0.14.54",
-            "esbuild-linux-32": "0.14.54",
-            "esbuild-linux-64": "0.14.54",
-            "esbuild-linux-arm": "0.14.54",
-            "esbuild-linux-arm64": "0.14.54",
-            "esbuild-linux-mips64le": "0.14.54",
-            "esbuild-linux-ppc64le": "0.14.54",
-            "esbuild-linux-riscv64": "0.14.54",
-            "esbuild-linux-s390x": "0.14.54",
-            "esbuild-netbsd-64": "0.14.54",
-            "esbuild-openbsd-64": "0.14.54",
-            "esbuild-sunos-64": "0.14.54",
-            "esbuild-windows-32": "0.14.54",
-            "esbuild-windows-64": "0.14.54",
-            "esbuild-windows-arm64": "0.14.54"
-          }
-        },
-        "esbuild-android-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-android-64/-/esbuild-android-64-0.14.54.tgz",
-          "integrity": "sha512-Tz2++Aqqz0rJ7kYBfz+iqyE3QMycD4vk7LBRyWaAVFgFtQ/O8EJOnVmTOiDWYZ/uYzB4kvP+bqejYdVKzE5lAQ==",
-          "optional": true
-        },
-        "esbuild-android-arm64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-android-arm64/-/esbuild-android-arm64-0.14.54.tgz",
-          "integrity": "sha512-F9E+/QDi9sSkLaClO8SOV6etqPd+5DgJje1F9lOWoNncDdOBL2YF59IhsWATSt0TLZbYCf3pNlTHvVV5VfHdvg==",
-          "optional": true
-        },
-        "esbuild-darwin-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-darwin-64/-/esbuild-darwin-64-0.14.54.tgz",
-          "integrity": "sha512-jtdKWV3nBviOd5v4hOpkVmpxsBy90CGzebpbO9beiqUYVMBtSc0AL9zGftFuBon7PNDcdvNCEuQqw2x0wP9yug==",
-          "optional": true
-        },
-        "esbuild-darwin-arm64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-darwin-arm64/-/esbuild-darwin-arm64-0.14.54.tgz",
-          "integrity": "sha512-OPafJHD2oUPyvJMrsCvDGkRrVCar5aVyHfWGQzY1dWnzErjrDuSETxwA2HSsyg2jORLY8yBfzc1MIpUkXlctmw==",
-          "optional": true
-        },
-        "esbuild-freebsd-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-freebsd-64/-/esbuild-freebsd-64-0.14.54.tgz",
-          "integrity": "sha512-OKwd4gmwHqOTp4mOGZKe/XUlbDJ4Q9TjX0hMPIDBUWWu/kwhBAudJdBoxnjNf9ocIB6GN6CPowYpR/hRCbSYAg==",
-          "optional": true
-        },
-        "esbuild-freebsd-arm64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-freebsd-arm64/-/esbuild-freebsd-arm64-0.14.54.tgz",
-          "integrity": "sha512-sFwueGr7OvIFiQT6WeG0jRLjkjdqWWSrfbVwZp8iMP+8UHEHRBvlaxL6IuKNDwAozNUmbb8nIMXa7oAOARGs1Q==",
-          "optional": true
-        },
-        "esbuild-linux-32": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-32/-/esbuild-linux-32-0.14.54.tgz",
-          "integrity": "sha512-1ZuY+JDI//WmklKlBgJnglpUL1owm2OX+8E1syCD6UAxcMM/XoWd76OHSjl/0MR0LisSAXDqgjT3uJqT67O3qw==",
-          "optional": true
-        },
-        "esbuild-linux-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-64/-/esbuild-linux-64-0.14.54.tgz",
-          "integrity": "sha512-EgjAgH5HwTbtNsTqQOXWApBaPVdDn7XcK+/PtJwZLT1UmpLoznPd8c5CxqsH2dQK3j05YsB3L17T8vE7cp4cCg==",
-          "optional": true
-        },
-        "esbuild-linux-arm": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-arm/-/esbuild-linux-arm-0.14.54.tgz",
-          "integrity": "sha512-qqz/SjemQhVMTnvcLGoLOdFpCYbz4v4fUo+TfsWG+1aOu70/80RV6bgNpR2JCrppV2moUQkww+6bWxXRL9YMGw==",
-          "optional": true
-        },
-        "esbuild-linux-arm64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-arm64/-/esbuild-linux-arm64-0.14.54.tgz",
-          "integrity": "sha512-WL71L+0Rwv+Gv/HTmxTEmpv0UgmxYa5ftZILVi2QmZBgX3q7+tDeOQNqGtdXSdsL8TQi1vIaVFHUPDe0O0kdig==",
-          "optional": true
-        },
-        "esbuild-linux-mips64le": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-mips64le/-/esbuild-linux-mips64le-0.14.54.tgz",
-          "integrity": "sha512-qTHGQB8D1etd0u1+sB6p0ikLKRVuCWhYQhAHRPkO+OF3I/iSlTKNNS0Lh2Oc0g0UFGguaFZZiPJdJey3AGpAlw==",
-          "optional": true
-        },
-        "esbuild-linux-ppc64le": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-ppc64le/-/esbuild-linux-ppc64le-0.14.54.tgz",
-          "integrity": "sha512-j3OMlzHiqwZBDPRCDFKcx595XVfOfOnv68Ax3U4UKZ3MTYQB5Yz3X1mn5GnodEVYzhtZgxEBidLWeIs8FDSfrQ==",
-          "optional": true
-        },
-        "esbuild-linux-riscv64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-riscv64/-/esbuild-linux-riscv64-0.14.54.tgz",
-          "integrity": "sha512-y7Vt7Wl9dkOGZjxQZnDAqqn+XOqFD7IMWiewY5SPlNlzMX39ocPQlOaoxvT4FllA5viyV26/QzHtvTjVNOxHZg==",
-          "optional": true
-        },
-        "esbuild-linux-s390x": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-linux-s390x/-/esbuild-linux-s390x-0.14.54.tgz",
-          "integrity": "sha512-zaHpW9dziAsi7lRcyV4r8dhfG1qBidQWUXweUjnw+lliChJqQr+6XD71K41oEIC3Mx1KStovEmlzm+MkGZHnHA==",
-          "optional": true
-        },
-        "esbuild-netbsd-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-netbsd-64/-/esbuild-netbsd-64-0.14.54.tgz",
-          "integrity": "sha512-PR01lmIMnfJTgeU9VJTDY9ZerDWVFIUzAtJuDHwwceppW7cQWjBBqP48NdeRtoP04/AtO9a7w3viI+PIDr6d+w==",
-          "optional": true
-        },
-        "esbuild-openbsd-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-openbsd-64/-/esbuild-openbsd-64-0.14.54.tgz",
-          "integrity": "sha512-Qyk7ikT2o7Wu76UsvvDS5q0amJvmRzDyVlL0qf5VLsLchjCa1+IAvd8kTBgUxD7VBUUVgItLkk609ZHUc1oCaw==",
-          "optional": true
-        },
-        "esbuild-sunos-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-sunos-64/-/esbuild-sunos-64-0.14.54.tgz",
-          "integrity": "sha512-28GZ24KmMSeKi5ueWzMcco6EBHStL3B6ubM7M51RmPwXQGLe0teBGJocmWhgwccA1GeFXqxzILIxXpHbl9Q/Kw==",
-          "optional": true
-        },
-        "esbuild-windows-32": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-windows-32/-/esbuild-windows-32-0.14.54.tgz",
-          "integrity": "sha512-T+rdZW19ql9MjS7pixmZYVObd9G7kcaZo+sETqNH4RCkuuYSuv9AGHUVnPoP9hhuE1WM1ZimHz1CIBHBboLU7w==",
-          "optional": true
-        },
-        "esbuild-windows-64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-windows-64/-/esbuild-windows-64-0.14.54.tgz",
-          "integrity": "sha512-AoHTRBUuYwXtZhjXZbA1pGfTo8cJo3vZIcWGLiUcTNgHpJJMC1rVA44ZereBHMJtotyN71S8Qw0npiCIkW96cQ==",
-          "optional": true
-        },
-        "esbuild-windows-arm64": {
-          "version": "0.14.54",
-          "resolved": "https://registry.npmjs.org/esbuild-windows-arm64/-/esbuild-windows-arm64-0.14.54.tgz",
-          "integrity": "sha512-M0kuUvXhot1zOISQGXwWn6YtS+Y/1RT9WrVIOywZnJHo3jCDyewAc79aKNQWFCQm+xNHVTq9h8dZKvygoXQQRg==",
-          "optional": true
-        }
+        "rollup": "^2.59.0"
       }
     },
     "vite-plugin-vue2": {
       "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/vite-plugin-vue2/-/vite-plugin-vue2-2.0.1.tgz",
+      "integrity": "sha512-8ixcIDZwk3PSbdaqKrPFYDot044lPLIqpjjuRXUDHdRhml87Kbc6JqLq6uwHERlPovwfI3DpluWRMVgn/Llmag==",
       "requires": {
         "@babel/core": "^7.17.9",
         "@babel/parser": "^7.17.9",
@@ -12132,6 +11158,8 @@
       "dependencies": {
         "@babel/core": {
           "version": "7.18.2",
+          "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.18.2.tgz",
+          "integrity": "sha512-A8pri1YJiC5UnkdrWcmfZTJTV85b4UXTAfImGmCfYmax4TR9Cw8sDS0MOk++Gp2mE/BefVJ5nwy5yzqNJbP/DQ==",
           "requires": {
             "@ampproject/remapping": "^2.1.0",
             "@babel/code-frame": "^7.16.7",
@@ -12152,6 +11180,8 @@
         },
         "fs-extra": {
           "version": "10.1.0",
+          "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
+          "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
           "requires": {
             "graceful-fs": "^4.2.0",
             "jsonfile": "^6.0.1",
@@ -12160,28 +11190,40 @@
         },
         "jsonfile": {
           "version": "6.1.0",
+          "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
+          "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
           "requires": {
             "graceful-fs": "^4.1.6",
             "universalify": "^2.0.0"
           }
         },
         "slash": {
-          "version": "3.0.0"
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
+          "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q=="
         },
         "source-map": {
-          "version": "0.7.3"
+          "version": "0.7.3",
+          "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.7.3.tgz",
+          "integrity": "sha512-CkCj6giN3S+n9qrYiBTX5gystlENnRW5jZeNLHpe6aue+SrHcG5VYwujhW9s4dY31mEGsxBDrHR6oI69fTXsaQ=="
         },
         "universalify": {
-          "version": "2.0.0"
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.0.tgz",
+          "integrity": "sha512-hAZsKq7Yy11Zu1DE0OzWjw7nnLZmJZYTDZZyEFHZdUhV8FkH5MCfoU1XMaxXovpyW5nq5scPqq0ZDP9Zyl04oQ=="
         }
       }
     },
     "vue": {
       "version": "2.6.14",
+      "resolved": "https://registry.npmjs.org/vue/-/vue-2.6.14.tgz",
+      "integrity": "sha512-x2284lgYvjOMj3Za7kqzRcUSxBboHqtgRE2zlos1qWaOye5yUmHn42LB1250NJBLRwEcdrB0JRwyPTEPhfQjiQ==",
       "dev": true
     },
     "vue-template-babel-compiler": {
       "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/vue-template-babel-compiler/-/vue-template-babel-compiler-1.2.0.tgz",
+      "integrity": "sha512-CScBSX1/wCdmmZ/Lvj/63p2CCVTS0FMj0F69VRBo73CuJrjvPAPGmeNJ7D/cwt/VS2PduowRWbO8N4Zh4Z3b0g==",
       "requires": {
         "@babel/core": "^7.14.3",
         "@babel/plugin-proposal-nullish-coalescing-operator": "^7.14.5",
@@ -12199,6 +11241,8 @@
     },
     "vue-template-compiler": {
       "version": "2.6.14",
+      "resolved": "https://registry.npmjs.org/vue-template-compiler/-/vue-template-compiler-2.6.14.tgz",
+      "integrity": "sha512-ODQS1SyMbjKoO1JBJZojSw6FE4qnh9rIpUZn2EUT86FKizx9uH5z6uXiIrm4/Nb/gwxTi/o17ZDEGWAXHvtC7g==",
       "peer": true,
       "requires": {
         "de-indent": "^1.0.2",
@@ -12206,10 +11250,14 @@
       }
     },
     "vue-template-es2015-compiler": {
-      "version": "1.9.1"
+      "version": "1.9.1",
+      "resolved": "https://registry.npmjs.org/vue-template-es2015-compiler/-/vue-template-es2015-compiler-1.9.1.tgz",
+      "integrity": "sha512-4gDntzrifFnCEvyoO8PqyJDmguXgVPxKiIxrBKjIowvL9l+N66196+72XVYR8BBf1Uv1Fgt3bGevJ+sEmxfZzw=="
     },
     "which": {
       "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
+      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
       "dev": true,
       "requires": {
         "isexe": "^2.0.0"
@@ -12217,6 +11265,8 @@
     },
     "winston": {
       "version": "0.8.3",
+      "resolved": "https://registry.npmjs.org/winston/-/winston-0.8.3.tgz",
+      "integrity": "sha1-ZLar9M0Brcrv1QCTk7HY6L7BnbA=",
       "dev": true,
       "requires": {
         "async": "0.2.x",
@@ -12230,16 +11280,22 @@
       "dependencies": {
         "colors": {
           "version": "0.6.2",
+          "resolved": "https://registry.npmjs.org/colors/-/colors-0.6.2.tgz",
+          "integrity": "sha1-JCP+ZnisDF2uiFLl0OW+CMmXq8w=",
           "dev": true
         }
       }
     },
     "word-wrap": {
       "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.3.tgz",
+      "integrity": "sha512-Hz/mrNwitNRh/HUAtM/VT/5VH+ygD6DV7mYKZAtHOrbs8U7lvPS6xf7EJKMF0uW1KJCl0H701g3ZGus+muE5vQ==",
       "dev": true
     },
     "wrap-ansi": {
       "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
+      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
       "dev": true,
       "requires": {
         "ansi-styles": "^4.0.0",
@@ -12249,6 +11305,8 @@
       "dependencies": {
         "ansi-styles": {
           "version": "4.3.0",
+          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+          "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
           "dev": true,
           "requires": {
             "color-convert": "^2.0.1"
@@ -12256,6 +11314,8 @@
         },
         "color-convert": {
           "version": "2.0.1",
+          "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+          "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
           "dev": true,
           "requires": {
             "color-name": "~1.1.4"
@@ -12263,21 +11323,29 @@
         },
         "color-name": {
           "version": "1.1.4",
+          "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+          "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
           "dev": true
         }
       }
     },
     "wrappy": {
       "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
+      "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=",
       "dev": true
     },
     "ws": {
       "version": "8.5.0",
+      "resolved": "https://registry.npmjs.org/ws/-/ws-8.5.0.tgz",
+      "integrity": "sha512-BWX0SWVgLPzYwF8lTzEy1egjhS4S4OEAHfsO8o65WOVsrnSRGaSiUaa9e0ggGlkMTtBlmOpEXiie9RUcBO86qg==",
       "dev": true,
       "requires": {}
     },
     "xml2js": {
       "version": "0.4.23",
+      "resolved": "https://registry.npmjs.org/xml2js/-/xml2js-0.4.23.tgz",
+      "integrity": "sha512-ySPiMjM0+pLDftHgXY4By0uswI3SPKLDw/i3UXbnO8M/p28zqexCUoPmQFrYD+/1BzhGJSs2i1ERWKJAtiLrug==",
       "dev": true,
       "requires": {
         "sax": ">=0.6.0",
@@ -12286,18 +11354,26 @@
     },
     "xmlbuilder": {
       "version": "11.0.1",
+      "resolved": "https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-11.0.1.tgz",
+      "integrity": "sha512-fDlsI/kFEx7gLvbecc0/ohLG50fugQp8ryHzMTuW9vSa1GJ0XYWKnhsUx7oie3G98+r56aTQIUB4kht42R3JvA==",
       "dev": true
     },
     "yallist": {
       "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
+      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
       "dev": true
     },
     "yaml": {
       "version": "1.10.2",
+      "resolved": "https://registry.npmjs.org/yaml/-/yaml-1.10.2.tgz",
+      "integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==",
       "dev": true
     },
     "yargs": {
       "version": "16.2.0",
+      "resolved": "https://registry.npmjs.org/yargs/-/yargs-16.2.0.tgz",
+      "integrity": "sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==",
       "dev": true,
       "requires": {
         "cliui": "^7.0.2",
@@ -12311,16 +11387,22 @@
       "dependencies": {
         "y18n": {
           "version": "5.0.8",
+          "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
+          "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
           "dev": true
         }
       }
     },
     "yargs-parser": {
       "version": "20.2.9",
+      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-20.2.9.tgz",
+      "integrity": "sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w==",
       "dev": true
     },
     "yauzl": {
       "version": "2.10.0",
+      "resolved": "https://registry.npmjs.org/yauzl/-/yauzl-2.10.0.tgz",
+      "integrity": "sha1-x+sXyT4RLLEIb6bY5R+wZnt5pfk=",
       "dev": true,
       "requires": {
         "buffer-crc32": "~0.2.3",
diff --git a/package.json b/package.json
index 58491ebb60f4da9c7c0209949c11bb0903b733fe..7323acec36c6485db0f241dc2adafb463f8c6a56 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "playwright-internal",
   "private": true,
-  "version": "1.27.0-next",
+  "version": "1.25.2",
   "description": "A high-level API to automate web browsers",
   "repository": "github:Microsoft/playwright",
   "homepage": "https://playwright.dev",
@@ -18,7 +18,6 @@
     "wtest": "playwright test --config=tests/library/playwright.config.ts --project=webkit",
     "atest": "playwright test --config=tests/android/playwright.config.ts",
     "etest": "playwright test --config=tests/electron/playwright.config.ts",
-    "webview2test": "playwright test --config=tests/webview2/playwright.config.ts",
     "itest": "playwright test --config=tests/installation/playwright.config.ts",
     "stest": "playwright test --config=tests/stress/playwright.config.ts",
     "test-html-reporter": "playwright test --config=packages/html-reporter",
@@ -58,7 +57,7 @@
     "@babel/plugin-transform-typescript": "^7.16.8",
     "@babel/preset-react": "^7.16.7",
     "@types/formidable": "^2.0.4",
-    "@types/node": "=14.18.24",
+    "@types/node": "=14.17.15",
     "@types/react": "^18.0.12",
     "@types/react-dom": "^18.0.5",
     "@types/resize-observer-browser": "^0.1.7",
@@ -67,6 +66,7 @@
     "@typescript-eslint/parser": "^5.10.2",
     "@vitejs/plugin-react": "^1.3.2",
     "@zip.js/zip.js": "^2.4.2",
+    "adm-zip": "^0.5.9",
     "ansi-to-html": "^0.7.2",
     "chokidar": "^3.5.3",
     "colors": "^1.4.0",
@@ -74,10 +74,9 @@
     "concurrently": "^6.2.1",
     "cross-env": "^7.0.3",
     "dotenv": "^16.0.0",
-    "electron": "19.0.11",
-    "electron-to-chromium": "^1.4.212",
+    "electron": "^16.2.8",
+    "electron-to-chromium": "^1.4.204",
     "enquirer": "^2.3.6",
-    "esbuild": "^0.15.6",
     "eslint": "^8.8.0",
     "eslint-plugin-notice": "^0.9.10",
     "eslint-plugin-react-hooks": "^4.3.0",
diff --git a/packages/html-reporter/playwright.config.ts b/packages/html-reporter/playwright.config.ts
index 8883155b6927b131523e26690b76453c48fb2dd8..3d44fa8c778d6fbbe24975909913fe7377a7beb7 100644
--- a/packages/html-reporter/playwright.config.ts
+++ b/packages/html-reporter/playwright.config.ts
@@ -27,7 +27,7 @@ const config: PlaywrightTestConfig = {
     ctPort: 3101,
     trace: 'on-first-retry',
   },
-  projects: [],
+  projects: [ ],
 };
 
 if (process.env.REBASE) {
diff --git a/packages/html-reporter/src/testResultView.tsx b/packages/html-reporter/src/testResultView.tsx
index e40c97d380049de8c30f269406b287519859d237..7fcc4beb46282301278bde8e2d89ef1798f468ec 100644
--- a/packages/html-reporter/src/testResultView.tsx
+++ b/packages/html-reporter/src/testResultView.tsx
@@ -76,7 +76,7 @@ export const TestResultView: React.FC<{
     [...screenshots, ...videos, ...traces].forEach(a => otherAttachments.delete(a));
     const diffs = groupImageDiffs(screenshots);
     return { screenshots: [...screenshots], videos, traces, otherAttachments, diffs };
-  }, [result]);
+  }, [ result ]);
 
   const videoRef = React.useRef<HTMLDivElement>(null);
   const imageDiffRef = React.useRef<HTMLDivElement>(null);
diff --git a/packages/playwright-chromium/package.json b/packages/playwright-chromium/package.json
index 48ece78556e72aebd4295da8f965a3508d331077..d5cebe47ed988961341fcf38d6ffe8d0e2335734 100644
--- a/packages/playwright-chromium/package.json
+++ b/packages/playwright-chromium/package.json
@@ -1,6 +1,6 @@
 {
   "name": "playwright-chromium",
-  "version": "1.27.0-next",
+  "version": "1.25.2",
   "description": "A high-level API to automate Chromium",
   "repository": "github:Microsoft/playwright",
   "homepage": "https://playwright.dev",
@@ -28,6 +28,6 @@
     "install": "node install.js"
   },
   "dependencies": {
-    "playwright-core": "1.27.0-next"
+    "playwright-core": "1.25.2"
   }
 }
diff --git a/packages/playwright-core/bin/README.md b/packages/playwright-core/bin/README.md
index 2426643de541cd58e8b368dd84f1161fe5bdf47d..f280ba3da50ef095a7980821a6d678c6c883e761 100644
--- a/packages/playwright-core/bin/README.md
+++ b/packages/playwright-core/bin/README.md
@@ -1,2 +1,2 @@
-See building instructions at [`/browser_patches/winldd/README.md`](../../../browser_patches/winldd/README.md)
+See building instructions at [`//browser_patches/winldd/README.md`](../browser_patches/winldd/README.md)
 
diff --git a/packages/playwright-core/browsers.json b/packages/playwright-core/browsers.json
index 22bbb85326101ed9b4a6dc739edd2cb1a3d37332..bb3d21484e79cddf0ad8f88ffb93c5a6693e7c39 100644
--- a/packages/playwright-core/browsers.json
+++ b/packages/playwright-core/browsers.json
@@ -3,37 +3,37 @@
   "browsers": [
     {
       "name": "chromium",
-      "revision": "1024",
+      "revision": "1019",
       "installByDefault": true,
-      "browserVersion": "106.0.5249.30"
+      "browserVersion": "105.0.5195.19"
     },
     {
       "name": "chromium-with-symbols",
-      "revision": "1024",
+      "revision": "1019",
       "installByDefault": false,
-      "browserVersion": "106.0.5249.30"
+      "browserVersion": "105.0.5195.19"
     },
     {
       "name": "chromium-tip-of-tree",
-      "revision": "1041",
+      "revision": "1031",
       "installByDefault": false,
-      "browserVersion": "107.0.5288.0"
+      "browserVersion": "106.0.5218.0"
     },
     {
       "name": "firefox",
-      "revision": "1350",
+      "revision": "1344",
       "installByDefault": true,
-      "browserVersion": "104.0"
+      "browserVersion": "103.0"
     },
     {
       "name": "firefox-beta",
-      "revision": "1353",
+      "revision": "1343",
       "installByDefault": false,
-      "browserVersion": "105.0b2"
+      "browserVersion": "103.0b5"
     },
     {
       "name": "webkit",
-      "revision": "1715",
+      "revision": "1699",
       "installByDefault": true,
       "revisionOverrides": {
         "mac10.14": "1446",
diff --git a/packages/playwright-core/index.js b/packages/playwright-core/index.js
index 3c3892c3e1dc8fe6c3742ff81f5d29bf52376d94..a233e0822cc9a15760e3e3cd7849e3594079501a 100644
--- a/packages/playwright-core/index.js
+++ b/packages/playwright-core/index.js
@@ -18,13 +18,13 @@ const currentNodeVersion = process.versions.node;
 const semver = currentNodeVersion.split('.');
 const [major] = [+semver[0]];
 
-if (major < 14) {
+if (major < 12) {
   // eslint-disable-next-line no-console
   console.error(
       'You are running Node.js ' +
       currentNodeVersion +
       '.\n' +
-      'Playwright requires Node.js 14 or higher. \n' +
+      'Playwright requires Node.js 12 or higher. \n' +
       'Please update your version of Node.js.'
   );
   process.exit(1);
diff --git a/packages/playwright-core/package.json b/packages/playwright-core/package.json
index 7617cd054e324bdac96b44af765e556213f5d08e..2659330cb81d5bf802c5d17dae00a72bf286a401 100644
--- a/packages/playwright-core/package.json
+++ b/packages/playwright-core/package.json
@@ -1,6 +1,6 @@
 {
   "name": "playwright-core",
-  "version": "1.27.0-next",
+  "version": "1.25.2",
   "description": "A high-level API to automate web browsers",
   "repository": "github:Microsoft/playwright",
   "homepage": "https://playwright.dev",
@@ -23,7 +23,6 @@
     "./lib/grid/gridServer": "./lib/grid/gridServer.js",
     "./lib/outofprocess": "./lib/outofprocess.js",
     "./lib/utils": "./lib/utils/index.js",
-    "./lib/common/userAgent": "./lib/common/userAgent.js",
     "./lib/utils/comparators": "./lib/utils/comparators.js",
     "./lib/utils/eventsHelper": "./lib/utils/eventsHelper.js",
     "./lib/utils/fileUtils": "./lib/utils/fileUtils.js",
diff --git a/packages/playwright-core/src/cli/cli.ts b/packages/playwright-core/src/cli/cli.ts
index ed315e4506e4f4c5e72240acb31a0b2bb9e34227..6b138d63eea0291ca808e4f6ff0afe3bc27799d8 100755
--- a/packages/playwright-core/src/cli/cli.ts
+++ b/packages/playwright-core/src/cli/cli.ts
@@ -32,7 +32,9 @@ import type { Page } from '../client/page';
 import type { BrowserType } from '../client/browserType';
 import type { BrowserContextOptions, LaunchOptions } from '../client/types';
 import { spawn } from 'child_process';
+import { getPlaywrightVersion } from '../common/userAgent';
 import { wrapInASCIIBox, isLikelyNpxGlobal, assert } from '../utils';
+import { spawnAsync } from '../utils/spawnAsync';
 import { launchGridAgent } from '../grid/gridAgent';
 import type { GridFactory } from '../grid/gridServer';
 import { GridServer } from '../grid/gridServer';
@@ -67,7 +69,7 @@ Examples:
 commandWithOpenOptions('codegen [url]', 'open page and generate code for user actions',
     [
       ['-o, --output <file name>', 'saves the generated script to a file'],
-      ['--target <language>', `language to generate, one of javascript, test, python, python-async, pytest, csharp, csharp-mstest, csharp-nunit, java`, language()],
+      ['--target <language>', `language to generate, one of javascript, test, python, python-async, pytest, csharp, java`, language()],
       ['--save-trace <filename>', 'record a trace for the session and save it to a file'],
     ]).action(function(url, options) {
   codegen(options, url, options.target, options.output).catch(logErrorAndExit);
@@ -118,9 +120,8 @@ program
     .command('install [browser...]')
     .description('ensure browsers necessary for this version of Playwright are installed')
     .option('--with-deps', 'install system dependencies for browsers')
-    .option('--dry-run', 'do not execute installation, only print information')
     .option('--force', 'force reinstall of stable browser channels')
-    .action(async function(args: string[], options: { withDeps?: boolean, force?: boolean, dryRun?: boolean }) {
+    .action(async function(args: string[], options: { withDeps?: boolean, force?: boolean }) {
       if (isLikelyNpxGlobal()) {
         console.error(wrapInASCIIBox([
           `WARNING: It looks like you are running 'npx playwright install' without first`,
@@ -142,26 +143,27 @@ program
         ].join('\n'), 1));
       }
       try {
-        const hasNoArguments = !args.length;
-        const executables = hasNoArguments ? registry.defaultExecutables() : checkBrowsersToInstall(args);
-        if (options.withDeps)
-          await registry.installDeps(executables, !!options.dryRun);
-        if (options.dryRun) {
-          for (const executable of executables) {
-            const version = executable.browserVersion ? `version ` + executable.browserVersion : '';
-            console.log(`browser: ${executable.name}${version ? ' ' + version : ''}`);
-            console.log(`  Install location:    ${executable.directory ?? '<system>'}`);
-            if (executable.downloadURLs?.length) {
-              const [url, ...fallbacks] = executable.downloadURLs;
-              console.log(`  Download url:        ${url}`);
-              for (let i = 0; i < fallbacks.length; ++i)
-                console.log(`  Download fallback ${i + 1}: ${fallbacks[i]}`);
+        if (!args.length) {
+          const executables = registry.defaultExecutables();
+          if (options.withDeps)
+            await registry.installDeps(executables, false);
+          await registry.install(executables, false /* forceReinstall */);
+        } else {
+          const installDockerImage = args.some(arg => arg === 'docker-image');
+          args = args.filter(arg => arg !== 'docker-image');
+          if (installDockerImage) {
+            const imageName = `mcr.microsoft.com/playwright:v${getPlaywrightVersion()}-focal`;
+            const { code } = await spawnAsync('docker', ['pull', imageName], { stdio: 'inherit' });
+            if (code !== 0) {
+              console.log('Failed to pull docker image');
+              process.exit(1);
             }
-            console.log(``);
           }
-        } else {
-          const forceReinstall = hasNoArguments ? false : !!options.force;
-          await registry.install(executables, forceReinstall);
+
+          const executables = checkBrowsersToInstall(args);
+          if (options.withDeps)
+            await registry.installDeps(executables, false);
+          await registry.install(executables, !!options.force /* forceReinstall */);
         }
       } catch (e) {
         console.log(`Failed to install browsers\n${e}`);
@@ -291,7 +293,7 @@ program
 program
     .command('show-trace [trace...]')
     .option('-b, --browser <browserType>', 'browser to use, one of cr, chromium, ff, firefox, wk, webkit', 'chromium')
-    .description('show trace viewer')
+    .description('Show trace viewer')
     .action(function(traces, options) {
       if (options.browser === 'cr')
         options.browser = 'chromium';
@@ -307,33 +309,13 @@ Examples:
 
 if (!process.env.PW_LANG_NAME) {
   let playwrightTestPackagePath = null;
-  const resolvePwTestPaths = [__dirname, process.cwd()];
   try {
     playwrightTestPackagePath = require.resolve('@playwright/test/lib/cli', {
-      paths: resolvePwTestPaths,
+      paths: [__dirname, process.cwd()]
     });
   } catch {}
 
   if (playwrightTestPackagePath) {
-    const pwTestVersion = require(require.resolve('@playwright/test/package.json', {
-      paths: resolvePwTestPaths,
-    })).version;
-    const pwCoreVersion = require(path.join(__dirname, '../../package.json')).version;
-    if (pwTestVersion !== pwCoreVersion) {
-      let hasPlaywrightPackage = false;
-      try {
-        require('playwright');
-        hasPlaywrightPackage = true;
-      } catch {}
-      console.error(wrapInASCIIBox([
-        `Playwright Test compatibility check failed:`,
-        `@playwright/test version '${pwTestVersion}' does not match ${hasPlaywrightPackage ? 'playwright' : 'playwright-core'} version '${pwCoreVersion}'!`,
-        `To fix this either align the versions or only keep @playwright/test since it depends on playwright-core.`,
-        `If you still receive this error, execute 'npm ci' or delete 'node_modules' and do 'npm install' again.`,
-      ].join('\n'), 1));
-      process.exit(1);
-    }
-
     require(playwrightTestPackagePath).addTestCommands(program);
   } else {
     {
@@ -450,7 +432,7 @@ async function launchContext(options: Options, headless: boolean, executablePath
   // Viewport size
   if (options.viewportSize) {
     try {
-      const [width, height] = options.viewportSize.split(',').map(n => parseInt(n, 10));
+      const [ width, height ] = options.viewportSize.split(',').map(n => parseInt(n, 10));
       contextOptions.viewport = { width, height };
     } catch (e) {
       console.log('Invalid window size format: use "width, height", for example --window-size=800,600');
diff --git a/packages/playwright-core/src/cli/driver.ts b/packages/playwright-core/src/cli/driver.ts
index c6fd75249e6fd135178dc495e81d597ec51c91a9..0cec6b4dae01396225bcc8092d46014f3b6ac921 100644
--- a/packages/playwright-core/src/cli/driver.ts
+++ b/packages/playwright-core/src/cli/driver.ts
@@ -20,7 +20,7 @@ import fs from 'fs';
 import * as playwright from '../..';
 import type { BrowserType } from '../client/browserType';
 import type { LaunchServerOptions } from '../client/types';
-import { createPlaywright, DispatcherConnection, RootDispatcher, PlaywrightDispatcher } from '../server';
+import { createPlaywright, DispatcherConnection, Root, PlaywrightDispatcher } from '../server';
 import type { Playwright } from '../server';
 import { IpcTransport, PipeTransport } from '../protocol/transport';
 import { PlaywrightServer } from '../remote/playwrightServer';
@@ -38,7 +38,7 @@ export function printApiJson() {
 
 export function runDriver() {
   const dispatcherConnection = new DispatcherConnection();
-  new RootDispatcher(dispatcherConnection, async (rootScope, { sdkLanguage }) => {
+  new Root(dispatcherConnection, async (rootScope, { sdkLanguage }) => {
     const playwright = createPlaywright(sdkLanguage);
     return new PlaywrightDispatcher(rootScope, playwright);
   });
diff --git a/packages/playwright-core/src/client/browserContext.ts b/packages/playwright-core/src/client/browserContext.ts
index 4fefccc5b43c0ef7e82036b84907aeab204128cd..33000c57455db0ba7c13982c1fe89950274fcc10 100644
--- a/packages/playwright-core/src/client/browserContext.ts
+++ b/packages/playwright-core/src/client/browserContext.ts
@@ -79,7 +79,7 @@ export class BrowserContext extends ChannelOwner<channels.BrowserContextChannel>
     this._channel.on('bindingCall', ({ binding }) => this._onBinding(BindingCall.from(binding)));
     this._channel.on('close', () => this._onClose());
     this._channel.on('page', ({ page }) => this._onPage(Page.from(page)));
-    this._channel.on('route', ({ route }) => this._onRoute(network.Route.from(route)));
+    this._channel.on('route', ({ route, request }) => this._onRoute(network.Route.from(route), network.Request.from(request)));
     this._channel.on('backgroundPage', ({ page }) => {
       const backgroundPage = Page.from(page);
       this._backgroundPages.add(backgroundPage);
@@ -147,14 +147,14 @@ export class BrowserContext extends ChannelOwner<channels.BrowserContextChannel>
       response._finishedPromise.resolve();
   }
 
-  async _onRoute(route: network.Route) {
+  async _onRoute(route: network.Route, request: network.Request) {
     const routeHandlers = this._routes.slice();
     for (const routeHandler of routeHandlers) {
-      if (!routeHandler.matches(route.request().url()))
+      if (!routeHandler.matches(request.url()))
         continue;
       if (routeHandler.willExpire())
         this._routes.splice(this._routes.indexOf(routeHandler), 1);
-      const handled = await routeHandler.handle(route);
+      const handled = await routeHandler.handle(route, request);
       if (!this._routes.length)
         this._wrapApiCall(() => this._disableInterception(), true).catch(() => {});
       if (handled)
@@ -202,7 +202,7 @@ export class BrowserContext extends ChannelOwner<channels.BrowserContextChannel>
     if (!urls)
       urls = [];
     if (urls && typeof urls === 'string')
-      urls = [urls];
+      urls = [ urls ];
     return (await this._channel.cookies({ urls: urls as string[] })).cookies;
   }
 
diff --git a/packages/playwright-core/src/client/browserType.ts b/packages/playwright-core/src/client/browserType.ts
index 527a3b1bd707ea3c37288e5c74c2c367d04248fa..c4b782f5c3189f21eb31fa150037df5c57a7193e 100644
--- a/packages/playwright-core/src/client/browserType.ts
+++ b/packages/playwright-core/src/client/browserType.ts
@@ -49,7 +49,6 @@ export class BrowserType extends ChannelOwner<channels.BrowserTypeChannel> imple
   // Instrumentation.
   _defaultContextOptions?: BrowserContextOptions;
   _defaultLaunchOptions?: LaunchOptions;
-  _defaultConnectOptions?: ConnectOptions;
   _onDidCreateContext?: (context: BrowserContext) => Promise<void>;
   _onWillCloseContext?: (context: BrowserContext) => Promise<void>;
 
@@ -68,9 +67,6 @@ export class BrowserType extends ChannelOwner<channels.BrowserTypeChannel> imple
   }
 
   async launch(options: LaunchOptions = {}): Promise<Browser> {
-    if (this._defaultConnectOptions)
-      return await this._connectInsteadOfLaunching();
-
     const logger = options.logger || this._defaultLaunchOptions?.logger;
     assert(!(options as any).userDataDir, 'userDataDir option is not supported in `browserType.launch`. Use `browserType.launchPersistentContext` instead');
     assert(!(options as any).port, 'Cannot specify a port without launching as a server.');
@@ -87,18 +83,6 @@ export class BrowserType extends ChannelOwner<channels.BrowserTypeChannel> imple
     return browser;
   }
 
-  private async _connectInsteadOfLaunching(): Promise<Browser> {
-    const connectOptions = this._defaultConnectOptions!;
-    return this._connect(connectOptions.wsEndpoint, {
-      headers: {
-        'x-playwright-browser': this.name(),
-        'x-playwright-launch-options': JSON.stringify(this._defaultLaunchOptions || {}),
-        ...connectOptions.headers,
-      },
-      timeout: connectOptions.timeout ?? 3 * 60 * 1000, // 3 minutes
-    });
-  }
-
   async launchServer(options: LaunchServerOptions = {}): Promise<api.BrowserServer> {
     if (!this._serverLauncher)
       throw new Error('Launching server is not supported');
diff --git a/packages/playwright-core/src/client/elementHandle.ts b/packages/playwright-core/src/client/elementHandle.ts
index 6256f8f126c057a2690ec3b58954670114ae9efb..2be8b7f5e6db39bd591dc456a92b0658012edac9 100644
--- a/packages/playwright-core/src/client/elementHandle.ts
+++ b/packages/playwright-core/src/client/elementHandle.ts
@@ -244,7 +244,7 @@ export function convertSelectOptionValues(values: string | api.ElementHandle | S
   if (values === null)
     return {};
   if (!Array.isArray(values))
-    values = [values as any];
+    values = [ values as any ];
   if (!values.length)
     return {};
   for (let i = 0; i < values.length; i++)
@@ -263,7 +263,7 @@ type InputFilesList = {
   streams?: channels.WritableStreamChannel[];
 };
 export async function convertInputFiles(files: string | FilePayload | string[] | FilePayload[], context: BrowserContext): Promise<InputFilesList> {
-  const items: (string | FilePayload)[] = Array.isArray(files) ? files.slice() : [files];
+  const items: (string | FilePayload)[] = Array.isArray(files) ? files.slice() : [ files ];
 
   const sizeLimit = 50 * 1024 * 1024;
   const hasLargeBuffer = items.find(item => typeof item === 'object' && item.buffer && item.buffer.byteLength > sizeLimit);
diff --git a/packages/playwright-core/src/client/fetch.ts b/packages/playwright-core/src/client/fetch.ts
index 185158a1a41ade6e91c46c5e6cac3109fd71ccd2..af43f91f475c89fc41393bec3050cc38e831f1cc 100644
--- a/packages/playwright-core/src/client/fetch.ts
+++ b/packages/playwright-core/src/client/fetch.ts
@@ -42,7 +42,6 @@ export type FetchOptions = {
   timeout?: number,
   failOnStatusCode?: boolean,
   ignoreHTTPSErrors?: boolean,
-  maxRedirects?: number,
 };
 
 type NewContextOptions = Omit<channels.PlaywrightNewRequestOptions, 'extraHTTPHeaders' | 'storageState'> & {
@@ -147,11 +146,9 @@ export class APIRequestContext extends ChannelOwner<channels.APIRequestContextCh
       const request: network.Request | undefined = (urlOrRequest instanceof network.Request) ? urlOrRequest as network.Request : undefined;
       assert(request || typeof urlOrRequest === 'string', 'First argument must be either URL string or Request');
       assert((options.data === undefined ? 0 : 1) + (options.form === undefined ? 0 : 1) + (options.multipart === undefined ? 0 : 1) <= 1, `Only one of 'data', 'form' or 'multipart' can be specified`);
-      assert(options.maxRedirects === undefined || options.maxRedirects >= 0, `'maxRedirects' should be greater than or equal to '0'`);
       const url = request ? request.url() : urlOrRequest as string;
       const params = objectToArray(options.params);
       const method = options.method || request?.method();
-      const maxRedirects = options.maxRedirects;
       // Cannot call allHeaders() here as the request may be paused inside route handler.
       const headersObj = options.headers || request?.headers() ;
       const headers = headersObj ? headersObjectToArray(headersObj) : undefined;
@@ -204,7 +201,6 @@ export class APIRequestContext extends ChannelOwner<channels.APIRequestContextCh
         timeout: options.timeout,
         failOnStatusCode: options.failOnStatusCode,
         ignoreHTTPSErrors: options.ignoreHTTPSErrors,
-        maxRedirects: maxRedirects,
       });
       return new APIResponse(this, result.response);
     });
diff --git a/packages/playwright-core/src/client/network.ts b/packages/playwright-core/src/client/network.ts
index 4cfe0c7afa3c457d8ca49cc873096e49f5064d64..2dee4482a9a45bcde7a47cf92ec9be8cf2074da6 100644
--- a/packages/playwright-core/src/client/network.ts
+++ b/packages/playwright-core/src/client/network.ts
@@ -604,14 +604,14 @@ export class RouteHandler {
     return urlMatches(this._baseURL, requestURL, this.url);
   }
 
-  public async handle(route: Route): Promise<boolean> {
+  public async handle(route: Route, request: Request): Promise<boolean> {
     ++this.handledCount;
     const handledPromise = route._startHandling();
     // Extract handler into a variable to avoid [RouteHandler.handler] in the stack.
     const handler = this.handler;
     const [handled] = await Promise.all([
       handledPromise,
-      handler(route, route.request()),
+      handler(route, request),
     ]);
     return handled;
   }
diff --git a/packages/playwright-core/src/client/page.ts b/packages/playwright-core/src/client/page.ts
index 840aab711c420fbf1628e4b9bd00eb3099a17386..45a917eb768470c81d80b572ec4a0faae9e323c8 100644
--- a/packages/playwright-core/src/client/page.ts
+++ b/packages/playwright-core/src/client/page.ts
@@ -47,8 +47,7 @@ import { Keyboard, Mouse, Touchscreen } from './input';
 import { assertMaxArguments, JSHandle, parseResult, serializeArgument } from './jsHandle';
 import type { FrameLocator, Locator, LocatorOptions } from './locator';
 import type { RouteHandlerCallback } from './network';
-import { Response, Route, RouteHandler, validateHeaders, WebSocket } from './network';
-import type { Request } from './network';
+import { Request, Response, Route, RouteHandler, validateHeaders, WebSocket } from './network';
 import type { FilePayload, Headers, LifecycleEvent, SelectOption, SelectOptionOptions, Size, URLMatch, WaitForEventOptions, WaitForFunctionOptions } from './types';
 import { Video } from './video';
 import { Waiter } from './waiter';
@@ -146,7 +145,7 @@ export class Page extends ChannelOwner<channels.PageChannel> implements api.Page
     this._channel.on('frameAttached', ({ frame }) => this._onFrameAttached(Frame.from(frame)));
     this._channel.on('frameDetached', ({ frame }) => this._onFrameDetached(Frame.from(frame)));
     this._channel.on('pageError', ({ error }) => this.emit(Events.Page.PageError, parseError(error)));
-    this._channel.on('route', ({ route }) => this._onRoute(Route.from(route)));
+    this._channel.on('route', ({ route, request }) => this._onRoute(Route.from(route), Request.from(request)));
     this._channel.on('video', ({ artifact }) => {
       const artifactObject = Artifact.from(artifact);
       this._forceVideo()._artifactReady(artifactObject);
@@ -178,20 +177,20 @@ export class Page extends ChannelOwner<channels.PageChannel> implements api.Page
     this.emit(Events.Page.FrameDetached, frame);
   }
 
-  private async _onRoute(route: Route) {
+  private async _onRoute(route: Route, request: Request) {
     const routeHandlers = this._routes.slice();
     for (const routeHandler of routeHandlers) {
-      if (!routeHandler.matches(route.request().url()))
+      if (!routeHandler.matches(request.url()))
         continue;
       if (routeHandler.willExpire())
         this._routes.splice(this._routes.indexOf(routeHandler), 1);
-      const handled = await routeHandler.handle(route);
+      const handled = await routeHandler.handle(route, request);
       if (!this._routes.length)
         this._wrapApiCall(() => this._disableInterception(), true).catch(() => {});
       if (handled)
         return;
     }
-    await this._browserContext._onRoute(route);
+    await this._browserContext._onRoute(route, request);
   }
 
   async _onBinding(bindingCall: BindingCall) {
diff --git a/packages/playwright-core/src/common/netUtils.ts b/packages/playwright-core/src/common/netUtils.ts
index 4cfca7c69ff68ebdece66294ebb55b0220d605e3..2b33e304c51686583ecc24270a06a82b9bbbff6a 100644
--- a/packages/playwright-core/src/common/netUtils.ts
+++ b/packages/playwright-core/src/common/netUtils.ts
@@ -39,14 +39,11 @@ export type HTTPRequestParams = {
   timeout?: number,
 };
 
-export const NET_DEFAULT_TIMEOUT = 30_000;
-
 export function httpRequest(params: HTTPRequestParams, onResponse: (r: http.IncomingMessage) => void, onError: (error: Error) => void) {
   const parsedUrl = URL.parse(params.url);
   let options: https.RequestOptions = { ...parsedUrl };
   options.method = params.method || 'GET';
   options.headers = params.headers;
-  const timeout = params.timeout ?? NET_DEFAULT_TIMEOUT;
 
   const proxyURL = getProxyForUrl(params.url);
   if (proxyURL) {
@@ -77,16 +74,16 @@ export function httpRequest(params: HTTPRequestParams, onResponse: (r: http.Inco
     https.request(options, requestCallback) :
     http.request(options, requestCallback);
   request.on('error', onError);
-  if (timeout !== undefined) {
+  if (params.timeout !== undefined) {
     const rejectOnTimeout = () =>  {
-      onError(new Error(`Request to ${params.url} timed out after ${timeout}ms`));
+      onError(new Error(`Request to ${params.url} timed out after ${params.timeout}ms`));
       request.abort();
     };
-    if (timeout <= 0) {
+    if (params.timeout <= 0) {
       rejectOnTimeout();
       return;
     }
-    request.setTimeout(timeout, rejectOnTimeout);
+    request.setTimeout(params.timeout, rejectOnTimeout);
   }
   request.end(params.data);
 }
diff --git a/packages/playwright-core/src/inProcessFactory.ts b/packages/playwright-core/src/inProcessFactory.ts
index 3ee2cacae9935c0516884b5c49dcb16021f64054..4c118441832ad473b3afdbb9fd53b2846c00fb94 100644
--- a/packages/playwright-core/src/inProcessFactory.ts
+++ b/packages/playwright-core/src/inProcessFactory.ts
@@ -15,7 +15,7 @@
  */
 
 import type { Playwright as PlaywrightAPI } from './client/playwright';
-import { createPlaywright, DispatcherConnection, RootDispatcher, PlaywrightDispatcher } from './server';
+import { createPlaywright, DispatcherConnection, Root, PlaywrightDispatcher } from './server';
 import { Connection } from './client/connection';
 import { BrowserServerLauncherImpl } from './browserServerImpl';
 
@@ -29,7 +29,7 @@ export function createInProcessPlaywright(): PlaywrightAPI {
   dispatcherConnection.onmessage = message => clientConnection.dispatch(message);
   clientConnection.onmessage = message => dispatcherConnection.dispatch(message);
 
-  const rootScope = new RootDispatcher(dispatcherConnection);
+  const rootScope = new Root(dispatcherConnection);
 
   // Initialize Playwright channel.
   new PlaywrightDispatcher(rootScope, playwright);
diff --git a/packages/playwright-core/src/protocol/channels.ts b/packages/playwright-core/src/protocol/channels.ts
index ca23e24c1e96bc5743d6de90eeea4767bebed5a2..571151db012f083655c64ef847b6c45005ceabc9 100644
--- a/packages/playwright-core/src/protocol/channels.ts
+++ b/packages/playwright-core/src/protocol/channels.ts
@@ -310,7 +310,6 @@ export type APIRequestContextFetchParams = {
   timeout?: number,
   failOnStatusCode?: boolean,
   ignoreHTTPSErrors?: boolean,
-  maxRedirects?: number,
 };
 export type APIRequestContextFetchOptions = {
   params?: NameValue[],
@@ -323,7 +322,6 @@ export type APIRequestContextFetchOptions = {
   timeout?: number,
   failOnStatusCode?: boolean,
   ignoreHTTPSErrors?: boolean,
-  maxRedirects?: number,
 };
 export type APIRequestContextFetchResult = {
   response: APIResponse,
@@ -1260,6 +1258,7 @@ export type BrowserContextPageEvent = {
 };
 export type BrowserContextRouteEvent = {
   route: RouteChannel,
+  request: RequestChannel,
 };
 export type BrowserContextVideoEvent = {
   artifact: ArtifactChannel,
@@ -1587,6 +1586,7 @@ export type PagePageErrorEvent = {
 };
 export type PageRouteEvent = {
   route: RouteChannel,
+  request: RequestChannel,
 };
 export type PageVideoEvent = {
   artifact: ArtifactChannel,
diff --git a/packages/playwright-core/src/protocol/protocol.yml b/packages/playwright-core/src/protocol/protocol.yml
index 4f064d76c8b3a80a688ddfa9c3133d4c32e305de..1791fd11a744de8f708aa0cb5ba463b37a11bd30 100644
--- a/packages/playwright-core/src/protocol/protocol.yml
+++ b/packages/playwright-core/src/protocol/protocol.yml
@@ -284,7 +284,6 @@ APIRequestContext:
         timeout: number?
         failOnStatusCode: boolean?
         ignoreHTTPSErrors: boolean?
-        maxRedirects: number?
       returns:
         response: APIResponse
 
@@ -993,6 +992,7 @@ BrowserContext:
     route:
       parameters:
         route: Route
+        request: Request
 
     video:
       parameters:
@@ -1422,6 +1422,7 @@ Page:
     route:
       parameters:
         route: Route
+        request: Request
 
     video:
       parameters:
diff --git a/packages/playwright-core/src/protocol/validator.ts b/packages/playwright-core/src/protocol/validator.ts
index 23de16ab29b0886c04b8cee9f607b323892bf1b8..97d5d44002ce35c93d5d48b96e8d23817de01a19 100644
--- a/packages/playwright-core/src/protocol/validator.ts
+++ b/packages/playwright-core/src/protocol/validator.ts
@@ -171,7 +171,6 @@ scheme.APIRequestContextFetchParams = tObject({
   timeout: tOptional(tNumber),
   failOnStatusCode: tOptional(tBoolean),
   ignoreHTTPSErrors: tOptional(tBoolean),
-  maxRedirects: tOptional(tNumber),
 });
 scheme.APIRequestContextFetchResult = tObject({
   response: tType('APIResponse'),
@@ -657,6 +656,7 @@ scheme.BrowserContextPageEvent = tObject({
 });
 scheme.BrowserContextRouteEvent = tObject({
   route: tChannel(['Route']),
+  request: tChannel(['Request']),
 });
 scheme.BrowserContextVideoEvent = tObject({
   artifact: tChannel(['Artifact']),
@@ -842,6 +842,7 @@ scheme.PagePageErrorEvent = tObject({
 });
 scheme.PageRouteEvent = tObject({
   route: tChannel(['Route']),
+  request: tChannel(['Request']),
 });
 scheme.PageVideoEvent = tObject({
   artifact: tChannel(['Artifact']),
diff --git a/packages/playwright-core/src/remote/playwrightConnection.ts b/packages/playwright-core/src/remote/playwrightConnection.ts
index 9f6655792c6528bc82938daa799b34996a77d333..c8900352ba2fc7c35aa4b705b6755b7703b0fa13 100644
--- a/packages/playwright-core/src/remote/playwrightConnection.ts
+++ b/packages/playwright-core/src/remote/playwrightConnection.ts
@@ -15,8 +15,8 @@
  */
 
 import type { WebSocket } from '../utilsBundle';
-import type { Playwright } from '../server';
-import { createPlaywright, DispatcherConnection, RootDispatcher, PlaywrightDispatcher } from '../server';
+import type { Playwright, DispatcherScope } from '../server';
+import { createPlaywright, DispatcherConnection, Root, PlaywrightDispatcher } from '../server';
 import { Browser } from '../server/browser';
 import { serverSideCallMetadata } from '../server/instrumentation';
 import { gracefullyCloseAll } from '../utils/processLauncher';
@@ -45,7 +45,7 @@ export class PlaywrightConnection {
   private _disconnected = false;
   private _preLaunched: PreLaunched;
   private _options: Options;
-  private _root: RootDispatcher;
+  private _root: Root;
 
   constructor(lock: Promise<void>, mode: Mode, ws: WebSocket, options: Options, preLaunched: PreLaunched, log: (m: string) => void, onClose: () => void) {
     this._ws = ws;
@@ -72,7 +72,7 @@ export class PlaywrightConnection {
     ws.on('close', () => this._onDisconnect());
     ws.on('error', error => this._onDisconnect(error));
 
-    this._root = new RootDispatcher(this._dispatcherConnection, async scope => {
+    this._root = new Root(this._dispatcherConnection, async scope => {
       if (mode === 'reuse-browser')
         return await this._initReuseBrowsersMode(scope);
       if (mode === 'use-pre-launched-browser')
@@ -83,7 +83,7 @@ export class PlaywrightConnection {
     });
   }
 
-  private async _initPlaywrightConnectMode(scope: RootDispatcher) {
+  private async _initPlaywrightConnectMode(scope: DispatcherScope) {
     this._debugLog(`engaged playwright.connect mode`);
     const playwright = createPlaywright('javascript');
     // Close all launched browsers on disconnect.
@@ -93,7 +93,7 @@ export class PlaywrightConnection {
     return new PlaywrightDispatcher(scope, playwright, socksProxy);
   }
 
-  private async _initLaunchBrowserMode(scope: RootDispatcher) {
+  private async _initLaunchBrowserMode(scope: DispatcherScope) {
     this._debugLog(`engaged launch mode for "${this._options.browserName}"`);
 
     const playwright = createPlaywright('javascript');
@@ -112,7 +112,7 @@ export class PlaywrightConnection {
     return new PlaywrightDispatcher(scope, playwright, socksProxy, browser);
   }
 
-  private async _initPreLaunchedBrowserMode(scope: RootDispatcher) {
+  private async _initPreLaunchedBrowserMode(scope: DispatcherScope) {
     this._debugLog(`engaged pre-launched mode`);
     const playwright = this._preLaunched.playwright!;
     const browser = this._preLaunched.browser!;
@@ -130,7 +130,7 @@ export class PlaywrightConnection {
     return playwrightDispatcher;
   }
 
-  private async _initReuseBrowsersMode(scope: RootDispatcher) {
+  private async _initReuseBrowsersMode(scope: DispatcherScope) {
     this._debugLog(`engaged reuse browsers mode for ${this._options.browserName}`);
     const playwright = this._preLaunched.playwright!;
     const requestedOptions = launchOptionsHash(this._options.launchOptions);
diff --git a/packages/playwright-core/src/server/browserContext.ts b/packages/playwright-core/src/server/browserContext.ts
index 6f8e849db70111227fca3c0a5b67c3ed99c309ce..f3317729092d1f980e63e9ca1271a6a0122c10c5 100644
--- a/packages/playwright-core/src/server/browserContext.ts
+++ b/packages/playwright-core/src/server/browserContext.ts
@@ -184,7 +184,7 @@ export abstract class BrowserContext extends SdkObject {
     await page?._frameManager.closeOpenDialogs();
     // Navigate to about:blank first to ensure no page scripts are running after this point.
     await page?.mainFrame().goto(metadata, 'about:blank', { timeout: 0 });
-    await this._resetStorage();
+    await this._clearStorage();
     await this._removeExposedBindings();
     await this._removeInitScripts();
     // TODO: following can be optimized to not perform noops.
@@ -196,7 +196,7 @@ export abstract class BrowserContext extends SdkObject {
     await this.setGeolocation(this._options.geolocation);
     await this.setOffline(!!this._options.offline);
     await this.setUserAgent(this._options.userAgent);
-    await this._resetCookies();
+    await this.clearCookies();
 
     await page?.resetForReuse(metadata);
   }
@@ -216,7 +216,7 @@ export abstract class BrowserContext extends SdkObject {
     this._closedStatus = 'closed';
     this._deleteAllDownloads();
     this._downloads.clear();
-    this.tracing.dispose().catch(() => {});
+    this.tracing.dispose();
     if (this._isPersistentContext)
       this.onClosePersistent();
     this._closePromiseFulfill!(new Error('Context closed'));
@@ -247,7 +247,7 @@ export abstract class BrowserContext extends SdkObject {
 
   async cookies(urls: string | string[] | undefined = []): Promise<channels.NetworkCookie[]> {
     if (urls && !Array.isArray(urls))
-      urls = [urls];
+      urls = [ urls ];
     return await this.doGetCookies(urls as string[]);
   }
 
@@ -389,7 +389,7 @@ export abstract class BrowserContext extends SdkObject {
 
       for (const harRecorder of this._harRecorders.values())
         await harRecorder.flush();
-      await this.tracing.dispose();
+      await this.tracing.flush();
 
       // Cleanup.
       const promises: Promise<void>[] = [];
@@ -474,10 +474,8 @@ export abstract class BrowserContext extends SdkObject {
     return result;
   }
 
-  async _resetStorage() {
-    const oldOrigins = this._origins;
-    const newOrigins = new Map(this._options.storageState?.origins?.map(p => [p.origin, p]) || []);
-    if (!oldOrigins.size && !newOrigins.size)
+  async _clearStorage() {
+    if (!this._origins.size)
       return;
     let page = this.pages()[0];
 
@@ -486,25 +484,15 @@ export abstract class BrowserContext extends SdkObject {
     await page._setServerRequestInterceptor(handler => {
       handler.fulfill({ body: '<html></html>' }).catch(() => {});
     });
-
-    for (const origin of new Set([...oldOrigins, ...newOrigins.keys()])) {
+    for (const origin of this._origins) {
       const frame = page.mainFrame();
       await frame.goto(internalMetadata, origin);
-      await frame.resetStorageForCurrentOriginBestEffort(newOrigins.get(origin));
+      await frame.clearStorageForCurrentOriginBestEffort();
     }
-
     await page._setServerRequestInterceptor(undefined);
-
-    this._origins = new Set([...newOrigins.keys()]);
     // It is safe to not restore the URL to about:blank since we are doing it in Page::resetForReuse.
   }
 
-  async _resetCookies() {
-    await this.clearCookies();
-    if (this._options.storageState?.cookies)
-      await this.addCookies(this._options.storageState?.cookies);
-  }
-
   isSettingStorageState(): boolean {
     return this._settingStorageState;
   }
diff --git a/packages/playwright-core/src/server/chromium/chromium.ts b/packages/playwright-core/src/server/chromium/chromium.ts
index 3633eceab539a99ebf29e80ca0ad173791444e30..b3dec070abfda0a1ea7361ef0028bcd8734123d9 100644
--- a/packages/playwright-core/src/server/chromium/chromium.ts
+++ b/packages/playwright-core/src/server/chromium/chromium.ts
@@ -32,7 +32,6 @@ import { Browser } from '../browser';
 import type * as types from '../types';
 import type * as channels from '../../protocol/channels';
 import type { HTTPRequestParams } from '../../common/netUtils';
-import { NET_DEFAULT_TIMEOUT } from '../../common/netUtils';
 import { fetchData } from '../../common/netUtils';
 import { getUserAgent } from '../../common/userAgent';
 import { debugMode, headersArrayToObject, streamToString, wrapInASCIIBox } from '../../utils';
@@ -87,7 +86,7 @@ export class Chromium extends BrowserType {
     const chromeTransport = await WebSocketTransport.connect(progress, wsEndpoint, headersMap);
     const cleanedUp = new ManualPromise<void>();
     const doCleanup = async () => {
-      await removeFolders([artifactsDir]);
+      await removeFolders([ artifactsDir ]);
       await onClose?.();
       cleanedUp.resolve();
     };
@@ -366,9 +365,7 @@ async function urlToWSEndpoint(progress: Progress, endpointURL: string) {
   const httpURL = endpointURL.endsWith('/') ? `${endpointURL}json/version/` : `${endpointURL}/json/version/`;
   const request = endpointURL.startsWith('https') ? https : http;
   const json = await new Promise<string>((resolve, reject) => {
-    request.get(httpURL, {
-      timeout: NET_DEFAULT_TIMEOUT,
-    }, resp => {
+    request.get(httpURL, resp => {
       if (resp.statusCode! < 200 || resp.statusCode! >= 400) {
         reject(new Error(`Unexpected status ${resp.statusCode} when connecting to ${httpURL}.\n` +
         `This does not look like a DevTools server, try connecting via ws://.`));
diff --git a/packages/playwright-core/src/server/chromium/crBrowser.ts b/packages/playwright-core/src/server/chromium/crBrowser.ts
index dc2801caaef3222e462c2d6d21cec6086ed8af10..5647fd0a593ca5041045e96c469e581eddeadd13 100644
--- a/packages/playwright-core/src/server/chromium/crBrowser.ts
+++ b/packages/playwright-core/src/server/chromium/crBrowser.ts
@@ -20,7 +20,7 @@ import { Browser } from '../browser';
 import { assertBrowserContextIsNotOwned, BrowserContext, verifyGeolocation } from '../browserContext';
 import { assert } from '../../utils';
 import * as network from '../network';
-import type { PageBinding, PageDelegate, Worker } from '../page';
+import type { PageBinding, PageDelegate , Worker } from '../page';
 import { Page } from '../page';
 import { Frame } from '../frames';
 import type { Dialog } from '../dialog';
@@ -322,7 +322,7 @@ export class CRBrowserContext extends BrowserContext {
 
   override async _initialize() {
     assert(!Array.from(this._browser._crPages.values()).some(page => page._browserContext === this));
-    const promises: Promise<any>[] = [super._initialize()];
+    const promises: Promise<any>[] = [ super._initialize() ];
     if (this._browser.options.name !== 'electron' && this._browser.options.name !== 'clank') {
       promises.push(this._browser._session.send('Browser.setDownloadBehavior', {
         behavior: this._options.acceptDownloads ? 'allowAndName' : 'deny',
@@ -364,7 +364,7 @@ export class CRBrowserContext extends BrowserContext {
           newKeys.delete(key);
       }
       assert(newKeys.size === 1);
-      [targetId] = [...newKeys];
+      [ targetId ] = [...newKeys];
     }
     return this._browser._crPages.get(targetId)!;
   }
diff --git a/packages/playwright-core/src/server/chromium/crPage.ts b/packages/playwright-core/src/server/chromium/crPage.ts
index 5da8b1c9f1f9cd3d1beeb87e26e23ab614b70403..43c46c246a01d8ac2a1faf90241c8e07b4c2e7e5 100644
--- a/packages/playwright-core/src/server/chromium/crPage.ts
+++ b/packages/playwright-core/src/server/chromium/crPage.ts
@@ -435,6 +435,7 @@ class FrameSession {
       eventsHelper.addEventListener(this._client, 'Page.frameDetached', event => this._onFrameDetached(event.frameId, event.reason)),
       eventsHelper.addEventListener(this._client, 'Page.frameNavigated', event => this._onFrameNavigated(event.frame, false)),
       eventsHelper.addEventListener(this._client, 'Page.frameRequestedNavigation', event => this._onFrameRequestedNavigation(event)),
+      eventsHelper.addEventListener(this._client, 'Page.frameStoppedLoading', event => this._onFrameStoppedLoading(event.frameId)),
       eventsHelper.addEventListener(this._client, 'Page.javascriptDialogOpening', event => this._onDialog(event)),
       eventsHelper.addEventListener(this._client, 'Page.navigatedWithinDocument', event => this._onFrameNavigatedWithinDocument(event.frameId, event.url)),
       eventsHelper.addEventListener(this._client, 'Runtime.bindingCalled', event => this._onBindingCalled(event)),
@@ -495,7 +496,7 @@ class FrameSession {
           this._handleFrameTree(frameTree);
           this._addRendererListeners();
         }
-        const localFrames = this._isMainFrame() ? this._page.frames() : [this._page._frameManager.frame(this._targetId)!];
+        const localFrames = this._isMainFrame() ? this._page.frames() : [ this._page._frameManager.frame(this._targetId)! ];
         for (const frame of localFrames) {
           // Note: frames might be removed before we send these.
           this._client._sendMayFail('Page.createIsolatedWorld', {
@@ -600,6 +601,12 @@ class FrameSession {
       this._page._frameManager.frameLifecycleEvent(event.frameId, 'domcontentloaded');
   }
 
+  _onFrameStoppedLoading(frameId: string) {
+    if (this._eventBelongsToStaleFrame(frameId))
+      return;
+    this._page._frameManager.frameStoppedLoading(frameId);
+  }
+
   _handleFrameTree(frameTree: Protocol.Page.FrameTree) {
     this._onFrameAttached(frameTree.frame.id, frameTree.frame.parentId || null);
     this._onFrameNavigated(frameTree.frame, true);
@@ -815,7 +822,7 @@ class FrameSession {
   }
 
   async _initBinding(binding: PageBinding) {
-    const [, response] = await Promise.all([
+    const [ , response ] = await Promise.all([
       this._client.send('Runtime.addBinding', { name: binding.name }),
       this._client.send('Page.addScriptToEvaluateOnNewDocument', { source: binding.source })
     ]);
diff --git a/packages/playwright-core/src/server/chromium/protocol.d.ts b/packages/playwright-core/src/server/chromium/protocol.d.ts
index abb4e3339aef2d0a93fc2907e03852141e3653b4..a9d7345550b0fe1abf1516f31fbfddb86d34bbdc 100644
--- a/packages/playwright-core/src/server/chromium/protocol.d.ts
+++ b/packages/playwright-core/src/server/chromium/protocol.d.ts
@@ -646,8 +646,8 @@ animation/transition.
     export interface AffectedFrame {
       frameId: Page.FrameId;
     }
-    export type CookieExclusionReason = "ExcludeSameSiteUnspecifiedTreatedAsLax"|"ExcludeSameSiteNoneInsecure"|"ExcludeSameSiteLax"|"ExcludeSameSiteStrict"|"ExcludeInvalidSameParty"|"ExcludeSamePartyCrossPartyContext"|"ExcludeDomainNonASCII";
-    export type CookieWarningReason = "WarnSameSiteUnspecifiedCrossSiteContext"|"WarnSameSiteNoneInsecure"|"WarnSameSiteUnspecifiedLaxAllowUnsafe"|"WarnSameSiteStrictLaxDowngradeStrict"|"WarnSameSiteStrictCrossDowngradeStrict"|"WarnSameSiteStrictCrossDowngradeLax"|"WarnSameSiteLaxCrossDowngradeStrict"|"WarnSameSiteLaxCrossDowngradeLax"|"WarnAttributeValueExceedsMaxSize"|"WarnDomainNonASCII";
+    export type CookieExclusionReason = "ExcludeSameSiteUnspecifiedTreatedAsLax"|"ExcludeSameSiteNoneInsecure"|"ExcludeSameSiteLax"|"ExcludeSameSiteStrict"|"ExcludeInvalidSameParty"|"ExcludeSamePartyCrossPartyContext";
+    export type CookieWarningReason = "WarnSameSiteUnspecifiedCrossSiteContext"|"WarnSameSiteNoneInsecure"|"WarnSameSiteUnspecifiedLaxAllowUnsafe"|"WarnSameSiteStrictLaxDowngradeStrict"|"WarnSameSiteStrictCrossDowngradeStrict"|"WarnSameSiteStrictCrossDowngradeLax"|"WarnSameSiteLaxCrossDowngradeStrict"|"WarnSameSiteLaxCrossDowngradeLax"|"WarnAttributeValueExceedsMaxSize";
     export type CookieOperation = "SetCookie"|"ReadCookie";
     /**
      * This information is currently necessary, as the front-end has a difficult
@@ -811,13 +811,14 @@ CORS RFC1918 enforcement.
       resourceIPAddressSpace?: Network.IPAddressSpace;
       clientSecurityState?: Network.ClientSecurityState;
     }
-    export type AttributionReportingIssueType = "PermissionPolicyDisabled"|"UntrustworthyReportingOrigin"|"InsecureContext"|"InvalidHeader"|"InvalidRegisterTriggerHeader"|"InvalidEligibleHeader"|"TooManyConcurrentRequests"|"SourceAndTriggerHeaders"|"SourceIgnored"|"TriggerIgnored";
+    export type AttributionReportingIssueType = "PermissionPolicyDisabled"|"AttributionSourceUntrustworthyOrigin"|"AttributionUntrustworthyOrigin"|"InvalidHeader";
     /**
      * Details for issues around "Attribution Reporting API" usage.
 Explainer: https://github.com/WICG/attribution-reporting-api
      */
     export interface AttributionReportingIssueDetails {
       violationType: AttributionReportingIssueType;
+      frame?: AffectedFrame;
       request?: AffectedRequest;
       violatingNodeId?: DOM.BackendNodeId;
       invalidParameter?: string;
@@ -852,7 +853,7 @@ instead of "limited-quirks".
       errorType: GenericIssueErrorType;
       frameId?: Page.FrameId;
     }
-    export type DeprecationIssueType = "AuthorizationCoveredByWildcard"|"CanRequestURLHTTPContainingNewline"|"ChromeLoadTimesConnectionInfo"|"ChromeLoadTimesFirstPaintAfterLoadTime"|"ChromeLoadTimesWasAlternateProtocolAvailable"|"CookieWithTruncatingChar"|"CrossOriginAccessBasedOnDocumentDomain"|"CrossOriginWindowAlert"|"CrossOriginWindowConfirm"|"CSSSelectorInternalMediaControlsOverlayCastButton"|"DeprecationExample"|"DocumentDomainSettingWithoutOriginAgentClusterHeader"|"EventPath"|"ExpectCTHeader"|"GeolocationInsecureOrigin"|"GeolocationInsecureOriginDeprecatedNotRemoved"|"GetUserMediaInsecureOrigin"|"HostCandidateAttributeGetter"|"IdentityInCanMakePaymentEvent"|"InsecurePrivateNetworkSubresourceRequest"|"LegacyConstraintGoogIPv6"|"LocalCSSFileExtensionRejected"|"MediaSourceAbortRemove"|"MediaSourceDurationTruncatingBuffered"|"NavigateEventRestoreScroll"|"NavigateEventTransitionWhile"|"NoSysexWebMIDIWithoutPermission"|"NotificationInsecureOrigin"|"NotificationPermissionRequestedIframe"|"ObsoleteWebRtcCipherSuite"|"OpenWebDatabaseInsecureContext"|"OverflowVisibleOnReplacedElement"|"PersistentQuotaType"|"PictureSourceSrc"|"PrefixedCancelAnimationFrame"|"PrefixedRequestAnimationFrame"|"PrefixedStorageInfo"|"PrefixedVideoDisplayingFullscreen"|"PrefixedVideoEnterFullscreen"|"PrefixedVideoEnterFullScreen"|"PrefixedVideoExitFullscreen"|"PrefixedVideoExitFullScreen"|"PrefixedVideoSupportsFullscreen"|"RangeExpand"|"RequestedSubresourceWithEmbeddedCredentials"|"RTCConstraintEnableDtlsSrtpFalse"|"RTCConstraintEnableDtlsSrtpTrue"|"RTCPeerConnectionComplexPlanBSdpUsingDefaultSdpSemantics"|"RTCPeerConnectionSdpSemanticsPlanB"|"RtcpMuxPolicyNegotiate"|"SharedArrayBufferConstructedWithoutIsolation"|"TextToSpeech_DisallowedByAutoplay"|"V8SharedArrayBufferConstructedInExtensionWithoutIsolation"|"XHRJSONEncodingDetection"|"XMLHttpRequestSynchronousInNonWorkerOutsideBeforeUnload"|"XRSupportsSession";
+    export type DeprecationIssueType = "AuthorizationCoveredByWildcard"|"CanRequestURLHTTPContainingNewline"|"ChromeLoadTimesConnectionInfo"|"ChromeLoadTimesFirstPaintAfterLoadTime"|"ChromeLoadTimesWasAlternateProtocolAvailable"|"CookieWithTruncatingChar"|"CrossOriginAccessBasedOnDocumentDomain"|"CrossOriginWindowAlert"|"CrossOriginWindowConfirm"|"CSSSelectorInternalMediaControlsOverlayCastButton"|"DeprecationExample"|"DocumentDomainSettingWithoutOriginAgentClusterHeader"|"EventPath"|"ExpectCTHeader"|"GeolocationInsecureOrigin"|"GeolocationInsecureOriginDeprecatedNotRemoved"|"GetUserMediaInsecureOrigin"|"HostCandidateAttributeGetter"|"IdentityInCanMakePaymentEvent"|"InsecurePrivateNetworkSubresourceRequest"|"LegacyConstraintGoogIPv6"|"LocalCSSFileExtensionRejected"|"MediaSourceAbortRemove"|"MediaSourceDurationTruncatingBuffered"|"NavigateEventRestoreScroll"|"NavigateEventTransitionWhile"|"NoSysexWebMIDIWithoutPermission"|"NotificationInsecureOrigin"|"NotificationPermissionRequestedIframe"|"ObsoleteWebRtcCipherSuite"|"OpenWebDatabaseInsecureContext"|"OverflowVisibleOnReplacedElement"|"PictureSourceSrc"|"PrefixedCancelAnimationFrame"|"PrefixedRequestAnimationFrame"|"PrefixedStorageInfo"|"PrefixedVideoDisplayingFullscreen"|"PrefixedVideoEnterFullscreen"|"PrefixedVideoEnterFullScreen"|"PrefixedVideoExitFullscreen"|"PrefixedVideoExitFullScreen"|"PrefixedVideoSupportsFullscreen"|"RangeExpand"|"RequestedSubresourceWithEmbeddedCredentials"|"RTCConstraintEnableDtlsSrtpFalse"|"RTCConstraintEnableDtlsSrtpTrue"|"RTCPeerConnectionComplexPlanBSdpUsingDefaultSdpSemantics"|"RTCPeerConnectionSdpSemanticsPlanB"|"RtcpMuxPolicyNegotiate"|"SharedArrayBufferConstructedWithoutIsolation"|"TextToSpeech_DisallowedByAutoplay"|"V8SharedArrayBufferConstructedInExtensionWithoutIsolation"|"XHRJSONEncodingDetection"|"XMLHttpRequestSynchronousInNonWorkerOutsideBeforeUnload"|"XRSupportsSession";
     /**
      * This issue tracks information needed to print a deprecation message.
 https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/frame/third_party/blink/renderer/core/frame/deprecation/README.md
@@ -872,7 +873,7 @@ Should be updated alongside RequestIdTokenStatus in
 third_party/blink/public/mojom/devtools/inspector_issue.mojom to include
 all cases except for success.
      */
-    export type FederatedAuthRequestIssueReason = "ApprovalDeclined"|"TooManyRequests"|"ManifestListHttpNotFound"|"ManifestListNoResponse"|"ManifestListInvalidResponse"|"ManifestNotInManifestList"|"ManifestListTooBig"|"ManifestHttpNotFound"|"ManifestNoResponse"|"ManifestInvalidResponse"|"ClientMetadataHttpNotFound"|"ClientMetadataNoResponse"|"ClientMetadataInvalidResponse"|"DisabledInSettings"|"ErrorFetchingSignin"|"InvalidSigninResponse"|"AccountsHttpNotFound"|"AccountsNoResponse"|"AccountsInvalidResponse"|"IdTokenHttpNotFound"|"IdTokenNoResponse"|"IdTokenInvalidResponse"|"IdTokenInvalidRequest"|"ErrorIdToken"|"Canceled";
+    export type FederatedAuthRequestIssueReason = "ApprovalDeclined"|"TooManyRequests"|"ManifestListHttpNotFound"|"ManifestListNoResponse"|"ManifestListInvalidResponse"|"ManifestNotInManifestList"|"ManifestListTooBig"|"ManifestHttpNotFound"|"ManifestNoResponse"|"ManifestInvalidResponse"|"ClientMetadataHttpNotFound"|"ClientMetadataNoResponse"|"ClientMetadataInvalidResponse"|"ClientMetadataMissingPrivacyPolicyUrl"|"DisabledInSettings"|"ErrorFetchingSignin"|"InvalidSigninResponse"|"AccountsHttpNotFound"|"AccountsNoResponse"|"AccountsInvalidResponse"|"IdTokenHttpNotFound"|"IdTokenNoResponse"|"IdTokenInvalidResponse"|"IdTokenInvalidRequest"|"ErrorIdToken"|"Canceled";
     /**
      * This issue tracks client hints related issues. It's used to deprecate old
 features, encourage the use of new ones, and provide general guidance.
@@ -1861,11 +1862,6 @@ stylesheet rules) this rule came from.
        * The entire property range in the enclosing style declaration (if available).
        */
       range?: SourceRange;
-      /**
-       * Parsed longhand components of this property if it is a shorthand.
-This field will be empty if the given property is not a shorthand.
-       */
-      longhandProperties?: CSSProperty[];
     }
     /**
      * CSS media rule descriptor.
@@ -5962,14 +5958,9 @@ requires the version number to be 'unsigned long long')
      */
     export type clearObjectStoreParameters = {
       /**
-       * At least and at most one of securityOrigin, storageKey must be specified.
-Security origin.
-       */
-      securityOrigin?: string;
-      /**
-       * Storage key.
+       * Security origin.
        */
-      storageKey?: string;
+      securityOrigin: string;
       /**
        * Database name.
        */
@@ -5986,14 +5977,9 @@ Security origin.
      */
     export type deleteDatabaseParameters = {
       /**
-       * At least and at most one of securityOrigin, storageKey must be specified.
-Security origin.
-       */
-      securityOrigin?: string;
-      /**
-       * Storage key.
+       * Security origin.
        */
-      storageKey?: string;
+      securityOrigin: string;
       /**
        * Database name.
        */
@@ -6005,15 +5991,7 @@ Security origin.
      * Delete a range of entries from an object store
      */
     export type deleteObjectStoreEntriesParameters = {
-      /**
-       * At least and at most one of securityOrigin, storageKey must be specified.
-Security origin.
-       */
-      securityOrigin?: string;
-      /**
-       * Storage key.
-       */
-      storageKey?: string;
+      securityOrigin: string;
       databaseName: string;
       objectStoreName: string;
       /**
@@ -6042,14 +6020,9 @@ Security origin.
      */
     export type requestDataParameters = {
       /**
-       * At least and at most one of securityOrigin, storageKey must be specified.
-Security origin.
-       */
-      securityOrigin?: string;
-      /**
-       * Storage key.
+       * Security origin.
        */
-      storageKey?: string;
+      securityOrigin: string;
       /**
        * Database name.
        */
@@ -6090,14 +6063,9 @@ Security origin.
      */
     export type getMetadataParameters = {
       /**
-       * At least and at most one of securityOrigin, storageKey must be specified.
-Security origin.
-       */
-      securityOrigin?: string;
-      /**
-       * Storage key.
+       * Security origin.
        */
-      storageKey?: string;
+      securityOrigin: string;
       /**
        * Database name.
        */
@@ -6124,14 +6092,9 @@ is true.
      */
     export type requestDatabaseParameters = {
       /**
-       * At least and at most one of securityOrigin, storageKey must be specified.
-Security origin.
-       */
-      securityOrigin?: string;
-      /**
-       * Storage key.
+       * Security origin.
        */
-      storageKey?: string;
+      securityOrigin: string;
       /**
        * Database name.
        */
@@ -6148,14 +6111,9 @@ Security origin.
      */
     export type requestDatabaseNamesParameters = {
       /**
-       * At least and at most one of securityOrigin, storageKey must be specified.
-Security origin.
-       */
-      securityOrigin?: string;
-      /**
-       * Storage key.
+       * Security origin.
        */
-      storageKey?: string;
+      securityOrigin: string;
     }
     export type requestDatabaseNamesReturnValue = {
       /**
@@ -10329,7 +10287,7 @@ as an ad.
      * All Permissions Policy features. This enum should match the one defined
 in third_party/blink/renderer/core/permissions_policy/permissions_policy_features.json5.
      */
-    export type PermissionsPolicyFeature = "accelerometer"|"ambient-light-sensor"|"attribution-reporting"|"autoplay"|"bluetooth"|"browsing-topics"|"camera"|"ch-dpr"|"ch-device-memory"|"ch-downlink"|"ch-ect"|"ch-prefers-color-scheme"|"ch-rtt"|"ch-save-data"|"ch-ua"|"ch-ua-arch"|"ch-ua-bitness"|"ch-ua-platform"|"ch-ua-model"|"ch-ua-mobile"|"ch-ua-full"|"ch-ua-full-version"|"ch-ua-full-version-list"|"ch-ua-platform-version"|"ch-ua-reduced"|"ch-ua-wow64"|"ch-viewport-height"|"ch-viewport-width"|"ch-width"|"clipboard-read"|"clipboard-write"|"cross-origin-isolated"|"direct-sockets"|"display-capture"|"document-domain"|"encrypted-media"|"execution-while-out-of-viewport"|"execution-while-not-rendered"|"federated-credentials"|"focus-without-user-activation"|"fullscreen"|"frobulate"|"gamepad"|"geolocation"|"gyroscope"|"hid"|"idle-detection"|"interest-cohort"|"join-ad-interest-group"|"keyboard-map"|"local-fonts"|"magnetometer"|"microphone"|"midi"|"otp-credentials"|"payment"|"picture-in-picture"|"publickey-credentials-get"|"run-ad-auction"|"screen-wake-lock"|"serial"|"shared-autofill"|"shared-storage"|"storage-access"|"sync-xhr"|"trust-token-redemption"|"unload"|"usb"|"vertical-scroll"|"web-share"|"window-placement"|"xr-spatial-tracking";
+    export type PermissionsPolicyFeature = "accelerometer"|"ambient-light-sensor"|"attribution-reporting"|"autoplay"|"bluetooth"|"browsing-topics"|"camera"|"ch-dpr"|"ch-device-memory"|"ch-downlink"|"ch-ect"|"ch-prefers-color-scheme"|"ch-rtt"|"ch-save-data"|"ch-ua"|"ch-ua-arch"|"ch-ua-bitness"|"ch-ua-platform"|"ch-ua-model"|"ch-ua-mobile"|"ch-ua-full"|"ch-ua-full-version"|"ch-ua-full-version-list"|"ch-ua-platform-version"|"ch-ua-reduced"|"ch-ua-wow64"|"ch-viewport-height"|"ch-viewport-width"|"ch-width"|"clipboard-read"|"clipboard-write"|"cross-origin-isolated"|"direct-sockets"|"display-capture"|"document-domain"|"encrypted-media"|"execution-while-out-of-viewport"|"execution-while-not-rendered"|"federated-credentials"|"focus-without-user-activation"|"fullscreen"|"frobulate"|"gamepad"|"geolocation"|"gyroscope"|"hid"|"idle-detection"|"interest-cohort"|"join-ad-interest-group"|"keyboard-map"|"local-fonts"|"magnetometer"|"microphone"|"midi"|"otp-credentials"|"payment"|"picture-in-picture"|"publickey-credentials-get"|"run-ad-auction"|"screen-wake-lock"|"serial"|"shared-autofill"|"shared-storage"|"storage-access-api"|"sync-xhr"|"trust-token-redemption"|"usb"|"vertical-scroll"|"web-share"|"window-placement"|"xr-spatial-tracking";
     /**
      * Reason for a permissions policy feature to be disabled.
      */
@@ -10832,7 +10790,7 @@ dependent on the reason:
     /**
      * List of FinalStatus reasons for Prerender2.
      */
-    export type PrerenderFinalStatus = "Activated"|"Destroyed"|"LowEndDevice"|"CrossOriginRedirect"|"CrossOriginNavigation"|"InvalidSchemeRedirect"|"InvalidSchemeNavigation"|"InProgressNavigation"|"NavigationRequestBlockedByCsp"|"MainFrameNavigation"|"MojoBinderPolicy"|"RendererProcessCrashed"|"RendererProcessKilled"|"Download"|"TriggerDestroyed"|"NavigationNotCommitted"|"NavigationBadHttpStatus"|"ClientCertRequested"|"NavigationRequestNetworkError"|"MaxNumOfRunningPrerendersExceeded"|"CancelAllHostsForTesting"|"DidFailLoad"|"Stop"|"SslCertificateError"|"LoginAuthRequested"|"UaChangeRequiresReload"|"BlockedByClient"|"AudioOutputDeviceRequested"|"MixedContent"|"TriggerBackgrounded"|"EmbedderTriggeredAndSameOriginRedirected"|"EmbedderTriggeredAndCrossOriginRedirected"|"MemoryLimitExceeded"|"FailToGetMemoryUsage"|"DataSaverEnabled";
+    export type PrerenderFinalStatus = "Activated"|"Destroyed"|"LowEndDevice"|"CrossOriginRedirect"|"CrossOriginNavigation"|"InvalidSchemeRedirect"|"InvalidSchemeNavigation"|"InProgressNavigation"|"NavigationRequestBlockedByCsp"|"MainFrameNavigation"|"MojoBinderPolicy"|"RendererProcessCrashed"|"RendererProcessKilled"|"Download"|"TriggerDestroyed"|"NavigationNotCommitted"|"NavigationBadHttpStatus"|"ClientCertRequested"|"NavigationRequestNetworkError"|"MaxNumOfRunningPrerendersExceeded"|"CancelAllHostsForTesting"|"DidFailLoad"|"Stop"|"SslCertificateError"|"LoginAuthRequested"|"UaChangeRequiresReload"|"BlockedByClient"|"AudioOutputDeviceRequested"|"MixedContent"|"TriggerBackgrounded"|"EmbedderTriggeredAndSameOriginRedirected"|"EmbedderTriggeredAndCrossOriginRedirected"|"EmbedderTriggeredAndDestroyed";
     
     export type domContentEventFiredPayload = {
       timestamp: Network.MonotonicTime;
@@ -11120,11 +11078,6 @@ when bfcache navigation fails.
       initiatingFrameId: FrameId;
       prerenderingUrl: string;
       finalStatus: PrerenderFinalStatus;
-      /**
-       * This is used to give users more information about the cancellation details,
-and this will be formatted for display.
-       */
-      reasonDetails?: string;
     }
     export type loadEventFiredPayload = {
       timestamp: Network.MonotonicTime;
@@ -12800,10 +12753,6 @@ Tokens from that issuer.
        * Origin to update.
        */
       origin: string;
-      /**
-       * Storage key to update.
-       */
-      storageKey: string;
       /**
        * Database to update.
        */
@@ -12821,10 +12770,6 @@ Tokens from that issuer.
        * Origin to update.
        */
       origin: string;
-      /**
-       * Storage key to update.
-       */
-      storageKey: string;
     }
     /**
      * One of the interest groups was accessed by the associated page.
@@ -12986,17 +12931,6 @@ disabled (called without a quotaSize).
     }
     export type trackIndexedDBForOriginReturnValue = {
     }
-    /**
-     * Registers storage key to be notified when an update occurs to its IndexedDB.
-     */
-    export type trackIndexedDBForStorageKeyParameters = {
-      /**
-       * Storage key.
-       */
-      storageKey: string;
-    }
-    export type trackIndexedDBForStorageKeyReturnValue = {
-    }
     /**
      * Unregisters origin from receiving notifications for cache storage.
      */
@@ -13019,17 +12953,6 @@ disabled (called without a quotaSize).
     }
     export type untrackIndexedDBForOriginReturnValue = {
     }
-    /**
-     * Unregisters storage key from receiving notifications for IndexedDB.
-     */
-    export type untrackIndexedDBForStorageKeyParameters = {
-      /**
-       * Storage key.
-       */
-      storageKey: string;
-    }
-    export type untrackIndexedDBForStorageKeyReturnValue = {
-    }
     /**
      * Returns the number of stored Trust Tokens per issuer for the
 current browsing context.
@@ -13319,28 +13242,6 @@ supported.
       openerFrameId?: Page.FrameId;
       browserContextId?: Browser.BrowserContextID;
     }
-    /**
-     * A filter used by target query/discovery/auto-attach operations.
-     */
-    export interface FilterEntry {
-      /**
-       * If set, causes exclusion of mathcing targets from the list.
-       */
-      exclude?: boolean;
-      /**
-       * If not present, matches any type.
-       */
-      type?: string;
-    }
-    /**
-     * The entries in TargetFilter are matched sequentially against targets and
-the first entry that matches determines if the target is included or not,
-depending on the value of `exclude` field in the entry.
-If filter is not specified, the one assumed is
-[{type: "browser", exclude: true}, {type: "tab", exclude: true}, {}]
-(i.e. include everything but `browser` and `tab`).
-     */
-    export type TargetFilter = FilterEntry[];
     export interface RemoteLocation {
       host: string;
       port: number;
@@ -13606,12 +13507,6 @@ beforeunload hooks.
      * Retrieves a list of available targets.
      */
     export type getTargetsParameters = {
-      /**
-       * Only targets matching filter will be reported. If filter is not specified
-and target discovery is currently enabled, a filter used for target discovery
-is used for consistency.
-       */
-      filter?: TargetFilter;
     }
     export type getTargetsReturnValue = {
       /**
@@ -13660,10 +13555,6 @@ We plan to make this the default, deprecate non-flattened mode,
 and eventually retire it. See crbug.com/991325.
        */
       flatten?: boolean;
-      /**
-       * Only targets matching filter will be attached.
-       */
-      filter?: TargetFilter;
     }
     export type setAutoAttachReturnValue = {
     }
@@ -13681,10 +13572,6 @@ This cancels the effect of any previous `setAutoAttach` and is also cancelled by
 to run paused targets.
        */
       waitForDebuggerOnStart: boolean;
-      /**
-       * Only targets matching filter will be attached.
-       */
-      filter?: TargetFilter;
     }
     export type autoAttachRelatedReturnValue = {
     }
@@ -13697,11 +13584,6 @@ to run paused targets.
        * Whether to discover available targets.
        */
       discover: boolean;
-      /**
-       * Only targets matching filter will be attached. If `discover` is false,
-`filter` must be omitted or empty.
-       */
-      filter?: TargetFilter;
     }
     export type setDiscoverTargetsReturnValue = {
     }
@@ -15487,8 +15369,8 @@ disassembly can be read successively.
        */
       totalNumberOfLines: number;
       /**
-       * The offsets of all function bodies, in the format [start1, end1,
-start2, end2, ...] where all ends are exclusive.
+       * The offsets of all function bodies plus one additional entry pointing
+one by past the end of the last function.
        */
       functionBodyOffsets: number[];
       /**
@@ -18102,10 +17984,8 @@ Error was thrown.
     "Storage.overrideQuotaForOrigin": Storage.overrideQuotaForOriginParameters;
     "Storage.trackCacheStorageForOrigin": Storage.trackCacheStorageForOriginParameters;
     "Storage.trackIndexedDBForOrigin": Storage.trackIndexedDBForOriginParameters;
-    "Storage.trackIndexedDBForStorageKey": Storage.trackIndexedDBForStorageKeyParameters;
     "Storage.untrackCacheStorageForOrigin": Storage.untrackCacheStorageForOriginParameters;
     "Storage.untrackIndexedDBForOrigin": Storage.untrackIndexedDBForOriginParameters;
-    "Storage.untrackIndexedDBForStorageKey": Storage.untrackIndexedDBForStorageKeyParameters;
     "Storage.getTrustTokens": Storage.getTrustTokensParameters;
     "Storage.clearTrustTokens": Storage.clearTrustTokensParameters;
     "Storage.getInterestGroupDetails": Storage.getInterestGroupDetailsParameters;
@@ -18640,10 +18520,8 @@ Error was thrown.
     "Storage.overrideQuotaForOrigin": Storage.overrideQuotaForOriginReturnValue;
     "Storage.trackCacheStorageForOrigin": Storage.trackCacheStorageForOriginReturnValue;
     "Storage.trackIndexedDBForOrigin": Storage.trackIndexedDBForOriginReturnValue;
-    "Storage.trackIndexedDBForStorageKey": Storage.trackIndexedDBForStorageKeyReturnValue;
     "Storage.untrackCacheStorageForOrigin": Storage.untrackCacheStorageForOriginReturnValue;
     "Storage.untrackIndexedDBForOrigin": Storage.untrackIndexedDBForOriginReturnValue;
-    "Storage.untrackIndexedDBForStorageKey": Storage.untrackIndexedDBForStorageKeyReturnValue;
     "Storage.getTrustTokens": Storage.getTrustTokensReturnValue;
     "Storage.clearTrustTokens": Storage.clearTrustTokensReturnValue;
     "Storage.getInterestGroupDetails": Storage.getInterestGroupDetailsReturnValue;
diff --git a/packages/playwright-core/src/server/deviceDescriptorsSource.json b/packages/playwright-core/src/server/deviceDescriptorsSource.json
index 95d09deafbb4be1dee7bc7d139734bf6c97b2efc..a64562097e698043db79794d0303406f39fa0c7b 100644
--- a/packages/playwright-core/src/server/deviceDescriptorsSource.json
+++ b/packages/playwright-core/src/server/deviceDescriptorsSource.json
@@ -110,7 +110,7 @@
     "defaultBrowserType": "webkit"
   },
   "Galaxy S5": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 360,
       "height": 640
@@ -121,7 +121,7 @@
     "defaultBrowserType": "chromium"
   },
   "Galaxy S5 landscape": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 640,
       "height": 360
@@ -132,7 +132,7 @@
     "defaultBrowserType": "chromium"
   },
   "Galaxy S8": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 7.0; SM-G950U Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 7.0; SM-G950U Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 360,
       "height": 740
@@ -143,7 +143,7 @@
     "defaultBrowserType": "chromium"
   },
   "Galaxy S8 landscape": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 7.0; SM-G950U Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 7.0; SM-G950U Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 740,
       "height": 360
@@ -154,7 +154,7 @@
     "defaultBrowserType": "chromium"
   },
   "Galaxy S9+": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; SM-G965U Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; SM-G965U Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 320,
       "height": 658
@@ -165,7 +165,7 @@
     "defaultBrowserType": "chromium"
   },
   "Galaxy S9+ landscape": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; SM-G965U Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; SM-G965U Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 658,
       "height": 320
@@ -176,7 +176,7 @@
     "defaultBrowserType": "chromium"
   },
   "Galaxy Tab S4": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 8.1.0; SM-T837A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 8.1.0; SM-T837A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Safari/537.36",
     "viewport": {
       "width": 712,
       "height": 1138
@@ -187,7 +187,7 @@
     "defaultBrowserType": "chromium"
   },
   "Galaxy Tab S4 landscape": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 8.1.0; SM-T837A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 8.1.0; SM-T837A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Safari/537.36",
     "viewport": {
       "width": 1138,
       "height": 712
@@ -813,6 +813,28 @@
     "hasTouch": true,
     "defaultBrowserType": "webkit"
   },
+  "JioPhone 2": {
+    "userAgent": "Mozilla/5.0 (Mobile; LYF/F300B/LYF-F300B-001-01-15-130718-i;Android; rv:103.0) Gecko/48.0 Firefox/103.0 KAIOS/2.5",
+    "viewport": {
+      "width": 240,
+      "height": 320
+    },
+    "deviceScaleFactor": 1,
+    "isMobile": true,
+    "hasTouch": true,
+    "defaultBrowserType": "firefox"
+  },
+  "JioPhone 2 landscape": {
+    "userAgent": "Mozilla/5.0 (Mobile; LYF/F300B/LYF-F300B-001-01-15-130718-i;Android; rv:103.0) Gecko/48.0 Firefox/103.0 KAIOS/2.5",
+    "viewport": {
+      "width": 320,
+      "height": 240
+    },
+    "deviceScaleFactor": 1,
+    "isMobile": true,
+    "hasTouch": true,
+    "defaultBrowserType": "firefox"
+  },
   "Kindle Fire HDX": {
     "userAgent": "Mozilla/5.0 (Linux; U; en-us; KFAPWI Build/JDQ39) AppleWebKit/535.19 (KHTML, like Gecko) Silk/3.13 Safari/535.19 Silk-Accelerated=true",
     "viewport": {
@@ -836,7 +858,7 @@
     "defaultBrowserType": "webkit"
   },
   "LG Optimus L70": {
-    "userAgent": "Mozilla/5.0 (Linux; U; Android 4.4.2; en-us; LGMS323 Build/KOT49I.MS32310c) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; U; Android 4.4.2; en-us; LGMS323 Build/KOT49I.MS32310c) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 384,
       "height": 640
@@ -847,7 +869,7 @@
     "defaultBrowserType": "chromium"
   },
   "LG Optimus L70 landscape": {
-    "userAgent": "Mozilla/5.0 (Linux; U; Android 4.4.2; en-us; LGMS323 Build/KOT49I.MS32310c) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; U; Android 4.4.2; en-us; LGMS323 Build/KOT49I.MS32310c) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 640,
       "height": 384
@@ -858,7 +880,7 @@
     "defaultBrowserType": "chromium"
   },
   "Microsoft Lumia 550": {
-    "userAgent": "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 550) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36 Edge/14.14263",
+    "userAgent": "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 550) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36 Edge/14.14263",
     "viewport": {
       "width": 640,
       "height": 360
@@ -869,7 +891,7 @@
     "defaultBrowserType": "chromium"
   },
   "Microsoft Lumia 550 landscape": {
-    "userAgent": "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 550) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36 Edge/14.14263",
+    "userAgent": "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 550) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36 Edge/14.14263",
     "viewport": {
       "width": 360,
       "height": 640
@@ -880,7 +902,7 @@
     "defaultBrowserType": "chromium"
   },
   "Microsoft Lumia 950": {
-    "userAgent": "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 950) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36 Edge/14.14263",
+    "userAgent": "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 950) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36 Edge/14.14263",
     "viewport": {
       "width": 360,
       "height": 640
@@ -891,7 +913,7 @@
     "defaultBrowserType": "chromium"
   },
   "Microsoft Lumia 950 landscape": {
-    "userAgent": "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 950) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36 Edge/14.14263",
+    "userAgent": "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 950) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36 Edge/14.14263",
     "viewport": {
       "width": 640,
       "height": 360
@@ -902,7 +924,7 @@
     "defaultBrowserType": "chromium"
   },
   "Nexus 10": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 10 Build/MOB31T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 10 Build/MOB31T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Safari/537.36",
     "viewport": {
       "width": 800,
       "height": 1280
@@ -913,7 +935,7 @@
     "defaultBrowserType": "chromium"
   },
   "Nexus 10 landscape": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 10 Build/MOB31T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 10 Build/MOB31T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Safari/537.36",
     "viewport": {
       "width": 1280,
       "height": 800
@@ -924,7 +946,7 @@
     "defaultBrowserType": "chromium"
   },
   "Nexus 4": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 384,
       "height": 640
@@ -935,7 +957,7 @@
     "defaultBrowserType": "chromium"
   },
   "Nexus 4 landscape": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 640,
       "height": 384
@@ -946,7 +968,7 @@
     "defaultBrowserType": "chromium"
   },
   "Nexus 5": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 360,
       "height": 640
@@ -957,7 +979,7 @@
     "defaultBrowserType": "chromium"
   },
   "Nexus 5 landscape": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 640,
       "height": 360
@@ -968,7 +990,7 @@
     "defaultBrowserType": "chromium"
   },
   "Nexus 5X": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 5X Build/OPR4.170623.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 5X Build/OPR4.170623.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 412,
       "height": 732
@@ -979,7 +1001,7 @@
     "defaultBrowserType": "chromium"
   },
   "Nexus 5X landscape": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 5X Build/OPR4.170623.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 5X Build/OPR4.170623.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 732,
       "height": 412
@@ -990,7 +1012,7 @@
     "defaultBrowserType": "chromium"
   },
   "Nexus 6": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 7.1.1; Nexus 6 Build/N6F26U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 7.1.1; Nexus 6 Build/N6F26U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 412,
       "height": 732
@@ -1001,7 +1023,7 @@
     "defaultBrowserType": "chromium"
   },
   "Nexus 6 landscape": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 7.1.1; Nexus 6 Build/N6F26U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 7.1.1; Nexus 6 Build/N6F26U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 732,
       "height": 412
@@ -1012,7 +1034,7 @@
     "defaultBrowserType": "chromium"
   },
   "Nexus 6P": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 6P Build/OPP3.170518.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 6P Build/OPP3.170518.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 412,
       "height": 732
@@ -1023,7 +1045,7 @@
     "defaultBrowserType": "chromium"
   },
   "Nexus 6P landscape": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 6P Build/OPP3.170518.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 6P Build/OPP3.170518.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 732,
       "height": 412
@@ -1034,7 +1056,7 @@
     "defaultBrowserType": "chromium"
   },
   "Nexus 7": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 7 Build/MOB30X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 7 Build/MOB30X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Safari/537.36",
     "viewport": {
       "width": 600,
       "height": 960
@@ -1045,7 +1067,7 @@
     "defaultBrowserType": "chromium"
   },
   "Nexus 7 landscape": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 7 Build/MOB30X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 7 Build/MOB30X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Safari/537.36",
     "viewport": {
       "width": 960,
       "height": 600
@@ -1100,7 +1122,7 @@
     "defaultBrowserType": "webkit"
   },
   "Pixel 2": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 411,
       "height": 731
@@ -1111,7 +1133,7 @@
     "defaultBrowserType": "chromium"
   },
   "Pixel 2 landscape": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 731,
       "height": 411
@@ -1122,7 +1144,7 @@
     "defaultBrowserType": "chromium"
   },
   "Pixel 2 XL": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL Build/OPD1.170816.004) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL Build/OPD1.170816.004) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 411,
       "height": 823
@@ -1133,7 +1155,7 @@
     "defaultBrowserType": "chromium"
   },
   "Pixel 2 XL landscape": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL Build/OPD1.170816.004) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL Build/OPD1.170816.004) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 823,
       "height": 411
@@ -1144,7 +1166,7 @@
     "defaultBrowserType": "chromium"
   },
   "Pixel 3": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 9; Pixel 3 Build/PQ1A.181105.017.A1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 9; Pixel 3 Build/PQ1A.181105.017.A1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 393,
       "height": 786
@@ -1155,7 +1177,7 @@
     "defaultBrowserType": "chromium"
   },
   "Pixel 3 landscape": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 9; Pixel 3 Build/PQ1A.181105.017.A1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 9; Pixel 3 Build/PQ1A.181105.017.A1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 786,
       "height": 393
@@ -1166,7 +1188,7 @@
     "defaultBrowserType": "chromium"
   },
   "Pixel 4": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 10; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 10; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 353,
       "height": 745
@@ -1177,7 +1199,7 @@
     "defaultBrowserType": "chromium"
   },
   "Pixel 4 landscape": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 10; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 10; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 745,
       "height": 353
@@ -1188,7 +1210,7 @@
     "defaultBrowserType": "chromium"
   },
   "Pixel 4a (5G)": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 11; Pixel 4a (5G)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 11; Pixel 4a (5G)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "screen": {
       "width": 412,
       "height": 892
@@ -1203,7 +1225,7 @@
     "defaultBrowserType": "chromium"
   },
   "Pixel 4a (5G) landscape": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 11; Pixel 4a (5G)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 11; Pixel 4a (5G)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "screen": {
       "height": 892,
       "width": 412
@@ -1218,7 +1240,7 @@
     "defaultBrowserType": "chromium"
   },
   "Pixel 5": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "screen": {
       "width": 393,
       "height": 851
@@ -1233,7 +1255,7 @@
     "defaultBrowserType": "chromium"
   },
   "Pixel 5 landscape": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "screen": {
       "width": 851,
       "height": 393
@@ -1248,7 +1270,7 @@
     "defaultBrowserType": "chromium"
   },
   "Moto G4": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 7.0; Moto G (4)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 7.0; Moto G (4)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 360,
       "height": 640
@@ -1259,7 +1281,7 @@
     "defaultBrowserType": "chromium"
   },
   "Moto G4 landscape": {
-    "userAgent": "Mozilla/5.0 (Linux; Android 7.0; Moto G (4)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Mobile Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Linux; Android 7.0; Moto G (4)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Mobile Safari/537.36",
     "viewport": {
       "width": 640,
       "height": 360
@@ -1270,7 +1292,7 @@
     "defaultBrowserType": "chromium"
   },
   "Desktop Chrome HiDPI": {
-    "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Safari/537.36",
     "screen": {
       "width": 1792,
       "height": 1120
@@ -1285,7 +1307,7 @@
     "defaultBrowserType": "chromium"
   },
   "Desktop Edge HiDPI": {
-    "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Safari/537.36 Edg/106.0.5249.30",
+    "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Safari/537.36 Edg/105.0.5195.19",
     "screen": {
       "width": 1792,
       "height": 1120
@@ -1300,7 +1322,7 @@
     "defaultBrowserType": "chromium"
   },
   "Desktop Firefox HiDPI": {
-    "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:104.0) Gecko/20100101 Firefox/104.0",
+    "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:103.0) Gecko/20100101 Firefox/103.0",
     "screen": {
       "width": 1792,
       "height": 1120
@@ -1330,7 +1352,7 @@
     "defaultBrowserType": "webkit"
   },
   "Desktop Chrome": {
-    "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Safari/537.36",
+    "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Safari/537.36",
     "screen": {
       "width": 1920,
       "height": 1080
@@ -1345,7 +1367,7 @@
     "defaultBrowserType": "chromium"
   },
   "Desktop Edge": {
-    "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.30 Safari/537.36 Edg/106.0.5249.30",
+    "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.19 Safari/537.36 Edg/105.0.5195.19",
     "screen": {
       "width": 1920,
       "height": 1080
@@ -1360,7 +1382,7 @@
     "defaultBrowserType": "chromium"
   },
   "Desktop Firefox": {
-    "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:104.0) Gecko/20100101 Firefox/104.0",
+    "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:103.0) Gecko/20100101 Firefox/103.0",
     "screen": {
       "width": 1920,
       "height": 1080
diff --git a/packages/playwright-core/src/server/dispatchers/androidDispatcher.ts b/packages/playwright-core/src/server/dispatchers/androidDispatcher.ts
index 5adb4bbf8edf75d855fcc738426181477d02f5c1..283369937ac1126aa80c8c7f7771e51f05d2265b 100644
--- a/packages/playwright-core/src/server/dispatchers/androidDispatcher.ts
+++ b/packages/playwright-core/src/server/dispatchers/androidDispatcher.ts
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-import type { RootDispatcher } from './dispatcher';
+import type { DispatcherScope } from './dispatcher';
 import { Dispatcher, existingDispatcher } from './dispatcher';
 import type { Android, SocketBackend } from '../android/android';
 import { AndroidDevice } from '../android/android';
@@ -22,16 +22,16 @@ import type * as channels from '../../protocol/channels';
 import { BrowserContextDispatcher } from './browserContextDispatcher';
 import type { CallMetadata } from '../instrumentation';
 
-export class AndroidDispatcher extends Dispatcher<Android, channels.AndroidChannel, RootDispatcher> implements channels.AndroidChannel {
+export class AndroidDispatcher extends Dispatcher<Android, channels.AndroidChannel> implements channels.AndroidChannel {
   _type_Android = true;
-  constructor(scope: RootDispatcher, android: Android) {
-    super(scope, android, 'Android', {});
+  constructor(scope: DispatcherScope, android: Android) {
+    super(scope, android, 'Android', {}, true);
   }
 
   async devices(params: channels.AndroidDevicesParams): Promise<channels.AndroidDevicesResult> {
     const devices = await this._object.devices(params);
     return {
-      devices: devices.map(d => AndroidDeviceDispatcher.from(this, d))
+      devices: devices.map(d => AndroidDeviceDispatcher.from(this._scope, d))
     };
   }
 
@@ -40,20 +40,20 @@ export class AndroidDispatcher extends Dispatcher<Android, channels.AndroidChann
   }
 }
 
-export class AndroidDeviceDispatcher extends Dispatcher<AndroidDevice, channels.AndroidDeviceChannel, AndroidDispatcher> implements channels.AndroidDeviceChannel {
+export class AndroidDeviceDispatcher extends Dispatcher<AndroidDevice, channels.AndroidDeviceChannel> implements channels.AndroidDeviceChannel {
   _type_EventTarget = true;
   _type_AndroidDevice = true;
 
-  static from(scope: AndroidDispatcher, device: AndroidDevice): AndroidDeviceDispatcher {
+  static from(scope: DispatcherScope, device: AndroidDevice): AndroidDeviceDispatcher {
     const result = existingDispatcher<AndroidDeviceDispatcher>(device);
     return result || new AndroidDeviceDispatcher(scope, device);
   }
 
-  constructor(scope: AndroidDispatcher, device: AndroidDevice) {
+  constructor(scope: DispatcherScope, device: AndroidDevice) {
     super(scope, device, 'AndroidDevice', {
       model: device.model,
       serial: device.serial,
-    });
+    }, true);
     for (const webView of device.webViews())
       this._dispatchEvent('webViewAdded', { webView });
     this.addObjectListener(AndroidDevice.Events.WebViewAdded, webView => this._dispatchEvent('webViewAdded', { webView }));
@@ -145,7 +145,7 @@ export class AndroidDeviceDispatcher extends Dispatcher<AndroidDevice, channels.
 
   async open(params: channels.AndroidDeviceOpenParams, metadata: CallMetadata): Promise<channels.AndroidDeviceOpenResult> {
     const socket = await this._object.open(params.command);
-    return { socket: new AndroidSocketDispatcher(this, socket) };
+    return { socket: new AndroidSocketDispatcher(this._scope, socket) };
   }
 
   async installApk(params: channels.AndroidDeviceInstallApkParams) {
@@ -158,7 +158,7 @@ export class AndroidDeviceDispatcher extends Dispatcher<AndroidDevice, channels.
 
   async launchBrowser(params: channels.AndroidDeviceLaunchBrowserParams): Promise<channels.AndroidDeviceLaunchBrowserResult> {
     const context = await this._object.launchBrowser(params.pkg, params);
-    return { context: new BrowserContextDispatcher(this, context) };
+    return { context: new BrowserContextDispatcher(this._scope, context) };
   }
 
   async close(params: channels.AndroidDeviceCloseParams) {
@@ -170,15 +170,15 @@ export class AndroidDeviceDispatcher extends Dispatcher<AndroidDevice, channels.
   }
 
   async connectToWebView(params: channels.AndroidDeviceConnectToWebViewParams): Promise<channels.AndroidDeviceConnectToWebViewResult> {
-    return { context: new BrowserContextDispatcher(this, await this._object.connectToWebView(params.socketName)) };
+    return { context: new BrowserContextDispatcher(this._scope, await this._object.connectToWebView(params.socketName)) };
   }
 }
 
-export class AndroidSocketDispatcher extends Dispatcher<SocketBackend, channels.AndroidSocketChannel, AndroidDeviceDispatcher> implements channels.AndroidSocketChannel {
+export class AndroidSocketDispatcher extends Dispatcher<SocketBackend, channels.AndroidSocketChannel> implements channels.AndroidSocketChannel {
   _type_AndroidSocket = true;
 
-  constructor(scope: AndroidDeviceDispatcher, socket: SocketBackend) {
-    super(scope, socket, 'AndroidSocket', {});
+  constructor(scope: DispatcherScope, socket: SocketBackend) {
+    super(scope, socket, 'AndroidSocket', {}, true);
     this.addObjectListener('data', (data: Buffer) => this._dispatchEvent('data', { data }));
     this.addObjectListener('close', () => {
       this._dispatchEvent('close');
diff --git a/packages/playwright-core/src/server/dispatchers/artifactDispatcher.ts b/packages/playwright-core/src/server/dispatchers/artifactDispatcher.ts
index a4bcff1164acab80e593025fa76757d99c3da80a..ef460e2b38efcf6d5cc3ae00ef63e359bd23fa7e 100644
--- a/packages/playwright-core/src/server/dispatchers/artifactDispatcher.ts
+++ b/packages/playwright-core/src/server/dispatchers/artifactDispatcher.ts
@@ -15,14 +15,14 @@
  */
 
 import type * as channels from '../../protocol/channels';
-import { Dispatcher } from './dispatcher';
 import type { DispatcherScope } from './dispatcher';
+import { Dispatcher } from './dispatcher';
 import { StreamDispatcher } from './streamDispatcher';
 import fs from 'fs';
 import { mkdirIfNeeded } from '../../utils/fileUtils';
 import type { Artifact } from '../artifact';
 
-export class ArtifactDispatcher extends Dispatcher<Artifact, channels.ArtifactChannel, DispatcherScope> implements channels.ArtifactChannel {
+export class ArtifactDispatcher extends Dispatcher<Artifact, channels.ArtifactChannel> implements channels.ArtifactChannel {
   _type_Artifact = true;
   constructor(scope: DispatcherScope, artifact: Artifact) {
     super(scope, artifact, 'Artifact', {
@@ -62,7 +62,7 @@ export class ArtifactDispatcher extends Dispatcher<Artifact, channels.ArtifactCh
         }
         try {
           const readable = fs.createReadStream(localPath);
-          const stream = new StreamDispatcher(this, readable);
+          const stream = new StreamDispatcher(this._scope, readable);
           // Resolve with a stream, so that client starts saving the data.
           resolve({ stream });
           // Block the Artifact until the stream is consumed.
@@ -83,7 +83,7 @@ export class ArtifactDispatcher extends Dispatcher<Artifact, channels.ArtifactCh
     if (!fileName)
       return {};
     const readable = fs.createReadStream(fileName);
-    return { stream: new StreamDispatcher(this, readable) };
+    return { stream: new StreamDispatcher(this._scope, readable) };
   }
 
   async failure(): Promise<channels.ArtifactFailureResult> {
diff --git a/packages/playwright-core/src/server/dispatchers/browserContextDispatcher.ts b/packages/playwright-core/src/server/dispatchers/browserContextDispatcher.ts
index b8d6d269251ed4fc6b23c9f3fb810e28bd96e782..d44546a046c5ec73073c284721da9cc9a10d6fec 100644
--- a/packages/playwright-core/src/server/dispatchers/browserContextDispatcher.ts
+++ b/packages/playwright-core/src/server/dispatchers/browserContextDispatcher.ts
@@ -15,8 +15,8 @@
  */
 
 import { BrowserContext } from '../browserContext';
-import { Dispatcher, lookupDispatcher } from './dispatcher';
 import type { DispatcherScope } from './dispatcher';
+import { Dispatcher, lookupDispatcher } from './dispatcher';
 import { PageDispatcher, BindingCallDispatcher, WorkerDispatcher } from './pageDispatcher';
 import type { FrameDispatcher } from './frameDispatcher';
 import type * as channels from '../../protocol/channels';
@@ -34,21 +34,21 @@ import * as path from 'path';
 import { createGuid } from '../../utils';
 import { WritableStreamDispatcher } from './writableStreamDispatcher';
 
-export class BrowserContextDispatcher extends Dispatcher<BrowserContext, channels.BrowserContextChannel, DispatcherScope> implements channels.BrowserContextChannel {
+export class BrowserContextDispatcher extends Dispatcher<BrowserContext, channels.BrowserContextChannel> implements channels.BrowserContextChannel {
   _type_EventTarget = true;
   _type_BrowserContext = true;
   private _context: BrowserContext;
 
   constructor(parentScope: DispatcherScope, context: BrowserContext) {
     // We will reparent these to the context below.
-    const requestContext = APIRequestContextDispatcher.from(parentScope as BrowserContextDispatcher, context.fetchRequest);
-    const tracing = TracingDispatcher.from(parentScope as BrowserContextDispatcher, context.tracing);
+    const requestContext = APIRequestContextDispatcher.from(parentScope, context.fetchRequest);
+    const tracing = TracingDispatcher.from(parentScope, context.tracing);
 
     super(parentScope, context, 'BrowserContext', {
       isChromium: context._browser.options.isChromium,
       requestContext,
       tracing,
-    });
+    }, true);
 
     this.adopt(requestContext);
     this.adopt(tracing);
@@ -70,10 +70,8 @@ export class BrowserContextDispatcher extends Dispatcher<BrowserContext, channel
     }
 
     for (const page of context.pages())
-      this._dispatchEvent('page', { page: PageDispatcher.from(this, page) });
-    this.addObjectListener(BrowserContext.Events.Page, page => {
-      this._dispatchEvent('page', { page: PageDispatcher.from(this, page) });
-    });
+      this._dispatchEvent('page', { page: new PageDispatcher(this._scope, page) });
+    this.addObjectListener(BrowserContext.Events.Page, page => this._dispatchEvent('page', { page: new PageDispatcher(this._scope, page) }));
     this.addObjectListener(BrowserContext.Events.Close, () => {
       this._dispatchEvent('close');
       this._dispose();
@@ -81,33 +79,33 @@ export class BrowserContextDispatcher extends Dispatcher<BrowserContext, channel
 
     if (context._browser.options.name === 'chromium') {
       for (const page of (context as CRBrowserContext).backgroundPages())
-        this._dispatchEvent('backgroundPage', { page: PageDispatcher.from(this, page) });
-      this.addObjectListener(CRBrowserContext.CREvents.BackgroundPage, page => this._dispatchEvent('backgroundPage', { page: PageDispatcher.from(this, page) }));
+        this._dispatchEvent('backgroundPage', { page: new PageDispatcher(this._scope, page) });
+      this.addObjectListener(CRBrowserContext.CREvents.BackgroundPage, page => this._dispatchEvent('backgroundPage', { page: new PageDispatcher(this._scope, page) }));
       for (const serviceWorker of (context as CRBrowserContext).serviceWorkers())
-        this._dispatchEvent('serviceWorker', { worker: new WorkerDispatcher(this, serviceWorker) });
-      this.addObjectListener(CRBrowserContext.CREvents.ServiceWorker, serviceWorker => this._dispatchEvent('serviceWorker', { worker: new WorkerDispatcher(this, serviceWorker) }));
+        this._dispatchEvent('serviceWorker', { worker: new WorkerDispatcher(this._scope, serviceWorker) });
+      this.addObjectListener(CRBrowserContext.CREvents.ServiceWorker, serviceWorker => this._dispatchEvent('serviceWorker', { worker: new WorkerDispatcher(this._scope, serviceWorker) }));
     }
     this.addObjectListener(BrowserContext.Events.Request, (request: Request) =>  {
       return this._dispatchEvent('request', {
-        request: RequestDispatcher.from(this, request),
-        page: PageDispatcher.fromNullable(this, request.frame()?._page.initializedOrUndefined())
+        request: RequestDispatcher.from(this._scope, request),
+        page: PageDispatcher.fromNullable(this._scope, request.frame()?._page.initializedOrUndefined())
       });
     });
     this.addObjectListener(BrowserContext.Events.Response, (response: Response) => this._dispatchEvent('response', {
-      response: ResponseDispatcher.from(this, response),
-      page: PageDispatcher.fromNullable(this, response.frame()?._page.initializedOrUndefined())
+      response: ResponseDispatcher.from(this._scope, response),
+      page: PageDispatcher.fromNullable(this._scope, response.frame()?._page.initializedOrUndefined())
     }));
     this.addObjectListener(BrowserContext.Events.RequestFailed, (request: Request) => this._dispatchEvent('requestFailed', {
-      request: RequestDispatcher.from(this, request),
+      request: RequestDispatcher.from(this._scope, request),
       failureText: request._failureText || undefined,
       responseEndTiming: request._responseEndTiming,
-      page: PageDispatcher.fromNullable(this, request.frame()?._page.initializedOrUndefined())
+      page: PageDispatcher.fromNullable(this._scope, request.frame()?._page.initializedOrUndefined())
     }));
     this.addObjectListener(BrowserContext.Events.RequestFinished, ({ request, response }: { request: Request, response: Response | null }) => this._dispatchEvent('requestFinished', {
-      request: RequestDispatcher.from(this, request),
-      response: ResponseDispatcher.fromNullable(this, response),
+      request: RequestDispatcher.from(this._scope, request),
+      response: ResponseDispatcher.fromNullable(this._scope, response),
       responseEndTiming: request._responseEndTiming,
-      page: PageDispatcher.fromNullable(this, request.frame()?._page.initializedOrUndefined()),
+      page: PageDispatcher.fromNullable(this._scope, request.frame()?._page.initializedOrUndefined()),
     }));
   }
 
@@ -117,7 +115,7 @@ export class BrowserContextDispatcher extends Dispatcher<BrowserContext, channel
     await fs.promises.mkdir(tmpDir);
     this._context._tempDirs.push(tmpDir);
     const file = fs.createWriteStream(path.join(tmpDir, params.name));
-    return { writableStream: new WritableStreamDispatcher(this, file) };
+    return { writableStream: new WritableStreamDispatcher(this._scope, file) };
   }
 
   async setDefaultNavigationTimeoutNoReply(params: channels.BrowserContextSetDefaultNavigationTimeoutNoReplyParams) {
@@ -130,8 +128,7 @@ export class BrowserContextDispatcher extends Dispatcher<BrowserContext, channel
 
   async exposeBinding(params: channels.BrowserContextExposeBindingParams): Promise<void> {
     await this._context.exposeBinding(params.name, !!params.needsHandle, (source, ...args) => {
-      const pageDispatcher = PageDispatcher.from(this, source.page);
-      const binding = new BindingCallDispatcher(pageDispatcher, params.name, !!params.needsHandle, source, args);
+      const binding = new BindingCallDispatcher(this._scope, params.name, !!params.needsHandle, source, args);
       this._dispatchEvent('bindingCall', { binding });
       return binding.promise();
     });
@@ -187,7 +184,7 @@ export class BrowserContextDispatcher extends Dispatcher<BrowserContext, channel
       return;
     }
     await this._context.setRequestInterceptor((route, request) => {
-      this._dispatchEvent('route', { route: RouteDispatcher.from(RequestDispatcher.from(this, request), route) });
+      this._dispatchEvent('route', { route: RouteDispatcher.from(this._scope, route), request: RequestDispatcher.from(this._scope, request) });
     });
   }
 
@@ -213,7 +210,7 @@ export class BrowserContextDispatcher extends Dispatcher<BrowserContext, channel
     if (!params.page && !params.frame || params.page && params.frame)
       throw new Error(`CDP session must be initiated with either Page or Frame, not none or both`);
     const crBrowserContext = this._object as CRBrowserContext;
-    return { session: new CDPSessionDispatcher(this, await crBrowserContext.newCDPSession((params.page ? params.page as PageDispatcher : params.frame as FrameDispatcher)._object)) };
+    return { session: new CDPSessionDispatcher(this._scope, await crBrowserContext.newCDPSession((params.page ? params.page as PageDispatcher : params.frame as FrameDispatcher)._object)) };
   }
 
   async harStart(params: channels.BrowserContextHarStartParams): Promise<channels.BrowserContextHarStartResult> {
@@ -225,13 +222,11 @@ export class BrowserContextDispatcher extends Dispatcher<BrowserContext, channel
     const artifact = await this._context._harExport(params.harId);
     if (!artifact)
       throw new Error('No HAR artifact. Ensure record.harPath is set.');
-    return { artifact: new ArtifactDispatcher(this, artifact) };
+    return { artifact: new ArtifactDispatcher(this._scope, artifact) };
   }
 
   override _dispose() {
     super._dispose();
-    // Avoid protocol calls for the closed context.
-    if (!this._context.isClosingOrClosed())
-      this._context.setRequestInterceptor(undefined).catch(() => {});
+    this._context.setRequestInterceptor(undefined).catch(() => {});
   }
 }
diff --git a/packages/playwright-core/src/server/dispatchers/browserDispatcher.ts b/packages/playwright-core/src/server/dispatchers/browserDispatcher.ts
index b1e5c84fff2ee8842f21587ede6c952a07cbb6f9..fdf709496931f39046de0d72855fe25cd1fa5be6 100644
--- a/packages/playwright-core/src/server/dispatchers/browserDispatcher.ts
+++ b/packages/playwright-core/src/server/dispatchers/browserDispatcher.ts
@@ -19,7 +19,7 @@ import type * as channels from '../../protocol/channels';
 import { BrowserContextDispatcher } from './browserContextDispatcher';
 import { CDPSessionDispatcher } from './cdpSessionDispatcher';
 import { existingDispatcher } from './dispatcher';
-import type { RootDispatcher } from './dispatcher';
+import type { DispatcherScope } from './dispatcher';
 import { Dispatcher } from './dispatcher';
 import type { CRBrowser } from '../chromium/crBrowser';
 import type { PageDispatcher } from './pageDispatcher';
@@ -27,13 +27,12 @@ import type { CallMetadata } from '../instrumentation';
 import { serverSideCallMetadata } from '../instrumentation';
 import { BrowserContext } from '../browserContext';
 import { Selectors } from '../selectors';
-import type { BrowserTypeDispatcher } from './browserTypeDispatcher';
 
-export class BrowserDispatcher extends Dispatcher<Browser, channels.BrowserChannel, BrowserTypeDispatcher> implements channels.BrowserChannel {
+export class BrowserDispatcher extends Dispatcher<Browser, channels.BrowserChannel> implements channels.BrowserChannel {
   _type_Browser = true;
 
-  constructor(scope: BrowserTypeDispatcher, browser: Browser) {
-    super(scope, browser, 'Browser', { version: browser.version(), name: browser.options.name });
+  constructor(scope: DispatcherScope, browser: Browser) {
+    super(scope, browser, 'Browser', { version: browser.version(), name: browser.options.name }, true);
     this.addObjectListener(Browser.Events.Disconnected, () => this._didClose());
   }
 
@@ -44,11 +43,11 @@ export class BrowserDispatcher extends Dispatcher<Browser, channels.BrowserChann
 
   async newContext(params: channels.BrowserNewContextParams, metadata: CallMetadata): Promise<channels.BrowserNewContextResult> {
     const context = await this._object.newContext(metadata, params);
-    return { context: new BrowserContextDispatcher(this, context) };
+    return { context: new BrowserContextDispatcher(this._scope, context) };
   }
 
   async newContextForReuse(params: channels.BrowserNewContextForReuseParams, metadata: CallMetadata): Promise<channels.BrowserNewContextForReuseResult> {
-    return newContextForReuse(this._object, this, params, null, metadata);
+    return newContextForReuse(this._object, this._scope, params, null, metadata);
   }
 
   async close(): Promise<void> {
@@ -63,7 +62,7 @@ export class BrowserDispatcher extends Dispatcher<Browser, channels.BrowserChann
     if (!this._object.options.isChromium)
       throw new Error(`CDP session is only available in Chromium`);
     const crBrowser = this._object as CRBrowser;
-    return { session: new CDPSessionDispatcher(this, await crBrowser.newBrowserCDPSession()) };
+    return { session: new CDPSessionDispatcher(this._scope, await crBrowser.newBrowserCDPSession()) };
   }
 
   async startTracing(params: channels.BrowserStartTracingParams): Promise<void> {
@@ -82,13 +81,13 @@ export class BrowserDispatcher extends Dispatcher<Browser, channels.BrowserChann
 }
 
 // This class implements multiplexing browser dispatchers over a single Browser instance.
-export class ConnectedBrowserDispatcher extends Dispatcher<Browser, channels.BrowserChannel, RootDispatcher> implements channels.BrowserChannel {
+export class ConnectedBrowserDispatcher extends Dispatcher<Browser, channels.BrowserChannel> implements channels.BrowserChannel {
   _type_Browser = true;
   private _contexts = new Set<BrowserContext>();
   readonly selectors: Selectors;
 
-  constructor(scope: RootDispatcher, browser: Browser) {
-    super(scope, browser, 'Browser', { version: browser.version(), name: browser.options.name });
+  constructor(scope: DispatcherScope, browser: Browser) {
+    super(scope, browser, 'Browser', { version: browser.version(), name: browser.options.name }, true);
     // When we have a remotely-connected browser, each client gets a fresh Selector instance,
     // so that two clients do not interfere between each other.
     this.selectors = new Selectors();
@@ -101,11 +100,11 @@ export class ConnectedBrowserDispatcher extends Dispatcher<Browser, channels.Bro
     this._contexts.add(context);
     context.setSelectors(this.selectors);
     context.on(BrowserContext.Events.Close, () => this._contexts.delete(context));
-    return { context: new BrowserContextDispatcher(this, context) };
+    return { context: new BrowserContextDispatcher(this._scope, context) };
   }
 
   async newContextForReuse(params: channels.BrowserNewContextForReuseParams, metadata: CallMetadata): Promise<channels.BrowserNewContextForReuseResult> {
-    return newContextForReuse(this._object, this as any as BrowserDispatcher, params, this.selectors, metadata);
+    return newContextForReuse(this._object, this._scope, params, this.selectors, metadata);
   }
 
   async close(): Promise<void> {
@@ -120,7 +119,7 @@ export class ConnectedBrowserDispatcher extends Dispatcher<Browser, channels.Bro
     if (!this._object.options.isChromium)
       throw new Error(`CDP session is only available in Chromium`);
     const crBrowser = this._object as CRBrowser;
-    return { session: new CDPSessionDispatcher(this as any as BrowserDispatcher, await crBrowser.newBrowserCDPSession()) };
+    return { session: new CDPSessionDispatcher(this._scope, await crBrowser.newBrowserCDPSession()) };
   }
 
   async startTracing(params: channels.BrowserStartTracingParams): Promise<void> {
@@ -142,7 +141,7 @@ export class ConnectedBrowserDispatcher extends Dispatcher<Browser, channels.Bro
   }
 }
 
-async function newContextForReuse(browser: Browser, scope: BrowserDispatcher, params: channels.BrowserNewContextForReuseParams, selectors: Selectors | null, metadata: CallMetadata): Promise<channels.BrowserNewContextForReuseResult> {
+async function newContextForReuse(browser: Browser, scope: DispatcherScope, params: channels.BrowserNewContextForReuseParams, selectors: Selectors | null, metadata: CallMetadata): Promise<channels.BrowserNewContextForReuseResult> {
   const { context, needsReset } = await browser.newContextForReuse(params, metadata);
   if (needsReset) {
     const oldContextDispatcher = existingDispatcher<BrowserContextDispatcher>(context);
diff --git a/packages/playwright-core/src/server/dispatchers/browserTypeDispatcher.ts b/packages/playwright-core/src/server/dispatchers/browserTypeDispatcher.ts
index f2cf3e51b98a233ff69962623668773dc6c583d0..7554311642016779bfbd8016da05490751289a8e 100644
--- a/packages/playwright-core/src/server/dispatchers/browserTypeDispatcher.ts
+++ b/packages/playwright-core/src/server/dispatchers/browserTypeDispatcher.ts
@@ -17,7 +17,7 @@
 import type { BrowserType } from '../browserType';
 import { BrowserDispatcher } from './browserDispatcher';
 import type * as channels from '../../protocol/channels';
-import type { RootDispatcher } from './dispatcher';
+import type { DispatcherScope } from './dispatcher';
 import { Dispatcher } from './dispatcher';
 import { BrowserContextDispatcher } from './browserContextDispatcher';
 import type { CallMetadata } from '../instrumentation';
@@ -29,31 +29,31 @@ import { ProgressController } from '../progress';
 import { WebSocketTransport } from '../transport';
 import { findValidator, ValidationError, type ValidatorContext } from '../../protocol/validator';
 
-export class BrowserTypeDispatcher extends Dispatcher<BrowserType, channels.BrowserTypeChannel, RootDispatcher> implements channels.BrowserTypeChannel {
+export class BrowserTypeDispatcher extends Dispatcher<BrowserType, channels.BrowserTypeChannel> implements channels.BrowserTypeChannel {
   _type_BrowserType = true;
-  constructor(scope: RootDispatcher, browserType: BrowserType) {
+  constructor(scope: DispatcherScope, browserType: BrowserType) {
     super(scope, browserType, 'BrowserType', {
       executablePath: browserType.executablePath(),
       name: browserType.name()
-    });
+    }, true);
   }
 
   async launch(params: channels.BrowserTypeLaunchParams, metadata: CallMetadata): Promise<channels.BrowserTypeLaunchResult> {
     const browser = await this._object.launch(metadata, params);
-    return { browser: new BrowserDispatcher(this, browser) };
+    return { browser: new BrowserDispatcher(this._scope, browser) };
   }
 
   async launchPersistentContext(params: channels.BrowserTypeLaunchPersistentContextParams, metadata: CallMetadata): Promise<channels.BrowserTypeLaunchPersistentContextResult> {
     const browserContext = await this._object.launchPersistentContext(metadata, params.userDataDir, params);
-    return { context: new BrowserContextDispatcher(this, browserContext) };
+    return { context: new BrowserContextDispatcher(this._scope, browserContext) };
   }
 
   async connectOverCDP(params: channels.BrowserTypeConnectOverCDPParams, metadata: CallMetadata): Promise<channels.BrowserTypeConnectOverCDPResult> {
     const browser = await this._object.connectOverCDP(metadata, params.endpointURL, params, params.timeout);
-    const browserDispatcher = new BrowserDispatcher(this, browser);
+    const browserDispatcher = new BrowserDispatcher(this._scope, browser);
     return {
       browser: browserDispatcher,
-      defaultContext: browser._defaultContext ? new BrowserContextDispatcher(browserDispatcher, browser._defaultContext) : undefined,
+      defaultContext: browser._defaultContext ? new BrowserContextDispatcher(browserDispatcher._scope, browser._defaultContext) : undefined,
     };
   }
 
@@ -64,7 +64,7 @@ export class BrowserTypeDispatcher extends Dispatcher<BrowserType, channels.Brow
       const paramsHeaders = Object.assign({ 'User-Agent': getUserAgent() }, params.headers || {});
       const transport = await WebSocketTransport.connect(progress, params.wsEndpoint, paramsHeaders, true);
       let socksInterceptor: SocksInterceptor | undefined;
-      const pipe = new JsonPipeDispatcher(this);
+      const pipe = new JsonPipeDispatcher(this._scope);
       transport.onmessage = json => {
         if (json.method === '__create__' && json.params.type === 'SocksSupport')
           socksInterceptor = new SocksInterceptor(transport, params.socksProxyRedirectPortForTest, json.params.guid);
diff --git a/packages/playwright-core/src/server/dispatchers/cdpSessionDispatcher.ts b/packages/playwright-core/src/server/dispatchers/cdpSessionDispatcher.ts
index 4dd724f9923f527cfeed48b0966d39390d5dbba4..9b61367933779cc107a10eba75bd3357cd3fa00b 100644
--- a/packages/playwright-core/src/server/dispatchers/cdpSessionDispatcher.ts
+++ b/packages/playwright-core/src/server/dispatchers/cdpSessionDispatcher.ts
@@ -17,15 +17,14 @@
 import type { CRSession } from '../chromium/crConnection';
 import { CRSessionEvents } from '../chromium/crConnection';
 import type * as channels from '../../protocol/channels';
+import type { DispatcherScope } from './dispatcher';
 import { Dispatcher } from './dispatcher';
-import type { BrowserDispatcher } from './browserDispatcher';
-import type { BrowserContextDispatcher } from './browserContextDispatcher';
 
-export class CDPSessionDispatcher extends Dispatcher<CRSession, channels.CDPSessionChannel, BrowserDispatcher | BrowserContextDispatcher> implements channels.CDPSessionChannel {
+export class CDPSessionDispatcher extends Dispatcher<CRSession, channels.CDPSessionChannel> implements channels.CDPSessionChannel {
   _type_CDPSession = true;
 
-  constructor(scope: BrowserDispatcher | BrowserContextDispatcher, crSession: CRSession) {
-    super(scope, crSession, 'CDPSession', {});
+  constructor(scope: DispatcherScope, crSession: CRSession) {
+    super(scope, crSession, 'CDPSession', {}, true);
     crSession._eventListener = (method, params) => {
       this._dispatchEvent('event', { method, params });
     };
diff --git a/packages/playwright-core/src/server/dispatchers/consoleMessageDispatcher.ts b/packages/playwright-core/src/server/dispatchers/consoleMessageDispatcher.ts
index 37e8b4a63fd233082dd6c171b5cf99808af45603..48e46fcbd8ecd3d380381f4de64aa8193bb4d058 100644
--- a/packages/playwright-core/src/server/dispatchers/consoleMessageDispatcher.ts
+++ b/packages/playwright-core/src/server/dispatchers/consoleMessageDispatcher.ts
@@ -16,14 +16,13 @@
 
 import type { ConsoleMessage } from '../console';
 import type * as channels from '../../protocol/channels';
-import type { PageDispatcher } from './pageDispatcher';
+import type { DispatcherScope } from './dispatcher';
 import { Dispatcher } from './dispatcher';
 import { ElementHandleDispatcher } from './elementHandlerDispatcher';
 
-export class ConsoleMessageDispatcher extends Dispatcher<ConsoleMessage, channels.ConsoleMessageChannel, PageDispatcher> implements channels.ConsoleMessageChannel {
+export class ConsoleMessageDispatcher extends Dispatcher<ConsoleMessage, channels.ConsoleMessageChannel> implements channels.ConsoleMessageChannel {
   _type_ConsoleMessage = true;
-
-  constructor(scope: PageDispatcher, message: ConsoleMessage) {
+  constructor(scope: DispatcherScope, message: ConsoleMessage) {
     super(scope, message, 'ConsoleMessage', {
       type: message.type(),
       text: message.text(),
diff --git a/packages/playwright-core/src/server/dispatchers/dialogDispatcher.ts b/packages/playwright-core/src/server/dispatchers/dialogDispatcher.ts
index 694737f1c1b310b799dbc0bfce51f071eb174414..1e5c791c8eb849da79c7f301765d0722c1ba8671 100644
--- a/packages/playwright-core/src/server/dispatchers/dialogDispatcher.ts
+++ b/packages/playwright-core/src/server/dispatchers/dialogDispatcher.ts
@@ -16,13 +16,12 @@
 
 import type { Dialog } from '../dialog';
 import type * as channels from '../../protocol/channels';
+import type { DispatcherScope } from './dispatcher';
 import { Dispatcher } from './dispatcher';
-import type { PageDispatcher } from './pageDispatcher';
 
-export class DialogDispatcher extends Dispatcher<Dialog, channels.DialogChannel, PageDispatcher> implements channels.DialogChannel {
+export class DialogDispatcher extends Dispatcher<Dialog, channels.DialogChannel> implements channels.DialogChannel {
   _type_Dialog = true;
-
-  constructor(scope: PageDispatcher, dialog: Dialog) {
+  constructor(scope: DispatcherScope, dialog: Dialog) {
     super(scope, dialog, 'Dialog', {
       type: dialog.type(),
       message: dialog.message(),
diff --git a/packages/playwright-core/src/server/dispatchers/dispatcher.ts b/packages/playwright-core/src/server/dispatchers/dispatcher.ts
index dda90074235fac9da9d9e4acbc8b4a8236c71f5d..fc1e37b53410f407cb460b617b0363058bb021e7 100644
--- a/packages/playwright-core/src/server/dispatchers/dispatcher.ts
+++ b/packages/playwright-core/src/server/dispatchers/dispatcher.ts
@@ -44,24 +44,28 @@ export function lookupNullableDispatcher<DispatcherType>(object: any | null): Di
   return object ? lookupDispatcher(object) : undefined;
 }
 
-export class Dispatcher<Type extends { guid: string }, ChannelType, ParentScopeType extends DispatcherScope> extends EventEmitter implements channels.Channel {
+export class Dispatcher<Type extends { guid: string }, ChannelType> extends EventEmitter implements channels.Channel {
   private _connection: DispatcherConnection;
+  private _isScope: boolean;
   // Parent is always "isScope".
-  private _parent: ParentScopeType | undefined;
+  private _parent: Dispatcher<any, any> | undefined;
   // Only "isScope" channel owners have registered dispatchers inside.
-  private _dispatchers = new Map<string, DispatcherScope>();
+  private _dispatchers = new Map<string, Dispatcher<any, any>>();
   protected _disposed = false;
   protected _eventListeners: RegisteredListener[] = [];
 
   readonly _guid: string;
   readonly _type: string;
+  readonly _scope: Dispatcher<any, any>;
   _object: Type;
 
-  constructor(parent: ParentScopeType | DispatcherConnection, object: Type, type: string, initializer: channels.InitializerTraits<Type>) {
+  constructor(parent: Dispatcher<any, any> | DispatcherConnection, object: Type, type: string, initializer: channels.InitializerTraits<Type>, isScope?: boolean) {
     super();
 
     this._connection = parent instanceof DispatcherConnection ? parent : parent._connection;
+    this._isScope = !!isScope;
     this._parent = parent instanceof DispatcherConnection ? undefined : parent;
+    this._scope = isScope ? this : this._parent!;
 
     const guid = object.guid;
     assert(!this._connection._dispatchers.has(guid));
@@ -80,15 +84,12 @@ export class Dispatcher<Type extends { guid: string }, ChannelType, ParentScopeT
       this._connection.sendCreate(this._parent, type, guid, initializer, this._parent._object);
   }
 
-  parentScope(): ParentScopeType {
-    return this._parent!;
-  }
-
   addObjectListener(eventName: (string | symbol), handler: (...args: any[]) => void) {
     this._eventListeners.push(eventsHelper.addEventListener(this._object as unknown as EventEmitter, eventName, handler));
   }
 
-  adopt(child: DispatcherScope) {
+  adopt(child: Dispatcher<any, any>) {
+    assert(this._isScope);
     const oldParent = child._parent!;
     oldParent._dispatchers.delete(child._guid);
     this._dispatchers.set(child._guid, child);
@@ -108,11 +109,6 @@ export class Dispatcher<Type extends { guid: string }, ChannelType, ParentScopeT
   }
 
   _dispose() {
-    this._disposeRecursively();
-    this._connection.sendDispose(this);
-  }
-
-  private _disposeRecursively() {
     assert(!this._disposed, `${this._guid} is disposed more than once`);
     this._disposed = true;
     eventsHelper.removeEventListeners(this._eventListeners);
@@ -124,8 +120,11 @@ export class Dispatcher<Type extends { guid: string }, ChannelType, ParentScopeT
 
     // Dispose all children.
     for (const dispatcher of [...this._dispatchers.values()])
-      dispatcher._disposeRecursively();
+      dispatcher._dispose();
     this._dispatchers.clear();
+
+    if (this._isScope)
+      this._connection.sendDispose(this);
     delete (this._object as any)[dispatcherSymbol];
   }
 
@@ -141,13 +140,12 @@ export class Dispatcher<Type extends { guid: string }, ChannelType, ParentScopeT
   }
 }
 
-export type DispatcherScope = Dispatcher<any, any, any>;
-
-export class RootDispatcher extends Dispatcher<{ guid: '' }, any, any> {
+export type DispatcherScope = Dispatcher<any, any>;
+export class Root extends Dispatcher<{ guid: '' }, any> {
   private _initialized = false;
 
-  constructor(connection: DispatcherConnection, private readonly createPlaywright?: (scope: RootDispatcher, options: channels.RootInitializeParams) => Promise<PlaywrightDispatcher>) {
-    super(connection, { guid: '' }, 'Root', {});
+  constructor(connection: DispatcherConnection, private readonly createPlaywright?: (scope: DispatcherScope, options: channels.RootInitializeParams) => Promise<PlaywrightDispatcher>) {
+    super(connection, { guid: '' }, 'Root', {}, true);
   }
 
   async initialize(params: channels.RootInitializeParams): Promise<channels.RootInitializeResult> {
@@ -161,7 +159,7 @@ export class RootDispatcher extends Dispatcher<{ guid: '' }, any, any> {
 }
 
 export class DispatcherConnection {
-  readonly _dispatchers = new Map<string, DispatcherScope>();
+  readonly _dispatchers = new Map<string, Dispatcher<any, any>>();
   onmessage = (message: object) => {};
   private _waitOperations = new Map<string, CallMetadata>();
   private _isLocal: boolean;
@@ -170,23 +168,23 @@ export class DispatcherConnection {
     this._isLocal = !!isLocal;
   }
 
-  sendEvent(dispatcher: DispatcherScope, event: string, params: any, sdkObject?: SdkObject) {
+  sendEvent(dispatcher: Dispatcher<any, any>, event: string, params: any, sdkObject?: SdkObject) {
     const validator = findValidator(dispatcher._type, event, 'Event');
     params = validator(params, '', { tChannelImpl: this._tChannelImplToWire.bind(this), binary: this._isLocal ? 'buffer' : 'toBase64' });
     this._sendMessageToClient(dispatcher._guid, dispatcher._type, event, params, sdkObject);
   }
 
-  sendCreate(parent: DispatcherScope, type: string, guid: string, initializer: any, sdkObject?: SdkObject) {
+  sendCreate(parent: Dispatcher<any, any>, type: string, guid: string, initializer: any, sdkObject?: SdkObject) {
     const validator = findValidator(type, '', 'Initializer');
     initializer = validator(initializer, '', { tChannelImpl: this._tChannelImplToWire.bind(this), binary: this._isLocal ? 'buffer' : 'toBase64' });
     this._sendMessageToClient(parent._guid, type, '__create__', { type, initializer, guid }, sdkObject);
   }
 
-  sendAdopt(parent: DispatcherScope, dispatcher: DispatcherScope) {
+  sendAdopt(parent: Dispatcher<any, any>, dispatcher: Dispatcher<any, any>) {
     this._sendMessageToClient(parent._guid, dispatcher._type, '__adopt__', { guid: dispatcher._guid });
   }
 
-  sendDispose(dispatcher: DispatcherScope) {
+  sendDispose(dispatcher: Dispatcher<any, any>) {
     this._sendMessageToClient(dispatcher._guid, dispatcher._type, '__dispose__', {});
   }
 
diff --git a/packages/playwright-core/src/server/dispatchers/electronDispatcher.ts b/packages/playwright-core/src/server/dispatchers/electronDispatcher.ts
index 0462bad356b2368f555be84983ec589839d59fb8..5a99b4e85912fdd9ed19cf7cd45df652c23b4cd8 100644
--- a/packages/playwright-core/src/server/dispatchers/electronDispatcher.ts
+++ b/packages/playwright-core/src/server/dispatchers/electronDispatcher.ts
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-import type { RootDispatcher } from './dispatcher';
+import type { DispatcherScope } from './dispatcher';
 import { Dispatcher } from './dispatcher';
 import type { Electron } from '../electron/electron';
 import { ElectronApplication } from '../electron/electron';
@@ -24,27 +24,26 @@ import type { PageDispatcher } from './pageDispatcher';
 import { parseArgument, serializeResult } from './jsHandleDispatcher';
 import { ElementHandleDispatcher } from './elementHandlerDispatcher';
 
-export class ElectronDispatcher extends Dispatcher<Electron, channels.ElectronChannel, RootDispatcher> implements channels.ElectronChannel {
+export class ElectronDispatcher extends Dispatcher<Electron, channels.ElectronChannel> implements channels.ElectronChannel {
   _type_Electron = true;
-
-  constructor(scope: RootDispatcher, electron: Electron) {
-    super(scope, electron, 'Electron', {});
+  constructor(scope: DispatcherScope, electron: Electron) {
+    super(scope, electron, 'Electron', {}, true);
   }
 
   async launch(params: channels.ElectronLaunchParams): Promise<channels.ElectronLaunchResult> {
     const electronApplication = await this._object.launch(params);
-    return { electronApplication: new ElectronApplicationDispatcher(this, electronApplication) };
+    return { electronApplication: new ElectronApplicationDispatcher(this._scope, electronApplication) };
   }
 }
 
-export class ElectronApplicationDispatcher extends Dispatcher<ElectronApplication, channels.ElectronApplicationChannel, ElectronDispatcher> implements channels.ElectronApplicationChannel {
+export class ElectronApplicationDispatcher extends Dispatcher<ElectronApplication, channels.ElectronApplicationChannel> implements channels.ElectronApplicationChannel {
   _type_EventTarget = true;
   _type_ElectronApplication = true;
 
-  constructor(scope: ElectronDispatcher, electronApplication: ElectronApplication) {
+  constructor(scope: DispatcherScope, electronApplication: ElectronApplication) {
     super(scope, electronApplication, 'ElectronApplication', {
       context: new BrowserContextDispatcher(scope, electronApplication.context())
-    });
+    }, true);
     this.addObjectListener(ElectronApplication.Events.Close, () => {
       this._dispatchEvent('close');
       this._dispose();
@@ -53,7 +52,7 @@ export class ElectronApplicationDispatcher extends Dispatcher<ElectronApplicatio
 
   async browserWindow(params: channels.ElectronApplicationBrowserWindowParams): Promise<channels.ElectronApplicationBrowserWindowResult> {
     const handle = await this._object.browserWindow((params.page as PageDispatcher).page());
-    return { handle: ElementHandleDispatcher.fromJSHandle(this, handle) };
+    return { handle: ElementHandleDispatcher.fromJSHandle(this._scope, handle) };
   }
 
   async evaluateExpression(params: channels.ElectronApplicationEvaluateExpressionParams): Promise<channels.ElectronApplicationEvaluateExpressionResult> {
@@ -64,7 +63,7 @@ export class ElectronApplicationDispatcher extends Dispatcher<ElectronApplicatio
   async evaluateExpressionHandle(params: channels.ElectronApplicationEvaluateExpressionHandleParams): Promise<channels.ElectronApplicationEvaluateExpressionHandleResult> {
     const handle = await this._object._nodeElectronHandlePromise;
     const result = await handle.evaluateExpressionAndWaitForSignals(params.expression, params.isFunction, false /* returnByValue */, parseArgument(params.arg));
-    return { handle: ElementHandleDispatcher.fromJSHandle(this, result) };
+    return { handle: ElementHandleDispatcher.fromJSHandle(this._scope, result) };
   }
 
   async close(): Promise<void> {
diff --git a/packages/playwright-core/src/server/dispatchers/elementHandlerDispatcher.ts b/packages/playwright-core/src/server/dispatchers/elementHandlerDispatcher.ts
index 786c03c97c7733a68a1bcec6d1cba5f644630d26..cc442b95c5a70da68e6274ac0070349fc6356aba 100644
--- a/packages/playwright-core/src/server/dispatchers/elementHandlerDispatcher.ts
+++ b/packages/playwright-core/src/server/dispatchers/elementHandlerDispatcher.ts
@@ -18,38 +18,37 @@ import type { ElementHandle } from '../dom';
 import type { Frame } from '../frames';
 import type * as js from '../javascript';
 import type * as channels from '../../protocol/channels';
+import type { DispatcherScope } from './dispatcher';
 import { existingDispatcher, lookupNullableDispatcher } from './dispatcher';
 import { JSHandleDispatcher, serializeResult, parseArgument } from './jsHandleDispatcher';
-import type { JSHandleDispatcherParentScope } from './jsHandleDispatcher';
 import type { FrameDispatcher } from './frameDispatcher';
 import type { CallMetadata } from '../instrumentation';
 import type { WritableStreamDispatcher } from './writableStreamDispatcher';
 import { assert } from '../../utils';
 import path from 'path';
-
 export class ElementHandleDispatcher extends JSHandleDispatcher implements channels.ElementHandleChannel {
   _type_ElementHandle = true;
 
   readonly _elementHandle: ElementHandle;
 
-  static from(scope: JSHandleDispatcherParentScope, handle: ElementHandle): ElementHandleDispatcher {
+  static from(scope: DispatcherScope, handle: ElementHandle): ElementHandleDispatcher {
     return existingDispatcher<ElementHandleDispatcher>(handle) || new ElementHandleDispatcher(scope, handle);
   }
 
-  static fromNullable(scope: JSHandleDispatcherParentScope, handle: ElementHandle | null): ElementHandleDispatcher | undefined {
+  static fromNullable(scope: DispatcherScope, handle: ElementHandle | null): ElementHandleDispatcher | undefined {
     if (!handle)
       return undefined;
     return existingDispatcher<ElementHandleDispatcher>(handle) || new ElementHandleDispatcher(scope, handle);
   }
 
-  static fromJSHandle(scope: JSHandleDispatcherParentScope, handle: js.JSHandle): JSHandleDispatcher {
+  static fromJSHandle(scope: DispatcherScope, handle: js.JSHandle): JSHandleDispatcher {
     const result = existingDispatcher<JSHandleDispatcher>(handle);
     if (result)
       return result;
     return handle.asElement() ? new ElementHandleDispatcher(scope, handle.asElement()!) : new JSHandleDispatcher(scope, handle);
   }
 
-  private constructor(scope: JSHandleDispatcherParentScope, elementHandle: ElementHandle) {
+  private constructor(scope: DispatcherScope, elementHandle: ElementHandle) {
     super(scope, elementHandle);
     this._elementHandle = elementHandle;
   }
@@ -197,12 +196,12 @@ export class ElementHandleDispatcher extends JSHandleDispatcher implements chann
 
   async querySelector(params: channels.ElementHandleQuerySelectorParams, metadata: CallMetadata): Promise<channels.ElementHandleQuerySelectorResult> {
     const handle = await this._elementHandle.querySelector(params.selector, params);
-    return { element: ElementHandleDispatcher.fromNullable(this.parentScope(), handle) };
+    return { element: ElementHandleDispatcher.fromNullable(this._scope, handle) };
   }
 
   async querySelectorAll(params: channels.ElementHandleQuerySelectorAllParams, metadata: CallMetadata): Promise<channels.ElementHandleQuerySelectorAllResult> {
     const elements = await this._elementHandle.querySelectorAll(params.selector);
-    return { elements: elements.map(e => ElementHandleDispatcher.from(this.parentScope(), e)) };
+    return { elements: elements.map(e => ElementHandleDispatcher.from(this._scope, e)) };
   }
 
   async evalOnSelector(params: channels.ElementHandleEvalOnSelectorParams, metadata: CallMetadata): Promise<channels.ElementHandleEvalOnSelectorResult> {
@@ -218,6 +217,6 @@ export class ElementHandleDispatcher extends JSHandleDispatcher implements chann
   }
 
   async waitForSelector(params: channels.ElementHandleWaitForSelectorParams, metadata: CallMetadata): Promise<channels.ElementHandleWaitForSelectorResult> {
-    return { element: ElementHandleDispatcher.fromNullable(this.parentScope(), await this._elementHandle.waitForSelector(metadata, params.selector, params)) };
+    return { element: ElementHandleDispatcher.fromNullable(this._scope, await this._elementHandle.waitForSelector(metadata, params.selector, params)) };
   }
 }
diff --git a/packages/playwright-core/src/server/dispatchers/frameDispatcher.ts b/packages/playwright-core/src/server/dispatchers/frameDispatcher.ts
index a1f984c31236ccbb9742a0f2c4f1b7d089675323..c0e3381c7e1ef5fd8b3d51a47fd95fd4139aedd3 100644
--- a/packages/playwright-core/src/server/dispatchers/frameDispatcher.ts
+++ b/packages/playwright-core/src/server/dispatchers/frameDispatcher.ts
@@ -17,6 +17,7 @@
 import type { NavigationEvent } from '../frames';
 import { Frame } from '../frames';
 import type * as channels from '../../protocol/channels';
+import type { DispatcherScope } from './dispatcher';
 import { Dispatcher, lookupNullableDispatcher, existingDispatcher } from './dispatcher';
 import { ElementHandleDispatcher } from './elementHandlerDispatcher';
 import { parseArgument, serializeResult } from './jsHandleDispatcher';
@@ -26,29 +27,28 @@ import type { CallMetadata } from '../instrumentation';
 import type { WritableStreamDispatcher } from './writableStreamDispatcher';
 import { assert } from '../../utils';
 import path from 'path';
-import type { PageDispatcher } from './pageDispatcher';
 
-export class FrameDispatcher extends Dispatcher<Frame, channels.FrameChannel, PageDispatcher> implements channels.FrameChannel {
+export class FrameDispatcher extends Dispatcher<Frame, channels.FrameChannel> implements channels.FrameChannel {
   _type_Frame = true;
   private _frame: Frame;
 
-  static from(scope: PageDispatcher, frame: Frame): FrameDispatcher {
+  static from(scope: DispatcherScope, frame: Frame): FrameDispatcher {
     const result = existingDispatcher<FrameDispatcher>(frame);
     return result || new FrameDispatcher(scope, frame);
   }
 
-  static fromNullable(scope: PageDispatcher, frame: Frame | null): FrameDispatcher | undefined {
+  static fromNullable(scope: DispatcherScope, frame: Frame | null): FrameDispatcher | undefined {
     if (!frame)
       return;
     return FrameDispatcher.from(scope, frame);
   }
 
-  private constructor(scope: PageDispatcher, frame: Frame) {
+  private constructor(scope: DispatcherScope, frame: Frame) {
     super(scope, frame, 'Frame', {
       url: frame.url(),
       name: frame.name(),
       parentFrame: FrameDispatcher.fromNullable(scope, frame.parentFrame()),
-      loadStates: Array.from(frame._firedLifecycleEvents),
+      loadStates: Array.from(frame._subtreeLifecycleEvents),
     });
     this._frame = frame;
     this.addObjectListener(Frame.Events.AddLifecycle, lifecycleEvent => {
@@ -62,7 +62,7 @@ export class FrameDispatcher extends Dispatcher<Frame, channels.FrameChannel, Pa
         return;
       const params = { url: event.url, name: event.name, error: event.error ? event.error.message : undefined };
       if (event.newDocument)
-        (params as any).newDocument = { request: RequestDispatcher.fromNullable(scope.parentScope(), event.newDocument.request || null) };
+        (params as any).newDocument = { request: RequestDispatcher.fromNullable(this._scope, event.newDocument.request || null) };
       this._dispatchEvent('navigated', params);
     });
   }
@@ -72,7 +72,7 @@ export class FrameDispatcher extends Dispatcher<Frame, channels.FrameChannel, Pa
   }
 
   async frameElement(): Promise<channels.FrameFrameElementResult> {
-    return { element: ElementHandleDispatcher.from(this.parentScope(), await this._frame.frameElement()) };
+    return { element: ElementHandleDispatcher.from(this._scope, await this._frame.frameElement()) };
   }
 
   async evaluateExpression(params: channels.FrameEvaluateExpressionParams, metadata: CallMetadata): Promise<channels.FrameEvaluateExpressionResult> {
@@ -80,11 +80,11 @@ export class FrameDispatcher extends Dispatcher<Frame, channels.FrameChannel, Pa
   }
 
   async evaluateExpressionHandle(params: channels.FrameEvaluateExpressionHandleParams, metadata: CallMetadata): Promise<channels.FrameEvaluateExpressionHandleResult> {
-    return { handle: ElementHandleDispatcher.fromJSHandle(this.parentScope(), await this._frame.evaluateExpressionHandleAndWaitForSignals(params.expression, params.isFunction, parseArgument(params.arg), 'main')) };
+    return { handle: ElementHandleDispatcher.fromJSHandle(this._scope, await this._frame.evaluateExpressionHandleAndWaitForSignals(params.expression, params.isFunction, parseArgument(params.arg), 'main')) };
   }
 
   async waitForSelector(params: channels.FrameWaitForSelectorParams, metadata: CallMetadata): Promise<channels.FrameWaitForSelectorResult> {
-    return { element: ElementHandleDispatcher.fromNullable(this.parentScope(), await this._frame.waitForSelector(metadata, params.selector, params)) };
+    return { element: ElementHandleDispatcher.fromNullable(this._scope, await this._frame.waitForSelector(metadata, params.selector, params)) };
   }
 
   async dispatchEvent(params: channels.FrameDispatchEventParams, metadata: CallMetadata): Promise<void> {
@@ -100,12 +100,12 @@ export class FrameDispatcher extends Dispatcher<Frame, channels.FrameChannel, Pa
   }
 
   async querySelector(params: channels.FrameQuerySelectorParams, metadata: CallMetadata): Promise<channels.FrameQuerySelectorResult> {
-    return { element: ElementHandleDispatcher.fromNullable(this.parentScope(), await this._frame.querySelector(params.selector, params)) };
+    return { element: ElementHandleDispatcher.fromNullable(this._scope, await this._frame.querySelector(params.selector, params)) };
   }
 
   async querySelectorAll(params: channels.FrameQuerySelectorAllParams, metadata: CallMetadata): Promise<channels.FrameQuerySelectorAllResult> {
     const elements = await this._frame.querySelectorAll(params.selector);
-    return { elements: elements.map(e => ElementHandleDispatcher.from(this.parentScope(), e)) };
+    return { elements: elements.map(e => ElementHandleDispatcher.from(this._scope, e)) };
   }
 
   async queryCount(params: channels.FrameQueryCountParams): Promise<channels.FrameQueryCountResult> {
@@ -121,11 +121,11 @@ export class FrameDispatcher extends Dispatcher<Frame, channels.FrameChannel, Pa
   }
 
   async addScriptTag(params: channels.FrameAddScriptTagParams, metadata: CallMetadata): Promise<channels.FrameAddScriptTagResult> {
-    return { element: ElementHandleDispatcher.from(this.parentScope(), await this._frame.addScriptTag(params)) };
+    return { element: ElementHandleDispatcher.from(this._scope, await this._frame.addScriptTag(params)) };
   }
 
   async addStyleTag(params: channels.FrameAddStyleTagParams, metadata: CallMetadata): Promise<channels.FrameAddStyleTagResult> {
-    return { element: ElementHandleDispatcher.from(this.parentScope(), await this._frame.addStyleTag(params)) };
+    return { element: ElementHandleDispatcher.from(this._scope, await this._frame.addStyleTag(params)) };
   }
 
   async click(params: channels.FrameClickParams, metadata: CallMetadata): Promise<void> {
@@ -245,7 +245,7 @@ export class FrameDispatcher extends Dispatcher<Frame, channels.FrameChannel, Pa
   }
 
   async waitForFunction(params: channels.FrameWaitForFunctionParams, metadata: CallMetadata): Promise<channels.FrameWaitForFunctionResult> {
-    return { handle: ElementHandleDispatcher.fromJSHandle(this.parentScope(), await this._frame._waitForFunctionExpression(metadata, params.expression, params.isFunction, parseArgument(params.arg), params)) };
+    return { handle: ElementHandleDispatcher.fromJSHandle(this._scope, await this._frame._waitForFunctionExpression(metadata, params.expression, params.isFunction, parseArgument(params.arg), params)) };
   }
 
   async title(params: channels.FrameTitleParams, metadata: CallMetadata): Promise<channels.FrameTitleResult> {
diff --git a/packages/playwright-core/src/server/dispatchers/jsHandleDispatcher.ts b/packages/playwright-core/src/server/dispatchers/jsHandleDispatcher.ts
index 78dbc404896d8ebbf1cc94bb7e18151bedad5f61..0d9e2c0114ebf58b3edac53d10803df15e2b79b3 100644
--- a/packages/playwright-core/src/server/dispatchers/jsHandleDispatcher.ts
+++ b/packages/playwright-core/src/server/dispatchers/jsHandleDispatcher.ts
@@ -16,18 +16,15 @@
 
 import type * as js from '../javascript';
 import type * as channels from '../../protocol/channels';
+import type { DispatcherScope } from './dispatcher';
 import { Dispatcher } from './dispatcher';
 import { ElementHandleDispatcher } from './elementHandlerDispatcher';
 import { parseSerializedValue, serializeValue } from '../../protocol/serializers';
-import type { PageDispatcher, WorkerDispatcher } from './pageDispatcher';
-import type { ElectronApplicationDispatcher } from './electronDispatcher';
 
-export type JSHandleDispatcherParentScope = PageDispatcher | WorkerDispatcher | ElectronApplicationDispatcher;
-
-export class JSHandleDispatcher extends Dispatcher<js.JSHandle, channels.JSHandleChannel, JSHandleDispatcherParentScope> implements channels.JSHandleChannel {
+export class JSHandleDispatcher extends Dispatcher<js.JSHandle, channels.JSHandleChannel> implements channels.JSHandleChannel {
   _type_JSHandle = true;
 
-  protected constructor(scope: JSHandleDispatcherParentScope, jsHandle: js.JSHandle) {
+  protected constructor(scope: DispatcherScope, jsHandle: js.JSHandle) {
     // Do not call this directly, use createHandle() instead.
     super(scope, jsHandle, jsHandle.asElement() ? 'ElementHandle' : 'JSHandle', {
       preview: jsHandle.toString(),
@@ -41,19 +38,19 @@ export class JSHandleDispatcher extends Dispatcher<js.JSHandle, channels.JSHandl
 
   async evaluateExpressionHandle(params: channels.JSHandleEvaluateExpressionHandleParams): Promise<channels.JSHandleEvaluateExpressionHandleResult> {
     const jsHandle = await this._object.evaluateExpressionAndWaitForSignals(params.expression, params.isFunction, false /* returnByValue */, parseArgument(params.arg));
-    return { handle: ElementHandleDispatcher.fromJSHandle(this.parentScope(), jsHandle) };
+    return { handle: ElementHandleDispatcher.fromJSHandle(this._scope, jsHandle) };
   }
 
   async getProperty(params: channels.JSHandleGetPropertyParams): Promise<channels.JSHandleGetPropertyResult> {
     const jsHandle = await this._object.getProperty(params.name);
-    return { handle: ElementHandleDispatcher.fromJSHandle(this.parentScope(), jsHandle) };
+    return { handle: ElementHandleDispatcher.fromJSHandle(this._scope, jsHandle) };
   }
 
   async getPropertyList(): Promise<channels.JSHandleGetPropertyListResult> {
     const map = await this._object.getProperties();
     const properties = [];
     for (const [name, value] of map)
-      properties.push({ name, value: ElementHandleDispatcher.fromJSHandle(this.parentScope(), value) });
+      properties.push({ name, value: ElementHandleDispatcher.fromJSHandle(this._scope, value) });
     return { properties };
   }
 
diff --git a/packages/playwright-core/src/server/dispatchers/jsonPipeDispatcher.ts b/packages/playwright-core/src/server/dispatchers/jsonPipeDispatcher.ts
index 4599728e6fa11d858a83a367e4b0bb7dccc3a924..719bd0110516882a8dc41938e92f6dbcc1aeccb9 100644
--- a/packages/playwright-core/src/server/dispatchers/jsonPipeDispatcher.ts
+++ b/packages/playwright-core/src/server/dispatchers/jsonPipeDispatcher.ts
@@ -15,14 +15,14 @@
  */
 
 import type * as channels from '../../protocol/channels';
+import type { DispatcherScope } from './dispatcher';
 import { Dispatcher } from './dispatcher';
 import { createGuid } from '../../utils';
 import { serializeError } from '../../protocol/serializers';
-import type { BrowserTypeDispatcher } from './browserTypeDispatcher';
 
-export class JsonPipeDispatcher extends Dispatcher<{ guid: string }, channels.JsonPipeChannel, BrowserTypeDispatcher> implements channels.JsonPipeChannel {
+export class JsonPipeDispatcher extends Dispatcher<{ guid: string }, channels.JsonPipeChannel> implements channels.JsonPipeChannel {
   _type_JsonPipe = true;
-  constructor(scope: BrowserTypeDispatcher) {
+  constructor(scope: DispatcherScope) {
     super(scope, { guid: 'jsonPipe@' + createGuid() }, 'JsonPipe', {});
   }
 
diff --git a/packages/playwright-core/src/server/dispatchers/localUtilsDispatcher.ts b/packages/playwright-core/src/server/dispatchers/localUtilsDispatcher.ts
index 1489a787aa97fafad5c7aa572dbcf36edbdc5e30..2b0372810b79b5e5c6cf8843f13aa8a5b4ba725a 100644
--- a/packages/playwright-core/src/server/dispatchers/localUtilsDispatcher.ts
+++ b/packages/playwright-core/src/server/dispatchers/localUtilsDispatcher.ts
@@ -20,18 +20,18 @@ import path from 'path';
 import type * as channels from '../../protocol/channels';
 import { ManualPromise } from '../../utils/manualPromise';
 import { assert, createGuid } from '../../utils';
-import type { RootDispatcher } from './dispatcher';
+import type { DispatcherScope } from './dispatcher';
 import { Dispatcher } from './dispatcher';
 import { yazl, yauzl } from '../../zipBundle';
 import { ZipFile } from '../../utils/zipFile';
 import type * as har from '../har/har';
 import type { HeadersArray } from '../types';
 
-export class LocalUtilsDispatcher extends Dispatcher<{ guid: string }, channels.LocalUtilsChannel, RootDispatcher> implements channels.LocalUtilsChannel {
+export class LocalUtilsDispatcher extends Dispatcher<{ guid: string }, channels.LocalUtilsChannel> implements channels.LocalUtilsChannel {
   _type_LocalUtils: boolean;
   private _harBakends = new Map<string, HarBackend>();
 
-  constructor(scope: RootDispatcher) {
+  constructor(scope: DispatcherScope) {
     super(scope, { guid: 'localUtils@' + createGuid() }, 'LocalUtils', {});
     this._type_LocalUtils = true;
   }
diff --git a/packages/playwright-core/src/server/dispatchers/networkDispatchers.ts b/packages/playwright-core/src/server/dispatchers/networkDispatchers.ts
index 250341050925d7b52affcb82805a72efed226f9a..0e145d20c0d2754df42bf80fd65c406ae7a06b84 100644
--- a/packages/playwright-core/src/server/dispatchers/networkDispatchers.ts
+++ b/packages/playwright-core/src/server/dispatchers/networkDispatchers.ts
@@ -19,30 +19,28 @@ import type { APIRequestContext } from '../fetch';
 import type { CallMetadata } from '../instrumentation';
 import type { Request, Response, Route } from '../network';
 import { WebSocket } from '../network';
-import type { RootDispatcher } from './dispatcher';
+import type { DispatcherScope } from './dispatcher';
 import { Dispatcher, existingDispatcher, lookupNullableDispatcher } from './dispatcher';
-import { TracingDispatcher } from './tracingDispatcher';
-import type { BrowserContextDispatcher } from './browserContextDispatcher';
-import type { PageDispatcher } from './pageDispatcher';
 import { FrameDispatcher } from './frameDispatcher';
 import { WorkerDispatcher } from './pageDispatcher';
+import { TracingDispatcher } from './tracingDispatcher';
 
-export class RequestDispatcher extends Dispatcher<Request, channels.RequestChannel, BrowserContextDispatcher> implements channels.RequestChannel {
+export class RequestDispatcher extends Dispatcher<Request, channels.RequestChannel> implements channels.RequestChannel {
   _type_Request: boolean;
 
-  static from(scope: BrowserContextDispatcher, request: Request): RequestDispatcher {
+  static from(scope: DispatcherScope, request: Request): RequestDispatcher {
     const result = existingDispatcher<RequestDispatcher>(request);
     return result || new RequestDispatcher(scope, request);
   }
 
-  static fromNullable(scope: BrowserContextDispatcher, request: Request | null): RequestDispatcher | undefined {
+  static fromNullable(scope: DispatcherScope, request: Request | null): RequestDispatcher | undefined {
     return request ? RequestDispatcher.from(scope, request) : undefined;
   }
 
-  private constructor(scope: BrowserContextDispatcher, request: Request) {
+  private constructor(scope: DispatcherScope, request: Request) {
     const postData = request.postDataBuffer();
     super(scope, request, 'Request', {
-      frame: FrameDispatcher.fromNullable(scope as any as PageDispatcher, request.frame()),
+      frame: FrameDispatcher.fromNullable(scope, request.frame()),
       serviceWorker: WorkerDispatcher.fromNullable(scope, request.serviceWorker()),
       url: request.url(),
       resourceType: request.resourceType(),
@@ -64,19 +62,19 @@ export class RequestDispatcher extends Dispatcher<Request, channels.RequestChann
   }
 }
 
-export class ResponseDispatcher extends Dispatcher<Response, channels.ResponseChannel, BrowserContextDispatcher> implements channels.ResponseChannel {
+export class ResponseDispatcher extends Dispatcher<Response, channels.ResponseChannel> implements channels.ResponseChannel {
   _type_Response = true;
 
-  static from(scope: BrowserContextDispatcher, response: Response): ResponseDispatcher {
+  static from(scope: DispatcherScope, response: Response): ResponseDispatcher {
     const result = existingDispatcher<ResponseDispatcher>(response);
     return result || new ResponseDispatcher(scope, response);
   }
 
-  static fromNullable(scope: BrowserContextDispatcher, response: Response | null): ResponseDispatcher | undefined {
+  static fromNullable(scope: DispatcherScope, response: Response | null): ResponseDispatcher | undefined {
     return response ? ResponseDispatcher.from(scope, response) : undefined;
   }
 
-  private constructor(scope: BrowserContextDispatcher, response: Response) {
+  private constructor(scope: DispatcherScope, response: Response) {
     super(scope, response, 'Response', {
       // TODO: responses in popups can point to non-reported requests.
       request: RequestDispatcher.from(scope, response.request()),
@@ -110,24 +108,22 @@ export class ResponseDispatcher extends Dispatcher<Response, channels.ResponseCh
   }
 }
 
-export class RouteDispatcher extends Dispatcher<Route, channels.RouteChannel, RequestDispatcher> implements channels.RouteChannel {
+export class RouteDispatcher extends Dispatcher<Route, channels.RouteChannel> implements channels.RouteChannel {
   _type_Route = true;
 
-  static from(scope: RequestDispatcher, route: Route): RouteDispatcher {
+  static from(scope: DispatcherScope, route: Route): RouteDispatcher {
     const result = existingDispatcher<RouteDispatcher>(route);
     return result || new RouteDispatcher(scope, route);
   }
 
-  private constructor(scope: RequestDispatcher, route: Route) {
+  private constructor(scope: DispatcherScope, route: Route) {
     super(scope, route, 'Route', {
       // Context route can point to a non-reported request.
-      request: scope
+      request: RequestDispatcher.from(scope, route.request())
     });
   }
 
   async continue(params: channels.RouteContinueParams, metadata: CallMetadata): Promise<channels.RouteContinueResult> {
-    // Used to discriminate between continue in tracing.
-    metadata.params.requestUrl = this._object.request().url();
     await this._object.continue({
       url: params.url,
       method: params.method,
@@ -136,15 +132,11 @@ export class RouteDispatcher extends Dispatcher<Route, channels.RouteChannel, Re
     });
   }
 
-  async fulfill(params: channels.RouteFulfillParams, metadata: CallMetadata): Promise<void> {
-    // Used to discriminate between fulfills in tracing.
-    metadata.params.requestUrl = this._object.request().url();
+  async fulfill(params: channels.RouteFulfillParams): Promise<void> {
     await this._object.fulfill(params);
   }
 
-  async abort(params: channels.RouteAbortParams, metadata: CallMetadata): Promise<void> {
-    // Used to discriminate between abort in tracing.
-    metadata.params.requestUrl = this._object.request().url();
+  async abort(params: channels.RouteAbortParams): Promise<void> {
     await this._object.abort(params.errorCode || 'failed');
   }
 
@@ -153,11 +145,11 @@ export class RouteDispatcher extends Dispatcher<Route, channels.RouteChannel, Re
   }
 }
 
-export class WebSocketDispatcher extends Dispatcher<WebSocket, channels.WebSocketChannel, PageDispatcher> implements channels.WebSocketChannel {
+export class WebSocketDispatcher extends Dispatcher<WebSocket, channels.WebSocketChannel> implements channels.WebSocketChannel {
   _type_EventTarget = true;
   _type_WebSocket = true;
 
-  constructor(scope: PageDispatcher, webSocket: WebSocket) {
+  constructor(scope: DispatcherScope, webSocket: WebSocket) {
     super(scope, webSocket, 'WebSocket', {
       url: webSocket.url(),
     });
@@ -168,25 +160,25 @@ export class WebSocketDispatcher extends Dispatcher<WebSocket, channels.WebSocke
   }
 }
 
-export class APIRequestContextDispatcher extends Dispatcher<APIRequestContext, channels.APIRequestContextChannel, RootDispatcher | BrowserContextDispatcher> implements channels.APIRequestContextChannel {
+export class APIRequestContextDispatcher extends Dispatcher<APIRequestContext, channels.APIRequestContextChannel> implements channels.APIRequestContextChannel {
   _type_APIRequestContext = true;
 
-  static from(scope: RootDispatcher | BrowserContextDispatcher, request: APIRequestContext): APIRequestContextDispatcher {
+  static from(scope: DispatcherScope, request: APIRequestContext): APIRequestContextDispatcher {
     const result = existingDispatcher<APIRequestContextDispatcher>(request);
     return result || new APIRequestContextDispatcher(scope, request);
   }
 
-  static fromNullable(scope: RootDispatcher | BrowserContextDispatcher, request: APIRequestContext | null): APIRequestContextDispatcher | undefined {
+  static fromNullable(scope: DispatcherScope, request: APIRequestContext | null): APIRequestContextDispatcher | undefined {
     return request ? APIRequestContextDispatcher.from(scope, request) : undefined;
   }
 
-  private constructor(parentScope: RootDispatcher | BrowserContextDispatcher, request: APIRequestContext) {
+  private constructor(parentScope: DispatcherScope, request: APIRequestContext) {
     // We will reparent these to the context below.
-    const tracing = TracingDispatcher.from(parentScope as any as APIRequestContextDispatcher, request.tracing());
+    const tracing = TracingDispatcher.from(parentScope, request.tracing());
 
     super(parentScope, request, 'APIRequestContext', {
       tracing,
-    });
+    }, true);
 
     this.adopt(tracing);
   }
diff --git a/packages/playwright-core/src/server/dispatchers/pageDispatcher.ts b/packages/playwright-core/src/server/dispatchers/pageDispatcher.ts
index 46def1a87fe3d7b2a70553f0b65f132271e8ad5e..6a398835d22f3722ce3559871dd448fd8c9a34ca 100644
--- a/packages/playwright-core/src/server/dispatchers/pageDispatcher.ts
+++ b/packages/playwright-core/src/server/dispatchers/pageDispatcher.ts
@@ -18,14 +18,14 @@ import type { BrowserContext } from '../browserContext';
 import type { Frame } from '../frames';
 import { Page, Worker } from '../page';
 import type * as channels from '../../protocol/channels';
+import type { DispatcherScope } from './dispatcher';
 import { Dispatcher, existingDispatcher, lookupDispatcher, lookupNullableDispatcher } from './dispatcher';
 import { parseError, serializeError } from '../../protocol/serializers';
 import { ConsoleMessageDispatcher } from './consoleMessageDispatcher';
 import { DialogDispatcher } from './dialogDispatcher';
 import { FrameDispatcher } from './frameDispatcher';
-import { RequestDispatcher } from './networkDispatchers';
 import type { ResponseDispatcher } from './networkDispatchers';
-import { RouteDispatcher, WebSocketDispatcher } from './networkDispatchers';
+import { RequestDispatcher, RouteDispatcher, WebSocketDispatcher } from './networkDispatchers';
 import { serializeResult, parseArgument } from './jsHandleDispatcher';
 import { ElementHandleDispatcher } from './elementHandlerDispatcher';
 import type { FileChooser } from '../fileChooser';
@@ -36,37 +36,32 @@ import type { Artifact } from '../artifact';
 import { ArtifactDispatcher } from './artifactDispatcher';
 import type { Download } from '../download';
 import { createGuid } from '../../utils';
-import type { BrowserContextDispatcher } from './browserContextDispatcher';
 
-export class PageDispatcher extends Dispatcher<Page, channels.PageChannel, BrowserContextDispatcher> implements channels.PageChannel {
+export class PageDispatcher extends Dispatcher<Page, channels.PageChannel> implements channels.PageChannel {
   _type_EventTarget = true;
   _type_Page = true;
   private _page: Page;
 
-  static from(parentScope: BrowserContextDispatcher, page: Page): PageDispatcher {
-    return PageDispatcher.fromNullable(parentScope, page)!;
-  }
-
-  static fromNullable(parentScope: BrowserContextDispatcher, page: Page | undefined): PageDispatcher | undefined {
+  static fromNullable(parentScope: DispatcherScope, page: Page | undefined): PageDispatcher | undefined {
     if (!page)
       return undefined;
     const result = existingDispatcher<PageDispatcher>(page);
     return result || new PageDispatcher(parentScope, page);
   }
 
-  private constructor(parentScope: BrowserContextDispatcher, page: Page) {
+  constructor(parentScope: DispatcherScope, page: Page) {
     // TODO: theoretically, there could be more than one frame already.
     // If we split pageCreated and pageReady, there should be no main frame during pageCreated.
 
     // We will reparent it to the page below using adopt.
-    const mainFrame = FrameDispatcher.from(parentScope as any as PageDispatcher, page.mainFrame());
+    const mainFrame = FrameDispatcher.from(parentScope, page.mainFrame());
 
     super(parentScope, page, 'Page', {
       mainFrame,
       viewportSize: page.viewportSize() || undefined,
       isClosed: page.isClosed(),
       opener: PageDispatcher.fromNullable(parentScope, page.opener())
-    });
+    }, true);
 
     this.adopt(mainFrame);
 
@@ -75,22 +70,22 @@ export class PageDispatcher extends Dispatcher<Page, channels.PageChannel, Brows
       this._dispatchEvent('close');
       this._dispose();
     });
-    this.addObjectListener(Page.Events.Console, message => this._dispatchEvent('console', { message: new ConsoleMessageDispatcher(this, message) }));
+    this.addObjectListener(Page.Events.Console, message => this._dispatchEvent('console', { message: new ConsoleMessageDispatcher(this._scope, message) }));
     this.addObjectListener(Page.Events.Crash, () => this._dispatchEvent('crash'));
-    this.addObjectListener(Page.Events.Dialog, dialog => this._dispatchEvent('dialog', { dialog: new DialogDispatcher(this, dialog) }));
+    this.addObjectListener(Page.Events.Dialog, dialog => this._dispatchEvent('dialog', { dialog: new DialogDispatcher(this._scope, dialog) }));
     this.addObjectListener(Page.Events.Download, (download: Download) => {
       // Artifact can outlive the page, so bind to the context scope.
       this._dispatchEvent('download', { url: download.url, suggestedFilename: download.suggestedFilename(), artifact: new ArtifactDispatcher(parentScope, download.artifact) });
     });
     this.addObjectListener(Page.Events.FileChooser, (fileChooser: FileChooser) => this._dispatchEvent('fileChooser', {
-      element: ElementHandleDispatcher.from(this, fileChooser.element()),
+      element: ElementHandleDispatcher.from(this._scope, fileChooser.element()),
       isMultiple: fileChooser.isMultiple()
     }));
     this.addObjectListener(Page.Events.FrameAttached, frame => this._onFrameAttached(frame));
     this.addObjectListener(Page.Events.FrameDetached, frame => this._onFrameDetached(frame));
     this.addObjectListener(Page.Events.PageError, error => this._dispatchEvent('pageError', { error: serializeError(error) }));
-    this.addObjectListener(Page.Events.WebSocket, webSocket => this._dispatchEvent('webSocket', { webSocket: new WebSocketDispatcher(this, webSocket) }));
-    this.addObjectListener(Page.Events.Worker, worker => this._dispatchEvent('worker', { worker: new WorkerDispatcher(this, worker) }));
+    this.addObjectListener(Page.Events.WebSocket, webSocket => this._dispatchEvent('webSocket', { webSocket: new WebSocketDispatcher(this._scope, webSocket) }));
+    this.addObjectListener(Page.Events.Worker, worker => this._dispatchEvent('worker', { worker: new WorkerDispatcher(this._scope, worker) }));
     this.addObjectListener(Page.Events.Video, (artifact: Artifact) => this._dispatchEvent('video', { artifact: existingDispatcher<ArtifactDispatcher>(artifact) }));
     if (page._video)
       this._dispatchEvent('video', { artifact: existingDispatcher<ArtifactDispatcher>(page._video) });
@@ -114,7 +109,7 @@ export class PageDispatcher extends Dispatcher<Page, channels.PageChannel, Brows
 
   async exposeBinding(params: channels.PageExposeBindingParams, metadata: CallMetadata): Promise<void> {
     await this._page.exposeBinding(params.name, !!params.needsHandle, (source, ...args) => {
-      const binding = new BindingCallDispatcher(this, params.name, !!params.needsHandle, source, args);
+      const binding = new BindingCallDispatcher(this._scope, params.name, !!params.needsHandle, source, args);
       this._dispatchEvent('bindingCall', { binding });
       return binding.promise();
     });
@@ -159,7 +154,7 @@ export class PageDispatcher extends Dispatcher<Page, channels.PageChannel, Brows
       return;
     }
     await this._page.setClientRequestInterceptor((route, request) => {
-      this._dispatchEvent('route', { route: RouteDispatcher.from(RequestDispatcher.from(this.parentScope(), request), route) });
+      this._dispatchEvent('route', { route: RouteDispatcher.from(this._scope, route), request: RequestDispatcher.from(this._scope, request) });
     });
   }
 
@@ -282,7 +277,7 @@ export class PageDispatcher extends Dispatcher<Page, channels.PageChannel, Brows
   }
 
   _onFrameAttached(frame: Frame) {
-    this._dispatchEvent('frameAttached', { frame: FrameDispatcher.from(this, frame) });
+    this._dispatchEvent('frameAttached', { frame: FrameDispatcher.from(this._scope, frame) });
   }
 
   _onFrameDetached(frame: Frame) {
@@ -296,17 +291,16 @@ export class PageDispatcher extends Dispatcher<Page, channels.PageChannel, Brows
 }
 
 
-export class WorkerDispatcher extends Dispatcher<Worker, channels.WorkerChannel, PageDispatcher | BrowserContextDispatcher> implements channels.WorkerChannel {
-  _type_Worker = true;
-
-  static fromNullable(scope: PageDispatcher | BrowserContextDispatcher, worker: Worker | null): WorkerDispatcher | undefined {
+export class WorkerDispatcher extends Dispatcher<Worker, channels.WorkerChannel> implements channels.WorkerChannel {
+  static fromNullable(scope: DispatcherScope, worker: Worker | null): WorkerDispatcher | undefined {
     if (!worker)
       return undefined;
     const result = existingDispatcher<WorkerDispatcher>(worker);
     return result || new WorkerDispatcher(scope, worker);
   }
 
-  constructor(scope: PageDispatcher | BrowserContextDispatcher, worker: Worker) {
+  _type_Worker = true;
+  constructor(scope: DispatcherScope, worker: Worker) {
     super(scope, worker, 'Worker', {
       url: worker.url()
     });
@@ -318,17 +312,17 @@ export class WorkerDispatcher extends Dispatcher<Worker, channels.WorkerChannel,
   }
 
   async evaluateExpressionHandle(params: channels.WorkerEvaluateExpressionHandleParams, metadata: CallMetadata): Promise<channels.WorkerEvaluateExpressionHandleResult> {
-    return { handle: ElementHandleDispatcher.fromJSHandle(this, await this._object.evaluateExpressionHandle(params.expression, params.isFunction, parseArgument(params.arg))) };
+    return { handle: ElementHandleDispatcher.fromJSHandle(this._scope, await this._object.evaluateExpressionHandle(params.expression, params.isFunction, parseArgument(params.arg))) };
   }
 }
 
-export class BindingCallDispatcher extends Dispatcher<{ guid: string }, channels.BindingCallChannel, PageDispatcher | BrowserContextDispatcher> implements channels.BindingCallChannel {
+export class BindingCallDispatcher extends Dispatcher<{ guid: string }, channels.BindingCallChannel> implements channels.BindingCallChannel {
   _type_BindingCall = true;
   private _resolve: ((arg: any) => void) | undefined;
   private _reject: ((error: any) => void) | undefined;
   private _promise: Promise<any>;
 
-  constructor(scope: PageDispatcher, name: string, needsHandle: boolean, source: { context: BrowserContext, page: Page, frame: Frame }, args: any[]) {
+  constructor(scope: DispatcherScope, name: string, needsHandle: boolean, source: { context: BrowserContext, page: Page, frame: Frame }, args: any[]) {
     super(scope, { guid: 'bindingCall@' + createGuid() }, 'BindingCall', {
       frame: lookupDispatcher<FrameDispatcher>(source.frame),
       name,
diff --git a/packages/playwright-core/src/server/dispatchers/playwrightDispatcher.ts b/packages/playwright-core/src/server/dispatchers/playwrightDispatcher.ts
index 2e925589b6301216d3f9ab99b0fb7f0fe3aa3c03..84547ccb4a9744d0269dcbaec3bba49c6031acef 100644
--- a/packages/playwright-core/src/server/dispatchers/playwrightDispatcher.ts
+++ b/packages/playwright-core/src/server/dispatchers/playwrightDispatcher.ts
@@ -23,7 +23,7 @@ import { SocksProxy } from '../../common/socksProxy';
 import type * as types from '../types';
 import { AndroidDispatcher } from './androidDispatcher';
 import { BrowserTypeDispatcher } from './browserTypeDispatcher';
-import type { RootDispatcher } from './dispatcher';
+import type { DispatcherScope } from './dispatcher';
 import { Dispatcher } from './dispatcher';
 import { ElectronDispatcher } from './electronDispatcher';
 import { LocalUtilsDispatcher } from './localUtilsDispatcher';
@@ -32,11 +32,11 @@ import { SelectorsDispatcher } from './selectorsDispatcher';
 import { ConnectedBrowserDispatcher } from './browserDispatcher';
 import { createGuid } from '../../utils';
 
-export class PlaywrightDispatcher extends Dispatcher<Playwright, channels.PlaywrightChannel, RootDispatcher> implements channels.PlaywrightChannel {
+export class PlaywrightDispatcher extends Dispatcher<Playwright, channels.PlaywrightChannel> implements channels.PlaywrightChannel {
   _type_Playwright;
   private _browserDispatcher: ConnectedBrowserDispatcher | undefined;
 
-  constructor(scope: RootDispatcher, playwright: Playwright, socksProxy?: SocksProxy, preLaunchedBrowser?: Browser) {
+  constructor(scope: DispatcherScope, playwright: Playwright, socksProxy?: SocksProxy, preLaunchedBrowser?: Browser) {
     const descriptors = require('../deviceDescriptors') as types.Devices;
     const deviceDescriptors = Object.entries(descriptors)
         .map(([name, descriptor]) => ({ name, descriptor }));
@@ -52,14 +52,14 @@ export class PlaywrightDispatcher extends Dispatcher<Playwright, channels.Playwr
       selectors: new SelectorsDispatcher(scope, browserDispatcher?.selectors || playwright.selectors),
       preLaunchedBrowser: browserDispatcher,
       socksSupport: socksProxy ? new SocksSupportDispatcher(scope, socksProxy) : undefined,
-    });
+    }, false);
     this._type_Playwright = true;
     this._browserDispatcher = browserDispatcher;
   }
 
   async newRequest(params: channels.PlaywrightNewRequestParams, metadata?: channels.Metadata): Promise<channels.PlaywrightNewRequestResult> {
     const request = new GlobalAPIRequestContext(this._object, params);
-    return { request: APIRequestContextDispatcher.from(this.parentScope(), request) };
+    return { request: APIRequestContextDispatcher.from(this._scope, request) };
   }
 
   async hideHighlight(params: channels.PlaywrightHideHighlightParams, metadata?: channels.Metadata): Promise<channels.PlaywrightHideHighlightResult> {
@@ -72,11 +72,11 @@ export class PlaywrightDispatcher extends Dispatcher<Playwright, channels.Playwr
   }
 }
 
-class SocksSupportDispatcher extends Dispatcher<{ guid: string }, channels.SocksSupportChannel, RootDispatcher> implements channels.SocksSupportChannel {
+class SocksSupportDispatcher extends Dispatcher<{ guid: string }, channels.SocksSupportChannel> implements channels.SocksSupportChannel {
   _type_SocksSupport: boolean;
   private _socksProxy: SocksProxy;
 
-  constructor(scope: RootDispatcher, socksProxy: SocksProxy) {
+  constructor(scope: DispatcherScope, socksProxy: SocksProxy) {
     super(scope, { guid: 'socksSupport@' + createGuid() }, 'SocksSupport', {});
     this._type_SocksSupport = true;
     this._socksProxy = socksProxy;
diff --git a/packages/playwright-core/src/server/dispatchers/selectorsDispatcher.ts b/packages/playwright-core/src/server/dispatchers/selectorsDispatcher.ts
index b77892396ce05a136681ee991499554b42e1aaec..8aaa381445d230ed62ead82d5e954588ebe45fc9 100644
--- a/packages/playwright-core/src/server/dispatchers/selectorsDispatcher.ts
+++ b/packages/playwright-core/src/server/dispatchers/selectorsDispatcher.ts
@@ -14,15 +14,14 @@
  * limitations under the License.
  */
 
-import type { RootDispatcher } from './dispatcher';
+import type { DispatcherScope } from './dispatcher';
 import { Dispatcher } from './dispatcher';
 import type * as channels from '../../protocol/channels';
 import type { Selectors } from '../selectors';
 
-export class SelectorsDispatcher extends Dispatcher<Selectors, channels.SelectorsChannel, RootDispatcher> implements channels.SelectorsChannel {
+export class SelectorsDispatcher extends Dispatcher<Selectors, channels.SelectorsChannel> implements channels.SelectorsChannel {
   _type_Selectors = true;
-
-  constructor(scope: RootDispatcher, selectors: Selectors) {
+  constructor(scope: DispatcherScope, selectors: Selectors) {
     super(scope, selectors, 'Selectors', {});
   }
 
diff --git a/packages/playwright-core/src/server/dispatchers/streamDispatcher.ts b/packages/playwright-core/src/server/dispatchers/streamDispatcher.ts
index 9e2740540aa37c267764aa09cb38c77ee3dc1b71..b186efd6921659d9a2ae69b8166f0902c6d63e61 100644
--- a/packages/playwright-core/src/server/dispatchers/streamDispatcher.ts
+++ b/packages/playwright-core/src/server/dispatchers/streamDispatcher.ts
@@ -15,16 +15,15 @@
  */
 
 import type * as channels from '../../protocol/channels';
+import type { DispatcherScope } from './dispatcher';
 import { Dispatcher } from './dispatcher';
 import type * as stream from 'stream';
 import { createGuid } from '../../utils';
-import type { ArtifactDispatcher } from './artifactDispatcher';
 
-export class StreamDispatcher extends Dispatcher<{ guid: string, stream: stream.Readable }, channels.StreamChannel, ArtifactDispatcher> implements channels.StreamChannel {
+export class StreamDispatcher extends Dispatcher<{ guid: string, stream: stream.Readable }, channels.StreamChannel> implements channels.StreamChannel {
   _type_Stream = true;
   private _ended: boolean = false;
-
-  constructor(scope: ArtifactDispatcher, stream: stream.Readable) {
+  constructor(scope: DispatcherScope, stream: stream.Readable) {
     super(scope, { guid: 'stream@' + createGuid(), stream }, 'Stream', {});
     // In Node v12.9.0+ we can use readableEnded.
     stream.once('end', () => this._ended =  true);
diff --git a/packages/playwright-core/src/server/dispatchers/tracingDispatcher.ts b/packages/playwright-core/src/server/dispatchers/tracingDispatcher.ts
index 84ab9786e277b5bcce500653d735da8ebaf1dbc9..8b5b99a039fd11c62124141a2abb2b4c00dcc30a 100644
--- a/packages/playwright-core/src/server/dispatchers/tracingDispatcher.ts
+++ b/packages/playwright-core/src/server/dispatchers/tracingDispatcher.ts
@@ -17,20 +17,19 @@
 import type * as channels from '../../protocol/channels';
 import type { Tracing } from '../trace/recorder/tracing';
 import { ArtifactDispatcher } from './artifactDispatcher';
+import type { DispatcherScope } from './dispatcher';
 import { Dispatcher, existingDispatcher } from './dispatcher';
-import type { BrowserContextDispatcher } from './browserContextDispatcher';
-import type { APIRequestContextDispatcher } from './networkDispatchers';
 
-export class TracingDispatcher extends Dispatcher<Tracing, channels.TracingChannel, BrowserContextDispatcher | APIRequestContextDispatcher> implements channels.TracingChannel {
+export class TracingDispatcher extends Dispatcher<Tracing, channels.TracingChannel> implements channels.TracingChannel {
   _type_Tracing = true;
 
-  static from(scope: BrowserContextDispatcher | APIRequestContextDispatcher, tracing: Tracing): TracingDispatcher {
+  static from(scope: DispatcherScope, tracing: Tracing): TracingDispatcher {
     const result = existingDispatcher<TracingDispatcher>(tracing);
     return result || new TracingDispatcher(scope, tracing);
   }
 
-  constructor(scope: BrowserContextDispatcher | APIRequestContextDispatcher, tracing: Tracing) {
-    super(scope, tracing, 'Tracing', {});
+  constructor(scope: DispatcherScope, tracing: Tracing) {
+    super(scope, tracing, 'Tracing', {}, true);
   }
 
   async tracingStart(params: channels.TracingTracingStartParams): Promise<channels.TracingTracingStartResult> {
@@ -43,7 +42,7 @@ export class TracingDispatcher extends Dispatcher<Tracing, channels.TracingChann
 
   async tracingStopChunk(params: channels.TracingTracingStopChunkParams): Promise<channels.TracingTracingStopChunkResult> {
     const { artifact, sourceEntries } = await this._object.stopChunk(params);
-    return { artifact: artifact ? new ArtifactDispatcher(this, artifact) : undefined, sourceEntries };
+    return { artifact: artifact ? new ArtifactDispatcher(this._scope, artifact) : undefined, sourceEntries };
   }
 
   async tracingStop(params: channels.TracingTracingStopParams): Promise<channels.TracingTracingStopResult> {
diff --git a/packages/playwright-core/src/server/dispatchers/writableStreamDispatcher.ts b/packages/playwright-core/src/server/dispatchers/writableStreamDispatcher.ts
index 244c0b7a930aae7312f7671ba2e6eac30c553824..d48b5fe0d894b42d770197d7e33eea5a139a2f77 100644
--- a/packages/playwright-core/src/server/dispatchers/writableStreamDispatcher.ts
+++ b/packages/playwright-core/src/server/dispatchers/writableStreamDispatcher.ts
@@ -15,14 +15,14 @@
  */
 
 import type * as channels from '../../protocol/channels';
+import type { DispatcherScope } from './dispatcher';
 import { Dispatcher } from './dispatcher';
 import type * as fs from 'fs';
 import { createGuid } from '../../utils';
-import type { BrowserContextDispatcher } from './browserContextDispatcher';
 
-export class WritableStreamDispatcher extends Dispatcher<{ guid: string, stream: fs.WriteStream }, channels.WritableStreamChannel, BrowserContextDispatcher> implements channels.WritableStreamChannel {
+export class WritableStreamDispatcher extends Dispatcher<{ guid: string, stream: fs.WriteStream }, channels.WritableStreamChannel> implements channels.WritableStreamChannel {
   _type_WritableStream = true;
-  constructor(scope: BrowserContextDispatcher, stream: fs.WriteStream) {
+  constructor(scope: DispatcherScope, stream: fs.WriteStream) {
     super(scope, { guid: 'writableStream@' + createGuid(), stream }, 'WritableStream', {});
   }
 
diff --git a/packages/playwright-core/src/server/dom.ts b/packages/playwright-core/src/server/dom.ts
index 2dd0b323b2ad09d9067175c3e5eb0528f2877631..1125f75e2a283146d9ec4f2ac32f856632be637b 100644
--- a/packages/playwright-core/src/server/dom.ts
+++ b/packages/playwright-core/src/server/dom.ts
@@ -882,7 +882,8 @@ export class ElementHandle<T extends Node = Node> extends js.JSHandle<T> {
       const point = data[i].pointInFrame;
       // Hit target in the parent frame should hit the child frame element.
       const hitTargetResult = await element.evaluateInUtility(([injected, element, hitPoint]) => {
-        return injected.expectHitTarget(hitPoint, element);
+        const hitElement = injected.deepElementFromPoint(document, hitPoint.x, hitPoint.y);
+        return injected.expectHitTargetParent(hitElement, element);
       }, point);
       if (hitTargetResult !== 'done')
         return hitTargetResult;
diff --git a/packages/playwright-core/src/server/electron/electron.ts b/packages/playwright-core/src/server/electron/electron.ts
index 79db714c0e47471147df45df3c32796e602a33a7..d118e9a11c0098352ae32d473ee78c27a5b50e3b 100644
--- a/packages/playwright-core/src/server/electron/electron.ts
+++ b/packages/playwright-core/src/server/electron/electron.ts
@@ -125,7 +125,7 @@ export class Electron extends SdkObject {
     controller.setLogName('browser');
     return controller.run(async progress => {
       let app: ElectronApplication | undefined = undefined;
-      const electronArguments = [...args, '--inspect=0', '--remote-debugging-port=0'];
+      const electronArguments = ['--inspect=0', '--remote-debugging-port=0', ...args];
 
       if (os.platform() === 'linux') {
         const runningAsRoot = process.geteuid && process.geteuid() === 0;
@@ -171,7 +171,7 @@ export class Electron extends SdkObject {
         },
         stdio: 'pipe',
         cwd: options.cwd,
-        tempDirectories: [artifactsDir],
+        tempDirectories: [ artifactsDir ],
         attemptToGracefullyClose: () => app!.close(),
         handleSIGINT: true,
         handleSIGTERM: true,
diff --git a/packages/playwright-core/src/server/fetch.ts b/packages/playwright-core/src/server/fetch.ts
index 6256dc94e4c62b56d6ec3b3bed2982f717bcec20..f731c37c96eaa540e6a531f1bdfb1c6682d2af37 100644
--- a/packages/playwright-core/src/server/fetch.ts
+++ b/packages/playwright-core/src/server/fetch.ts
@@ -162,7 +162,7 @@ export abstract class APIRequestContext extends SdkObject {
       method,
       headers,
       agent,
-      maxRedirects: params.maxRedirects === 0 ? -1 : params.maxRedirects === undefined ? 20 : params.maxRedirects,
+      maxRedirects: 20,
       timeout,
       deadline
     };
@@ -176,7 +176,11 @@ export abstract class APIRequestContext extends SdkObject {
         requestUrl.searchParams.set(name, value);
     }
 
-    const postData = serializePostData(params, headers);
+    let postData: Buffer | undefined;
+    if (['POST', 'PUT', 'PATCH', 'DELETE'].includes(method))
+      postData = serializePostData(params, headers);
+    else if (params.postData || params.jsonData || params.formData || params.multipartData)
+      throw new Error(`Method ${method} does not accept post data`);
     if (postData)
       headers['content-length'] = String(postData.byteLength);
     const controller = new ProgressController(metadata, this);
@@ -268,7 +272,7 @@ export abstract class APIRequestContext extends SdkObject {
         if (cookies.length)
           await this._addCookies(cookies);
 
-        if (redirectStatus.includes(response.statusCode!) && options.maxRedirects >= 0) {
+        if (redirectStatus.includes(response.statusCode!)) {
           if (!options.maxRedirects) {
             reject(new Error('Max redirect count exceeded'));
             request.destroy();
@@ -505,8 +509,9 @@ export class GlobalAPIRequestContext extends APIRequestContext {
   }
 
   override async dispose() {
-    await this._tracing.dispose();
+    await this._tracing.flush();
     await this._tracing.deleteTmpTracesDir();
+    this._tracing.dispose();
     this._disposeImpl();
   }
 
diff --git a/packages/playwright-core/src/server/firefox/ffBrowser.ts b/packages/playwright-core/src/server/firefox/ffBrowser.ts
index ff91a0ca21c0bce7ba5fb6199d78da7f0b7e3054..c5ba027345ce3839866a0581136720ffaa35773a 100644
--- a/packages/playwright-core/src/server/firefox/ffBrowser.ts
+++ b/packages/playwright-core/src/server/firefox/ffBrowser.ts
@@ -122,10 +122,6 @@ export class FFBrowser extends Browser {
     assert(ffPage);
     if (!ffPage)
       return;
-
-    // Abort the navigation that turned into download.
-    ffPage._page._frameManager.frameAbortedNavigation(payload.frameId, 'Download is starting');
-
     let originPage = ffPage._initializedPage;
     // If it's a new window download, report it on the opener page.
     if (!originPage) {
@@ -167,7 +163,7 @@ export class FFBrowserContext extends BrowserContext {
   override async _initialize() {
     assert(!this._ffPages().length);
     const browserContextId = this._browserContextId;
-    const promises: Promise<any>[] = [super._initialize()];
+    const promises: Promise<any>[] = [ super._initialize() ];
     promises.push(this._browser._connection.send('Browser.setDownloadOptions', {
       browserContextId,
       downloadOptions: {
diff --git a/packages/playwright-core/src/server/firefox/ffPage.ts b/packages/playwright-core/src/server/firefox/ffPage.ts
index 2576884ef60c208fc2c43a66aa5ad9ba35524b3e..98d53bd5f3eb7b27014226cf55a5ff9a09489aa5 100644
--- a/packages/playwright-core/src/server/firefox/ffPage.ts
+++ b/packages/playwright-core/src/server/firefox/ffPage.ts
@@ -529,7 +529,7 @@ export class FFPage implements PageDelegate {
     });
     if (!result)
       return null;
-    return result.quads.map(quad => [quad.p1, quad.p2, quad.p3, quad.p4]);
+    return result.quads.map(quad => [ quad.p1, quad.p2, quad.p3, quad.p4 ]);
   }
 
   async setInputFiles(handle: dom.ElementHandle<HTMLInputElement>, files: types.FilePayload[]): Promise<void> {
@@ -571,14 +571,17 @@ export class FFPage implements PageDelegate {
     const parent = frame.parentFrame();
     if (!parent)
       throw new Error('Frame has been detached.');
-    const context = await parent._mainContext();
-    const result = await this._session.send('Page.adoptNode', {
-      frameId: frame._id,
-      executionContextId: ((context as any)[contextDelegateSymbol] as FFExecutionContext)._executionContextId
-    });
-    if (!result.remoteObject)
+    const info = this._page.parseSelector('frame,iframe');
+    const handles = await this._page.selectors._queryAll(parent, info);
+    const items = await Promise.all(handles.map(async handle => {
+      const frame = await handle.contentFrame().catch(e => null);
+      return { handle, frame };
+    }));
+    const result = items.find(item => item.frame === frame);
+    items.map(item => item === result ? Promise.resolve() : item.handle.dispose());
+    if (!result)
       throw new Error('Frame has been detached.');
-    return context.createHandle(result.remoteObject) as dom.ElementHandle;
+    return result.handle;
   }
 }
 
diff --git a/packages/playwright-core/src/server/firefox/firefox.ts b/packages/playwright-core/src/server/firefox/firefox.ts
index b6f6d308f16e8310ee7abf128cbf881a6e6e6e56..a4062fa375d27fdf0979925919be2ef4b0220e5b 100644
--- a/packages/playwright-core/src/server/firefox/firefox.ts
+++ b/packages/playwright-core/src/server/firefox/firefox.ts
@@ -46,6 +46,13 @@ export class Firefox extends BrowserType {
   _amendEnvironment(env: Env, userDataDir: string, executable: string, browserArguments: string[]): Env {
     if (!path.isAbsolute(os.homedir()))
       throw new Error(`Cannot launch Firefox with relative home directory. Did you set ${os.platform() === 'win32' ? 'USERPROFILE' : 'HOME'} to a relative path?`);
+    if (os.platform() === 'linux') {
+      return {
+        ...env,
+        // On linux Juggler ships the libstdc++ it was linked against.
+        LD_LIBRARY_PATH: `${path.dirname(executable)}:${process.env.LD_LIBRARY_PATH}`,
+      };
+    }
     return env;
   }
 
diff --git a/packages/playwright-core/src/server/firefox/protocol.d.ts b/packages/playwright-core/src/server/firefox/protocol.d.ts
index 2919b765d23645d5f968fc73477adbc4550c3e2c..cf55fe64eeecba633f4e2b81029e89ae2f08441b 100644
--- a/packages/playwright-core/src/server/firefox/protocol.d.ts
+++ b/packages/playwright-core/src/server/firefox/protocol.d.ts
@@ -57,7 +57,6 @@ export module Protocol {
       uuid: string;
       browserContextId?: string;
       pageTargetId: string;
-      frameId: string;
       url: string;
       suggestedFileName: string;
     }
@@ -570,7 +569,7 @@ export module Protocol {
     export type reloadReturnValue = void;
     export type adoptNodeParameters = {
       frameId: string;
-      objectId?: string;
+      objectId: string;
       executionContextId: string;
     };
     export type adoptNodeReturnValue = {
diff --git a/packages/playwright-core/src/server/frames.ts b/packages/playwright-core/src/server/frames.ts
index 9340fd3e69556acc0ba9f4f610feaeda68992042..087d8ffcd4d17278a9e2e76c9898a190d564028c 100644
--- a/packages/playwright-core/src/server/frames.ts
+++ b/packages/playwright-core/src/server/frames.ts
@@ -62,8 +62,6 @@ export type GotoResult = {
 
 type ConsoleTagHandler = () => void;
 
-type RegularLifecycleEvent = Exclude<types.LifecycleEvent, 'networkidle'>;
-
 export type FunctionWithSource = (source: { context: BrowserContext, page: Page, frame: Frame}, ...args: any) => any;
 
 export type NavigationEvent = {
@@ -281,11 +279,17 @@ export class FrameManager {
     const frame = this._frames.get(frameId);
     if (frame) {
       this._removeFramesRecursively(frame);
-      this._page.mainFrame()._recalculateNetworkIdle();
+      // Recalculate subtree lifecycle for the whole tree - it should not be that big.
+      this._page.mainFrame()._recalculateLifecycle();
     }
   }
 
-  frameLifecycleEvent(frameId: string, event: RegularLifecycleEvent) {
+  frameStoppedLoading(frameId: string) {
+    this.frameLifecycleEvent(frameId, 'domcontentloaded');
+    this.frameLifecycleEvent(frameId, 'load');
+  }
+
+  frameLifecycleEvent(frameId: string, event: types.LifecycleEvent) {
     const frame = this._frames.get(frameId);
     if (frame)
       frame._onLifecycleEvent(event);
@@ -474,8 +478,8 @@ export class Frame extends SdkObject {
   };
 
   _id: string;
-  _firedLifecycleEvents = new Set<types.LifecycleEvent>();
-  private _firedNetworkIdleSelf = false;
+  private _firedLifecycleEvents = new Set<types.LifecycleEvent>();
+  _subtreeLifecycleEvents = new Set<types.LifecycleEvent>();
   _currentDocument: DocumentInfo;
   private _pendingDocument: DocumentInfo | undefined;
   readonly _page: Page;
@@ -512,6 +516,7 @@ export class Frame extends SdkObject {
       this._parentFrame._childFrames.add(this);
 
     this._firedLifecycleEvents.add('commit');
+    this._subtreeLifecycleEvents.add('commit');
     if (id !== kDummyFrameId)
       this._startNetworkIdleTimer();
   }
@@ -520,26 +525,23 @@ export class Frame extends SdkObject {
     return this._detached;
   }
 
-  _onLifecycleEvent(event: RegularLifecycleEvent) {
+  _onLifecycleEvent(event: types.LifecycleEvent) {
     if (this._firedLifecycleEvents.has(event))
       return;
     this._firedLifecycleEvents.add(event);
-    this.emit(Frame.Events.AddLifecycle, event);
-    if (this === this._page.mainFrame() && this._url !== 'about:blank')
-      debugLogger.log('api', `  "${event}" event fired`);
-    this._page.mainFrame()._recalculateNetworkIdle();
+    // Recalculate subtree lifecycle for the whole tree - it should not be that big.
+    this._page.mainFrame()._recalculateLifecycle();
   }
 
   _onClearLifecycle() {
-    for (const event of this._firedLifecycleEvents)
-      this.emit(Frame.Events.RemoveLifecycle, event);
     this._firedLifecycleEvents.clear();
+    // Recalculate subtree lifecycle for the whole tree - it should not be that big.
+    this._page.mainFrame()._recalculateLifecycle(this);
     // Keep the current navigation request if any.
     this._inflightRequests = new Set(Array.from(this._inflightRequests).filter(request => request === this._currentDocument.request));
     this._stopNetworkIdleTimer();
     if (this._inflightRequests.size === 0)
       this._startNetworkIdleTimer();
-    this._page.mainFrame()._recalculateNetworkIdle(this);
     this._onLifecycleEvent('commit');
   }
 
@@ -597,26 +599,37 @@ export class Frame extends SdkObject {
     });
   }
 
-  _recalculateNetworkIdle(frameThatAllowsRemovingNetworkIdle?: Frame) {
-    let isNetworkIdle = this._firedNetworkIdleSelf;
+  _recalculateLifecycle(frameThatAllowsRemovingLifecycleEvents?: Frame) {
+    const events = new Set<types.LifecycleEvent>(this._firedLifecycleEvents);
     for (const child of this._childFrames) {
-      child._recalculateNetworkIdle(frameThatAllowsRemovingNetworkIdle);
-      // We require networkidle event to be fired in the whole frame subtree, and then consider it done.
-      if (!child._firedLifecycleEvents.has('networkidle'))
-        isNetworkIdle = false;
-    }
-    if (isNetworkIdle && !this._firedLifecycleEvents.has('networkidle')) {
-      this._firedLifecycleEvents.add('networkidle');
-      this.emit(Frame.Events.AddLifecycle, 'networkidle');
-      if (this === this._page.mainFrame() && this._url !== 'about:blank')
-        debugLogger.log('api', `  "networkidle" event fired`);
+      child._recalculateLifecycle(frameThatAllowsRemovingLifecycleEvents);
+      // We require a particular lifecycle event to be fired in the whole
+      // frame subtree, and then consider it done.
+      for (const event of events) {
+        if (!child._subtreeLifecycleEvents.has(event))
+          events.delete(event);
+      }
     }
-    if (frameThatAllowsRemovingNetworkIdle !== this && this._firedLifecycleEvents.has('networkidle') && !isNetworkIdle) {
-      // Usually, networkidle is fired once and not removed after that.
+    if (frameThatAllowsRemovingLifecycleEvents !== this) {
+      // Usually, lifecycle events are fired once and not removed after that, so we keep existing ones.
       // However, when we clear them right before a new commit, this is allowed for a particular frame.
-      this._firedLifecycleEvents.delete('networkidle');
-      this.emit(Frame.Events.RemoveLifecycle, 'networkidle');
+      for (const event of this._subtreeLifecycleEvents)
+        events.add(event);
     }
+    const mainFrame = this._page.mainFrame();
+    for (const event of events) {
+      // Checking whether we have already notified about this event.
+      if (!this._subtreeLifecycleEvents.has(event)) {
+        this.emit(Frame.Events.AddLifecycle, event);
+        if (this === mainFrame && this._url !== 'about:blank')
+          debugLogger.log('api', `  "${event}" event fired`);
+      }
+    }
+    for (const event of this._subtreeLifecycleEvents) {
+      if (!events.has(event))
+        this.emit(Frame.Events.RemoveLifecycle, event);
+    }
+    this._subtreeLifecycleEvents = events;
   }
 
   async raceNavigationAction(progress: Progress, options: types.GotoOptions, action: () => Promise<network.Response | null>): Promise<network.Response | null> {
@@ -693,7 +706,7 @@ export class Frame extends SdkObject {
       event = await sameDocument.promise;
     }
 
-    if (!this._firedLifecycleEvents.has(waitUntil))
+    if (!this._subtreeLifecycleEvents.has(waitUntil))
       await helper.waitForEvent(progress, this, Frame.Events.AddLifecycle, (e: types.LifecycleEvent) => e === waitUntil).promise;
 
     const request = event.newDocument ? event.newDocument.request : undefined;
@@ -702,7 +715,7 @@ export class Frame extends SdkObject {
     return response;
   }
 
-  async _waitForNavigation(progress: Progress, requiresNewDocument: boolean, options: types.NavigateOptions): Promise<network.Response | null> {
+  async _waitForNavigation(progress: Progress, options: types.NavigateOptions): Promise<network.Response | null> {
     const waitUntil = verifyLifecycle('waitUntil', options.waitUntil === undefined ? 'load' : options.waitUntil);
     progress.log(`waiting for navigation until "${waitUntil}"`);
 
@@ -710,15 +723,13 @@ export class Frame extends SdkObject {
       // Any failed navigation results in a rejection.
       if (event.error)
         return true;
-      if (requiresNewDocument && !event.newDocument)
-        return false;
       progress.log(`  navigated to "${this._url}"`);
       return true;
     }).promise;
     if (navigationEvent.error)
       throw navigationEvent.error;
 
-    if (!this._firedLifecycleEvents.has(waitUntil))
+    if (!this._subtreeLifecycleEvents.has(waitUntil))
       await helper.waitForEvent(progress, this, Frame.Events.AddLifecycle, (e: types.LifecycleEvent) => e === waitUntil).promise;
 
     const request = navigationEvent.newDocument ? navigationEvent.newDocument.request : undefined;
@@ -727,7 +738,7 @@ export class Frame extends SdkObject {
 
   async _waitForLoadState(progress: Progress, state: types.LifecycleEvent): Promise<void> {
     const waitUntil = verifyLifecycle('state', state);
-    if (!this._firedLifecycleEvents.has(waitUntil))
+    if (!this._subtreeLifecycleEvents.has(waitUntil))
       await helper.waitForEvent(progress, this, Frame.Events.AddLifecycle, (e: types.LifecycleEvent) => e === waitUntil).promise;
   }
 
@@ -1616,10 +1627,7 @@ export class Frame extends SdkObject {
     // after the frame was detached - probably a race in the Firefox itself.
     if (this._firedLifecycleEvents.has('networkidle') || this._detached)
       return;
-    this._networkIdleTimer = setTimeout(() => {
-      this._firedNetworkIdleSelf = true;
-      this._page.mainFrame()._recalculateNetworkIdle();
-    }, 500);
+    this._networkIdleTimer = setTimeout(() => this._onLifecycleEvent('networkidle'), 500);
   }
 
   _stopNetworkIdleTimer() {
@@ -1698,17 +1706,13 @@ export class Frame extends SdkObject {
     }
   }
 
-  async resetStorageForCurrentOriginBestEffort(newStorage: channels.OriginStorage | undefined) {
+  async clearStorageForCurrentOriginBestEffort() {
     const context = await this._utilityContext();
-    await context.evaluate(async ({ ls }) => {
-      // Clean DOMStorage.
+    await context.evaluate(async () => {
+      // Clean DOMStorage
       sessionStorage.clear();
       localStorage.clear();
 
-      // Add new DOM Storage values.
-      for (const entry of ls || [])
-        localStorage[entry.name] = entry.value;
-
       // Clean Service Workers
       const registrations = navigator.serviceWorker ? await navigator.serviceWorker.getRegistrations() : [];
       await Promise.all(registrations.map(r => r.unregister())).catch(() => {});
@@ -1719,7 +1723,7 @@ export class Frame extends SdkObject {
         if (db.name)
           indexedDB.deleteDatabase(db.name!);
       }
-    }, { ls: newStorage?.localStorage }).catch(() => {});
+    }).catch(() => {});
   }
 }
 
diff --git a/packages/playwright-core/src/server/har/harRecorder.ts b/packages/playwright-core/src/server/har/harRecorder.ts
index 6f175c92431cc21e818c7154de4ae9168616ce48..d4af1310fd3b431a3e3214dd8dab2b99e7d151a8 100644
--- a/packages/playwright-core/src/server/har/harRecorder.ts
+++ b/packages/playwright-core/src/server/har/harRecorder.ts
@@ -45,7 +45,6 @@ export class HarRecorder {
       content,
       slimMode: options.mode === 'minimal',
       includeTraceInfo: false,
-      recordRequestOverrides: true,
       waitForContentOnStop: true,
       skipScripts: false,
       urlFilter: urlFilterRe ?? options.urlGlob,
diff --git a/packages/playwright-core/src/server/har/harTracer.ts b/packages/playwright-core/src/server/har/harTracer.ts
index ceab8fc4eaf0eb9a51c6e761a74d159ae89bf03c..ce1ba85ff81c78ad4a0478a0b8171b656883f115 100644
--- a/packages/playwright-core/src/server/har/harTracer.ts
+++ b/packages/playwright-core/src/server/har/harTracer.ts
@@ -30,7 +30,7 @@ import { ManualPromise } from '../../utils/manualPromise';
 import { getPlaywrightVersion } from '../../common/userAgent';
 import { urlMatches } from '../../common/netUtils';
 import { Frame } from '../frames';
-import type { HeadersArray, LifecycleEvent } from '../types';
+import type { LifecycleEvent } from '../types';
 import { isTextualMimeType } from '../../utils/mimeType';
 
 const FALLBACK_HTTP_VERSION = 'HTTP/1.1';
@@ -45,7 +45,6 @@ type HarTracerOptions = {
   content: 'omit' | 'attach' | 'embed';
   skipScripts: boolean;
   includeTraceInfo: boolean;
-  recordRequestOverrides: boolean;
   waitForContentOnStop: boolean;
   urlFilter?: string | RegExp;
   slimMode?: boolean;
@@ -249,7 +248,6 @@ export class HarTracer {
     const harEntry = createHarEntry(request.method(), url, request.frame()?.guid, this._options);
     if (pageEntry)
       harEntry.pageref = pageEntry.id;
-    this._recordRequestHeadersAndCookies(harEntry, request.headers());
     harEntry.request.postData = this._postDataForRequest(request, this._options.content);
     if (!this._options.omitSizes)
       harEntry.request.bodySize = request.bodySize();
@@ -263,24 +261,6 @@ export class HarTracer {
     this._delegate.onEntryStarted(harEntry);
   }
 
-  private _recordRequestHeadersAndCookies(harEntry: har.Entry, headers: HeadersArray) {
-    if (!this._options.omitCookies) {
-      harEntry.request.cookies = [];
-      for (const header of headers.filter(header => header.name.toLowerCase() === 'cookie'))
-        harEntry.request.cookies.push(...header.value.split(';').map(parseCookie));
-    }
-    harEntry.request.headers = headers;
-  }
-
-  private _recordRequestOverrides(harEntry: har.Entry, request: network.Request) {
-    if (!request._hasOverrides() || !this._options.recordRequestOverrides)
-      return;
-    harEntry.request.method = request.method();
-    harEntry.request.url = request.url();
-    harEntry.request.postData = this._postDataForRequest(request, this._options.content);
-    this._recordRequestHeadersAndCookies(harEntry, request.headers());
-  }
-
   private async _onRequestFinished(request: network.Request, response: network.Response | null) {
     if (!response)
       return;
@@ -350,7 +330,6 @@ export class HarTracer {
 
     if (request._failureText !== null)
       harEntry.response._failureText = request._failureText;
-    this._recordRequestOverrides(harEntry, request);
     if (this._started)
       this._delegate.onEntryFinished(harEntry);
   }
@@ -444,9 +423,12 @@ export class HarTracer {
           harEntry._securityDetails = details;
       }));
     }
-    this._recordRequestOverrides(harEntry, request);
     this._addBarrier(page || request.serviceWorker(), request.rawRequestHeaders().then(headers => {
-      this._recordRequestHeadersAndCookies(harEntry, headers);
+      if (!this._options.omitCookies) {
+        for (const header of headers.filter(header => header.name.toLowerCase() === 'cookie'))
+          harEntry.request.cookies.push(...header.value.split(';').map(parseCookie));
+      }
+      harEntry.request.headers = headers;
     }));
     this._addBarrier(page || request.serviceWorker(), response.rawResponseHeaders().then(headers => {
       if (!this._options.omitCookies) {
diff --git a/packages/playwright-core/src/server/index.ts b/packages/playwright-core/src/server/index.ts
index 3daf49da02871df6cf0ae45fb5b152c49fee06cb..5354d86ab32949f64addf9bbbd6921e7ef88fb5c 100644
--- a/packages/playwright-core/src/server/index.ts
+++ b/packages/playwright-core/src/server/index.ts
@@ -23,7 +23,7 @@ export {
   installBrowsersForNpmInstall,
   writeDockerVersion } from './registry';
 
-export { DispatcherConnection, RootDispatcher } from './dispatchers/dispatcher';
+export { DispatcherConnection, Root } from './dispatchers/dispatcher';
 export { PlaywrightDispatcher } from './dispatchers/playwrightDispatcher';
 export { createPlaywright } from './playwright';
 
diff --git a/packages/playwright-core/src/server/injected/injectedScript.ts b/packages/playwright-core/src/server/injected/injectedScript.ts
index df9f119887ab12b3c0d05f4eb64d075b7f71b97e..accc02bf455ce5bbf2639f97b9c020036f567079 100644
--- a/packages/playwright-core/src/server/injected/injectedScript.ts
+++ b/packages/playwright-core/src/server/injected/injectedScript.ts
@@ -21,9 +21,9 @@ import { VueEngine } from './vueSelectorEngine';
 import { RoleEngine } from './roleSelectorEngine';
 import type { NestedSelectorBody, ParsedSelector, ParsedSelectorPart } from '../isomorphic/selectorParser';
 import { allEngineNames, parseSelector, stringifySelector } from '../isomorphic/selectorParser';
-import { type TextMatcher, elementMatchesText, createRegexTextMatcher, createStrictTextMatcher, createLaxTextMatcher, elementText } from './selectorUtils';
+import { type TextMatcher, elementMatchesText, createRegexTextMatcher, createStrictTextMatcher, createLaxTextMatcher } from './selectorUtils';
 import { SelectorEvaluatorImpl } from './selectorEvaluator';
-import { enclosingShadowRootOrDocument, isElementVisible, parentElementOrShadowHost } from './domUtils';
+import { isElementVisible, parentElementOrShadowHost } from './domUtils';
 import type { CSSComplexSelectorList } from '../isomorphic/cssParser';
 import { generateSelector } from './selectorGenerator';
 import type * as channels from '../../protocol/channels';
@@ -437,18 +437,14 @@ export class InjectedScript {
     return { left: parseInt(style.borderLeftWidth || '', 10), top: parseInt(style.borderTopWidth || '', 10) };
   }
 
-  retarget(node: Node, behavior: 'none' | 'follow-label' | 'no-follow-label' | 'button-link'): Element | null {
+  retarget(node: Node, behavior: 'none' | 'follow-label' | 'no-follow-label'): Element | null {
     let element = node.nodeType === Node.ELEMENT_NODE ? node as Element : node.parentElement;
     if (!element)
       return null;
     if (behavior === 'none')
       return element;
-    if (!element.matches('input, textarea, select')) {
-      if (behavior === 'button-link')
-        element = element.closest('button, [role=button], a, [role=link]') || element;
-      else
-        element = element.closest('button, [role=button], [role=checkbox], [role=radio]') || element;
-    }
+    if (!element.matches('input, textarea, select'))
+      element = element.closest('button, [role=button], [role=checkbox], [role=radio]') || element;
     if (behavior === 'follow-label') {
       if (!element.matches('input, textarea, button, select, [role=button], [role=checkbox], [role=radio]') &&
         !(element as any).isContentEditable) {
@@ -726,49 +722,8 @@ export class InjectedScript {
     input.dispatchEvent(new Event('change', { 'bubbles': true }));
   }
 
-  expectHitTarget(hitPoint: { x: number, y: number }, targetElement: Element) {
-    const roots: (Document | ShadowRoot)[] = [];
-
-    // Get all component roots leading to the target element.
-    // Go from the bottom to the top to make it work with closed shadow roots.
-    let parentElement = targetElement;
-    while (parentElement) {
-      const root = enclosingShadowRootOrDocument(parentElement);
-      if (!root)
-        break;
-      roots.push(root);
-      if (root.nodeType === 9 /* Node.DOCUMENT_NODE */)
-        break;
-      parentElement = (root as ShadowRoot).host;
-    }
-
-    // Hit target in each component root should point to the next component root.
-    // Hit target in the last component root should point to the target or its descendant.
-    let hitElement: Element | undefined;
-    for (let index = roots.length - 1; index >= 0; index--) {
-      const root = roots[index];
-      // All browsers have different behavior around elementFromPoint and elementsFromPoint.
-      // https://github.com/w3c/csswg-drafts/issues/556
-      // http://crbug.com/1188919
-      const elements: Element[] = root.elementsFromPoint(hitPoint.x, hitPoint.y);
-      const singleElement = root.elementFromPoint(hitPoint.x, hitPoint.y);
-      if (singleElement && elements[0] && parentElementOrShadowHost(singleElement) === elements[0]) {
-        const style = document.defaultView?.getComputedStyle(singleElement);
-        if (style?.display === 'contents') {
-          // Workaround a case where elementsFromPoint misses the inner-most element with display:contents.
-          // https://bugs.chromium.org/p/chromium/issues/detail?id=1342092
-          elements.unshift(singleElement);
-        }
-      }
-      const innerElement = elements[0] as Element | undefined;
-      if (!innerElement)
-        break;
-      hitElement = innerElement;
-      if (index && innerElement !== (roots[index - 1] as ShadowRoot).host)
-        break;
-    }
-
-    // Check whether hit target is the target or its descendant.
+  expectHitTargetParent(hitElement: Element | undefined, targetElement: Element) {
+    targetElement = targetElement.closest('button, [role=button], a, [role=link]') || targetElement;
     const hitParents: Element[] = [];
     while (hitElement && hitElement !== targetElement) {
       hitParents.push(hitElement);
@@ -776,7 +731,6 @@ export class InjectedScript {
     }
     if (hitElement === targetElement)
       return 'done';
-
     const hitTargetDescription = this.previewNode(hitParents[0] || document.documentElement);
     // Root is the topmost element in the hitTarget's chain that is not in the
     // element's chain. For example, it might be a dialog element that overlays
@@ -828,13 +782,14 @@ export class InjectedScript {
   //     2l. All navigations triggered between 2g-2k are awaited to be either committed or canceled.
   //     2m. If failed, wait for increasing amount of time before the next retry.
   setupHitTargetInterceptor(node: Node, action: 'hover' | 'tap' | 'mouse' | 'drag', hitPoint: { x: number, y: number }, blockAllEvents: boolean): HitTargetInterceptionResult | 'error:notconnected' | string /* hitTargetDescription */ {
-    const element = this.retarget(node, 'button-link');
+    const element: Element | null | undefined = node.nodeType === Node.ELEMENT_NODE ? (node as Element) : node.parentElement;
     if (!element || !element.isConnected)
       return 'error:notconnected';
 
     // First do a preliminary check, to reduce the possibility of some iframe
     // intercepting the action.
-    const preliminaryResult = this.expectHitTarget(hitPoint, element);
+    const preliminaryHitElement = this.deepElementFromPoint(document, hitPoint.x, hitPoint.y);
+    const preliminaryResult = this.expectHitTargetParent(preliminaryHitElement, element);
     if (preliminaryResult !== 'done')
       return preliminaryResult.hitTargetDescription;
 
@@ -867,8 +822,10 @@ export class InjectedScript {
 
       // Check that we hit the right element at the first event, and assume all
       // subsequent events will be fine.
-      if (result === undefined && point)
-        result = this.expectHitTarget({ x: point.clientX, y: point.clientY }, element);
+      if (result === undefined && point) {
+        const hitElement = this.deepElementFromPoint(document, point.clientX, point.clientY);
+        result = this.expectHitTargetParent(hitElement, element);
+      }
 
       if (blockAllEvents || (result !== 'done' && result !== undefined)) {
         event.preventDefault();
@@ -909,6 +866,32 @@ export class InjectedScript {
     node.dispatchEvent(event);
   }
 
+  deepElementFromPoint(document: Document, x: number, y: number): Element | undefined {
+    let container: Document | ShadowRoot | null = document;
+    let element: Element | undefined;
+    while (container) {
+      // All browsers have different behavior around elementFromPoint and elementsFromPoint.
+      // https://github.com/w3c/csswg-drafts/issues/556
+      // http://crbug.com/1188919
+      const elements: Element[] = container.elementsFromPoint(x, y);
+      const singleElement = container.elementFromPoint(x, y);
+      if (singleElement && elements[0] && parentElementOrShadowHost(singleElement) === elements[0]) {
+        const style = document.defaultView?.getComputedStyle(singleElement);
+        if (style?.display === 'contents') {
+          // Workaround a case where elementsFromPoint misses the inner-most element with display:contents.
+          // https://bugs.chromium.org/p/chromium/issues/detail?id=1342092
+          elements.unshift(singleElement);
+        }
+      }
+      const innerElement = elements[0] as Element | undefined;
+      if (!innerElement || element === innerElement)
+        break;
+      element = innerElement;
+      container = element.shadowRoot;
+    }
+    return element;
+  }
+
   previewNode(node: Node): string {
     if (node.nodeType === Node.TEXT_NODE)
       return oneLine(`#text=${node.nodeValue || ''}`);
@@ -1038,9 +1021,7 @@ export class InjectedScript {
     {
       // Element state / boolean values.
       let elementState: boolean | 'error:notconnected' | 'error:notcheckbox' | undefined;
-      if (expression === 'to.have.attribute') {
-        elementState = element.hasAttribute(options.expressionArg);
-      } else if (expression === 'to.be.checked') {
+      if (expression === 'to.be.checked') {
         elementState = progress.injectedScript.elementState(element, 'checked');
       } else if (expression === 'to.be.unchecked') {
         elementState = progress.injectedScript.elementState(element, 'unchecked');
@@ -1048,8 +1029,6 @@ export class InjectedScript {
         elementState = progress.injectedScript.elementState(element, 'disabled');
       } else if (expression === 'to.be.editable') {
         elementState = progress.injectedScript.elementState(element, 'editable');
-      } else if (expression === 'to.be.readonly') {
-        elementState = !progress.injectedScript.elementState(element, 'editable');
       } else if (expression === 'to.be.empty') {
         if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA')
           elementState = !(element as HTMLInputElement).value;
@@ -1100,7 +1079,7 @@ export class InjectedScript {
     {
       // Single text value.
       let received: string | undefined;
-      if (expression === 'to.have.attribute.value') {
+      if (expression === 'to.have.attribute') {
         received = element.getAttribute(options.expressionArg) || '';
       } else if (expression === 'to.have.class') {
         received = element.classList.toString();
@@ -1109,7 +1088,7 @@ export class InjectedScript {
       } else if (expression === 'to.have.id') {
         received = element.id;
       } else if (expression === 'to.have.text') {
-        received = options.useInnerText ? (element as HTMLElement).innerText : elementText(new Map(), element).full;
+        received = options.useInnerText ? (element as HTMLElement).innerText : element.textContent || '';
       } else if (expression === 'to.have.title') {
         received = document.title;
       } else if (expression === 'to.have.url') {
@@ -1142,7 +1121,7 @@ export class InjectedScript {
     // List of values.
     let received: string[] | undefined;
     if (expression === 'to.have.text.array' || expression === 'to.contain.text.array')
-      received = elements.map(e => options.useInnerText ? (e as HTMLElement).innerText : elementText(new Map(), e).full);
+      received = elements.map(e => options.useInnerText ? (e as HTMLElement).innerText : e.textContent || '');
     else if (expression === 'to.have.class.array')
       received = elements.map(e => e.classList.toString());
 
diff --git a/packages/playwright-core/src/server/injected/selectorGenerator.ts b/packages/playwright-core/src/server/injected/selectorGenerator.ts
index 9072c87075137a90e141b0703d103af139c50969..6df906d36ac446a0a7692e59749f769e625433d8 100644
--- a/packages/playwright-core/src/server/injected/selectorGenerator.ts
+++ b/packages/playwright-core/src/server/injected/selectorGenerator.ts
@@ -159,7 +159,7 @@ function buildCandidates(injectedScript: InjectedScript, element: Element): Sele
     candidates.push({ engine: 'css', selector: `${cssEscape(element.nodeName.toLowerCase())}[alt=${quoteAttributeValue(element.getAttribute('alt')!)}]`, score: 10 });
 
   if (element.getAttribute('role'))
-    candidates.push({ engine: 'css', selector: `${cssEscape(element.nodeName.toLowerCase())}[role=${quoteAttributeValue(element.getAttribute('role')!)}]`, score: 50 });
+    candidates.push({ engine: 'css', selector: `${cssEscape(element.nodeName.toLowerCase())}[role=${quoteAttributeValue(element.getAttribute('role')!)}]` , score: 50 });
 
   if (element.getAttribute('name') && ['BUTTON', 'FORM', 'FIELDSET', 'FRAME', 'IFRAME', 'INPUT', 'KEYGEN', 'OBJECT', 'OUTPUT', 'SELECT', 'TEXTAREA', 'MAP', 'META', 'PARAM'].includes(element.nodeName))
     candidates.push({ engine: 'css', selector: `${cssEscape(element.nodeName.toLowerCase())}[name=${quoteAttributeValue(element.getAttribute('name')!)}]`, score: 50 });
diff --git a/packages/playwright-core/src/server/isomorphic/utilityScriptSerializers.ts b/packages/playwright-core/src/server/isomorphic/utilityScriptSerializers.ts
index 5371d0aa79b33618cbefb7118bf7ddd6e3670a35..1f8799d269e0c8e6e28a4196f6f8c3de7532a29d 100644
--- a/packages/playwright-core/src/server/isomorphic/utilityScriptSerializers.ts
+++ b/packages/playwright-core/src/server/isomorphic/utilityScriptSerializers.ts
@@ -107,11 +107,11 @@ export function source() {
 
   function serialize(value: any, handleSerializer: (value: any) => HandleOrValue, visitorInfo: VisitorInfo): SerializedValue {
     if (value && typeof value === 'object') {
-      if (typeof globalThis.Window === 'function' && value instanceof globalThis.Window)
+      if (globalThis.Window && value instanceof globalThis.Window)
         return 'ref: <Window>';
-      if (typeof globalThis.Document === 'function' && value instanceof globalThis.Document)
+      if (globalThis.Document && value instanceof globalThis.Document)
         return 'ref: <Document>';
-      if (typeof globalThis.Node === 'function' && value instanceof globalThis.Node)
+      if (globalThis.Node && value instanceof globalThis.Node)
         return 'ref: <Node>';
     }
     return innerSerialize(value, handleSerializer, visitorInfo);
diff --git a/packages/playwright-core/src/server/network.ts b/packages/playwright-core/src/server/network.ts
index 1294d6878ef1d22981c75b0c46685d91c40ee1b9..d23fad9a7bb79a11ffc64c11ee0d1118c7b61e71 100644
--- a/packages/playwright-core/src/server/network.ts
+++ b/packages/playwright-core/src/server/network.ts
@@ -22,9 +22,8 @@ import type * as channels from '../protocol/channels';
 import { assert } from '../utils';
 import { ManualPromise } from '../utils/manualPromise';
 import { SdkObject } from './instrumentation';
-import type { HeadersArray, NameValue } from '../common/types';
+import type { NameValue } from '../common/types';
 import { APIRequestContext } from './fetch';
-import type { NormalizedContinueOverrides } from './types';
 
 export function filterCookies(cookies: channels.NetworkCookie[], urls: string[]): channels.NetworkCookie[] {
   const parsedURLs = urls.map(s => new URL(s));
@@ -98,18 +97,17 @@ export class Request extends SdkObject {
   private _resourceType: string;
   private _method: string;
   private _postData: Buffer | null;
-  readonly _headers: HeadersArray;
+  readonly _headers: types.HeadersArray;
   private _headersMap = new Map<string, string>();
   readonly _frame: frames.Frame | null = null;
   readonly _serviceWorker: pages.Worker | null = null;
   readonly _context: contexts.BrowserContext;
-  private _rawRequestHeadersPromise = new ManualPromise<HeadersArray>();
+  private _rawRequestHeadersPromise = new ManualPromise<types.HeadersArray>();
   private _waitForResponsePromise = new ManualPromise<Response | null>();
   _responseEndTiming = -1;
-  private _overrides: NormalizedContinueOverrides | undefined;
 
   constructor(context: contexts.BrowserContext, frame: frames.Frame | null, serviceWorker: pages.Worker | null, redirectedFrom: Request | null, documentId: string | undefined,
-    url: string, resourceType: string, method: string, postData: Buffer | null, headers: HeadersArray) {
+    url: string, resourceType: string, method: string, postData: Buffer | null, headers: types.HeadersArray) {
     super(frame || context, 'request');
     assert(!url.startsWith('data:'), 'Data urls should not fire requests');
     this._context = context;
@@ -124,7 +122,8 @@ export class Request extends SdkObject {
     this._method = method;
     this._postData = postData;
     this._headers = headers;
-    this._updateHeadersMap();
+    for (const { name, value } of this._headers)
+      this._headersMap.set(name.toLowerCase(), value);
     this._isFavicon = url.endsWith('/favicon.ico') || !!redirectedFrom?._isFavicon;
   }
 
@@ -133,22 +132,8 @@ export class Request extends SdkObject {
     this._waitForResponsePromise.resolve(null);
   }
 
-  _setOverrides(overrides: types.NormalizedContinueOverrides) {
-    this._overrides = overrides;
-    this._updateHeadersMap();
-  }
-
-  private _updateHeadersMap() {
-    for (const { name, value } of this.headers())
-      this._headersMap.set(name.toLowerCase(), value);
-  }
-
-  _hasOverrides() {
-    return !!this._overrides;
-  }
-
   url(): string {
-    return this._overrides?.url || this._url;
+    return this._url;
   }
 
   resourceType(): string {
@@ -156,15 +141,15 @@ export class Request extends SdkObject {
   }
 
   method(): string {
-    return this._overrides?.method || this._method;
+    return this._method;
   }
 
   postDataBuffer(): Buffer | null {
-    return this._overrides?.postData || this._postData;
+    return this._postData;
   }
 
-  headers(): HeadersArray {
-    return this._overrides?.headers || this._headers;
+  headers(): types.HeadersArray {
+    return this._headers;
   }
 
   headerValue(name: string): string | undefined {
@@ -172,13 +157,13 @@ export class Request extends SdkObject {
   }
 
   // "null" means no raw headers available - we'll use provisional headers as raw headers.
-  setRawRequestHeaders(headers: HeadersArray | null) {
+  setRawRequestHeaders(headers: types.HeadersArray | null) {
     if (!this._rawRequestHeadersPromise.isDone())
       this._rawRequestHeadersPromise.resolve(headers || this._headers);
   }
 
-  async rawRequestHeaders(): Promise<HeadersArray> {
-    return this._overrides?.headers || this._rawRequestHeadersPromise;
+  async rawRequestHeaders(): Promise<NameValue[]> {
+    return this._rawRequestHeadersPromise;
   }
 
   response(): PromiseLike<Response | null> {
@@ -244,7 +229,7 @@ export class Route extends SdkObject {
   private _handled = false;
 
   constructor(request: Request, delegate: RouteDelegate) {
-    super(request._frame || request._context, 'route');
+    super(request._frame || request._context , 'route');
     this._request = request;
     this._delegate = delegate;
     this._request._context.addRouteInFlight(this);
@@ -318,7 +303,6 @@ export class Route extends SdkObject {
       if (oldUrl.protocol !== newUrl.protocol)
         throw new Error('New URL must have same protocol as overridden URL');
     }
-    this._request._setOverrides(overrides);
     await this._delegate.continue(this._request, overrides);
     this._endHandling();
   }
@@ -376,20 +360,20 @@ export class Response extends SdkObject {
   private _status: number;
   private _statusText: string;
   private _url: string;
-  private _headers: HeadersArray;
+  private _headers: types.HeadersArray;
   private _headersMap = new Map<string, string>();
   private _getResponseBodyCallback: GetResponseBodyCallback;
   private _timing: ResourceTiming;
   private _serverAddrPromise = new ManualPromise<RemoteAddr | undefined>();
   private _securityDetailsPromise = new ManualPromise<SecurityDetails | undefined>();
-  private _rawResponseHeadersPromise = new ManualPromise<HeadersArray>();
+  private _rawResponseHeadersPromise = new ManualPromise<types.HeadersArray>();
   private _httpVersion: string | undefined;
   private _fromServiceWorker: boolean;
   private _encodedBodySizePromise = new ManualPromise<number | null>();
   private _transferSizePromise = new ManualPromise<number | null>();
   private _responseHeadersSizePromise = new ManualPromise<number | null>();
 
-  constructor(request: Request, status: number, statusText: string, headers: HeadersArray, timing: ResourceTiming, getResponseBodyCallback: GetResponseBodyCallback, fromServiceWorker: boolean, httpVersion?: string) {
+  constructor(request: Request, status: number, statusText: string, headers: types.HeadersArray, timing: ResourceTiming, getResponseBodyCallback: GetResponseBodyCallback, fromServiceWorker: boolean, httpVersion?: string) {
     super(request.frame() || request._context, 'response');
     this._request = request;
     this._timing = timing;
@@ -434,7 +418,7 @@ export class Response extends SdkObject {
     return this._statusText;
   }
 
-  headers(): HeadersArray {
+  headers(): types.HeadersArray {
     return this._headers;
   }
 
@@ -447,7 +431,7 @@ export class Response extends SdkObject {
   }
 
   // "null" means no raw headers available - we'll use provisional headers as raw headers.
-  setRawResponseHeaders(headers: HeadersArray | null) {
+  setRawResponseHeaders(headers: types.HeadersArray | null) {
     if (!this._rawResponseHeadersPromise.isDone())
       this._rawResponseHeadersPromise.resolve(headers || this._headers);
   }
@@ -674,11 +658,11 @@ export const STATUS_TEXTS: { [status: string]: string } = {
   '511': 'Network Authentication Required',
 };
 
-export function singleHeader(name: string, value: string): HeadersArray {
+export function singleHeader(name: string, value: string): types.HeadersArray {
   return [{ name, value }];
 }
 
-export function mergeHeaders(headers: (HeadersArray | undefined | null)[]): HeadersArray {
+export function mergeHeaders(headers: (types.HeadersArray | undefined | null)[]): types.HeadersArray {
   const lowerCaseToValue = new Map<string, string>();
   const lowerCaseToOriginalCase = new Map<string, string>();
   for (const h of headers) {
@@ -690,7 +674,7 @@ export function mergeHeaders(headers: (HeadersArray | undefined | null)[]): Head
       lowerCaseToValue.set(lower, value);
     }
   }
-  const result: HeadersArray = [];
+  const result: types.HeadersArray = [];
   for (const [lower, value] of lowerCaseToValue)
     result.push({ name: lowerCaseToOriginalCase.get(lower)!, value });
   return result;
diff --git a/packages/playwright-core/src/server/page.ts b/packages/playwright-core/src/server/page.ts
index c07e4aa11703072977c6a0c084c702276e9d680d..fa42ef0a88b229180f14818955425fd201290556 100644
--- a/packages/playwright-core/src/server/page.ts
+++ b/packages/playwright-core/src/server/page.ts
@@ -372,8 +372,7 @@ export class Page extends SdkObject {
       // Note: waitForNavigation may fail before we get response to reload(),
       // so we should await it immediately.
       const [response] = await Promise.all([
-        // Reload must be a new document, and should not be confused with a stray pushState.
-        this.mainFrame()._waitForNavigation(progress, true /* requiresNewDocument */, options),
+        this.mainFrame()._waitForNavigation(progress, options),
         this._delegate.reload(),
       ]);
       await this._doSlowMo();
@@ -387,7 +386,7 @@ export class Page extends SdkObject {
       // Note: waitForNavigation may fail before we get response to goBack,
       // so we should catch it immediately.
       let error: Error | undefined;
-      const waitPromise = this.mainFrame()._waitForNavigation(progress, false /* requiresNewDocument */, options).catch(e => {
+      const waitPromise = this.mainFrame()._waitForNavigation(progress, options).catch(e => {
         error = e;
         return null;
       });
@@ -408,7 +407,7 @@ export class Page extends SdkObject {
       // Note: waitForNavigation may fail before we get response to goForward,
       // so we should catch it immediately.
       let error: Error | undefined;
-      const waitPromise = this.mainFrame()._waitForNavigation(progress, false /* requiresNewDocument */, options).catch(e => {
+      const waitPromise = this.mainFrame()._waitForNavigation(progress, options).catch(e => {
         error = e;
         return null;
       });
diff --git a/packages/playwright-core/src/server/pipeTransport.ts b/packages/playwright-core/src/server/pipeTransport.ts
index cd8e31cb9401e78b5f8ffd9245d28d3c068fc02f..c873dd7d92e40b0a538bc37437dd7cce3d7028d3 100644
--- a/packages/playwright-core/src/server/pipeTransport.ts
+++ b/packages/playwright-core/src/server/pipeTransport.ts
@@ -22,7 +22,7 @@ import { debugLogger } from '../common/debugLogger';
 export class PipeTransport implements ConnectionTransport {
   private _pipeRead: NodeJS.ReadableStream;
   private _pipeWrite: NodeJS.WritableStream;
-  private _pendingBuffers: Buffer[] = [];
+  private _pendingMessage = '';
   private _waitForNextTask = makeWaitForNextTask();
   private _closed = false;
   private _onclose?: () => void;
@@ -67,11 +67,10 @@ export class PipeTransport implements ConnectionTransport {
   _dispatch(buffer: Buffer) {
     let end = buffer.indexOf('\0');
     if (end === -1) {
-      this._pendingBuffers.push(buffer);
+      this._pendingMessage += buffer.toString();
       return;
     }
-    this._pendingBuffers.push(buffer.slice(0, end));
-    const message = Buffer.concat(this._pendingBuffers).toString();
+    const message = this._pendingMessage + buffer.toString(undefined, 0, end);
     this._waitForNextTask(() => {
       if (this.onmessage)
         this.onmessage.call(null, JSON.parse(message));
@@ -88,6 +87,6 @@ export class PipeTransport implements ConnectionTransport {
       start = end + 1;
       end = buffer.indexOf('\0', start);
     }
-    this._pendingBuffers = [buffer.slice(start)];
+    this._pendingMessage = buffer.toString(undefined, start);
   }
 }
diff --git a/packages/playwright-core/src/server/recorder.ts b/packages/playwright-core/src/server/recorder.ts
index b1174b63f5cf4bf2bb5e0d8718de7fe62348d311..457c108dd1b6ce4db64842531055949debf5716f 100644
--- a/packages/playwright-core/src/server/recorder.ts
+++ b/packages/playwright-core/src/server/recorder.ts
@@ -251,14 +251,14 @@ export class Recorder implements InstrumentationListener {
       const { file, line } = metadata.stack[0];
       let source = this._userSources.get(file);
       if (!source) {
-        source = { isRecorded: false, label: file, id: file, text: this._readSource(file), highlight: [], language: languageForFile(file) };
+        source = { isRecorded: false, file, text: this._readSource(file), highlight: [], language: languageForFile(file) };
         this._userSources.set(file, source);
       }
       if (line) {
         const paused = this._debugger.isPaused(metadata);
         source.highlight.push({ line, type: metadata.error ? 'error' : (paused ? 'paused' : 'running') });
         source.revealLine = line;
-        fileToSelect = source.id;
+        fileToSelect = source.file;
       }
     }
     this._pushAllSources();
@@ -333,9 +333,7 @@ class ContextRecorder extends EventEmitter {
       for (const languageGenerator of this._orderedLanguages) {
         const source: Source = {
           isRecorded: true,
-          label: languageGenerator.name,
-          group: languageGenerator.groupName,
-          id: languageGenerator.id,
+          file: languageGenerator.fileName,
           text: generator.generateText(languageGenerator),
           language: languageGenerator.highlighter,
           highlight: []
@@ -347,7 +345,7 @@ class ContextRecorder extends EventEmitter {
       }
       this.emit(ContextRecorder.Events.Change, {
         sources: this._recorderSources,
-        primaryFileName: this._orderedLanguages[0].id
+        primaryFileName: this._orderedLanguages[0].fileName
       });
     });
     context.on(BrowserContext.Events.BeforeClose, () => {
@@ -362,14 +360,12 @@ class ContextRecorder extends EventEmitter {
   setOutput(language: string, outputFile: string | undefined) {
     const languages = new Set([
       new JavaLanguageGenerator(),
-      new JavaScriptLanguageGenerator(/* isPlaywrightTest */false),
-      new JavaScriptLanguageGenerator(/* isPlaywrightTest */true),
-      new PythonLanguageGenerator(/* isAsync */false, /* isPytest */true),
-      new PythonLanguageGenerator(/* isAsync */false, /* isPytest */false),
-      new PythonLanguageGenerator(/* isAsync */true,  /* isPytest */false),
-      new CSharpLanguageGenerator('mstest'),
-      new CSharpLanguageGenerator('nunit'),
-      new CSharpLanguageGenerator('library'),
+      new JavaScriptLanguageGenerator(false),
+      new JavaScriptLanguageGenerator(true),
+      new PythonLanguageGenerator(false, false),
+      new PythonLanguageGenerator(true, false),
+      new PythonLanguageGenerator(false, true),
+      new CSharpLanguageGenerator(),
     ]);
     const primaryLanguage = [...languages].find(l => l.id === language);
     if (!primaryLanguage)
diff --git a/packages/playwright-core/src/server/recorder/csharp.ts b/packages/playwright-core/src/server/recorder/csharp.ts
index 33d52471ff04c88cba79c07b5cd94835bfec61a2..ecc62868c0998aad3e5827dc141f277b34c47562 100644
--- a/packages/playwright-core/src/server/recorder/csharp.ts
+++ b/packages/playwright-core/src/server/recorder/csharp.ts
@@ -25,46 +25,16 @@ import { toModifiers } from './utils';
 import { escapeWithQuotes } from '../../utils/isomorphic/stringUtils';
 import deviceDescriptors from '../deviceDescriptors';
 
-type CSharpLanguageMode = 'library' | 'mstest' | 'nunit';
-
 export class CSharpLanguageGenerator implements LanguageGenerator {
-  id: string;
-  groupName = '.NET C#';
-  name: string;
+  id = 'csharp';
+  fileName = 'C#';
   highlighter = 'csharp';
-  _mode: CSharpLanguageMode;
-
-  constructor(mode: CSharpLanguageMode) {
-    if (mode === 'library') {
-      this.name = 'Library';
-      this.id = 'csharp';
-    } else if (mode === 'mstest') {
-      this.name = 'MSTest';
-      this.id = 'csharp-mstest';
-    } else if (mode === 'nunit') {
-      this.name = 'NUnit';
-      this.id = 'csharp-nunit';
-    } else {
-      throw new Error(`Unknown C# language mode: ${mode}`);
-    }
-    this._mode = mode;
-  }
 
   generateAction(actionInContext: ActionInContext): string {
-    const action = this._generateActionInner(actionInContext);
-    if (action)
-      return action + '\n';
-    return '';
-  }
-
-  _generateActionInner(actionInContext: ActionInContext): string {
     const action = actionInContext.action;
-    if (this._mode !== 'library' && (action.name === 'openPage' || action.name === 'closePage'))
-      return '';
-    let pageAlias = actionInContext.frame.pageAlias;
-    if (this._mode !== 'library')
-      pageAlias = pageAlias.replace('page', 'Page');
+    const pageAlias = actionInContext.frame.pageAlias;
     const formatter = new CSharpFormatter(8);
+    formatter.newLine();
     formatter.add('// ' + actionTitle(action));
 
     if (action.name === 'openPage') {
@@ -166,12 +136,6 @@ export class CSharpLanguageGenerator implements LanguageGenerator {
   }
 
   generateHeader(options: LanguageGeneratorOptions): string {
-    if (this._mode === 'library')
-      return this.generateStandaloneHeader(options);
-    return this.generateTestRunnerHeader(options);
-  }
-
-  generateStandaloneHeader(options: LanguageGeneratorOptions): string {
     const formatter = new CSharpFormatter(0);
     formatter.add(`
       using Microsoft.Playwright;
@@ -185,31 +149,6 @@ export class CSharpLanguageGenerator implements LanguageGenerator {
               using var playwright = await Playwright.CreateAsync();
               await using var browser = await playwright.${toPascal(options.browserName)}.LaunchAsync(${formatObject(options.launchOptions, '    ', 'BrowserTypeLaunchOptions')});
               var context = await browser.NewContextAsync(${formatContextOptions(options.contextOptions, options.deviceName)});`);
-    formatter.newLine();
-    return formatter.format();
-  }
-
-  generateTestRunnerHeader(options: LanguageGeneratorOptions): string {
-    const formatter = new CSharpFormatter(0);
-    formatter.add(`
-      using Microsoft.Playwright.${this._mode === 'nunit' ? 'NUnit' : 'MSTest'};
-      using Microsoft.Playwright;
-
-      ${this._mode === 'nunit' ? `[Parallelizable(ParallelScope.Self)]
-      [TestFixture]` : '[TestClass]'}
-      public class Tests : PageTest
-      {`);
-    const formattedContextOptions = formatContextOptions(options.contextOptions, options.deviceName);
-    if (formattedContextOptions) {
-      formatter.add(`public override BrowserNewContextOptions ContextOptions()
-      {
-          return ${formattedContextOptions};
-      }`);
-      formatter.newLine();
-    }
-    formatter.add(`    [${this._mode === 'nunit' ? 'PlaywrightTest' : 'PlaywrightTestMethod'}]
-    public async Task MyTest()
-    {`);
     return formatter.format();
   }
 
diff --git a/packages/playwright-core/src/server/recorder/java.ts b/packages/playwright-core/src/server/recorder/java.ts
index c0221a69ce567d2fa2ae63ce3507778ba9ae203d..af08e8af966baa061b97b8b422a91428e424fb80 100644
--- a/packages/playwright-core/src/server/recorder/java.ts
+++ b/packages/playwright-core/src/server/recorder/java.ts
@@ -28,8 +28,7 @@ import { escapeWithQuotes } from '../../utils/isomorphic/stringUtils';
 
 export class JavaLanguageGenerator implements LanguageGenerator {
   id = 'java';
-  groupName = 'Java';
-  name = 'Library';
+  fileName = 'Java';
   highlighter = 'java';
 
   generateAction(actionInContext: ActionInContext): string {
diff --git a/packages/playwright-core/src/server/recorder/javascript.ts b/packages/playwright-core/src/server/recorder/javascript.ts
index af5118d5a14111cfccd7018e36d764481daf8fd3..3182c7cdf8f39e7ab1b9ac74d3d09ec00077c13a 100644
--- a/packages/playwright-core/src/server/recorder/javascript.ts
+++ b/packages/playwright-core/src/server/recorder/javascript.ts
@@ -27,14 +27,13 @@ import { escapeWithQuotes } from '../../utils/isomorphic/stringUtils';
 
 export class JavaScriptLanguageGenerator implements LanguageGenerator {
   id: string;
-  groupName = 'Node.js';
-  name: string;
+  fileName: string;
   highlighter = 'javascript';
   private _isTest: boolean;
 
   constructor(isTest: boolean) {
     this.id = isTest ? 'test' : 'javascript';
-    this.name = isTest ? 'Test Runner' : 'Library';
+    this.fileName = isTest ? 'Playwright Test' : 'JavaScript';
     this._isTest = isTest;
   }
 
diff --git a/packages/playwright-core/src/server/recorder/language.ts b/packages/playwright-core/src/server/recorder/language.ts
index b646c76807a7c20d81ea179d731f282178fa2a1b..2d93fbbed7135228697a07a348727e541b82ea32 100644
--- a/packages/playwright-core/src/server/recorder/language.ts
+++ b/packages/playwright-core/src/server/recorder/language.ts
@@ -28,8 +28,7 @@ export type LanguageGeneratorOptions = {
 
 export interface LanguageGenerator {
   id: string;
-  groupName: string;
-  name: string;
+  fileName: string;
   highlighter: string;
   generateHeader(options: LanguageGeneratorOptions): string;
   generateAction(actionInContext: ActionInContext): string;
diff --git a/packages/playwright-core/src/server/recorder/python.ts b/packages/playwright-core/src/server/recorder/python.ts
index 32aa101a4481d8c6c9384df76c9ed3ddfa8e8c80..21fcced3cc4275f3702aeef8506c22aa82a493d3 100644
--- a/packages/playwright-core/src/server/recorder/python.ts
+++ b/packages/playwright-core/src/server/recorder/python.ts
@@ -26,9 +26,8 @@ import { escapeWithQuotes } from '../../utils/isomorphic/stringUtils';
 import deviceDescriptors from '../deviceDescriptors';
 
 export class PythonLanguageGenerator implements LanguageGenerator {
-  id: string;
-  groupName = 'Python';
-  name: string;
+  id = 'python';
+  fileName = 'Python';
   highlighter = 'python';
 
   private _awaitPrefix: '' | 'await ';
@@ -38,7 +37,7 @@ export class PythonLanguageGenerator implements LanguageGenerator {
 
   constructor(isAsync: boolean, isPyTest: boolean) {
     this.id = isPyTest ? 'pytest' : (isAsync ? 'python-async' : 'python');
-    this.name = isPyTest ? 'Pytest' : (isAsync ? 'Library Async' : 'Library');
+    this.fileName = isPyTest ? 'Pytest' : (isAsync ? 'Python Async' : 'Python');
     this._isAsync = isAsync;
     this._isPyTest = isPyTest;
     this._awaitPrefix = isAsync ? 'await ' : '';
diff --git a/packages/playwright-core/src/server/recorder/recorderTypes.ts b/packages/playwright-core/src/server/recorder/recorderTypes.ts
index 7fa30477d717321009fca2a73413f8b049831c60..6e3e3931ecbad40abfe74c64ea202f5849c8f84c 100644
--- a/packages/playwright-core/src/server/recorder/recorderTypes.ts
+++ b/packages/playwright-core/src/server/recorder/recorderTypes.ts
@@ -53,12 +53,9 @@ export type SourceHighlight = {
 
 export type Source = {
   isRecorded: boolean;
-  id: string;
-  label: string;
+  file: string;
   text: string;
   language: string;
   highlight: SourceHighlight[];
   revealLine?: number;
-  // used to group the language generators
-  group?: string;
 };
diff --git a/packages/playwright-core/src/server/registry/dependencies.ts b/packages/playwright-core/src/server/registry/dependencies.ts
index 7b9630366109492d87b9745932689189b7926d43..f27539872bbbf0ac755cc44783d816291a91c32c 100644
--- a/packages/playwright-core/src/server/registry/dependencies.ts
+++ b/packages/playwright-core/src/server/registry/dependencies.ts
@@ -31,28 +31,18 @@ const packageJSON = require('../../../package.json');
 const dockerVersionFilePath = '/ms-playwright/.docker-info';
 export async function writeDockerVersion(dockerImageNameTemplate: string) {
   await fs.promises.mkdir(path.dirname(dockerVersionFilePath), { recursive: true });
-  await fs.promises.writeFile(dockerVersionFilePath, JSON.stringify(dockerVersion(dockerImageNameTemplate), null, 2), 'utf8');
-  // Make sure version file is globally accessible.
-  await fs.promises.chmod(dockerVersionFilePath, 0o777);
-}
-
-export function dockerVersion(dockerImageNameTemplate: string): { driverVersion: string, dockerImageName: string } {
-  return {
+  await fs.promises.writeFile(dockerVersionFilePath, JSON.stringify({
     driverVersion: packageJSON.version,
     dockerImageName: dockerImageNameTemplate.replace('%version%', packageJSON.version),
-  };
+  }, null, 2), 'utf8');
+  // Make sure version file is globally accessible.
+  await fs.promises.chmod(dockerVersionFilePath, 0o777);
 }
 
-export function readDockerVersionSync(): null | { driverVersion: string, dockerImageName: string, dockerImageNameTemplate: string } {
-  try {
-    const data = JSON.parse(fs.readFileSync(dockerVersionFilePath, 'utf8'));
-    return {
-      ...data,
-      dockerImageNameTemplate: data.dockerImageName.replace(data.driverVersion, '%version%'),
-    };
-  } catch (e) {
-    return null;
-  }
+async function readDockerVersion(): Promise<null | { driverVersion: string, dockerImageName: string }> {
+  return await fs.promises.readFile(dockerVersionFilePath, 'utf8')
+      .then(text => JSON.parse(text))
+      .catch(e => null);
 }
 
 const checkExecutable = (filePath: string) => fs.promises.access(filePath, fs.constants.X_OK).then(() => true).catch(e => false);
@@ -216,7 +206,7 @@ export async function validateDependenciesLinux(sdkLanguage: string, linuxLddDir
   }
 
   const maybeSudo = (process.getuid() !== 0) && os.platform() !== 'win32' ? 'sudo ' : '';
-  const dockerInfo = readDockerVersionSync();
+  const dockerInfo = await readDockerVersion();
   const errorLines = [
     `Host system is missing dependencies to run browsers.`,
   ];
diff --git a/packages/playwright-core/src/server/registry/download.ts b/packages/playwright-core/src/server/registry/download.ts
index 35c46a1792ccf1742869a62c1e22a7a209565595..d4c2065aab1dc8363644ac04c3e0d372f0d9bbfe 100644
--- a/packages/playwright-core/src/server/registry/download.ts
+++ b/packages/playwright-core/src/server/registry/download.ts
@@ -45,7 +45,6 @@ function downloadFile(url: string, destinationPath: string, options: DownloadFil
     headers: options.userAgent ? {
       'User-Agent': options.userAgent,
     } : undefined,
-    timeout: 10_000,
   }, response => {
     log(`-- response status code: ${response.statusCode}`);
     if (response.statusCode !== 200) {
diff --git a/packages/playwright-core/src/server/registry/index.ts b/packages/playwright-core/src/server/registry/index.ts
index a3236a229868a666d118c40766e2f32fecfbbf1e..cdc6de680d96d3f52b1327803c08450aeadfd839 100644
--- a/packages/playwright-core/src/server/registry/index.ts
+++ b/packages/playwright-core/src/server/registry/index.ts
@@ -28,7 +28,7 @@ import { removeFolders, existsAsync, canAccessFile } from '../../utils/fileUtils
 import { hostPlatform } from '../../utils/hostPlatform';
 import { spawnAsync } from '../../utils/spawnAsync';
 import type { DependencyGroup } from './dependencies';
-import { transformCommandsForRoot, dockerVersion, readDockerVersionSync } from './dependencies';
+import { transformCommandsForRoot } from './dependencies';
 import { installDependenciesLinux, installDependenciesWindows, validateDependenciesLinux, validateDependenciesWindows } from './dependencies';
 import { downloadBrowserWithProgressBar, logPolitely } from './browserFetcher';
 export { writeDockerVersion } from './dependencies';
@@ -310,8 +310,6 @@ export interface Executable {
   browserName: BrowserName | undefined;
   installType: 'download-by-default' | 'download-on-demand' | 'install-script' | 'none';
   directory: string | undefined;
-  downloadURLs?: string[],
-  browserVersion?: string,
   executablePathOrDie(sdkLanguage: string): string;
   executablePath(sdkLanguage: string): string | undefined;
   validateHostRequirements(sdkLanguage: string): Promise<void>;
@@ -343,17 +341,7 @@ export class Registry {
         throw new Error(`${name} is not supported on ${hostPlatform}`);
       const installCommand = buildPlaywrightCLICommand(sdkLanguage, `install${installByDefault ? '' : ' ' + name}`);
       if (!canAccessFile(e)) {
-        const currentDockerVersion = readDockerVersionSync();
-        const preferredDockerVersion = currentDockerVersion ? dockerVersion(currentDockerVersion.dockerImageNameTemplate) : null;
-        const isOutdatedDockerImage = currentDockerVersion && preferredDockerVersion && currentDockerVersion.dockerImageName !== preferredDockerVersion.dockerImageName;
-        const prettyMessage = isOutdatedDockerImage ? [
-          `Looks like ${sdkLanguage === 'javascript' ? 'Playwright Test or ' : ''}Playwright was just updated to ${preferredDockerVersion.driverVersion}.`,
-          `Please update docker image as well.`,
-          `-  current: ${currentDockerVersion.dockerImageName}`,
-          `- required: ${preferredDockerVersion.dockerImageName}`,
-          ``,
-          `<3 Playwright Team`,
-        ].join('\n') : [
+        const prettyMessage = [
           `Looks like ${sdkLanguage === 'javascript' ? 'Playwright Test or ' : ''}Playwright was just installed or updated.`,
           `Please run the following command to download new browser${installByDefault ? 's' : ''}:`,
           ``,
@@ -378,9 +366,7 @@ export class Registry {
       executablePathOrDie: (sdkLanguage: string) => executablePathOrDie('chromium', chromiumExecutable, chromium.installByDefault, sdkLanguage),
       installType: chromium.installByDefault ? 'download-by-default' : 'download-on-demand',
       validateHostRequirements: (sdkLanguage: string) => this._validateHostRequirements(sdkLanguage, 'chromium', chromium.dir, ['chrome-linux'], [], ['chrome-win']),
-      downloadURLs: this._downloadURLs(chromium),
-      browserVersion: chromium.browserVersion,
-      _install: () => this._downloadExecutable(chromium, chromiumExecutable),
+      _install: () => this._downloadExecutable(chromium, chromiumExecutable, DOWNLOAD_PATHS['chromium'][hostPlatform], 'PLAYWRIGHT_CHROMIUM_DOWNLOAD_HOST'),
       _dependencyGroup: 'chromium',
       _isHermeticInstallation: true,
     });
@@ -396,9 +382,7 @@ export class Registry {
       executablePathOrDie: (sdkLanguage: string) => executablePathOrDie('chromium-with-symbols', chromiumWithSymbolsExecutable, chromiumWithSymbols.installByDefault, sdkLanguage),
       installType: chromiumWithSymbols.installByDefault ? 'download-by-default' : 'download-on-demand',
       validateHostRequirements: (sdkLanguage: string) => this._validateHostRequirements(sdkLanguage, 'chromium', chromiumWithSymbols.dir, ['chrome-linux'], [], ['chrome-win']),
-      downloadURLs: this._downloadURLs(chromiumWithSymbols),
-      browserVersion: chromiumWithSymbols.browserVersion,
-      _install: () => this._downloadExecutable(chromiumWithSymbols, chromiumWithSymbolsExecutable),
+      _install: () => this._downloadExecutable(chromiumWithSymbols, chromiumWithSymbolsExecutable, DOWNLOAD_PATHS['chromium-with-symbols'][hostPlatform], 'PLAYWRIGHT_CHROMIUM_DOWNLOAD_HOST'),
       _dependencyGroup: 'chromium',
       _isHermeticInstallation: true,
     });
@@ -414,9 +398,7 @@ export class Registry {
       executablePathOrDie: (sdkLanguage: string) => executablePathOrDie('chromium-tip-of-tree', chromiumTipOfTreeExecutable, chromiumTipOfTree.installByDefault, sdkLanguage),
       installType: chromiumTipOfTree.installByDefault ? 'download-by-default' : 'download-on-demand',
       validateHostRequirements: (sdkLanguage: string) => this._validateHostRequirements(sdkLanguage, 'chromium', chromiumTipOfTree.dir, ['chrome-linux'], [], ['chrome-win']),
-      downloadURLs: this._downloadURLs(chromiumTipOfTree),
-      browserVersion: chromiumTipOfTree.browserVersion,
-      _install: () => this._downloadExecutable(chromiumTipOfTree, chromiumTipOfTreeExecutable),
+      _install: () => this._downloadExecutable(chromiumTipOfTree, chromiumTipOfTreeExecutable, DOWNLOAD_PATHS['chromium-tip-of-tree'][hostPlatform], 'PLAYWRIGHT_CHROMIUM_DOWNLOAD_HOST'),
       _dependencyGroup: 'chromium',
       _isHermeticInstallation: true,
     });
@@ -500,9 +482,7 @@ export class Registry {
       executablePathOrDie: (sdkLanguage: string) => executablePathOrDie('firefox', firefoxExecutable, firefox.installByDefault, sdkLanguage),
       installType: firefox.installByDefault ? 'download-by-default' : 'download-on-demand',
       validateHostRequirements: (sdkLanguage: string) => this._validateHostRequirements(sdkLanguage, 'firefox', firefox.dir, ['firefox'], [], ['firefox']),
-      downloadURLs: this._downloadURLs(firefox),
-      browserVersion: firefox.browserVersion,
-      _install: () => this._downloadExecutable(firefox, firefoxExecutable),
+      _install: () => this._downloadExecutable(firefox, firefoxExecutable, DOWNLOAD_PATHS['firefox'][hostPlatform], 'PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST'),
       _dependencyGroup: 'firefox',
       _isHermeticInstallation: true,
     });
@@ -518,9 +498,7 @@ export class Registry {
       executablePathOrDie: (sdkLanguage: string) => executablePathOrDie('firefox-beta', firefoxBetaExecutable, firefoxBeta.installByDefault, sdkLanguage),
       installType: firefoxBeta.installByDefault ? 'download-by-default' : 'download-on-demand',
       validateHostRequirements: (sdkLanguage: string) => this._validateHostRequirements(sdkLanguage, 'firefox', firefoxBeta.dir, ['firefox'], [], ['firefox']),
-      downloadURLs: this._downloadURLs(firefoxBeta),
-      browserVersion: firefoxBeta.browserVersion,
-      _install: () => this._downloadExecutable(firefoxBeta, firefoxBetaExecutable),
+      _install: () => this._downloadExecutable(firefoxBeta, firefoxBetaExecutable, DOWNLOAD_PATHS['firefox-beta'][hostPlatform], 'PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST'),
       _dependencyGroup: 'firefox',
       _isHermeticInstallation: true,
     });
@@ -546,9 +524,7 @@ export class Registry {
       executablePathOrDie: (sdkLanguage: string) => executablePathOrDie('webkit', webkitExecutable, webkit.installByDefault, sdkLanguage),
       installType: webkit.installByDefault ? 'download-by-default' : 'download-on-demand',
       validateHostRequirements: (sdkLanguage: string) => this._validateHostRequirements(sdkLanguage, 'webkit', webkit.dir, webkitLinuxLddDirectories, ['libGLESv2.so.2', 'libx264.so'], ['']),
-      downloadURLs: this._downloadURLs(webkit),
-      browserVersion: webkit.browserVersion,
-      _install: () => this._downloadExecutable(webkit, webkitExecutable),
+      _install: () => this._downloadExecutable(webkit, webkitExecutable, DOWNLOAD_PATHS['webkit'][hostPlatform], 'PLAYWRIGHT_WEBKIT_DOWNLOAD_HOST'),
       _dependencyGroup: 'webkit',
       _isHermeticInstallation: true,
     });
@@ -564,8 +540,7 @@ export class Registry {
       executablePathOrDie: (sdkLanguage: string) => executablePathOrDie('ffmpeg', ffmpegExecutable, ffmpeg.installByDefault, sdkLanguage),
       installType: ffmpeg.installByDefault ? 'download-by-default' : 'download-on-demand',
       validateHostRequirements: () => Promise.resolve(),
-      downloadURLs: this._downloadURLs(ffmpeg),
-      _install: () => this._downloadExecutable(ffmpeg, ffmpegExecutable),
+      _install: () => this._downloadExecutable(ffmpeg, ffmpegExecutable, DOWNLOAD_PATHS['ffmpeg'][hostPlatform], 'PLAYWRIGHT_FFMPEG_DOWNLOAD_HOST'),
       _dependencyGroup: 'tools',
       _isHermeticInstallation: true,
     });
@@ -742,33 +717,17 @@ export class Registry {
     }
   }
 
-  private _downloadURLs(descriptor: BrowsersJSONDescriptor): string[] {
-    const downloadPathTemplate: string|undefined = (DOWNLOAD_PATHS as any)[descriptor.name][hostPlatform];
-    if (!downloadPathTemplate)
-      return [];
+  private async _downloadExecutable(descriptor: BrowsersJSONDescriptor, executablePath: string | undefined, downloadPathTemplate: string | undefined, downloadHostEnv: string) {
+    if (!downloadPathTemplate || !executablePath)
+      throw new Error(`ERROR: Playwright does not support ${descriptor.name} on ${hostPlatform}`);
+    if (hostPlatform === 'generic-linux' || hostPlatform === 'generic-linux-arm64')
+      logPolitely('BEWARE: your OS is not officially supported by Playwright; downloading fallback build.');
     const downloadPath = util.format(downloadPathTemplate, descriptor.revision);
 
     let downloadURLs = PLAYWRIGHT_CDN_MIRRORS.map(mirror => `${mirror}/${downloadPath}`) ;
-    let downloadHostEnv;
-    if (descriptor.name.startsWith('chromium'))
-      downloadHostEnv = 'PLAYWRIGHT_CHROMIUM_DOWNLOAD_HOST';
-    else if (descriptor.name.startsWith('firefox'))
-      downloadHostEnv = 'PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST';
-    else if (descriptor.name.startsWith('webkit'))
-      downloadHostEnv = 'PLAYWRIGHT_WEBKIT_DOWNLOAD_HOST';
-
     const customHostOverride = (downloadHostEnv && getFromENV(downloadHostEnv)) || getFromENV('PLAYWRIGHT_DOWNLOAD_HOST');
     if (customHostOverride)
       downloadURLs = [`${customHostOverride}/${downloadPath}`];
-    return downloadURLs;
-  }
-
-  private async _downloadExecutable(descriptor: BrowsersJSONDescriptor, executablePath: string | undefined) {
-    const downloadURLs = this._downloadURLs(descriptor);
-    if (!downloadURLs.length || !executablePath)
-      throw new Error(`ERROR: Playwright does not support ${descriptor.name} on ${hostPlatform}`);
-    if (hostPlatform === 'generic-linux' || hostPlatform === 'generic-linux-arm64')
-      logPolitely('BEWARE: your OS is not officially supported by Playwright; downloading fallback build.');
 
     const displayName = descriptor.name.split('-').map(word => {
       return word === 'ffmpeg' ? 'FFMPEG' : word.charAt(0).toUpperCase() + word.slice(1);
diff --git a/packages/playwright-core/src/server/registry/nativeDeps.ts b/packages/playwright-core/src/server/registry/nativeDeps.ts
index 03069c69512d5758f8b25eb42a54a95b7a13f8eb..566241ec5abf1eb22ee6e8869846f798f69b6ea2 100644
--- a/packages/playwright-core/src/server/registry/nativeDeps.ts
+++ b/packages/playwright-core/src/server/registry/nativeDeps.ts
@@ -298,7 +298,6 @@ export const deps: any = {
       'libxtst6'
     ],
     webkit: [
-      'libenchant-2-2',
       'gstreamer1.0-libav',
       'gstreamer1.0-plugins-bad',
       'gstreamer1.0-plugins-base',
@@ -434,7 +433,6 @@ export const deps: any = {
       'libXtst.so.6': 'libxtst6',
       'libxshmfence.so.1': 'libxshmfence1',
       'libatomic.so.1': 'libatomic1',
-      'libenchant-2.so.2': 'libenchant-2-2',
     },
   },
 
diff --git a/packages/playwright-core/src/server/screenshotter.ts b/packages/playwright-core/src/server/screenshotter.ts
index a2f9971fa7a571c86073a2fee07005b93e627cf2..66eebc3d8227b3848d965aa9e2e8bb0d7d5b1acd 100644
--- a/packages/playwright-core/src/server/screenshotter.ts
+++ b/packages/playwright-core/src/server/screenshotter.ts
@@ -44,97 +44,6 @@ export type ScreenshotOptions = {
   caret?: 'hide' | 'initial',
 };
 
-function inPagePrepareForScreenshots(hideCaret: boolean, disableAnimations: boolean) {
-  const collectRoots = (root: Document | ShadowRoot, roots: (Document|ShadowRoot)[] = []): (Document|ShadowRoot)[] => {
-    roots.push(root);
-    const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);
-    do {
-      const node = walker.currentNode;
-      const shadowRoot = node instanceof Element ? node.shadowRoot : null;
-      if (shadowRoot)
-        collectRoots(shadowRoot, roots);
-    } while (walker.nextNode());
-    return roots;
-  };
-
-  let documentRoots: (Document|ShadowRoot)[] | undefined;
-  const memoizedRoots = () => documentRoots ??= collectRoots(document);
-
-  const styleTags: Element[] = [];
-  if (hideCaret) {
-    for (const root of memoizedRoots()) {
-      const styleTag = document.createElement('style');
-      styleTag.textContent = `
-        *:not(#playwright-aaaaaaaaaa.playwright-bbbbbbbbbbb.playwright-cccccccccc.playwright-dddddddddd.playwright-eeeeeeeee) {
-          caret-color: transparent !important;
-        }
-      `;
-      if (root === document)
-        document.documentElement.append(styleTag);
-      else
-        root.append(styleTag);
-      styleTags.push(styleTag);
-    }
-  }
-  const infiniteAnimationsToResume: Set<Animation> = new Set();
-  const cleanupCallbacks: (() => void)[] = [];
-
-  if (disableAnimations) {
-    const handleAnimations = (root: Document|ShadowRoot): void => {
-      for (const animation of root.getAnimations()) {
-        if (!animation.effect || animation.playbackRate === 0 || infiniteAnimationsToResume.has(animation))
-          continue;
-        const endTime = animation.effect.getComputedTiming().endTime;
-        if (Number.isFinite(endTime)) {
-          try {
-            animation.finish();
-          } catch (e) {
-            // animation.finish() should not throw for
-            // finite animations, but we'd like to be on the
-            // safe side.
-          }
-        } else {
-          try {
-            animation.cancel();
-            infiniteAnimationsToResume.add(animation);
-          } catch (e) {
-            // animation.cancel() should not throw for
-            // infinite animations, but we'd like to be on the
-            // safe side.
-          }
-        }
-      }
-    };
-    for (const root of memoizedRoots()) {
-      const handleRootAnimations: (() => void) = handleAnimations.bind(null, root);
-      handleRootAnimations();
-      root.addEventListener('transitionrun', handleRootAnimations);
-      root.addEventListener('animationstart', handleRootAnimations);
-      cleanupCallbacks.push(() => {
-        root.removeEventListener('transitionrun', handleRootAnimations);
-        root.removeEventListener('animationstart', handleRootAnimations);
-      });
-    }
-  }
-
-  window.__cleanupScreenshot = () => {
-    for (const styleTag of styleTags)
-      styleTag.remove();
-
-    for (const animation of infiniteAnimationsToResume) {
-      try {
-        animation.play();
-      } catch (e) {
-        // animation.play() should never throw, but
-        // we'd like to be on the safe side.
-      }
-    }
-    for (const cleanupCallback of cleanupCallbacks)
-      cleanupCallback();
-    delete window.__cleanupScreenshot;
-  };
-}
-
 export class Screenshotter {
   private _queue = new TaskQueue();
   private _page: Page;
@@ -237,7 +146,84 @@ export class Screenshotter {
     if (disableAnimations)
       progress.log('  disabled all CSS animations');
     await Promise.all(this._page.frames().map(async frame => {
-      await frame.nonStallingEvaluateInExistingContext('(' + inPagePrepareForScreenshots.toString() + `)(${hideCaret}, ${disableAnimations})`, false, 'utility').catch(() => {});
+      await frame.nonStallingEvaluateInExistingContext('(' + (async function(hideCaret: boolean, disableAnimations: boolean) {
+        const styleTag = document.createElement('style');
+        if (hideCaret) {
+          styleTag.textContent = `
+            *:not(#playwright-aaaaaaaaaa.playwright-bbbbbbbbbbb.playwright-cccccccccc.playwright-dddddddddd.playwright-eeeeeeeee) {
+              caret-color: transparent !important;
+            }
+          `;
+          document.documentElement.append(styleTag);
+        }
+        const infiniteAnimationsToResume: Set<Animation> = new Set();
+        const cleanupCallbacks: (() => void)[] = [];
+
+        if (disableAnimations) {
+          const collectRoots = (root: Document | ShadowRoot, roots: (Document|ShadowRoot)[] = []): (Document|ShadowRoot)[] => {
+            roots.push(root);
+            const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);
+            do {
+              const node = walker.currentNode;
+              const shadowRoot = node instanceof Element ? node.shadowRoot : null;
+              if (shadowRoot)
+                collectRoots(shadowRoot, roots);
+            } while (walker.nextNode());
+            return roots;
+          };
+          const handleAnimations = (root: Document|ShadowRoot): void => {
+            for (const animation of root.getAnimations()) {
+              if (!animation.effect || animation.playbackRate === 0 || infiniteAnimationsToResume.has(animation))
+                continue;
+              const endTime = animation.effect.getComputedTiming().endTime;
+              if (Number.isFinite(endTime)) {
+                try {
+                  animation.finish();
+                } catch (e) {
+                  // animation.finish() should not throw for
+                  // finite animations, but we'd like to be on the
+                  // safe side.
+                }
+              } else {
+                try {
+                  animation.cancel();
+                  infiniteAnimationsToResume.add(animation);
+                } catch (e) {
+                  // animation.cancel() should not throw for
+                  // infinite animations, but we'd like to be on the
+                  // safe side.
+                }
+              }
+            }
+          };
+          for (const root of collectRoots(document)) {
+            const handleRootAnimations: (() => void) = handleAnimations.bind(null, root);
+            handleRootAnimations();
+            root.addEventListener('transitionrun', handleRootAnimations);
+            root.addEventListener('animationstart', handleRootAnimations);
+            cleanupCallbacks.push(() => {
+              root.removeEventListener('transitionrun', handleRootAnimations);
+              root.removeEventListener('animationstart', handleRootAnimations);
+            });
+          }
+        }
+
+        window.__cleanupScreenshot = () => {
+          styleTag.remove();
+          for (const animation of infiniteAnimationsToResume) {
+            try {
+              animation.play();
+            } catch (e) {
+              // animation.play() should never throw, but
+              // we'd like to be on the safe side.
+            }
+          }
+          for (const cleanupCallback of cleanupCallbacks)
+            cleanupCallback();
+          delete window.__cleanupScreenshot;
+        };
+
+      }).toString() + `)(${hideCaret}, ${disableAnimations})`, false, 'utility').catch(() => {});
     }));
     progress.cleanupWhenAborted(() => this._restorePageAfterScreenshot());
   }
diff --git a/packages/playwright-core/src/server/trace/recorder/snapshotterInjected.ts b/packages/playwright-core/src/server/trace/recorder/snapshotterInjected.ts
index cdfb7814a147abfed620a5852e24fd5eca4858d9..cb86a90f4f0353a33cf8455ef56f200d8917dae0 100644
--- a/packages/playwright-core/src/server/trace/recorder/snapshotterInjected.ts
+++ b/packages/playwright-core/src/server/trace/recorder/snapshotterInjected.ts
@@ -334,7 +334,7 @@ export function frameSnapshotStreamer(snapshotStreamer: string) {
         const checkAndReturn = (n: NodeSnapshot): { equals: boolean, n: NodeSnapshot } => {
           data.attributesCached = true;
           if (equals)
-            return { equals: true, n: [[snapshotNumber - data.ref![0], data.ref![1]]] };
+            return { equals: true, n: [[ snapshotNumber - data.ref![0], data.ref![1] ]] };
           nodeCounter += extraNodes;
           data.ref = [snapshotNumber, nodeCounter++];
           data.cached = values;
@@ -498,7 +498,7 @@ export function frameSnapshotStreamer(snapshotStreamer: string) {
         const oldCSSText = data.cssText;
         const cssText = this._updateStyleElementStyleSheetTextIfNeeded(sheet, true /* forceText */)!;
         if (cssText === oldCSSText)
-          return { equals: true, n: [[snapshotNumber - data.ref![0], data.ref![1]]] };
+          return { equals: true, n: [[ snapshotNumber - data.ref![0], data.ref![1] ]] };
         data.ref = [snapshotNumber, nodeCounter++];
         return {
           equals: false,
diff --git a/packages/playwright-core/src/server/trace/recorder/tracing.ts b/packages/playwright-core/src/server/trace/recorder/tracing.ts
index 7c9ffbc2d48aeb51a362c014166cf09dbac9b8a5..837b9ff5243230a24782500531c4a8f9ebb7de36 100644
--- a/packages/playwright-core/src/server/trace/recorder/tracing.ts
+++ b/packages/playwright-core/src/server/trace/recorder/tracing.ts
@@ -87,7 +87,6 @@ export class Tracing extends SdkObject implements InstrumentationListener, Snaps
     this._harTracer = new HarTracer(context, null, this, {
       content: 'attach',
       includeTraceInfo: true,
-      recordRequestOverrides: false,
       waitForContentOnStop: false,
       skipScripts: true,
     });
@@ -201,12 +200,15 @@ export class Tracing extends SdkObject implements InstrumentationListener, Snaps
     return this._tracesTmpDir;
   }
 
-  async dispose() {
+  async flush() {
     this._snapshotter?.dispose();
-    this._harTracer.stop();
     await this._writeChain;
   }
 
+  async dispose() {
+    this._snapshotter?.dispose();
+  }
+
   async stopChunk(params: TracingTracingStopChunkParams): Promise<{ artifact: Artifact | null, sourceEntries: NameValue[] | undefined }> {
     if (this._isStopping)
       throw new Error(`Tracing is already stopping`);
diff --git a/packages/playwright-core/src/server/trace/test/inMemorySnapshotter.ts b/packages/playwright-core/src/server/trace/test/inMemorySnapshotter.ts
index efe6c4ecaae493481cb626880845dabfc6dc7859..6f272a62a0c581d54d8abc01a8ec022807c14ced 100644
--- a/packages/playwright-core/src/server/trace/test/inMemorySnapshotter.ts
+++ b/packages/playwright-core/src/server/trace/test/inMemorySnapshotter.ts
@@ -34,7 +34,7 @@ export class InMemorySnapshotter extends BaseSnapshotStorage implements Snapshot
   constructor(context: BrowserContext) {
     super();
     this._snapshotter = new Snapshotter(context, this);
-    this._harTracer = new HarTracer(context, null, this, { content: 'attach', includeTraceInfo: true, recordRequestOverrides: false, waitForContentOnStop: false, skipScripts: true });
+    this._harTracer = new HarTracer(context, null, this, { content: 'attach', includeTraceInfo: true, waitForContentOnStop: false, skipScripts: true });
   }
 
   async initialize(): Promise<void> {
diff --git a/packages/playwright-core/src/server/types.ts b/packages/playwright-core/src/server/types.ts
index 9f5f9c0dfe5ac566052ee01c86905084729029d3..b9a1b24fb74f4eed28a9816cd95b15614700313f 100644
--- a/packages/playwright-core/src/server/types.ts
+++ b/packages/playwright-core/src/server/types.ts
@@ -15,8 +15,8 @@
  * limitations under the License.
  */
 
-import type { Size, Point, TimeoutOptions, HeadersArray } from '../common/types';
-export type { Size, Point, Rect, Quad, URLMatch, TimeoutOptions, HeadersArray } from '../common/types';
+import type { Size, Point, TimeoutOptions } from '../common/types';
+export type { Size, Point, Rect, Quad, URLMatch, TimeoutOptions } from '../common/types';
 import type * as channels from '../protocol/channels';
 
 export type StrictOptions = {
@@ -129,6 +129,8 @@ export type MouseMultiClickOptions = PointerActionOptions & {
 
 export type World = 'main' | 'utility';
 
+export type HeadersArray = { name: string, value: string }[];
+
 export type GotoOptions = NavigateOptions & {
   referer?: string,
 };
diff --git a/packages/playwright-core/src/server/webkit/protocol.d.ts b/packages/playwright-core/src/server/webkit/protocol.d.ts
index 229bc95fa1d40c1b6dfff39153d8f6ac2e256515..533f59afa99b757d566871be41d5dfbe35c6fbdf 100644
--- a/packages/playwright-core/src/server/webkit/protocol.d.ts
+++ b/packages/playwright-core/src/server/webkit/protocol.d.ts
@@ -910,7 +910,7 @@ export module Protocol {
     /**
      * Relevant layout information about the node. Things not in this list are not important to Web Inspector.
      */
-    export type LayoutFlag = "rendered"|"scrollable"|"flex"|"grid"|"event";
+    export type LayoutFlag = "rendered"|"flex"|"grid";
     /**
      * The mode for how layout context type changes are handled (default: <code>Observed</code>). <code>Observed</code> limits handling to those nodes already known to the frontend by other means (generally, this means the node is a visible item in the Elements tab). <code>All</code> informs the frontend of all layout context type changes and all nodes with a known layout context are sent to the frontend.
      */
@@ -2557,10 +2557,6 @@ export module Protocol {
        * Id of the node to get listeners for.
        */
       nodeId: NodeId;
-      /**
-       * Controls whether ancestor event listeners are included. Defaults to true.
-       */
-      includeAncestors?: boolean;
     }
     export type getEventListenersForNodeReturnValue = {
       /**
@@ -2978,10 +2974,6 @@ export module Protocol {
        * Source element handle.
        */
       objectId?: Runtime.RemoteObjectId;
-      /**
-       * Id of the frame to resolve the owner element.
-       */
-      frameId?: Network.FrameId;
       /**
        * Specifies in which execution context to adopt to.
        */
@@ -3730,7 +3722,7 @@ might return multiple quads for inline nodes.
       /**
        * Pause reason.
        */
-      reason: "XHR"|"Fetch"|"DOM"|"AnimationFrame"|"Interval"|"Listener"|"Timeout"|"exception"|"assert"|"CSPViolation"|"DebuggerStatement"|"Breakpoint"|"PauseOnNextStatement"|"Microtask"|"FunctionCall"|"BlackboxedScript"|"other";
+      reason: "XHR"|"Fetch"|"DOM"|"AnimationFrame"|"Interval"|"Listener"|"Timeout"|"exception"|"assert"|"CSPViolation"|"DebuggerStatement"|"Breakpoint"|"PauseOnNextStatement"|"Microtask"|"BlackboxedScript"|"other";
       /**
        * Object containing break-specific auxiliary properties.
        */
@@ -3865,48 +3857,6 @@ might return multiple quads for inline nodes.
     }
     export type removeBreakpointReturnValue = {
     }
-    /**
-     * Adds a JavaScript breakpoint that pauses execution whenever a function with the given name is about to be called.
-     */
-    export type addSymbolicBreakpointParameters = {
-      /**
-       * The name of the function to pause in when called.
-       */
-      symbol: string;
-      /**
-       * If true, symbol is case sensitive. Defaults to true.
-       */
-      caseSensitive?: boolean;
-      /**
-       * If true, treats symbol as a regex. Defaults to false.
-       */
-      isRegex?: boolean;
-      /**
-       * Options to apply to this breakpoint to modify its behavior.
-       */
-      options?: BreakpointOptions;
-    }
-    export type addSymbolicBreakpointReturnValue = {
-    }
-    /**
-     * Removes a previously added symbolic breakpoint.
-     */
-    export type removeSymbolicBreakpointParameters = {
-      /**
-       * The name of the function to pause in when called.
-       */
-      symbol: string;
-      /**
-       * If true, symbol is case sensitive. Defaults to true.
-       */
-      caseSensitive?: boolean;
-      /**
-       * If true, treats symbol as a regex. Defaults to false.
-       */
-      isRegex?: boolean;
-    }
-    export type removeSymbolicBreakpointReturnValue = {
-    }
     /**
      * Continues execution until the current evaluation completes. This will trigger either a Debugger.paused or Debugger.resumed event.
      */
@@ -4024,25 +3974,6 @@ might return multiple quads for inline nodes.
        */
       details: FunctionDetails;
     }
-    /**
-     * Returns a list of valid breakpoint locations within the given location range.
-     */
-    export type getBreakpointLocationsParameters = {
-      /**
-       * Starting location to look for breakpoint locations after (inclusive). Must have same scriptId as end.
-       */
-      start: Location;
-      /**
-       * Ending location to look for breakpoint locations before (exclusive). Must have same scriptId as start.
-       */
-      end: Location;
-    }
-    export type getBreakpointLocationsReturnValue = {
-      /**
-       * List of resolved breakpoint locations.
-       */
-      locations: Location[];
-    }
     /**
      * Control whether the debugger pauses execution before `debugger` statements.
      */
@@ -6183,10 +6114,6 @@ the top of the viewport and Y increases as it proceeds towards the bottom of the
      * Page reduced-motion media query override.
      */
     export type ReducedMotion = "Reduce"|"NoPreference";
-    /**
-     * Page forced-colors media query override.
-     */
-    export type ForcedColors = "Active"|"None";
     /**
      * Information about the Frame on the page.
      */
@@ -6871,14 +6798,6 @@ the top of the viewport and Y increases as it proceeds towards the bottom of the
     }
     export type setForcedReducedMotionReturnValue = {
     }
-    /**
-     * Forces the forced-colors media query for the page.
-     */
-    export type setForcedColorsParameters = {
-      forcedColors?: ForcedColors;
-    }
-    export type setForcedColorsReturnValue = {
-    }
     /**
      * Enables time zone emulation.
      */
@@ -9136,8 +9055,6 @@ the top of the viewport and Y increases as it proceeds towards the bottom of the
     "Debugger.setBreakpointByUrl": Debugger.setBreakpointByUrlParameters;
     "Debugger.setBreakpoint": Debugger.setBreakpointParameters;
     "Debugger.removeBreakpoint": Debugger.removeBreakpointParameters;
-    "Debugger.addSymbolicBreakpoint": Debugger.addSymbolicBreakpointParameters;
-    "Debugger.removeSymbolicBreakpoint": Debugger.removeSymbolicBreakpointParameters;
     "Debugger.continueUntilNextRunLoop": Debugger.continueUntilNextRunLoopParameters;
     "Debugger.continueToLocation": Debugger.continueToLocationParameters;
     "Debugger.stepNext": Debugger.stepNextParameters;
@@ -9149,7 +9066,6 @@ the top of the viewport and Y increases as it proceeds towards the bottom of the
     "Debugger.searchInContent": Debugger.searchInContentParameters;
     "Debugger.getScriptSource": Debugger.getScriptSourceParameters;
     "Debugger.getFunctionDetails": Debugger.getFunctionDetailsParameters;
-    "Debugger.getBreakpointLocations": Debugger.getBreakpointLocationsParameters;
     "Debugger.setPauseOnDebuggerStatements": Debugger.setPauseOnDebuggerStatementsParameters;
     "Debugger.setPauseOnExceptions": Debugger.setPauseOnExceptionsParameters;
     "Debugger.setPauseOnAssertions": Debugger.setPauseOnAssertionsParameters;
@@ -9236,7 +9152,6 @@ the top of the viewport and Y increases as it proceeds towards the bottom of the
     "Page.setEmulatedMedia": Page.setEmulatedMediaParameters;
     "Page.setForcedAppearance": Page.setForcedAppearanceParameters;
     "Page.setForcedReducedMotion": Page.setForcedReducedMotionParameters;
-    "Page.setForcedColors": Page.setForcedColorsParameters;
     "Page.setTimeZone": Page.setTimeZoneParameters;
     "Page.setTouchEmulationEnabled": Page.setTouchEmulationEnabledParameters;
     "Page.snapshotNode": Page.snapshotNodeParameters;
@@ -9444,8 +9359,6 @@ the top of the viewport and Y increases as it proceeds towards the bottom of the
     "Debugger.setBreakpointByUrl": Debugger.setBreakpointByUrlReturnValue;
     "Debugger.setBreakpoint": Debugger.setBreakpointReturnValue;
     "Debugger.removeBreakpoint": Debugger.removeBreakpointReturnValue;
-    "Debugger.addSymbolicBreakpoint": Debugger.addSymbolicBreakpointReturnValue;
-    "Debugger.removeSymbolicBreakpoint": Debugger.removeSymbolicBreakpointReturnValue;
     "Debugger.continueUntilNextRunLoop": Debugger.continueUntilNextRunLoopReturnValue;
     "Debugger.continueToLocation": Debugger.continueToLocationReturnValue;
     "Debugger.stepNext": Debugger.stepNextReturnValue;
@@ -9457,7 +9370,6 @@ the top of the viewport and Y increases as it proceeds towards the bottom of the
     "Debugger.searchInContent": Debugger.searchInContentReturnValue;
     "Debugger.getScriptSource": Debugger.getScriptSourceReturnValue;
     "Debugger.getFunctionDetails": Debugger.getFunctionDetailsReturnValue;
-    "Debugger.getBreakpointLocations": Debugger.getBreakpointLocationsReturnValue;
     "Debugger.setPauseOnDebuggerStatements": Debugger.setPauseOnDebuggerStatementsReturnValue;
     "Debugger.setPauseOnExceptions": Debugger.setPauseOnExceptionsReturnValue;
     "Debugger.setPauseOnAssertions": Debugger.setPauseOnAssertionsReturnValue;
@@ -9544,7 +9456,6 @@ the top of the viewport and Y increases as it proceeds towards the bottom of the
     "Page.setEmulatedMedia": Page.setEmulatedMediaReturnValue;
     "Page.setForcedAppearance": Page.setForcedAppearanceReturnValue;
     "Page.setForcedReducedMotion": Page.setForcedReducedMotionReturnValue;
-    "Page.setForcedColors": Page.setForcedColorsReturnValue;
     "Page.setTimeZone": Page.setTimeZoneReturnValue;
     "Page.setTouchEmulationEnabled": Page.setTouchEmulationEnabledReturnValue;
     "Page.snapshotNode": Page.snapshotNodeReturnValue;
diff --git a/packages/playwright-core/src/server/webkit/wkBrowser.ts b/packages/playwright-core/src/server/webkit/wkBrowser.ts
index eae9be81fd6a8a57fd845767f99bf3c2d8e93fa7..500505233b27488630465fae6f8485bff1ec12be 100644
--- a/packages/playwright-core/src/server/webkit/wkBrowser.ts
+++ b/packages/playwright-core/src/server/webkit/wkBrowser.ts
@@ -215,7 +215,7 @@ export class WKBrowserContext extends BrowserContext {
   override async _initialize() {
     assert(!this._wkPages().length);
     const browserContextId = this._browserContextId;
-    const promises: Promise<any>[] = [super._initialize()];
+    const promises: Promise<any>[] = [ super._initialize() ];
     promises.push(this._browser._browserSession.send('Playwright.setDownloadBehavior', {
       behavior: this._options.acceptDownloads ? 'allow' : 'deny',
       downloadPath: this._browser.options.downloadsPath,
diff --git a/packages/playwright-core/src/server/webkit/wkPage.ts b/packages/playwright-core/src/server/webkit/wkPage.ts
index f3939b29934bb81cabcec1b2d75f90e4fd7c4820..3aaa4d9d006b2c7f5203837ed44e240e3df8b159 100644
--- a/packages/playwright-core/src/server/webkit/wkPage.ts
+++ b/packages/playwright-core/src/server/webkit/wkPage.ts
@@ -194,8 +194,8 @@ export class WKPage implements PageDelegate {
     if (contextOptions.userAgent)
       promises.push(this.updateUserAgent());
     const emulatedMedia = this._page.emulatedMedia();
-    if (emulatedMedia.media || emulatedMedia.colorScheme || emulatedMedia.reducedMotion || emulatedMedia.forcedColors)
-      promises.push(WKPage._setEmulateMedia(session, emulatedMedia.media, emulatedMedia.colorScheme, emulatedMedia.reducedMotion, emulatedMedia.forcedColors));
+    if (emulatedMedia.media || emulatedMedia.colorScheme || emulatedMedia.reducedMotion)
+      promises.push(WKPage._setEmulateMedia(session, emulatedMedia.media, emulatedMedia.colorScheme, emulatedMedia.reducedMotion));
     for (const binding of this._page.allBindings())
       promises.push(session.send('Runtime.addBinding', { name: binding.name }));
     const bootstrapScript = this._calculateBootstrapScript();
@@ -380,8 +380,9 @@ export class WKPage implements PageDelegate {
       eventsHelper.addEventListener(this._session, 'Page.willCheckNavigationPolicy', event => this._onWillCheckNavigationPolicy(event.frameId)),
       eventsHelper.addEventListener(this._session, 'Page.didCheckNavigationPolicy', event => this._onDidCheckNavigationPolicy(event.frameId, event.cancel)),
       eventsHelper.addEventListener(this._session, 'Page.frameScheduledNavigation', event => this._onFrameScheduledNavigation(event.frameId)),
-      eventsHelper.addEventListener(this._session, 'Page.loadEventFired', event => this._page._frameManager.frameLifecycleEvent(event.frameId, 'load')),
-      eventsHelper.addEventListener(this._session, 'Page.domContentEventFired', event => this._page._frameManager.frameLifecycleEvent(event.frameId, 'domcontentloaded')),
+      eventsHelper.addEventListener(this._session, 'Page.frameStoppedLoading', event => this._onFrameStoppedLoading(event.frameId)),
+      eventsHelper.addEventListener(this._session, 'Page.loadEventFired', event => this._onLifecycleEvent(event.frameId, 'load')),
+      eventsHelper.addEventListener(this._session, 'Page.domContentEventFired', event => this._onLifecycleEvent(event.frameId, 'domcontentloaded')),
       eventsHelper.addEventListener(this._session, 'Runtime.executionContextCreated', event => this._onExecutionContextCreated(event.context)),
       eventsHelper.addEventListener(this._session, 'Runtime.bindingCalled', event => this._onBindingCalled(event.contextId, event.argument)),
       eventsHelper.addEventListener(this._session, 'Console.messageAdded', event => this._onConsoleMessage(event)),
@@ -449,6 +450,14 @@ export class WKPage implements PageDelegate {
     this._page._frameManager.frameRequestedNavigation(frameId);
   }
 
+  private _onFrameStoppedLoading(frameId: string) {
+    this._page._frameManager.frameStoppedLoading(frameId);
+  }
+
+  private _onLifecycleEvent(frameId: string, event: types.LifecycleEvent) {
+    this._page._frameManager.frameLifecycleEvent(frameId, event);
+  }
+
   private _handleFrameTree(frameTree: Protocol.Page.FrameResourceTree) {
     this._onFrameAttached(frameTree.frame.id, frameTree.frame.parentId || null);
     this._onFrameNavigated(frameTree.frame, true);
@@ -627,7 +636,7 @@ export class WKPage implements PageDelegate {
     await this._page._onFileChooserOpened(handle);
   }
 
-  private static async _setEmulateMedia(session: WKSession, mediaType: types.MediaType | null, colorScheme: types.ColorScheme | null, reducedMotion: types.ReducedMotion | null, forcedColors: types.ForcedColors | null): Promise<void> {
+  private static async _setEmulateMedia(session: WKSession, mediaType: types.MediaType | null, colorScheme: types.ColorScheme | null, reducedMotion: types.ReducedMotion | null): Promise<void> {
     const promises = [];
     promises.push(session.send('Page.setEmulatedMedia', { media: mediaType || '' }));
     let appearance: any = undefined;
@@ -642,12 +651,6 @@ export class WKPage implements PageDelegate {
       case 'no-preference': reducedMotionWk = 'NoPreference'; break;
     }
     promises.push(session.send('Page.setForcedReducedMotion', { reducedMotion: reducedMotionWk }));
-    let forcedColorsWk: any = undefined;
-    switch (forcedColors) {
-      case 'active': forcedColorsWk = 'Active'; break;
-      case 'none': forcedColorsWk = 'None'; break;
-    }
-    promises.push(session.send('Page.setForcedColors', { forcedColors: forcedColorsWk }));
     await Promise.all(promises);
   }
 
@@ -669,8 +672,7 @@ export class WKPage implements PageDelegate {
     const emulatedMedia = this._page.emulatedMedia();
     const colorScheme = emulatedMedia.colorScheme;
     const reducedMotion = emulatedMedia.reducedMotion;
-    const forcedColors = emulatedMedia.forcedColors;
-    await this._forAllSessions(session => WKPage._setEmulateMedia(session, emulatedMedia.media, colorScheme, reducedMotion, forcedColors));
+    await this._forAllSessions(session => WKPage._setEmulateMedia(session, emulatedMedia.media, colorScheme, reducedMotion));
   }
 
   async updateEmulatedViewportSize(): Promise<void> {
@@ -829,23 +831,9 @@ export class WKPage implements PageDelegate {
     this._recordingVideoFile = null;
   }
 
-  private validateScreenshotDimension(side: number, omitDeviceScaleFactor: boolean) {
-    // Cairo based implementations (Linux and Windows) have hard limit of 32767
-    // (see https://github.com/microsoft/playwright/issues/16727).
-    if (process.platform === 'darwin')
-      return;
-    if (!omitDeviceScaleFactor && this._page._browserContext._options.deviceScaleFactor)
-      side = Math.ceil(side * this._page._browserContext._options.deviceScaleFactor);
-    if (side > 32767)
-      throw new Error('Cannot take screenshot larger than 32767 pixels on any dimension');
-  }
-
   async takeScreenshot(progress: Progress, format: string, documentRect: types.Rect | undefined, viewportRect: types.Rect | undefined, quality: number | undefined, fitsViewport: boolean, scale: 'css' | 'device'): Promise<Buffer> {
     const rect = (documentRect || viewportRect)!;
-    const omitDeviceScaleFactor = scale === 'css';
-    this.validateScreenshotDimension(rect.width, omitDeviceScaleFactor);
-    this.validateScreenshotDimension(rect.height, omitDeviceScaleFactor);
-    const result = await this._session.send('Page.snapshotRect', { ...rect, coordinateSystem: documentRect ? 'Page' : 'Viewport', omitDeviceScaleFactor });
+    const result = await this._session.send('Page.snapshotRect', { ...rect, coordinateSystem: documentRect ? 'Page' : 'Viewport', omitDeviceScaleFactor: scale === 'css' });
     const prefix = 'data:image/png;base64,';
     let buffer = Buffer.from(result.dataURL.substr(prefix.length), 'base64');
     if (format === 'jpeg')
@@ -988,14 +976,17 @@ export class WKPage implements PageDelegate {
     const parent = frame.parentFrame();
     if (!parent)
       throw new Error('Frame has been detached.');
-    const context = await parent._mainContext();
-    const result = await this._session.send('DOM.resolveNode', {
-      frameId: frame._id,
-      executionContextId: ((context as any)[contextDelegateSymbol] as WKExecutionContext)._contextId
-    });
-    if (!result || result.object.subtype === 'null')
+    const info = this._page.parseSelector('frame,iframe');
+    const handles = await this._page.selectors._queryAll(parent, info);
+    const items = await Promise.all(handles.map(async handle => {
+      const frame = await handle.contentFrame().catch(e => null);
+      return { handle, frame };
+    }));
+    const result = items.find(item => item.frame === frame);
+    items.map(item => item === result ? Promise.resolve() : item.handle.dispose());
+    if (!result)
       throw new Error('Frame has been detached.');
-    return context.createHandle(result.object) as dom.ElementHandle;
+    return result.handle;
   }
 
   _onRequestWillBeSent(session: WKSession, event: Protocol.Network.requestWillBeSentPayload) {
diff --git a/packages/playwright-core/src/utils/httpServer.ts b/packages/playwright-core/src/utils/httpServer.ts
index db4d6761fd4b94f50ddac94816a181217f51e086..f5b8a4f78a7dd971711a8decd9abc10c12089d73 100644
--- a/packages/playwright-core/src/utils/httpServer.ts
+++ b/packages/playwright-core/src/utils/httpServer.ts
@@ -58,7 +58,7 @@ export class HttpServer {
       this._activeSockets.add(socket);
       socket.once('close', () => this._activeSockets.delete(socket));
     });
-    this._server.listen(port, 'localhost');
+    this._server.listen(port, '127.0.0.1');
     await new Promise(cb => this._server!.once('listening', cb));
     const address = this._server.address();
     assert(address, 'Could not bind server socket');
@@ -67,7 +67,7 @@ export class HttpServer {
         this._urlPrefix = address;
       } else {
         this._port = address.port;
-        this._urlPrefix = `http://localhost:${address.port}`;
+        this._urlPrefix = `http://127.0.0.1:${address.port}`;
       }
     }
     return this._urlPrefix;
diff --git a/packages/playwright-core/src/utils/multimap.ts b/packages/playwright-core/src/utils/multimap.ts
index 18777d29e5fdd5dc05b8c4bc7c29ad279077e105..bf9e2870a0b2bc8a029a734b707bb298c35e0c0d 100644
--- a/packages/playwright-core/src/utils/multimap.ts
+++ b/packages/playwright-core/src/utils/multimap.ts
@@ -46,9 +46,6 @@ export class MultiMap<K, V> {
       this._map.set(key, values.filter(v => value !== v));
   }
 
-  deleteAll(key: K) {
-    this._map.delete(key);
-  }
 
   hasValue(key: K, value: V): boolean {
     const values = this._map.get(key);
@@ -61,10 +58,6 @@ export class MultiMap<K, V> {
     return this._map.size;
   }
 
-  [Symbol.iterator](): Iterator<[K, V[]]> {
-    return this._map[Symbol.iterator]();
-  }
-
   keys(): IterableIterator<K> {
     return this._map.keys();
   }
diff --git a/packages/playwright-core/src/utils/processLauncher.ts b/packages/playwright-core/src/utils/processLauncher.ts
index e043ebe854bdee725a0eb6d5a70ffe21855390df..c2fa4328486026c5c9c1c1f4f7f3498ad8ada3fa 100644
--- a/packages/playwright-core/src/utils/processLauncher.ts
+++ b/packages/playwright-core/src/utils/processLauncher.ts
@@ -123,7 +123,7 @@ export async function launchProcess(options: LaunchProcessOptions): Promise<Laun
     cleanup().then(fulfillCleanup);
   });
 
-  const listeners = [eventsHelper.addEventListener(process, 'exit', killProcessAndCleanup)];
+  const listeners = [ eventsHelper.addEventListener(process, 'exit', killProcessAndCleanup) ];
   if (options.handleSIGINT) {
     listeners.push(eventsHelper.addEventListener(process, 'SIGINT', () => {
       gracefullyClose().then(() => {
diff --git a/packages/playwright-core/src/utils/stackTrace.ts b/packages/playwright-core/src/utils/stackTrace.ts
index f8b60663cc1049d6537f1180bad900f0ba476a60..b9c07dd04d16dedeaca2ee982783417add62cda9 100644
--- a/packages/playwright-core/src/utils/stackTrace.ts
+++ b/packages/playwright-core/src/utils/stackTrace.ts
@@ -64,6 +64,9 @@ export function isInternalFileName(file: string, functionName?: string): boolean
   // EventEmitter.emit has 'events.js' file.
   if (file === 'events.js' && functionName?.endsWith('emit'))
     return true;
+  // Node 12
+  if (file === '_stream_readable.js' || file === '_stream_writable.js')
+    return true;
   return false;
 }
 
diff --git a/packages/playwright-core/types/protocol.d.ts b/packages/playwright-core/types/protocol.d.ts
index abb4e3339aef2d0a93fc2907e03852141e3653b4..a9d7345550b0fe1abf1516f31fbfddb86d34bbdc 100644
--- a/packages/playwright-core/types/protocol.d.ts
+++ b/packages/playwright-core/types/protocol.d.ts
@@ -646,8 +646,8 @@ animation/transition.
     export interface AffectedFrame {
       frameId: Page.FrameId;
     }
-    export type CookieExclusionReason = "ExcludeSameSiteUnspecifiedTreatedAsLax"|"ExcludeSameSiteNoneInsecure"|"ExcludeSameSiteLax"|"ExcludeSameSiteStrict"|"ExcludeInvalidSameParty"|"ExcludeSamePartyCrossPartyContext"|"ExcludeDomainNonASCII";
-    export type CookieWarningReason = "WarnSameSiteUnspecifiedCrossSiteContext"|"WarnSameSiteNoneInsecure"|"WarnSameSiteUnspecifiedLaxAllowUnsafe"|"WarnSameSiteStrictLaxDowngradeStrict"|"WarnSameSiteStrictCrossDowngradeStrict"|"WarnSameSiteStrictCrossDowngradeLax"|"WarnSameSiteLaxCrossDowngradeStrict"|"WarnSameSiteLaxCrossDowngradeLax"|"WarnAttributeValueExceedsMaxSize"|"WarnDomainNonASCII";
+    export type CookieExclusionReason = "ExcludeSameSiteUnspecifiedTreatedAsLax"|"ExcludeSameSiteNoneInsecure"|"ExcludeSameSiteLax"|"ExcludeSameSiteStrict"|"ExcludeInvalidSameParty"|"ExcludeSamePartyCrossPartyContext";
+    export type CookieWarningReason = "WarnSameSiteUnspecifiedCrossSiteContext"|"WarnSameSiteNoneInsecure"|"WarnSameSiteUnspecifiedLaxAllowUnsafe"|"WarnSameSiteStrictLaxDowngradeStrict"|"WarnSameSiteStrictCrossDowngradeStrict"|"WarnSameSiteStrictCrossDowngradeLax"|"WarnSameSiteLaxCrossDowngradeStrict"|"WarnSameSiteLaxCrossDowngradeLax"|"WarnAttributeValueExceedsMaxSize";
     export type CookieOperation = "SetCookie"|"ReadCookie";
     /**
      * This information is currently necessary, as the front-end has a difficult
@@ -811,13 +811,14 @@ CORS RFC1918 enforcement.
       resourceIPAddressSpace?: Network.IPAddressSpace;
       clientSecurityState?: Network.ClientSecurityState;
     }
-    export type AttributionReportingIssueType = "PermissionPolicyDisabled"|"UntrustworthyReportingOrigin"|"InsecureContext"|"InvalidHeader"|"InvalidRegisterTriggerHeader"|"InvalidEligibleHeader"|"TooManyConcurrentRequests"|"SourceAndTriggerHeaders"|"SourceIgnored"|"TriggerIgnored";
+    export type AttributionReportingIssueType = "PermissionPolicyDisabled"|"AttributionSourceUntrustworthyOrigin"|"AttributionUntrustworthyOrigin"|"InvalidHeader";
     /**
      * Details for issues around "Attribution Reporting API" usage.
 Explainer: https://github.com/WICG/attribution-reporting-api
      */
     export interface AttributionReportingIssueDetails {
       violationType: AttributionReportingIssueType;
+      frame?: AffectedFrame;
       request?: AffectedRequest;
       violatingNodeId?: DOM.BackendNodeId;
       invalidParameter?: string;
@@ -852,7 +853,7 @@ instead of "limited-quirks".
       errorType: GenericIssueErrorType;
       frameId?: Page.FrameId;
     }
-    export type DeprecationIssueType = "AuthorizationCoveredByWildcard"|"CanRequestURLHTTPContainingNewline"|"ChromeLoadTimesConnectionInfo"|"ChromeLoadTimesFirstPaintAfterLoadTime"|"ChromeLoadTimesWasAlternateProtocolAvailable"|"CookieWithTruncatingChar"|"CrossOriginAccessBasedOnDocumentDomain"|"CrossOriginWindowAlert"|"CrossOriginWindowConfirm"|"CSSSelectorInternalMediaControlsOverlayCastButton"|"DeprecationExample"|"DocumentDomainSettingWithoutOriginAgentClusterHeader"|"EventPath"|"ExpectCTHeader"|"GeolocationInsecureOrigin"|"GeolocationInsecureOriginDeprecatedNotRemoved"|"GetUserMediaInsecureOrigin"|"HostCandidateAttributeGetter"|"IdentityInCanMakePaymentEvent"|"InsecurePrivateNetworkSubresourceRequest"|"LegacyConstraintGoogIPv6"|"LocalCSSFileExtensionRejected"|"MediaSourceAbortRemove"|"MediaSourceDurationTruncatingBuffered"|"NavigateEventRestoreScroll"|"NavigateEventTransitionWhile"|"NoSysexWebMIDIWithoutPermission"|"NotificationInsecureOrigin"|"NotificationPermissionRequestedIframe"|"ObsoleteWebRtcCipherSuite"|"OpenWebDatabaseInsecureContext"|"OverflowVisibleOnReplacedElement"|"PersistentQuotaType"|"PictureSourceSrc"|"PrefixedCancelAnimationFrame"|"PrefixedRequestAnimationFrame"|"PrefixedStorageInfo"|"PrefixedVideoDisplayingFullscreen"|"PrefixedVideoEnterFullscreen"|"PrefixedVideoEnterFullScreen"|"PrefixedVideoExitFullscreen"|"PrefixedVideoExitFullScreen"|"PrefixedVideoSupportsFullscreen"|"RangeExpand"|"RequestedSubresourceWithEmbeddedCredentials"|"RTCConstraintEnableDtlsSrtpFalse"|"RTCConstraintEnableDtlsSrtpTrue"|"RTCPeerConnectionComplexPlanBSdpUsingDefaultSdpSemantics"|"RTCPeerConnectionSdpSemanticsPlanB"|"RtcpMuxPolicyNegotiate"|"SharedArrayBufferConstructedWithoutIsolation"|"TextToSpeech_DisallowedByAutoplay"|"V8SharedArrayBufferConstructedInExtensionWithoutIsolation"|"XHRJSONEncodingDetection"|"XMLHttpRequestSynchronousInNonWorkerOutsideBeforeUnload"|"XRSupportsSession";
+    export type DeprecationIssueType = "AuthorizationCoveredByWildcard"|"CanRequestURLHTTPContainingNewline"|"ChromeLoadTimesConnectionInfo"|"ChromeLoadTimesFirstPaintAfterLoadTime"|"ChromeLoadTimesWasAlternateProtocolAvailable"|"CookieWithTruncatingChar"|"CrossOriginAccessBasedOnDocumentDomain"|"CrossOriginWindowAlert"|"CrossOriginWindowConfirm"|"CSSSelectorInternalMediaControlsOverlayCastButton"|"DeprecationExample"|"DocumentDomainSettingWithoutOriginAgentClusterHeader"|"EventPath"|"ExpectCTHeader"|"GeolocationInsecureOrigin"|"GeolocationInsecureOriginDeprecatedNotRemoved"|"GetUserMediaInsecureOrigin"|"HostCandidateAttributeGetter"|"IdentityInCanMakePaymentEvent"|"InsecurePrivateNetworkSubresourceRequest"|"LegacyConstraintGoogIPv6"|"LocalCSSFileExtensionRejected"|"MediaSourceAbortRemove"|"MediaSourceDurationTruncatingBuffered"|"NavigateEventRestoreScroll"|"NavigateEventTransitionWhile"|"NoSysexWebMIDIWithoutPermission"|"NotificationInsecureOrigin"|"NotificationPermissionRequestedIframe"|"ObsoleteWebRtcCipherSuite"|"OpenWebDatabaseInsecureContext"|"OverflowVisibleOnReplacedElement"|"PictureSourceSrc"|"PrefixedCancelAnimationFrame"|"PrefixedRequestAnimationFrame"|"PrefixedStorageInfo"|"PrefixedVideoDisplayingFullscreen"|"PrefixedVideoEnterFullscreen"|"PrefixedVideoEnterFullScreen"|"PrefixedVideoExitFullscreen"|"PrefixedVideoExitFullScreen"|"PrefixedVideoSupportsFullscreen"|"RangeExpand"|"RequestedSubresourceWithEmbeddedCredentials"|"RTCConstraintEnableDtlsSrtpFalse"|"RTCConstraintEnableDtlsSrtpTrue"|"RTCPeerConnectionComplexPlanBSdpUsingDefaultSdpSemantics"|"RTCPeerConnectionSdpSemanticsPlanB"|"RtcpMuxPolicyNegotiate"|"SharedArrayBufferConstructedWithoutIsolation"|"TextToSpeech_DisallowedByAutoplay"|"V8SharedArrayBufferConstructedInExtensionWithoutIsolation"|"XHRJSONEncodingDetection"|"XMLHttpRequestSynchronousInNonWorkerOutsideBeforeUnload"|"XRSupportsSession";
     /**
      * This issue tracks information needed to print a deprecation message.
 https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/frame/third_party/blink/renderer/core/frame/deprecation/README.md
@@ -872,7 +873,7 @@ Should be updated alongside RequestIdTokenStatus in
 third_party/blink/public/mojom/devtools/inspector_issue.mojom to include
 all cases except for success.
      */
-    export type FederatedAuthRequestIssueReason = "ApprovalDeclined"|"TooManyRequests"|"ManifestListHttpNotFound"|"ManifestListNoResponse"|"ManifestListInvalidResponse"|"ManifestNotInManifestList"|"ManifestListTooBig"|"ManifestHttpNotFound"|"ManifestNoResponse"|"ManifestInvalidResponse"|"ClientMetadataHttpNotFound"|"ClientMetadataNoResponse"|"ClientMetadataInvalidResponse"|"DisabledInSettings"|"ErrorFetchingSignin"|"InvalidSigninResponse"|"AccountsHttpNotFound"|"AccountsNoResponse"|"AccountsInvalidResponse"|"IdTokenHttpNotFound"|"IdTokenNoResponse"|"IdTokenInvalidResponse"|"IdTokenInvalidRequest"|"ErrorIdToken"|"Canceled";
+    export type FederatedAuthRequestIssueReason = "ApprovalDeclined"|"TooManyRequests"|"ManifestListHttpNotFound"|"ManifestListNoResponse"|"ManifestListInvalidResponse"|"ManifestNotInManifestList"|"ManifestListTooBig"|"ManifestHttpNotFound"|"ManifestNoResponse"|"ManifestInvalidResponse"|"ClientMetadataHttpNotFound"|"ClientMetadataNoResponse"|"ClientMetadataInvalidResponse"|"ClientMetadataMissingPrivacyPolicyUrl"|"DisabledInSettings"|"ErrorFetchingSignin"|"InvalidSigninResponse"|"AccountsHttpNotFound"|"AccountsNoResponse"|"AccountsInvalidResponse"|"IdTokenHttpNotFound"|"IdTokenNoResponse"|"IdTokenInvalidResponse"|"IdTokenInvalidRequest"|"ErrorIdToken"|"Canceled";
     /**
      * This issue tracks client hints related issues. It's used to deprecate old
 features, encourage the use of new ones, and provide general guidance.
@@ -1861,11 +1862,6 @@ stylesheet rules) this rule came from.
        * The entire property range in the enclosing style declaration (if available).
        */
       range?: SourceRange;
-      /**
-       * Parsed longhand components of this property if it is a shorthand.
-This field will be empty if the given property is not a shorthand.
-       */
-      longhandProperties?: CSSProperty[];
     }
     /**
      * CSS media rule descriptor.
@@ -5962,14 +5958,9 @@ requires the version number to be 'unsigned long long')
      */
     export type clearObjectStoreParameters = {
       /**
-       * At least and at most one of securityOrigin, storageKey must be specified.
-Security origin.
-       */
-      securityOrigin?: string;
-      /**
-       * Storage key.
+       * Security origin.
        */
-      storageKey?: string;
+      securityOrigin: string;
       /**
        * Database name.
        */
@@ -5986,14 +5977,9 @@ Security origin.
      */
     export type deleteDatabaseParameters = {
       /**
-       * At least and at most one of securityOrigin, storageKey must be specified.
-Security origin.
-       */
-      securityOrigin?: string;
-      /**
-       * Storage key.
+       * Security origin.
        */
-      storageKey?: string;
+      securityOrigin: string;
       /**
        * Database name.
        */
@@ -6005,15 +5991,7 @@ Security origin.
      * Delete a range of entries from an object store
      */
     export type deleteObjectStoreEntriesParameters = {
-      /**
-       * At least and at most one of securityOrigin, storageKey must be specified.
-Security origin.
-       */
-      securityOrigin?: string;
-      /**
-       * Storage key.
-       */
-      storageKey?: string;
+      securityOrigin: string;
       databaseName: string;
       objectStoreName: string;
       /**
@@ -6042,14 +6020,9 @@ Security origin.
      */
     export type requestDataParameters = {
       /**
-       * At least and at most one of securityOrigin, storageKey must be specified.
-Security origin.
-       */
-      securityOrigin?: string;
-      /**
-       * Storage key.
+       * Security origin.
        */
-      storageKey?: string;
+      securityOrigin: string;
       /**
        * Database name.
        */
@@ -6090,14 +6063,9 @@ Security origin.
      */
     export type getMetadataParameters = {
       /**
-       * At least and at most one of securityOrigin, storageKey must be specified.
-Security origin.
-       */
-      securityOrigin?: string;
-      /**
-       * Storage key.
+       * Security origin.
        */
-      storageKey?: string;
+      securityOrigin: string;
       /**
        * Database name.
        */
@@ -6124,14 +6092,9 @@ is true.
      */
     export type requestDatabaseParameters = {
       /**
-       * At least and at most one of securityOrigin, storageKey must be specified.
-Security origin.
-       */
-      securityOrigin?: string;
-      /**
-       * Storage key.
+       * Security origin.
        */
-      storageKey?: string;
+      securityOrigin: string;
       /**
        * Database name.
        */
@@ -6148,14 +6111,9 @@ Security origin.
      */
     export type requestDatabaseNamesParameters = {
       /**
-       * At least and at most one of securityOrigin, storageKey must be specified.
-Security origin.
-       */
-      securityOrigin?: string;
-      /**
-       * Storage key.
+       * Security origin.
        */
-      storageKey?: string;
+      securityOrigin: string;
     }
     export type requestDatabaseNamesReturnValue = {
       /**
@@ -10329,7 +10287,7 @@ as an ad.
      * All Permissions Policy features. This enum should match the one defined
 in third_party/blink/renderer/core/permissions_policy/permissions_policy_features.json5.
      */
-    export type PermissionsPolicyFeature = "accelerometer"|"ambient-light-sensor"|"attribution-reporting"|"autoplay"|"bluetooth"|"browsing-topics"|"camera"|"ch-dpr"|"ch-device-memory"|"ch-downlink"|"ch-ect"|"ch-prefers-color-scheme"|"ch-rtt"|"ch-save-data"|"ch-ua"|"ch-ua-arch"|"ch-ua-bitness"|"ch-ua-platform"|"ch-ua-model"|"ch-ua-mobile"|"ch-ua-full"|"ch-ua-full-version"|"ch-ua-full-version-list"|"ch-ua-platform-version"|"ch-ua-reduced"|"ch-ua-wow64"|"ch-viewport-height"|"ch-viewport-width"|"ch-width"|"clipboard-read"|"clipboard-write"|"cross-origin-isolated"|"direct-sockets"|"display-capture"|"document-domain"|"encrypted-media"|"execution-while-out-of-viewport"|"execution-while-not-rendered"|"federated-credentials"|"focus-without-user-activation"|"fullscreen"|"frobulate"|"gamepad"|"geolocation"|"gyroscope"|"hid"|"idle-detection"|"interest-cohort"|"join-ad-interest-group"|"keyboard-map"|"local-fonts"|"magnetometer"|"microphone"|"midi"|"otp-credentials"|"payment"|"picture-in-picture"|"publickey-credentials-get"|"run-ad-auction"|"screen-wake-lock"|"serial"|"shared-autofill"|"shared-storage"|"storage-access"|"sync-xhr"|"trust-token-redemption"|"unload"|"usb"|"vertical-scroll"|"web-share"|"window-placement"|"xr-spatial-tracking";
+    export type PermissionsPolicyFeature = "accelerometer"|"ambient-light-sensor"|"attribution-reporting"|"autoplay"|"bluetooth"|"browsing-topics"|"camera"|"ch-dpr"|"ch-device-memory"|"ch-downlink"|"ch-ect"|"ch-prefers-color-scheme"|"ch-rtt"|"ch-save-data"|"ch-ua"|"ch-ua-arch"|"ch-ua-bitness"|"ch-ua-platform"|"ch-ua-model"|"ch-ua-mobile"|"ch-ua-full"|"ch-ua-full-version"|"ch-ua-full-version-list"|"ch-ua-platform-version"|"ch-ua-reduced"|"ch-ua-wow64"|"ch-viewport-height"|"ch-viewport-width"|"ch-width"|"clipboard-read"|"clipboard-write"|"cross-origin-isolated"|"direct-sockets"|"display-capture"|"document-domain"|"encrypted-media"|"execution-while-out-of-viewport"|"execution-while-not-rendered"|"federated-credentials"|"focus-without-user-activation"|"fullscreen"|"frobulate"|"gamepad"|"geolocation"|"gyroscope"|"hid"|"idle-detection"|"interest-cohort"|"join-ad-interest-group"|"keyboard-map"|"local-fonts"|"magnetometer"|"microphone"|"midi"|"otp-credentials"|"payment"|"picture-in-picture"|"publickey-credentials-get"|"run-ad-auction"|"screen-wake-lock"|"serial"|"shared-autofill"|"shared-storage"|"storage-access-api"|"sync-xhr"|"trust-token-redemption"|"usb"|"vertical-scroll"|"web-share"|"window-placement"|"xr-spatial-tracking";
     /**
      * Reason for a permissions policy feature to be disabled.
      */
@@ -10832,7 +10790,7 @@ dependent on the reason:
     /**
      * List of FinalStatus reasons for Prerender2.
      */
-    export type PrerenderFinalStatus = "Activated"|"Destroyed"|"LowEndDevice"|"CrossOriginRedirect"|"CrossOriginNavigation"|"InvalidSchemeRedirect"|"InvalidSchemeNavigation"|"InProgressNavigation"|"NavigationRequestBlockedByCsp"|"MainFrameNavigation"|"MojoBinderPolicy"|"RendererProcessCrashed"|"RendererProcessKilled"|"Download"|"TriggerDestroyed"|"NavigationNotCommitted"|"NavigationBadHttpStatus"|"ClientCertRequested"|"NavigationRequestNetworkError"|"MaxNumOfRunningPrerendersExceeded"|"CancelAllHostsForTesting"|"DidFailLoad"|"Stop"|"SslCertificateError"|"LoginAuthRequested"|"UaChangeRequiresReload"|"BlockedByClient"|"AudioOutputDeviceRequested"|"MixedContent"|"TriggerBackgrounded"|"EmbedderTriggeredAndSameOriginRedirected"|"EmbedderTriggeredAndCrossOriginRedirected"|"MemoryLimitExceeded"|"FailToGetMemoryUsage"|"DataSaverEnabled";
+    export type PrerenderFinalStatus = "Activated"|"Destroyed"|"LowEndDevice"|"CrossOriginRedirect"|"CrossOriginNavigation"|"InvalidSchemeRedirect"|"InvalidSchemeNavigation"|"InProgressNavigation"|"NavigationRequestBlockedByCsp"|"MainFrameNavigation"|"MojoBinderPolicy"|"RendererProcessCrashed"|"RendererProcessKilled"|"Download"|"TriggerDestroyed"|"NavigationNotCommitted"|"NavigationBadHttpStatus"|"ClientCertRequested"|"NavigationRequestNetworkError"|"MaxNumOfRunningPrerendersExceeded"|"CancelAllHostsForTesting"|"DidFailLoad"|"Stop"|"SslCertificateError"|"LoginAuthRequested"|"UaChangeRequiresReload"|"BlockedByClient"|"AudioOutputDeviceRequested"|"MixedContent"|"TriggerBackgrounded"|"EmbedderTriggeredAndSameOriginRedirected"|"EmbedderTriggeredAndCrossOriginRedirected"|"EmbedderTriggeredAndDestroyed";
     
     export type domContentEventFiredPayload = {
       timestamp: Network.MonotonicTime;
@@ -11120,11 +11078,6 @@ when bfcache navigation fails.
       initiatingFrameId: FrameId;
       prerenderingUrl: string;
       finalStatus: PrerenderFinalStatus;
-      /**
-       * This is used to give users more information about the cancellation details,
-and this will be formatted for display.
-       */
-      reasonDetails?: string;
     }
     export type loadEventFiredPayload = {
       timestamp: Network.MonotonicTime;
@@ -12800,10 +12753,6 @@ Tokens from that issuer.
        * Origin to update.
        */
       origin: string;
-      /**
-       * Storage key to update.
-       */
-      storageKey: string;
       /**
        * Database to update.
        */
@@ -12821,10 +12770,6 @@ Tokens from that issuer.
        * Origin to update.
        */
       origin: string;
-      /**
-       * Storage key to update.
-       */
-      storageKey: string;
     }
     /**
      * One of the interest groups was accessed by the associated page.
@@ -12986,17 +12931,6 @@ disabled (called without a quotaSize).
     }
     export type trackIndexedDBForOriginReturnValue = {
     }
-    /**
-     * Registers storage key to be notified when an update occurs to its IndexedDB.
-     */
-    export type trackIndexedDBForStorageKeyParameters = {
-      /**
-       * Storage key.
-       */
-      storageKey: string;
-    }
-    export type trackIndexedDBForStorageKeyReturnValue = {
-    }
     /**
      * Unregisters origin from receiving notifications for cache storage.
      */
@@ -13019,17 +12953,6 @@ disabled (called without a quotaSize).
     }
     export type untrackIndexedDBForOriginReturnValue = {
     }
-    /**
-     * Unregisters storage key from receiving notifications for IndexedDB.
-     */
-    export type untrackIndexedDBForStorageKeyParameters = {
-      /**
-       * Storage key.
-       */
-      storageKey: string;
-    }
-    export type untrackIndexedDBForStorageKeyReturnValue = {
-    }
     /**
      * Returns the number of stored Trust Tokens per issuer for the
 current browsing context.
@@ -13319,28 +13242,6 @@ supported.
       openerFrameId?: Page.FrameId;
       browserContextId?: Browser.BrowserContextID;
     }
-    /**
-     * A filter used by target query/discovery/auto-attach operations.
-     */
-    export interface FilterEntry {
-      /**
-       * If set, causes exclusion of mathcing targets from the list.
-       */
-      exclude?: boolean;
-      /**
-       * If not present, matches any type.
-       */
-      type?: string;
-    }
-    /**
-     * The entries in TargetFilter are matched sequentially against targets and
-the first entry that matches determines if the target is included or not,
-depending on the value of `exclude` field in the entry.
-If filter is not specified, the one assumed is
-[{type: "browser", exclude: true}, {type: "tab", exclude: true}, {}]
-(i.e. include everything but `browser` and `tab`).
-     */
-    export type TargetFilter = FilterEntry[];
     export interface RemoteLocation {
       host: string;
       port: number;
@@ -13606,12 +13507,6 @@ beforeunload hooks.
      * Retrieves a list of available targets.
      */
     export type getTargetsParameters = {
-      /**
-       * Only targets matching filter will be reported. If filter is not specified
-and target discovery is currently enabled, a filter used for target discovery
-is used for consistency.
-       */
-      filter?: TargetFilter;
     }
     export type getTargetsReturnValue = {
       /**
@@ -13660,10 +13555,6 @@ We plan to make this the default, deprecate non-flattened mode,
 and eventually retire it. See crbug.com/991325.
        */
       flatten?: boolean;
-      /**
-       * Only targets matching filter will be attached.
-       */
-      filter?: TargetFilter;
     }
     export type setAutoAttachReturnValue = {
     }
@@ -13681,10 +13572,6 @@ This cancels the effect of any previous `setAutoAttach` and is also cancelled by
 to run paused targets.
        */
       waitForDebuggerOnStart: boolean;
-      /**
-       * Only targets matching filter will be attached.
-       */
-      filter?: TargetFilter;
     }
     export type autoAttachRelatedReturnValue = {
     }
@@ -13697,11 +13584,6 @@ to run paused targets.
        * Whether to discover available targets.
        */
       discover: boolean;
-      /**
-       * Only targets matching filter will be attached. If `discover` is false,
-`filter` must be omitted or empty.
-       */
-      filter?: TargetFilter;
     }
     export type setDiscoverTargetsReturnValue = {
     }
@@ -15487,8 +15369,8 @@ disassembly can be read successively.
        */
       totalNumberOfLines: number;
       /**
-       * The offsets of all function bodies, in the format [start1, end1,
-start2, end2, ...] where all ends are exclusive.
+       * The offsets of all function bodies plus one additional entry pointing
+one by past the end of the last function.
        */
       functionBodyOffsets: number[];
       /**
@@ -18102,10 +17984,8 @@ Error was thrown.
     "Storage.overrideQuotaForOrigin": Storage.overrideQuotaForOriginParameters;
     "Storage.trackCacheStorageForOrigin": Storage.trackCacheStorageForOriginParameters;
     "Storage.trackIndexedDBForOrigin": Storage.trackIndexedDBForOriginParameters;
-    "Storage.trackIndexedDBForStorageKey": Storage.trackIndexedDBForStorageKeyParameters;
     "Storage.untrackCacheStorageForOrigin": Storage.untrackCacheStorageForOriginParameters;
     "Storage.untrackIndexedDBForOrigin": Storage.untrackIndexedDBForOriginParameters;
-    "Storage.untrackIndexedDBForStorageKey": Storage.untrackIndexedDBForStorageKeyParameters;
     "Storage.getTrustTokens": Storage.getTrustTokensParameters;
     "Storage.clearTrustTokens": Storage.clearTrustTokensParameters;
     "Storage.getInterestGroupDetails": Storage.getInterestGroupDetailsParameters;
@@ -18640,10 +18520,8 @@ Error was thrown.
     "Storage.overrideQuotaForOrigin": Storage.overrideQuotaForOriginReturnValue;
     "Storage.trackCacheStorageForOrigin": Storage.trackCacheStorageForOriginReturnValue;
     "Storage.trackIndexedDBForOrigin": Storage.trackIndexedDBForOriginReturnValue;
-    "Storage.trackIndexedDBForStorageKey": Storage.trackIndexedDBForStorageKeyReturnValue;
     "Storage.untrackCacheStorageForOrigin": Storage.untrackCacheStorageForOriginReturnValue;
     "Storage.untrackIndexedDBForOrigin": Storage.untrackIndexedDBForOriginReturnValue;
-    "Storage.untrackIndexedDBForStorageKey": Storage.untrackIndexedDBForStorageKeyReturnValue;
     "Storage.getTrustTokens": Storage.getTrustTokensReturnValue;
     "Storage.clearTrustTokens": Storage.clearTrustTokensReturnValue;
     "Storage.getInterestGroupDetails": Storage.getInterestGroupDetailsReturnValue;
diff --git a/packages/playwright-core/types/types.d.ts b/packages/playwright-core/types/types.d.ts
index d3f93e89a4f7818194ed9ceec4a92e0ee92fea90..c85c16b0370a653aabdb9c14b7538c2d3c538cb9 100644
--- a/packages/playwright-core/types/types.d.ts
+++ b/packages/playwright-core/types/types.d.ts
@@ -593,7 +593,7 @@ export interface Page {
    * `detached`.
    *
    * > NOTE: Playwright automatically waits for element to be ready before performing an action. Using [Locator] objects and
-   * web-first assertions makes the code wait-for-selector-free.
+   * web-first assertions make the code wait-for-selector-free.
    *
    * Wait for the `selector` to satisfy `state` option (either appear/disappear from dom, or become visible/hidden). If at
    * the moment of calling the method `selector` already satisfies the condition, the method will return immediately. If the
@@ -625,7 +625,7 @@ export interface Page {
    * `detached`.
    *
    * > NOTE: Playwright automatically waits for element to be ready before performing an action. Using [Locator] objects and
-   * web-first assertions makes the code wait-for-selector-free.
+   * web-first assertions make the code wait-for-selector-free.
    *
    * Wait for the `selector` to satisfy `state` option (either appear/disappear from dom, or become visible/hidden). If at
    * the moment of calling the method `selector` already satisfies the condition, the method will return immediately. If the
@@ -657,7 +657,7 @@ export interface Page {
    * `detached`.
    *
    * > NOTE: Playwright automatically waits for element to be ready before performing an action. Using [Locator] objects and
-   * web-first assertions makes the code wait-for-selector-free.
+   * web-first assertions make the code wait-for-selector-free.
    *
    * Wait for the `selector` to satisfy `state` option (either appear/disappear from dom, or become visible/hidden). If at
    * the moment of calling the method `selector` already satisfies the condition, the method will return immediately. If the
@@ -689,7 +689,7 @@ export interface Page {
    * `detached`.
    *
    * > NOTE: Playwright automatically waits for element to be ready before performing an action. Using [Locator] objects and
-   * web-first assertions makes the code wait-for-selector-free.
+   * web-first assertions make the code wait-for-selector-free.
    *
    * Wait for the `selector` to satisfy `state` option (either appear/disappear from dom, or become visible/hidden). If at
    * the moment of calling the method `selector` already satisfies the condition, the method will return immediately. If the
@@ -1877,7 +1877,7 @@ export interface Page {
     };
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -1959,7 +1959,7 @@ export interface Page {
     };
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -2075,7 +2075,7 @@ export interface Page {
     };
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -2131,7 +2131,7 @@ export interface Page {
    */
   dispatchEvent(selector: string, type: string, eventInit?: EvaluationArgument, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -2174,7 +2174,7 @@ export interface Page {
     };
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -2249,6 +2249,8 @@ export interface Page {
     /**
      * Emulates `'forced-colors'` media feature, supported values are `'active'` and `'none'`. Passing `null` disables forced
      * colors emulation.
+     *
+     * > NOTE: It's not supported in WebKit, see [here](https://bugs.webkit.org/show_bug.cgi?id=225281) in their issue tracker.
      */
     forcedColors?: null|"active"|"none";
 
@@ -2340,7 +2342,7 @@ export interface Page {
     noWaitAfter?: boolean;
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -2364,7 +2366,7 @@ export interface Page {
    */
   focus(selector: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -2430,7 +2432,7 @@ export interface Page {
    */
   getAttribute(selector: string, name: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -2592,7 +2594,7 @@ export interface Page {
     };
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -2619,7 +2621,7 @@ export interface Page {
    */
   innerHTML(selector: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -2640,7 +2642,7 @@ export interface Page {
    */
   innerText(selector: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -2664,7 +2666,7 @@ export interface Page {
    */
   inputValue(selector: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -2685,7 +2687,7 @@ export interface Page {
    */
   isChecked(selector: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -2711,7 +2713,7 @@ export interface Page {
    */
   isDisabled(selector: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -2732,7 +2734,7 @@ export interface Page {
    */
   isEditable(selector: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -2753,7 +2755,7 @@ export interface Page {
    */
   isEnabled(selector: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -2775,7 +2777,7 @@ export interface Page {
    */
   isHidden(selector: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -2797,7 +2799,7 @@ export interface Page {
    */
   isVisible(selector: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -3061,7 +3063,7 @@ export interface Page {
     noWaitAfter?: boolean;
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -3282,7 +3284,7 @@ export interface Page {
     noWaitAfter?: boolean;
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -3341,7 +3343,7 @@ export interface Page {
     };
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -3478,7 +3480,7 @@ export interface Page {
     noWaitAfter?: boolean;
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -3577,7 +3579,7 @@ export interface Page {
     };
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -3604,7 +3606,7 @@ export interface Page {
    */
   textContent(selector: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -3659,7 +3661,7 @@ export interface Page {
     noWaitAfter?: boolean;
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -3717,7 +3719,7 @@ export interface Page {
     };
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -4953,7 +4955,7 @@ export interface Frame {
     };
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -5035,7 +5037,7 @@ export interface Frame {
     };
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -5118,7 +5120,7 @@ export interface Frame {
     };
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -5174,7 +5176,7 @@ export interface Frame {
    */
   dispatchEvent(selector: string, type: string, eventInit?: EvaluationArgument, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -5217,7 +5219,7 @@ export interface Frame {
     };
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -5277,7 +5279,7 @@ export interface Frame {
     noWaitAfter?: boolean;
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -5299,7 +5301,7 @@ export interface Frame {
    */
   focus(selector: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -5353,7 +5355,7 @@ export interface Frame {
    */
   getAttribute(selector: string, name: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -5454,7 +5456,7 @@ export interface Frame {
     };
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -5481,7 +5483,7 @@ export interface Frame {
    */
   innerHTML(selector: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -5502,7 +5504,7 @@ export interface Frame {
    */
   innerText(selector: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -5526,7 +5528,7 @@ export interface Frame {
    */
   inputValue(selector: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -5547,7 +5549,7 @@ export interface Frame {
    */
   isChecked(selector: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -5573,7 +5575,7 @@ export interface Frame {
    */
   isDisabled(selector: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -5594,7 +5596,7 @@ export interface Frame {
    */
   isEditable(selector: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -5615,7 +5617,7 @@ export interface Frame {
    */
   isEnabled(selector: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -5637,7 +5639,7 @@ export interface Frame {
    */
   isHidden(selector: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -5659,7 +5661,7 @@ export interface Frame {
    */
   isVisible(selector: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -5753,7 +5755,7 @@ export interface Frame {
     noWaitAfter?: boolean;
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -5839,7 +5841,7 @@ export interface Frame {
     noWaitAfter?: boolean;
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -5895,7 +5897,7 @@ export interface Frame {
     };
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -5991,7 +5993,7 @@ export interface Frame {
     noWaitAfter?: boolean;
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -6052,7 +6054,7 @@ export interface Frame {
     };
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -6079,7 +6081,7 @@ export interface Frame {
    */
   textContent(selector: string, options?: {
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -6129,7 +6131,7 @@ export interface Frame {
     noWaitAfter?: boolean;
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -6184,7 +6186,7 @@ export interface Frame {
     };
 
     /**
-     * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+     * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
      * element, the call throws an exception.
      */
     strict?: boolean;
@@ -10363,13 +10365,6 @@ export interface BrowserType<Unused = {}> {
    * [browser.contexts()](https://playwright.dev/docs/api/class-browser#browser-contexts).
    *
    * > NOTE: Connecting over the Chrome DevTools Protocol is only supported for Chromium-based browsers.
-   *
-   * ```js
-   * const browser = await playwright.chromium.connectOverCDP('http://localhost:9222');
-   * const defaultContext = browser.contexts()[0];
-   * const page = defaultContext.pages()[0];
-   * ```
-   *
    * @param endpointURL A CDP websocket endpoint or http url to connect to. For example `http://localhost:9222/` or `ws://127.0.0.1:9222/devtools/browser/387adf4c-243f-4051-a181-46798f4a46f4`.
    * @param options
    */
@@ -10385,13 +10380,6 @@ export interface BrowserType<Unused = {}> {
    * [browser.contexts()](https://playwright.dev/docs/api/class-browser#browser-contexts).
    *
    * > NOTE: Connecting over the Chrome DevTools Protocol is only supported for Chromium-based browsers.
-   *
-   * ```js
-   * const browser = await playwright.chromium.connectOverCDP('http://localhost:9222');
-   * const defaultContext = browser.contexts()[0];
-   * const page = defaultContext.pages()[0];
-   * ```
-   *
    * @param endpointURL A CDP websocket endpoint or http url to connect to. For example `http://localhost:9222/` or `ws://127.0.0.1:9222/devtools/browser/387adf4c-243f-4051-a181-46798f4a46f4`.
    * @param options
    */
@@ -10553,6 +10541,8 @@ export interface BrowserType<Unused = {}> {
      * Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See
      * [page.emulateMedia([options])](https://playwright.dev/docs/api/class-page#page-emulate-media) for more details. Defaults
      * to `'none'`.
+     *
+     * > NOTE: It's not supported in WebKit, see [here](https://bugs.webkit.org/show_bug.cgi?id=225281) in their issue tracker.
      */
     forcedColors?: "active"|"none";
 
@@ -11196,7 +11186,7 @@ type AccessibilityNode = {
   children?: AccessibilityNode[];
 }
 
-export const devices: Devices;
+export const devices: Devices & DeviceDescriptor[];
 
 //@ts-ignore this will be any if electron is not installed
 type ElectronType = typeof import('electron');
@@ -11812,6 +11802,8 @@ export interface AndroidDevice {
      * Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See
      * [page.emulateMedia([options])](https://playwright.dev/docs/api/class-page#page-emulate-media) for more details. Defaults
      * to `'none'`.
+     *
+     * > NOTE: It's not supported in WebKit, see [here](https://bugs.webkit.org/show_bug.cgi?id=225281) in their issue tracker.
      */
     forcedColors?: "active"|"none";
 
@@ -12667,12 +12659,6 @@ export interface APIRequestContext {
      */
     ignoreHTTPSErrors?: boolean;
 
-    /**
-     * Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is
-     * exceeded. Defaults to `20`. Pass `0` to not follow redirects.
-     */
-    maxRedirects?: number;
-
     /**
      * Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request
      * body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly
@@ -12753,12 +12739,6 @@ export interface APIRequestContext {
      */
     ignoreHTTPSErrors?: boolean;
 
-    /**
-     * Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is
-     * exceeded. Defaults to `20`. Pass `0` to not follow redirects.
-     */
-    maxRedirects?: number;
-
     /**
      * If set changes the fetch method (e.g. [PUT](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT) or
      * [POST](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST)). If not specified, GET method is used.
@@ -12822,12 +12802,6 @@ export interface APIRequestContext {
      */
     ignoreHTTPSErrors?: boolean;
 
-    /**
-     * Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is
-     * exceeded. Defaults to `20`. Pass `0` to not follow redirects.
-     */
-    maxRedirects?: number;
-
     /**
      * Query parameters to be sent with the URL.
      */
@@ -12862,12 +12836,6 @@ export interface APIRequestContext {
      */
     ignoreHTTPSErrors?: boolean;
 
-    /**
-     * Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is
-     * exceeded. Defaults to `20`. Pass `0` to not follow redirects.
-     */
-    maxRedirects?: number;
-
     /**
      * Query parameters to be sent with the URL.
      */
@@ -12916,12 +12884,6 @@ export interface APIRequestContext {
      */
     ignoreHTTPSErrors?: boolean;
 
-    /**
-     * Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is
-     * exceeded. Defaults to `20`. Pass `0` to not follow redirects.
-     */
-    maxRedirects?: number;
-
     /**
      * Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request
      * body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly
@@ -12993,12 +12955,6 @@ export interface APIRequestContext {
      */
     ignoreHTTPSErrors?: boolean;
 
-    /**
-     * Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is
-     * exceeded. Defaults to `20`. Pass `0` to not follow redirects.
-     */
-    maxRedirects?: number;
-
     /**
      * Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request
      * body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly
@@ -13070,12 +13026,6 @@ export interface APIRequestContext {
      */
     ignoreHTTPSErrors?: boolean;
 
-    /**
-     * Maximum number of request redirects that will be followed automatically. An error will be thrown if the number is
-     * exceeded. Defaults to `20`. Pass `0` to not follow redirects.
-     */
-    maxRedirects?: number;
-
     /**
      * Provides an object that will be serialized as html form using `multipart/form-data` encoding and sent as this request
      * body. If this parameter is specified `content-type` header will be set to `multipart/form-data` unless explicitly
@@ -13416,6 +13366,8 @@ export interface Browser extends EventEmitter {
      * Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See
      * [page.emulateMedia([options])](https://playwright.dev/docs/api/class-page#page-emulate-media) for more details. Defaults
      * to `'none'`.
+     *
+     * > NOTE: It's not supported in WebKit, see [here](https://bugs.webkit.org/show_bug.cgi?id=225281) in their issue tracker.
      */
     forcedColors?: "active"|"none";
 
@@ -14499,7 +14451,7 @@ export interface FileChooser {
  * **Strictness**
  *
  * Frame locators are strict. This means that all operations on frame locators will throw if more than one element matches
- * a given selector.
+ * given selector.
  *
  * ```js
  * // Throws if there are several frames in DOM:
@@ -15588,7 +15540,7 @@ export interface Selectors {
    * ```
    *
    * @param name Name that is used in selectors as a prefix, e.g. `{name: 'foo'}` enables `foo=myselectorbody` selectors. May only contain `[a-zA-Z0-9_]` characters.
-   * @param script Script that evaluates to a selector engine instance. The script is evaluated in the page context.
+   * @param script Script that evaluates to a selector engine instance.
    * @param options
    */
   register(name: string, script: Function|string|{
@@ -16063,6 +16015,8 @@ export interface BrowserContextOptions {
    * Emulates `'forced-colors'` media feature, supported values are `'active'`, `'none'`. See
    * [page.emulateMedia([options])](https://playwright.dev/docs/api/class-page#page-emulate-media) for more details. Defaults
    * to `'none'`.
+   *
+   * > NOTE: It's not supported in WebKit, see [here](https://bugs.webkit.org/show_bug.cgi?id=225281) in their issue tracker.
    */
   forcedColors?: "active"|"none";
 
@@ -16651,7 +16605,7 @@ interface ElementHandleWaitForSelectorOptions {
   state?: "attached"|"detached"|"visible"|"hidden";
 
   /**
-   * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+   * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
    * element, the call throws an exception.
    */
   strict?: boolean;
@@ -16699,7 +16653,7 @@ interface PageWaitForSelectorOptions {
   state?: "attached"|"detached"|"visible"|"hidden";
 
   /**
-   * When true, the call requires selector to resolve to a single element. If given selector resolves to more than one
+   * When true, the call requires selector to resolve to a single element. If given selector resolves to more then one
    * element, the call throws an exception.
    */
   strict?: boolean;
@@ -16890,6 +16844,8 @@ type Devices = {
   "iPhone 13 Pro Max landscape": DeviceDescriptor;
   "iPhone 13 Mini": DeviceDescriptor;
   "iPhone 13 Mini landscape": DeviceDescriptor;
+  "JioPhone 2": DeviceDescriptor;
+  "JioPhone 2 landscape": DeviceDescriptor;
   "Kindle Fire HDX": DeviceDescriptor;
   "Kindle Fire HDX landscape": DeviceDescriptor;
   "LG Optimus L70": DeviceDescriptor;
diff --git a/packages/playwright-ct-react/index.d.ts b/packages/playwright-ct-react/index.d.ts
index 17c946ac1bdb9720531eb967f00247f0a99e4982..4be9b967873e086051ac88428917bf25ee50337d 100644
--- a/packages/playwright-ct-react/index.d.ts
+++ b/packages/playwright-ct-react/index.d.ts
@@ -34,17 +34,12 @@ export type PlaywrightTestConfig = Omit<BasePlaywrightTestConfig, 'use'> & {
   }
 };
 
-export interface MountOptions {
-  hooksConfig?: any;
-}
-
 interface MountResult extends Locator {
   unmount(): Promise<void>;
-  rerender(component: JSX.Element): Promise<void>;
 }
 
 export interface ComponentFixtures {
-  mount(component: JSX.Element, options?: MountOptions): Promise<MountResult>;
+  mount(component: JSX.Element, options?: { hooksConfig?: any }): Promise<MountResult>;
 }
 
 export const test: TestType<
diff --git a/packages/playwright-ct-react/package.json b/packages/playwright-ct-react/package.json
index 7d064c15b5c1428b93bd493e58d7b815eacb2421..1be793bff5a5a0beed2306aeeef75e7dd08b7b70 100644
--- a/packages/playwright-ct-react/package.json
+++ b/packages/playwright-ct-react/package.json
@@ -1,6 +1,6 @@
 {
   "name": "@playwright/experimental-ct-react",
-  "version": "1.27.0-next",
+  "version": "1.25.2",
   "description": "Playwright Component Testing for React",
   "repository": "github:Microsoft/playwright",
   "homepage": "https://playwright.dev",
@@ -26,8 +26,8 @@
     }
   },
   "dependencies": {
-    "@vitejs/plugin-react": "^2.0.1",
-    "@playwright/test": "1.27.0-next",
-    "vite": "^3.0.9"
+    "@vitejs/plugin-react": "^1.0.7",
+    "@playwright/test": "1.25.2",
+    "vite": "^2.9.5"
   }
 }
diff --git a/packages/playwright-ct-react/registerSource.mjs b/packages/playwright-ct-react/registerSource.mjs
index f1183f5392ed0064929db83caf2f4829baaad806..a6948efe7d7ed403abd040f8ef5ea86da54ed6bf 100644
--- a/packages/playwright-ct-react/registerSource.mjs
+++ b/packages/playwright-ct-react/registerSource.mjs
@@ -82,7 +82,3 @@ window.playwrightUnmount = async rootElement => {
   if (!ReactDOM.unmountComponentAtNode(rootElement))
     throw new Error('Component was not mounted');
 };
-
-window.playwrightRerender = async (rootElement, component) => {
-  ReactDOM.render(render(/** @type {Component} */(component)), rootElement);
-};
diff --git a/packages/playwright-ct-solid/.npmignore b/packages/playwright-ct-solid/.npmignore
deleted file mode 100644
index dd4553cbc582aa41f9b6c51b7b955f99e5b136fc..0000000000000000000000000000000000000000
--- a/packages/playwright-ct-solid/.npmignore
+++ /dev/null
@@ -1,11 +0,0 @@
-**/*
-
-!README.md
-!LICENSE
-!register.d.ts
-!register.mjs
-!registerSource.mjs
-!index.d.ts
-!index.js
-!hooks.d.ts
-!hooks.mjs
diff --git a/packages/playwright-ct-solid/README.md b/packages/playwright-ct-solid/README.md
deleted file mode 100644
index 23ae82312d5c6539a8e8f81ebb1be686ae91e261..0000000000000000000000000000000000000000
--- a/packages/playwright-ct-solid/README.md
+++ /dev/null
@@ -1,3 +0,0 @@
-> **BEWARE** This package is EXPERIMENTAL and does not respect semver.
-
-Read more at https://playwright.dev/docs/test-components
diff --git a/packages/playwright-ct-solid/hooks.d.ts b/packages/playwright-ct-solid/hooks.d.ts
deleted file mode 100644
index 36ac2620fa856272d5c2723fd06e19368fa374c7..0000000000000000000000000000000000000000
--- a/packages/playwright-ct-solid/hooks.d.ts
+++ /dev/null
@@ -1,18 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-export declare function beforeMount(callback: (params: { hooksConfig: any }) => Promise<void>): void;
-export declare function afterMount(callback: (params: { hooksConfig: any }) => Promise<void>): void;
diff --git a/packages/playwright-ct-solid/hooks.mjs b/packages/playwright-ct-solid/hooks.mjs
deleted file mode 100644
index b7cea242c41e06076c5c7ac5b56f2d834850fb63..0000000000000000000000000000000000000000
--- a/packages/playwright-ct-solid/hooks.mjs
+++ /dev/null
@@ -1,29 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-const __pw_hooks_before_mount = [];
-const __pw_hooks_after_mount = [];
-
-window.__pw_hooks_before_mount = __pw_hooks_before_mount;
-window.__pw_hooks_after_mount = __pw_hooks_after_mount;
-
-export const beforeMount = callback => {
-  __pw_hooks_before_mount.push(callback);
-};
-
-export const afterMount = callback => {
-  __pw_hooks_after_mount.push(callback);
-};
diff --git a/packages/playwright-ct-solid/index.d.ts b/packages/playwright-ct-solid/index.d.ts
deleted file mode 100644
index b19433094f1ea26438e3931118a1e03d48b06b91..0000000000000000000000000000000000000000
--- a/packages/playwright-ct-solid/index.d.ts
+++ /dev/null
@@ -1,53 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import type {
-  TestType,
-  PlaywrightTestArgs,
-  PlaywrightTestConfig as BasePlaywrightTestConfig,
-  PlaywrightTestOptions,
-  PlaywrightWorkerArgs,
-  PlaywrightWorkerOptions,
-  Locator,
-} from '@playwright/test';
-import type { InlineConfig } from 'vite';
-
-export type PlaywrightTestConfig = Omit<BasePlaywrightTestConfig, 'use'> & {
-  use?: BasePlaywrightTestConfig['use'] & {
-    ctPort?: number,
-    ctTemplateDir?: string,
-    ctCacheDir?: string,
-    ctViteConfig?: InlineConfig
-  }
-};
-
-export interface MountOptions {
-  hooksConfig?: any;
-}
-
-interface MountResult extends Locator {
-  unmount(): Promise<void>;
-}
-
-export interface ComponentFixtures {
-  mount(component: JSX.Element, options?: MountOptions): Promise<MountResult>;
-}
-
-export const test: TestType<
-  PlaywrightTestArgs & PlaywrightTestOptions & ComponentFixtures,
-  PlaywrightWorkerArgs & PlaywrightWorkerOptions>;
-
-export { expect, devices } from '@playwright/test';
diff --git a/packages/playwright-ct-solid/index.js b/packages/playwright-ct-solid/index.js
deleted file mode 100644
index e2da5e0d18824467bb80c1f437036aa636959e5d..0000000000000000000000000000000000000000
--- a/packages/playwright-ct-solid/index.js
+++ /dev/null
@@ -1,31 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-const { test: baseTest, expect, devices, _addRunnerPlugin } = require('@playwright/test');
-const { fixtures } = require('@playwright/test/lib/mount');
-const path = require('path');
-
-_addRunnerPlugin(() => {
-  // Only fetch upon request to avoid resolution in workers.
-  const { createPlugin } = require('@playwright/test/lib/plugins/vitePlugin');
-  return createPlugin(
-    path.join(__dirname, 'registerSource.mjs'),
-    () => require('vite-plugin-solid')());
-});
-
-const test = baseTest.extend(fixtures);
-
-module.exports = { test, expect, devices };
diff --git a/packages/playwright-ct-solid/package.json b/packages/playwright-ct-solid/package.json
deleted file mode 100644
index 90a802d2c86e9617d1f29f4c729ed3348b38b81e..0000000000000000000000000000000000000000
--- a/packages/playwright-ct-solid/package.json
+++ /dev/null
@@ -1,36 +0,0 @@
-{
-  "name": "@playwright/experimental-ct-solid",
-  "version": "1.27.0-next",
-  "description": "Playwright Component Testing for Solid",
-  "repository": "github:Microsoft/playwright",
-  "homepage": "https://playwright.dev",
-  "engines": {
-    "node": ">=14"
-  },
-  "author": {
-    "name": "Microsoft Corporation"
-  },
-  "license": "Apache-2.0",
-  "exports": {
-    ".": {
-      "types": "./index.d.ts",
-      "default": "./index.js"
-    },
-    "./register": {
-      "types": "./register.d.ts",
-      "default": "./register.mjs"
-    },
-    "./hooks": {
-      "types": "./hooks.d.ts",
-      "default": "./hooks.mjs"
-    }
-  },
-  "dependencies": {
-    "vite": "^3.0.0",
-    "vite-plugin-solid": "^2.3.0",
-    "@playwright/test": "1.27.0-next"
-  },
-  "devDependencies": {
-    "solid-js": "^1.4.7"
-  }
-}
diff --git a/packages/playwright-ct-solid/register.d.ts b/packages/playwright-ct-solid/register.d.ts
deleted file mode 100644
index 0925c1f690c8764ef2438b2dd3704bf0ba749a3c..0000000000000000000000000000000000000000
--- a/packages/playwright-ct-solid/register.d.ts
+++ /dev/null
@@ -1,19 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-export default function register(
-  components: { [key: string]: any },
-): void
diff --git a/packages/playwright-ct-solid/register.mjs b/packages/playwright-ct-solid/register.mjs
deleted file mode 100644
index 47f32ee6026b565107ba46a521493f1eb8f28e16..0000000000000000000000000000000000000000
--- a/packages/playwright-ct-solid/register.mjs
+++ /dev/null
@@ -1,21 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import { register } from './registerSource.mjs';
-
-export default components => {
-  register(components);
-};
diff --git a/packages/playwright-ct-solid/registerSource.mjs b/packages/playwright-ct-solid/registerSource.mjs
deleted file mode 100644
index 4ea8ca2fdb5b342459d497e28a68524866e39572..0000000000000000000000000000000000000000
--- a/packages/playwright-ct-solid/registerSource.mjs
+++ /dev/null
@@ -1,82 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-// @ts-check
-// This file is injected into the registry as text, no dependencies are allowed.
-
-import { render as solidRender, createComponent } from 'solid-js/web';
-
-/** @typedef {import('../playwright-test/types/component').Component} Component */
-/** @typedef {() => import('solid-js').JSX.Element} FrameworkComponent */
-
-/** @type {Map<string, FrameworkComponent>} */
-const registry = new Map();
-
-/**
- * @param {{[key: string]: FrameworkComponent}} components
- */
-export function register(components) {
-  for (const [name, value] of Object.entries(components))
-    registry.set(name, value);
-}
-
-/**
- * @param {Component} component
- */
-function render(component) {
-  let componentFunc = registry.get(component.type);
-  if (!componentFunc) {
-    // Lookup by shorthand.
-    for (const [name, value] of registry) {
-      if (component.type.endsWith(`_${name}`)) {
-        componentFunc = value;
-        break;
-      }
-    }
-  }
-
-  if (!componentFunc)
-    throw new Error(`Unregistered component: ${component.type}. Following components are registered: ${[...registry.keys()]}`);
-
-  if (component.kind !== 'jsx')
-    throw new Error('Object mount notation is not supported');
-
-  return createComponent(componentFunc, {
-    children: component.children,
-    ...component.props
-  });
-}
-
-const unmountKey = Symbol('disposeKey');
-
-window.playwrightMount = async (component, rootElement, hooksConfig) => {
-  for (const hook of /** @type {any} */(window).__pw_hooks_before_mount || [])
-    await hook({ hooksConfig });
-
-  const unmount = solidRender(() => render(component), rootElement);
-  rootElement[unmountKey] = unmount;
-
-  for (const hook of /** @type {any} */(window).__pw_hooks_after_mount || [])
-    await hook({ hooksConfig });
-};
-
-window.playwrightUnmount = async rootElement => {
-  const unmount = rootElement[unmountKey];
-  if (!unmount)
-    throw new Error('Component was not mounted');
-
-  unmount();
-};
diff --git a/packages/playwright-ct-svelte/index.d.ts b/packages/playwright-ct-svelte/index.d.ts
index 16f0f9f05a04ff552cfa9a430b11c69df36bda75..c2eab389020592f9a9a64583aca01978fb2076af 100644
--- a/packages/playwright-ct-svelte/index.d.ts
+++ b/packages/playwright-ct-svelte/index.d.ts
@@ -24,7 +24,6 @@ import type {
   Locator,
 } from '@playwright/test';
 import type { InlineConfig } from 'vite';
-import type { SvelteComponent, ComponentProps } from 'svelte/types/runtime'
 
 export type PlaywrightTestConfig = Omit<BasePlaywrightTestConfig, 'use'> & {
   use?: BasePlaywrightTestConfig['use'] & {
@@ -35,29 +34,23 @@ export type PlaywrightTestConfig = Omit<BasePlaywrightTestConfig, 'use'> & {
   }
 };
 
-type JsonPrimitive = string | number | boolean | null;
-type JsonValue = JsonPrimitive | JsonObject | JsonArray;
-type JsonArray = JsonValue[];
-type JsonObject = { [Key in string]?: JsonValue };
-
-type Slot = string | string[];
-
-export interface MountOptions<Component extends SvelteComponent> {
-  props?: ComponentProps<Component>;
-  slots?: Record<string, Slot> & { default?: Slot };
-  on?: Record<string, Function>;
-  hooksConfig?: JsonObject;
-}
-
 interface MountResult extends Locator {
   unmount(): Promise<void>;
 }
 
 interface ComponentFixtures {
-  mount<Component extends SvelteComponent>(
-    component: new (...args: any[]) => Component,
-    options?: MountOptions<Component>
-  ): Promise<MountResult>;
+  mount(component: any, options?: {
+    props?: { [key: string]: any },
+    slots?: { [key: string]: any },
+    on?: { [key: string]: Function },
+    hooksConfig?: any,
+  }): Promise<MountResult>;
+  mount<Props>(component: any, options: {
+    props: Props,
+    slots?: { [key: string]: any },
+    on?: { [key: string]: Function },
+    hooksConfig?: any,
+  }): Promise<MountResult>;
 }
 
 export const test: TestType<
diff --git a/packages/playwright-ct-svelte/package.json b/packages/playwright-ct-svelte/package.json
index b032540c781e73a4bdac88ff269781da1b7d84dc..681c65d5b6059e4456023a72a65a5af0c50742e3 100644
--- a/packages/playwright-ct-svelte/package.json
+++ b/packages/playwright-ct-svelte/package.json
@@ -1,6 +1,6 @@
 {
   "name": "@playwright/experimental-ct-svelte",
-  "version": "1.27.0-next",
+  "version": "1.25.2",
   "description": "Playwright Component Testing for Svelte",
   "repository": "github:Microsoft/playwright",
   "homepage": "https://playwright.dev",
@@ -26,7 +26,7 @@
     }
   },
   "dependencies": {
-    "@playwright/test": "1.27.0-next",
+    "@playwright/test": "1.25.2",
     "@sveltejs/vite-plugin-svelte": "^1.0.1",
     "vite": "^3.0.0"
   },
diff --git a/packages/playwright-ct-svelte/registerSource.mjs b/packages/playwright-ct-svelte/registerSource.mjs
index 8e7b2b1d8e64a1fb9a33206dbbe1594853a689e6..788fd2886b673fac67df77ae952c7b3533400668 100644
--- a/packages/playwright-ct-svelte/registerSource.mjs
+++ b/packages/playwright-ct-svelte/registerSource.mjs
@@ -18,8 +18,6 @@
 
 // This file is injected into the registry as text, no dependencies are allowed.
 
-import { detach, insert, noop } from 'svelte/internal';
-
 /** @typedef {import('../playwright-test/types/component').Component} Component */
 /** @typedef {any} FrameworkComponent */
 /** @typedef {import('svelte').SvelteComponent} SvelteComponent */
@@ -35,37 +33,6 @@ export function register(components) {
     registry.set(name, value);
 }
 
-/**
- * TODO: remove this function when the following issue is fixed:
- * https://github.com/sveltejs/svelte/issues/2588
- */
-function createSlots(slots) {
-  const svelteSlots = {};
-
-  for (const slotName in slots) {
-    const template = document
-        .createRange()
-        .createContextualFragment(slots[slotName]);
-    svelteSlots[slotName] = [createSlotFn(template)];
-  }
-
-  function createSlotFn(element) {
-    return function() {
-      return {
-        c: noop,
-        m: function mount(target, anchor) {
-          insert(target, element, anchor);
-        },
-        d: function destroy(detaching) {
-          if (detaching) detach(element);
-        },
-        l: noop,
-      };
-    };
-  }
-  return svelteSlots;
-}
-
 window.playwrightMount = async (component, rootElement, hooksConfig) => {
   let componentCtor = registry.get(component.type);
   if (!componentCtor) {
@@ -90,11 +57,7 @@ window.playwrightMount = async (component, rootElement, hooksConfig) => {
 
   const svelteComponent = /** @type {SvelteComponent} */ (new componentCtor({
     target: rootElement,
-    props: {
-      ...component.options?.props,
-      $$slots: createSlots(component.options?.slots),
-      $$scope: {},
-    }
+    props: component.options?.props,
   }));
   rootElement[svelteComponentKey] = svelteComponent;
 
diff --git a/packages/playwright-ct-vue/index.d.ts b/packages/playwright-ct-vue/index.d.ts
index 23f6013437395b650c8d38cb5899962e0b90c37e..684e7a1e8984fbf4806ee54983ade57cee01e216 100644
--- a/packages/playwright-ct-vue/index.d.ts
+++ b/packages/playwright-ct-vue/index.d.ts
@@ -34,11 +34,9 @@ export type PlaywrightTestConfig = Omit<BasePlaywrightTestConfig, 'use'> & {
   }
 };
 
-type Slot = string | string[];
-
 export interface MountOptions<Props = Record<string, unknown>> {
   props?: Props,
-  slots?: Record<string, Slot> & { default?: Slot };
+  slots?: Record<string, unknown>,
   on?: Record<string, Function>,
   hooksConfig?: any,
 }
@@ -51,7 +49,7 @@ interface MountResult<Props = Record<string, unknown>> extends Locator {
 export interface ComponentFixtures {
   mount(component: JSX.Element): Promise<MountResult>;
   mount(component: any, options?: MountOptions): Promise<MountResult>;
-  mount<Props>(component: any, options: MountOptions & { props: Props }): Promise<MountResult<Props>>;
+  mount<Props>(component: any, options: MountOptions<Required<Props>>): Promise<MountResult<Props>>;
 }
 
 export const test: TestType<
diff --git a/packages/playwright-ct-vue/package.json b/packages/playwright-ct-vue/package.json
index 7b6a7bb096cc510366bd270261e561b516ebc8d1..d55c2bbb8e40a75ec41531328a2c46fd8688c692 100644
--- a/packages/playwright-ct-vue/package.json
+++ b/packages/playwright-ct-vue/package.json
@@ -1,6 +1,6 @@
 {
   "name": "@playwright/experimental-ct-vue",
-  "version": "1.27.0-next",
+  "version": "1.25.2",
   "description": "Playwright Component Testing for Vue",
   "repository": "github:Microsoft/playwright",
   "homepage": "https://playwright.dev",
@@ -27,7 +27,7 @@
   },
   "dependencies": {
     "@vitejs/plugin-vue": "^2.3.1",
-    "@playwright/test": "1.27.0-next",
+    "@playwright/test": "1.25.2",
     "vite": "^2.9.5"
   }
 }
diff --git a/packages/playwright-ct-vue2/index.d.ts b/packages/playwright-ct-vue2/index.d.ts
index 96a86ecb3da0272a6261bbe69fab629762d998c5..7962cad690f1c7d8c17e2476102b24f34a6e2c8c 100644
--- a/packages/playwright-ct-vue2/index.d.ts
+++ b/packages/playwright-ct-vue2/index.d.ts
@@ -34,29 +34,24 @@ export type PlaywrightTestConfig = Omit<BasePlaywrightTestConfig, 'use'> & {
   }
 };
 
-type JsonPrimitive = string | number | boolean | null;
-type JsonValue = JsonPrimitive | JsonObject | JsonArray;
-type JsonArray = JsonValue[];
-type JsonObject = { [Key in string]?: JsonValue };
-
-type Slot = string | string[];
-
-export interface MountOptions<Props = Record<string, unknown>> {
-  props?: Props;
-  slots?: Record<string, Slot> & { default?: Slot };
-  on?: Record<string, Function>;
-  hooksConfig?: JsonObject;
-}
-
-interface MountResult<Props = Record<string, unknown>> extends Locator {
+interface MountResult extends Locator {
   unmount(): Promise<void>;
-  rerender(options: { props: Props }): Promise<void>
 }
 
 export interface ComponentFixtures {
   mount(component: JSX.Element): Promise<MountResult>;
-  mount(component: any, options?: MountOptions): Promise<MountResult>;
-  mount<Props>(component: any, options: MountOptions & { props: Props }): Promise<MountResult<Props>>;
+  mount(component: any, options?: {
+    props?: { [key: string]: any },
+    slots?: { [key: string]: any },
+    on?: { [key: string]: Function },
+    hooksConfig?: any,
+  }): Promise<MountResult>;
+  mount<Props>(component: any, options: {
+    props: Props,
+    slots?: { [key: string]: any },
+    on?: { [key: string]: Function },
+    hooksConfig?: any,
+  }): Promise<MountResult>;
 }
 
 export const test: TestType<
diff --git a/packages/playwright-ct-vue2/package.json b/packages/playwright-ct-vue2/package.json
index 0709189ea0b15dc8c1483463264e748fb1307fe2..a0cd772e4ea66bc0194f3d23750a5a2783fe14c2 100644
--- a/packages/playwright-ct-vue2/package.json
+++ b/packages/playwright-ct-vue2/package.json
@@ -1,6 +1,6 @@
 {
   "name": "@playwright/experimental-ct-vue2",
-  "version": "1.27.0-next",
+  "version": "1.25.2",
   "description": "Playwright Component Testing for Vue2",
   "repository": "github:Microsoft/playwright",
   "homepage": "https://playwright.dev",
@@ -26,7 +26,7 @@
     }
   },
   "dependencies": {
-    "@playwright/test": "1.27.0-next",
+    "@playwright/test": "1.25.2",
     "vite": "^2.9.5",
     "vite-plugin-vue2": "^2.0.1"
   },
diff --git a/packages/playwright-ct-vue2/registerSource.mjs b/packages/playwright-ct-vue2/registerSource.mjs
index eb22de82e69a1dce088d4287ec4222695eb93298..32185c2523519d9dbbdf8d654aef908feb81afa4 100644
--- a/packages/playwright-ct-vue2/registerSource.mjs
+++ b/packages/playwright-ct-vue2/registerSource.mjs
@@ -157,12 +157,3 @@ window.playwrightUnmount = async rootElement => {
   component.$destroy();
   component.$el.remove();
 };
-
-window.playwrightRerender = async (element, options) => {
-  const component = /** @type {any} */(element)[instanceKey];
-  if (!component)
-    throw new Error('Component was not mounted');
-
-  for (const [key, value] of Object.entries(/** @type {any} */(options).props))
-    component.$children[0][key] = value;
-};
diff --git a/packages/playwright-firefox/package.json b/packages/playwright-firefox/package.json
index 3f75a9dc3d758b59a19c320604ca410730f0538a..ccf287d361784e265a01854739873dba4d5b50da 100644
--- a/packages/playwright-firefox/package.json
+++ b/packages/playwright-firefox/package.json
@@ -1,6 +1,6 @@
 {
   "name": "playwright-firefox",
-  "version": "1.27.0-next",
+  "version": "1.25.2",
   "description": "A high-level API to automate Firefox",
   "repository": "github:Microsoft/playwright",
   "homepage": "https://playwright.dev",
@@ -28,6 +28,6 @@
     "install": "node install.js"
   },
   "dependencies": {
-    "playwright-core": "1.27.0-next"
+    "playwright-core": "1.25.2"
   }
 }
diff --git a/packages/playwright-test/package.json b/packages/playwright-test/package.json
index 951574779a42b933752b04daefc12045aec927bf..ed10306afaa707d94c199a26d2d572ee78c87e18 100644
--- a/packages/playwright-test/package.json
+++ b/packages/playwright-test/package.json
@@ -1,6 +1,6 @@
 {
   "name": "@playwright/test",
-  "version": "1.27.0-next",
+  "version": "1.25.2",
   "description": "A high-level API to automate web browsers",
   "repository": "github:Microsoft/playwright",
   "homepage": "https://playwright.dev",
@@ -34,6 +34,6 @@
   "license": "Apache-2.0",
   "dependencies": {
     "@types/node": "*",
-    "playwright-core": "1.27.0-next"
+    "playwright-core": "1.25.2"
   }
 }
diff --git a/packages/playwright-test/src/DEPS.list b/packages/playwright-test/src/DEPS.list
index fa00ac451af3157068973787306510a7d63bbee9..c6fa7ed79c64877dcb1e0074e6de7b00d3364d08 100644
--- a/packages/playwright-test/src/DEPS.list
+++ b/packages/playwright-test/src/DEPS.list
@@ -1,6 +1,5 @@
 [*]
 ./utilsBundle.ts
-docker/
 matchers/
 reporters/
 third_party/
diff --git a/packages/playwright-test/src/cli.ts b/packages/playwright-test/src/cli.ts
index fdf479030c5d4dfe6c10b78817bb5bc511e19db0..71ea8704433af17184165ccdbf04803c19c1352a 100644
--- a/packages/playwright-test/src/cli.ts
+++ b/packages/playwright-test/src/cli.ts
@@ -17,11 +17,9 @@
 /* eslint-disable no-console */
 
 import type { Command } from 'playwright-core/lib/utilsBundle';
-import * as docker from './docker/docker';
 import fs from 'fs';
 import url from 'url';
 import path from 'path';
-import { colors } from 'playwright-core/lib/utilsBundle';
 import { Runner, builtInReporters, kDefaultConfigFiles } from './runner';
 import type { ConfigCLIOverrides } from './runner';
 import { stopProfiling, startProfiling } from './profiler';
@@ -31,68 +29,14 @@ import { baseFullConfig, defaultTimeout, fileIsModule } from './loader';
 import type { TraceMode } from './types';
 
 export function addTestCommands(program: Command) {
-  addTestCommand(program, false /* isDocker */);
+  addTestCommand(program);
   addShowReportCommand(program);
   addListFilesCommand(program);
-  addDockerCommand(program);
 }
 
-function addDockerCommand(program: Command) {
-  const dockerCommand = program.command('docker')
-      .description(`run tests in Docker (EXPERIMENTAL)`);
-
-  dockerCommand.command('build')
-      .description('build local docker image')
-      .action(async function(options) {
-        await docker.ensureDockerEngineIsRunningOrDie();
-        await docker.buildImage();
-      });
-
-  dockerCommand.command('start')
-      .description('start docker container')
-      .action(async function(options) {
-        await docker.ensureDockerEngineIsRunningOrDie();
-        let info = await docker.containerInfo();
-        if (!info) {
-          process.stdout.write(`Starting docker container... `);
-          const time = Date.now();
-          info = await docker.ensureContainerOrDie();
-          const deltaMs = (Date.now() - time);
-          console.log('Done in ' + (deltaMs / 1000).toFixed(1) + 's');
-        }
-        console.log([
-          `- View screen:`,
-          `      ${info.vncSession}`,
-          `- Run tests with browsers inside container:`,
-          `      npx playwright docker test`,
-          `- Stop background container *manually* when you are done working with tests:`,
-          `      npx playwright docker stop`,
-        ].join('\n'));
-      });
-
-  dockerCommand.command('delete-image', { hidden: true })
-      .description('delete docker image, if any')
-      .action(async function(options) {
-        await docker.ensureDockerEngineIsRunningOrDie();
-        await docker.deleteImage();
-      });
-
-  dockerCommand.command('stop')
-      .description('stop docker container')
-      .action(async function(options) {
-        await docker.ensureDockerEngineIsRunningOrDie();
-        await docker.stopContainer();
-      });
-
-  addTestCommand(dockerCommand, true /* isDocker */);
-}
-
-function addTestCommand(program: Command, isDocker: boolean) {
+function addTestCommand(program: Command) {
   const command = program.command('test [test-filter...]');
-  if (isDocker)
-    command.description('run tests with Playwright Test and browsers inside docker container');
-  else
-    command.description('run tests with Playwright Test');
+  command.description('Run tests with Playwright Test');
   command.option('--browser <browser>', `Browser to use for tests, one of "all", "chromium", "firefox" or "webkit" (default: "chromium")`);
   command.option('--headed', `Run tests in headed browsers (default: headless)`);
   command.option('--debug', `Run tests with Playwright Inspector. Shortcut for "PWDEBUG=1" environment variable and "--timeout=0 --maxFailures=1 --headed --workers=1" options`);
@@ -102,12 +46,10 @@ function addTestCommand(program: Command, isDocker: boolean) {
   command.option('-g, --grep <grep>', `Only run tests matching this regular expression (default: ".*")`);
   command.option('-gv, --grep-invert <grep>', `Only run tests that do not match this regular expression`);
   command.option('--global-timeout <timeout>', `Maximum time this test suite can run in milliseconds (default: unlimited)`);
-  command.option('--ignore-snapshots', `Ignore screenshot and snapshot expectations`);
   command.option('-j, --workers <workers>', `Number of concurrent workers, use 1 to run in a single worker (default: number of CPU cores / 2)`);
   command.option('--list', `Collect all the tests and report them, but do not run`);
   command.option('--max-failures <N>', `Stop after the first N failures`);
   command.option('--output <dir>', `Folder for output artifacts (default: "test-results")`);
-  command.option('--pass-with-no-tests', `Makes test run succeed even if no tests were found`);
   command.option('--quiet', `Suppress stdio`);
   command.option('--repeat-each <N>', `Run each test N times (default: 1)`);
   command.option('--reporter <reporter>', `Reporter to use, comma-separated, can be ${builtInReporters.map(name => `"${name}"`).join(', ')} (default: "${baseFullConfig.reporter[0]}")`);
@@ -120,27 +62,6 @@ function addTestCommand(program: Command, isDocker: boolean) {
   command.option('-x', `Stop after the first failure`);
   command.action(async (args, opts) => {
     try {
-      if (isDocker && !process.env.PW_TS_ESM_ON) {
-        console.log(colors.dim('Using docker container to run browsers.'));
-        await docker.ensureDockerEngineIsRunningOrDie();
-        let info = await docker.containerInfo();
-        if (!info) {
-          process.stdout.write(colors.dim(`Starting docker container... `));
-          const time = Date.now();
-          info = await docker.ensureContainerOrDie();
-          const deltaMs = (Date.now() - time);
-          console.log(colors.dim('Done in ' + (deltaMs / 1000).toFixed(1) + 's'));
-          console.log(colors.dim('The Docker container will keep running after tests finished.'));
-          console.log(colors.dim('Stop manually using:'));
-          console.log(colors.dim('    npx playwright docker stop'));
-        }
-        console.log(colors.dim(`View screen: ${info.vncSession}`));
-        process.env.PW_TEST_CONNECT_WS_ENDPOINT = info.wsEndpoint;
-        process.env.PW_TEST_CONNECT_HEADERS = JSON.stringify({
-          'x-playwright-proxy': '*',
-        });
-        process.env.PW_TEST_SNAPSHOT_SUFFIX = 'docker';
-      }
       await runTests(args, opts);
     } catch (e) {
       console.error(e);
@@ -152,10 +73,10 @@ Arguments [test-filter...]:
   Pass arguments to filter test files. Each argument is treated as a regular expression.
 
 Examples:
-  $ npx playwright${isDocker ? ' docker ' : ' '}test my.spec.ts
-  $ npx playwright${isDocker ? ' docker ' : ' '}test some.spec.ts:42
-  $ npx playwright${isDocker ? ' docker ' : ' '}test --headed
-  $ npx playwright${isDocker ? ' docker ' : ' '}test --browser=webkit`);
+  $ npx playwright test my.spec.ts
+  $ npx playwright test some.spec.ts:42
+  $ npx playwright test --headed
+  $ npx playwright test --browser=webkit`);
 }
 
 function addListFilesCommand(program: Command) {
@@ -244,7 +165,6 @@ async function runTests(args: string[], opts: { [key: string]: any }) {
     testFileFilters,
     projectFilter: opts.project || undefined,
     watchMode: !!process.env.PW_TEST_WATCH,
-    passWithNoTests: opts.passWithNoTests,
   });
   await stopProfiling(undefined);
 
@@ -294,7 +214,6 @@ function overridesFromOptions(options: { [key: string]: any }): ConfigCLIOverrid
     reporter: (options.reporter && options.reporter.length) ? options.reporter.split(',').map((r: string) => [resolveReporter(r)]) : undefined,
     shard: shardPair ? { current: shardPair[0], total: shardPair[1] } : undefined,
     timeout: options.timeout ? parseInt(options.timeout, 10) : undefined,
-    ignoreSnapshots: options.ignoreSnapshots ? !!options.ignoreSnapshots : undefined,
     updateSnapshots: options.updateSnapshots ? 'all' as const : undefined,
     workers: options.workers ? parseInt(options.workers, 10) : undefined,
   };
@@ -306,7 +225,7 @@ function resolveReporter(id: string) {
   const localPath = path.resolve(process.cwd(), id);
   if (fs.existsSync(localPath))
     return localPath;
-  return require.resolve(id, { paths: [process.cwd()] });
+  return require.resolve(id, { paths: [ process.cwd() ] });
 }
 
 function restartWithExperimentalTsEsm(configFile: string | null): boolean {
@@ -320,6 +239,8 @@ function restartWithExperimentalTsEsm(configFile: string | null): boolean {
     return false;
   if (process.env.PW_TS_ESM_ON)
     return false;
+  if (!configFile.endsWith('.ts'))
+    return false;
   if (!fileIsModule(configFile))
     return false;
   const NODE_OPTIONS = (process.env.NODE_OPTIONS || '') + experimentalLoaderOption();
diff --git a/packages/playwright-test/src/dispatcher.ts b/packages/playwright-test/src/dispatcher.ts
index 368833ea37ceef9bee7ad331c33f6f0a9f0f8c1c..6ecdd37b677ab099aac382822845ee9c4dfec18d 100644
--- a/packages/playwright-test/src/dispatcher.ts
+++ b/packages/playwright-test/src/dispatcher.ts
@@ -185,7 +185,7 @@ export class Dispatcher {
       doneCallback();
     };
 
-    const remainingByTestId = new Map(testGroup.tests.map(e => [e.id, e]));
+    const remainingByTestId = new Map(testGroup.tests.map(e => [ e.id, e ]));
     const failedTestIds = new Set<string>();
 
     const onWatchTestResolved = (params: WatchTestResolvedPayload) => {
diff --git a/packages/playwright-test/src/docker/build_docker_image.sh b/packages/playwright-test/src/docker/build_docker_image.sh
deleted file mode 100644
index b59267599588fec1f5132823fcf76a7b76f2fe7c..0000000000000000000000000000000000000000
--- a/packages/playwright-test/src/docker/build_docker_image.sh
+++ /dev/null
@@ -1,74 +0,0 @@
-export NOVNC_REF='1.3.0'
-export WEBSOCKIFY_REF='0.10.0'
-export DEBIAN_FRONTEND=noninteractive
-
-# Install FluxBox, VNC & noVNC
-mkdir -p /opt/bin && chmod +x /dev/shm \
-    && apt-get update && apt-get install -y unzip fluxbox x11vnc \
-    && curl -L -o noVNC.zip "https://github.com/novnc/noVNC/archive/v${NOVNC_REF}.zip" \
-    && unzip -x noVNC.zip \
-    && rm -rf noVNC-${NOVNC_REF}/{docs,tests} \
-    && mv noVNC-${NOVNC_REF} /opt/bin/noVNC \
-    && cp /opt/bin/noVNC/vnc.html /opt/bin/noVNC/index.html \
-    && rm noVNC.zip \
-    && curl -L -o websockify.zip "https://github.com/novnc/websockify/archive/v${WEBSOCKIFY_REF}.zip" \
-    && unzip -x websockify.zip \
-    && rm websockify.zip \
-    && rm -rf websockify-${WEBSOCKIFY_REF}/{docs,tests} \
-    && mv websockify-${WEBSOCKIFY_REF} /opt/bin/noVNC/utils/websockify
-
-# Configure FluxBox menus
-mkdir /root/.fluxbox
-cd /ms-playwright-agent
-cat <<'EOF' | node > /root/.fluxbox/menu
-  const { chromium, firefox, webkit } = require('playwright-core');
-
-  console.log(`
-    [begin] (fluxbox)
-      [submenu] (Browsers) {}
-        [exec] (Chromium) { ${chromium.executablePath()} --no-sandbox --test-type= } <>
-        [exec] (Firefox) { ${firefox.executablePath()} } <>
-        [exec] (WebKit) { ${webkit.executablePath()} } <>
-      [end]
-      [include] (/etc/X11/fluxbox/fluxbox-menu)
-    [end]
-  `);
-EOF
-
-# Create entrypoint.sh
-cat <<'EOF' > /entrypoint.sh
-#!/bin/bash
-set -e
-SCREEN_WIDTH=1360
-SCREEN_HEIGHT=1020
-SCREEN_DEPTH=24
-SCREEN_DPI=96
-GEOMETRY="$SCREEN_WIDTH""x""$SCREEN_HEIGHT""x""$SCREEN_DEPTH"
-
-nohup /usr/bin/xvfb-run --server-num=$DISPLAY_NUM \
-     --listen-tcp \
-     --server-args="-screen 0 "$GEOMETRY" -fbdir /var/tmp -dpi "$SCREEN_DPI" -listen tcp -noreset -ac +extension RANDR" \
-     /usr/bin/fluxbox -display "$DISPLAY" >/dev/null 2>&1 &
-
-for i in $(seq 1 500); do
-  if xdpyinfo -display $DISPLAY >/dev/null 2>&1; then
-    break
-  fi
-  echo "Waiting for Xvfb..."
-  sleep 0.2
-done
-
-nohup x11vnc -forever -shared -rfbport 5900 -rfbportv6 5900 -display "$DISPLAY" >/dev/null 2>&1 &
-nohup /opt/bin/noVNC/utils/novnc_proxy --listen 7900 --vnc localhost:5900 >/dev/null 2>&1 &
-
-cd /ms-playwright-agent
-
-fbsetbg -c /ms-playwright-agent/node_modules/playwright-core/lib/server/chromium/appIcon.png
-
-NOVNC_UUID=$(cat /proc/sys/kernel/random/uuid)
-echo "novnc is listening on http://127.0.0.1:7900?path=$NOVNC_UUID&resize=scale&autoconnect=1"
-
-PW_UUID=$(cat /proc/sys/kernel/random/uuid)
-npx playwright run-server --port=5400 --path=/$PW_UUID
-EOF
-chmod 755 /entrypoint.sh
diff --git a/packages/playwright-test/src/docker/docker.ts b/packages/playwright-test/src/docker/docker.ts
deleted file mode 100644
index aa8900196af5734f26b31659ab109bbf5dc066e7..0000000000000000000000000000000000000000
--- a/packages/playwright-test/src/docker/docker.ts
+++ /dev/null
@@ -1,198 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the 'License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/* eslint-disable no-console */
-
-import path from 'path';
-import fs from 'fs';
-import { spawnAsync } from 'playwright-core/lib/utils/spawnAsync';
-import * as utils from 'playwright-core/lib/utils';
-import { getPlaywrightVersion } from 'playwright-core/lib/common/userAgent';
-import * as dockerApi from './dockerApi';
-
-const VRT_IMAGE_DISTRO = 'focal';
-const VRT_IMAGE_NAME = `playwright:local-${getPlaywrightVersion()}-${VRT_IMAGE_DISTRO}`;
-const VRT_CONTAINER_NAME = `playwright-${getPlaywrightVersion()}-${VRT_IMAGE_DISTRO}`;
-
-export async function deleteImage() {
-  const dockerImage = await findDockerImage(VRT_IMAGE_NAME);
-  if (!dockerImage)
-    return;
-
-  if (await containerInfo())
-    await stopContainer();
-  await dockerApi.removeImage(dockerImage.imageId);
-}
-
-export async function buildImage() {
-  const isDevelopmentMode = getPlaywrightVersion().includes('next');
-  let baseImageName = `mcr.microsoft.com/playwright:v${getPlaywrightVersion()}-${VRT_IMAGE_DISTRO}`;
-  // 1. Build or pull base image.
-  if (isDevelopmentMode) {
-    // Use our docker build scripts in development mode!
-    if (!process.env.PWTEST_DOCKER_BASE_IMAGE) {
-      const arch = process.arch === 'arm64' ? '--arm64' : '--amd64';
-      console.error(utils.wrapInASCIIBox([
-        `You are in DEVELOPMENT mode!`,
-        ``,
-        `1. Build local base image`,
-        `     ./utils/docker/build.sh ${arch} ${VRT_IMAGE_DISTRO} playwright:localbuild`,
-        `2. Use the local base to build VRT image:`,
-        `     PWTEST_DOCKER_BASE_IMAGE=playwright:localbuild npx playwright docker build`,
-      ].join('\n'), 1));
-      process.exit(1);
-    }
-    baseImageName = process.env.PWTEST_DOCKER_BASE_IMAGE;
-  } else {
-    const { code } = await spawnAsync('docker', ['pull', baseImageName], { stdio: 'inherit' });
-    if (code !== 0)
-      throw new Error('Failed to pull docker image!');
-  }
-  // 2. Find pulled docker image
-  const dockerImage = await findDockerImage(baseImageName);
-  if (!dockerImage)
-    throw new Error(`Failed to pull ${baseImageName}`);
-  // 3. Launch container and install VNC in it
-  console.log(`Building ${VRT_IMAGE_NAME}...`);
-  const buildScriptText = await fs.promises.readFile(path.join(__dirname, 'build_docker_image.sh'), 'utf8');
-  const containerId = await dockerApi.launchContainer({
-    imageId: dockerImage.imageId,
-    autoRemove: false,
-    command: ['/bin/bash', '-c', buildScriptText],
-    waitUntil: 'not-running',
-  });
-
-  // 4. Commit a new image based on the launched container with installed VNC & noVNC.
-  const [vrtRepo, vrtTag] = VRT_IMAGE_NAME.split(':');
-  await dockerApi.commitContainer({
-    containerId,
-    repo: vrtRepo,
-    tag: vrtTag,
-    entrypoint: '/entrypoint.sh',
-    env: {
-      'DISPLAY_NUM': '99',
-      'DISPLAY': ':99',
-    },
-  });
-  await dockerApi.removeContainer(containerId);
-  console.log(`Done!`);
-}
-
-interface ContainerInfo {
-  wsEndpoint: string;
-  vncSession: string;
-}
-
-export async function containerInfo(): Promise<ContainerInfo|undefined> {
-  const container = await findRunningDockerContainer();
-  if (!container)
-    return undefined;
-  const logLines = await dockerApi.getContainerLogs(container.containerId);
-
-  const containerUrlToHostUrl = (address: string) => {
-    const url = new URL(address);
-    const portBinding = container.portBindings.find(binding => binding.containerPort === +url.port);
-    if (!portBinding)
-      return undefined;
-
-    url.host = portBinding.ip;
-    url.port = portBinding.hostPort + '';
-    return url.toString();
-  };
-
-  const WS_LINE_PREFIX = 'Listening on ws://';
-  const webSocketLine = logLines.find(line => line.startsWith(WS_LINE_PREFIX));
-  const NOVNC_LINE_PREFIX = 'novnc is listening on ';
-  const novncLine = logLines.find(line => line.startsWith(NOVNC_LINE_PREFIX));
-  if (!novncLine || !webSocketLine)
-    return undefined;
-  const wsEndpoint = containerUrlToHostUrl('ws://' + webSocketLine.substring(WS_LINE_PREFIX.length));
-  const vncSession = containerUrlToHostUrl(novncLine.substring(NOVNC_LINE_PREFIX.length));
-  return wsEndpoint && vncSession ? { wsEndpoint, vncSession } : undefined;
-}
-
-export async function ensureContainerOrDie(): Promise<ContainerInfo> {
-  const pwImage = await findDockerImage(VRT_IMAGE_NAME);
-  if (!pwImage) {
-    console.error('\n' + utils.wrapInASCIIBox([
-      `Failed to find local docker image.`,
-      `Please build local docker image with the following command:`,
-      ``,
-      `    npx playwright docker build`,
-      ``,
-      `<3 Playwright Team`,
-    ].join('\n'), 1));
-    process.exit(1);
-  }
-
-  let info = await containerInfo();
-  if (info)
-    return info;
-
-  await dockerApi.launchContainer({
-    imageId: pwImage.imageId,
-    name: VRT_CONTAINER_NAME,
-    autoRemove: true,
-    ports: [5400, 7900],
-  });
-
-  // Wait for the service to become available.
-  const startTime = Date.now();
-  const timeouts = [0, 100, 100, 200, 500, 1000];
-  do {
-    await new Promise(x => setTimeout(x, timeouts.shift() ?? 1000));
-    info = await containerInfo();
-  } while (!info && Date.now() < startTime + 60000);
-
-  if (!info)
-    throw new Error('Failed to launch docker container!');
-  return info;
-}
-
-export async function stopContainer() {
-  const container = await findRunningDockerContainer();
-  if (!container)
-    return;
-  await dockerApi.stopContainer({
-    containerId: container.containerId,
-    waitUntil: 'removed',
-  });
-}
-
-export async function ensureDockerEngineIsRunningOrDie() {
-  if (await dockerApi.checkEngineRunning())
-    return;
-  console.error(utils.wrapInASCIIBox([
-    `Docker is not running!`,
-    `Please install and launch docker:`,
-    ``,
-    `    https://docs.docker.com/get-docker`,
-    ``,
-  ].join('\n'), 1));
-  process.exit(1);
-}
-
-async function findDockerImage(imageName: string): Promise<dockerApi.DockerImage|undefined> {
-  const images = await dockerApi.listImages();
-  return images.find(image => image.names.includes(imageName));
-}
-
-async function findRunningDockerContainer(): Promise<dockerApi.DockerContainer|undefined> {
-  const containers = await dockerApi.listContainers();
-  const dockerImage = await findDockerImage(VRT_IMAGE_NAME);
-  const container = dockerImage ? containers.find(container => container.imageId === dockerImage.imageId) : undefined;
-  return container?.state === 'running' ? container : undefined;
-}
-
diff --git a/packages/playwright-test/src/docker/dockerApi.ts b/packages/playwright-test/src/docker/dockerApi.ts
deleted file mode 100644
index e9598d604d68333f3de2dd20d80ec2669815a3b8..0000000000000000000000000000000000000000
--- a/packages/playwright-test/src/docker/dockerApi.ts
+++ /dev/null
@@ -1,212 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the 'License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import http from 'http';
-
-// Docker engine API.
-// See https://docs.docker.com/engine/api/v1.41/
-
-const DOCKER_API_VERSION = '1.41';
-
-export interface DockerImage {
-  imageId: string;
-  names: string[];
-}
-
-export interface PortBinding {
-  ip: string;
-  hostPort: number;
-  containerPort: number;
-}
-
-export interface DockerContainer {
-  containerId: string;
-  imageId: string;
-  state: 'created'|'restarting'|'running'|'removing'|'paused'|'exited'|'dead';
-  names: string[];
-  portBindings: PortBinding[];
-}
-
-export async function listContainers(): Promise<DockerContainer[]> {
-  const containers = (await getJSON('/containers/json')) ?? [];
-  return containers.map((container: any) => ({
-    containerId: container.Id,
-    imageId: container.ImageID,
-    state: container.State,
-    names: container.Names,
-    portBindings: container.Ports?.map((portInfo: any) => ({
-      ip: portInfo.IP,
-      hostPort: portInfo.PublicPort,
-      containerPort: portInfo.PrivatePort,
-    })) ?? [],
-  }));
-}
-
-interface LaunchContainerOptions {
-  imageId: string;
-  autoRemove: boolean;
-  command?: string[];
-  ports?: Number[];
-  name?: string;
-  waitUntil?: 'not-running' | 'next-exit' | 'removed';
-}
-
-export async function launchContainer(options: LaunchContainerOptions): Promise<string> {
-  const ExposedPorts: any = {};
-  const PortBindings: any = {};
-  for (const port of (options.ports ?? [])) {
-    ExposedPorts[`${port}/tcp`] = {};
-    PortBindings[`${port}/tcp`] = [{ HostPort: '0', HostIp: '127.0.0.1' }];
-  }
-  const container = await postJSON(`/containers/create` + (options.name ? '?name=' + options.name : ''), {
-    Cmd: options.command,
-    AttachStdout: true,
-    AttachStderr: true,
-    Image: options.imageId,
-    ExposedPorts,
-    HostConfig: {
-      Init: true,
-      AutoRemove: options.autoRemove,
-      ShmSize: 2 * 1024 * 1024 * 1024,
-      PortBindings,
-    },
-  });
-  await postJSON(`/containers/${container.Id}/start`);
-  if (options.waitUntil)
-    await postJSON(`/containers/${container.Id}/wait?condition=${options.waitUntil}`);
-  return container.Id;
-}
-
-interface StopContainerOptions {
-  containerId: string,
-  waitUntil?: 'not-running' | 'next-exit' | 'removed';
-}
-
-export async function stopContainer(options: StopContainerOptions) {
-  await Promise.all([
-    // Make sure to wait for the container to be removed.
-    postJSON(`/containers/${options.containerId}/wait?condition=${options.waitUntil ?? 'not-running'}`),
-    postJSON(`/containers/${options.containerId}/kill`),
-  ]);
-}
-
-export async function removeContainer(containerId: string) {
-  await Promise.all([
-    // Make sure to wait for the container to be removed.
-    postJSON(`/containers/${containerId}/wait?condition=removed`),
-    callDockerAPI('delete', `/containers/${containerId}`),
-  ]);
-}
-
-export async function getContainerLogs(containerId: string): Promise<string[]> {
-  const rawLogs = await callDockerAPI('get', `/containers/${containerId}/logs?stdout=true&stderr=true`).catch(e => '');
-  if (!rawLogs)
-    return [];
-  // Docker might prefix every log line with 8 characters. Stip them out.
-  // See https://github.com/moby/moby/issues/7375
-  // This doesn't happen if the containers is launched manually with attached terminal.
-  return rawLogs.split('\n').map(line => {
-    if ([0, 1, 2].includes(line.charCodeAt(0)))
-      return line.substring(8);
-    return line;
-  });
-}
-
-interface CommitContainerOptions {
-  containerId: string,
-  repo: string,
-  tag: string,
-  entrypoint?: string,
-  env?: {[key: string]: string | number | boolean | undefined},
-}
-
-export async function commitContainer(options: CommitContainerOptions) {
-  const Env = [];
-  for (const [key, value] of Object.entries(options.env ?? {}))
-    Env.push(`${key}=${value}`);
-  await postJSON(`/commit?container=${options.containerId}&repo=${options.repo}&tag=${options.tag}`, {
-    Entrypoint: options.entrypoint ?? '',
-    Env,
-  });
-}
-
-export async function listImages(): Promise<DockerImage[]> {
-  const rawImages: any[] = (await getJSON('/images/json')) ?? [];
-  return rawImages.map((rawImage: any) => ({
-    imageId: rawImage.Id,
-    names: rawImage.RepoTags ?? [],
-  }));
-}
-
-export async function removeImage(imageId: string) {
-  await callDockerAPI('delete', `/images/${imageId}`);
-}
-
-export async function checkEngineRunning() {
-  try {
-    await callDockerAPI('get', '/info');
-    return true;
-  } catch (e) {
-    return false;
-  }
-}
-
-async function getJSON(url: string): Promise<any> {
-  const result = await callDockerAPI('get', url);
-  if (!result)
-    return result;
-  return JSON.parse(result);
-}
-
-async function postJSON(url: string, json: any = undefined) {
-  const result = await callDockerAPI('post', url, json ? JSON.stringify(json) : undefined);
-  if (!result)
-    return result;
-  return JSON.parse(result);
-}
-
-function callDockerAPI(method: 'post'|'get'|'delete', url: string, body: Buffer|string|undefined = undefined): Promise<string> {
-  const dockerSocket = process.platform === 'win32' ? '\\\\.\\pipe\\docker_engine' : '/var/run/docker.sock';
-  return new Promise((resolve, reject) => {
-    const request = http.request({
-      socketPath: dockerSocket,
-      path: `/v${DOCKER_API_VERSION}${url}`,
-      timeout: 30000,
-      method,
-    }, (response: http.IncomingMessage) => {
-      let body = '';
-      response.on('data', function(chunk){
-        body += chunk;
-      });
-      response.on('end', function(){
-        if (!response.statusCode || response.statusCode < 200 || response.statusCode >= 300)
-          reject(new Error(`${method} ${url} FAILED with statusCode ${response.statusCode} and body\n${body}`));
-        else
-          resolve(body);
-      });
-    });
-    request.on('error', function(e){
-      reject(e);
-    });
-    if (body) {
-      request.setHeader('Content-Type', 'application/json');
-      request.setHeader('Content-Length', body.length);
-      request.write(body);
-    } else {
-      request.setHeader('Content-Type', 'text/plain');
-    }
-    request.end();
-  });
-}
diff --git a/packages/playwright-test/src/index.ts b/packages/playwright-test/src/index.ts
index f139aaaf8b6095cb16d19e17bd99317cdf694bc4..23b6459f4c283be5fa1e764c94ad6e7bb1f6c621 100644
--- a/packages/playwright-test/src/index.ts
+++ b/packages/playwright-test/src/index.ts
@@ -16,7 +16,7 @@
 
 import * as fs from 'fs';
 import * as path from 'path';
-import type { LaunchOptions, BrowserContextOptions, Page, BrowserContext, Video, APIRequestContext, Tracing } from 'playwright-core';
+import type { LaunchOptions, BrowserContextOptions, Page, Browser, BrowserContext, Video, APIRequestContext, Tracing } from 'playwright-core';
 import type { TestType, PlaywrightTestArgs, PlaywrightTestOptions, PlaywrightWorkerArgs, PlaywrightWorkerOptions, TestInfo, VideoMode, TraceMode } from '../types/test';
 import { rootTestType } from './testType';
 import { createGuid, debugMode } from 'playwright-core/lib/utils';
@@ -48,14 +48,15 @@ type TestFixtures = PlaywrightTestArgs & PlaywrightTestOptions & {
   _contextFactory: (options?: BrowserContextOptions) => Promise<BrowserContext>;
 };
 type WorkerFixtures = PlaywrightWorkerArgs & PlaywrightWorkerOptions & {
+  _connectedBrowser: Browser | undefined,
   _browserOptions: LaunchOptions;
   _artifactsDir: () => string;
   _snapshotSuffix: string;
 };
 
 export const test = _baseTest.extend<TestFixtures, WorkerFixtures>({
-  defaultBrowserType: ['chromium', { scope: 'worker', option: true }],
-  browserName: [({ defaultBrowserType }, use) => use(defaultBrowserType), { scope: 'worker', option: true }],
+  defaultBrowserType: [ 'chromium', { scope: 'worker', option: true } ],
+  browserName: [ ({ defaultBrowserType }, use) => use(defaultBrowserType), { scope: 'worker', option: true } ],
   playwright: [async ({ }, use) => {
     if (process.env.PW_OUT_OF_PROCESS_DRIVER) {
       const impl = await outOfProcess.start({
@@ -68,17 +69,14 @@ export const test = _baseTest.extend<TestFixtures, WorkerFixtures>({
     } else {
       await use(require('playwright-core'));
     }
-  }, { scope: 'worker' }],
-  headless: [({ launchOptions }, use) => use(launchOptions.headless ?? true), { scope: 'worker', option: true }],
-  channel: [({ launchOptions }, use) => use(launchOptions.channel), { scope: 'worker', option: true }],
-  launchOptions: [{}, { scope: 'worker', option: true }],
-  connectOptions: [process.env.PW_TEST_CONNECT_WS_ENDPOINT ? {
-    wsEndpoint: process.env.PW_TEST_CONNECT_WS_ENDPOINT,
-    headers: process.env.PW_TEST_CONNECT_HEADERS ? JSON.parse(process.env.PW_TEST_CONNECT_HEADERS) : undefined,
-  } : undefined, { scope: 'worker', option: true }],
-  screenshot: ['off', { scope: 'worker', option: true }],
-  video: ['off', { scope: 'worker', option: true }],
-  trace: ['off', { scope: 'worker', option: true }],
+  }, { scope: 'worker' } ],
+  headless: [ ({ launchOptions }, use) => use(launchOptions.headless ?? true), { scope: 'worker', option: true } ],
+  channel: [ ({ launchOptions }, use) => use(launchOptions.channel), { scope: 'worker', option: true } ],
+  launchOptions: [ {}, { scope: 'worker', option: true } ],
+  connectOptions: [ process.env.PW_TEST_CONNECT_WS_ENDPOINT ? { wsEndpoint: process.env.PW_TEST_CONNECT_WS_ENDPOINT } : undefined, { scope: 'worker', option: true } ],
+  screenshot: [ 'off', { scope: 'worker', option: true } ],
+  video: [ 'off', { scope: 'worker', option: true } ],
+  trace: [ 'off', { scope: 'worker', option: true } ],
 
   _artifactsDir: [async ({}, use, workerInfo) => {
     let dir: string | undefined;
@@ -93,7 +91,7 @@ export const test = _baseTest.extend<TestFixtures, WorkerFixtures>({
       await removeFolders([dir]);
   }, { scope: 'worker', _title: 'playwright configuration' } as any],
 
-  _browserOptions: [async ({ playwright, headless, channel, launchOptions, connectOptions }, use) => {
+  _browserOptions: [async ({ playwright, headless, channel, launchOptions }, use) => {
     const options: LaunchOptions = {
       handleSIGINT: false,
       timeout: 0,
@@ -104,51 +102,71 @@ export const test = _baseTest.extend<TestFixtures, WorkerFixtures>({
     if (channel !== undefined)
       options.channel = channel;
 
-    for (const browserType of [playwright.chromium, playwright.firefox, playwright.webkit]) {
+    for (const browserType of [playwright.chromium, playwright.firefox, playwright.webkit])
       (browserType as any)._defaultLaunchOptions = options;
-      (browserType as any)._defaultConnectOptions = connectOptions;
-    }
     await use(options);
-    for (const browserType of [playwright.chromium, playwright.firefox, playwright.webkit]) {
+    for (const browserType of [playwright.chromium, playwright.firefox, playwright.webkit])
       (browserType as any)._defaultLaunchOptions = undefined;
-      (browserType as any)._defaultConnectOptions = undefined;
-    }
   }, { scope: 'worker', auto: true }],
 
-  browser: [async ({ playwright, browserName }, use) => {
+  _connectedBrowser: [async ({ playwright, browserName, connectOptions, _browserOptions }, use) => {
+    if (!connectOptions) {
+      await use(undefined);
+      return;
+    }
+    if (!['chromium', 'firefox', 'webkit'].includes(browserName))
+      throw new Error(`Unexpected browserName "${browserName}", must be one of "chromium", "firefox" or "webkit"`);
+    const browser = await playwright[browserName].connect(connectOptions.wsEndpoint, {
+      headers: {
+        'x-playwright-browser': browserName,
+        'x-playwright-launch-options': JSON.stringify(_browserOptions),
+        ...connectOptions.headers,
+      },
+      timeout: connectOptions.timeout ?? 3 * 60 * 1000, // 3 minutes
+    });
+    await use(browser);
+    await browser.close();
+  }, { scope: 'worker', timeout: 0, _title: 'remote connection' } as any],
+
+  browser: [async ({ playwright, browserName, _connectedBrowser }, use) => {
+    if (_connectedBrowser) {
+      await use(_connectedBrowser);
+      return;
+    }
+
     if (!['chromium', 'firefox', 'webkit'].includes(browserName))
       throw new Error(`Unexpected browserName "${browserName}", must be one of "chromium", "firefox" or "webkit"`);
     const browser = await playwright[browserName].launch();
     await use(browser);
     await browser.close();
-  }, { scope: 'worker', timeout: 0 }],
-
-  acceptDownloads: [({ contextOptions }, use) => use(contextOptions.acceptDownloads ?? true), { option: true }],
-  bypassCSP: [({ contextOptions }, use) => use(contextOptions.bypassCSP), { option: true }],
-  colorScheme: [({ contextOptions }, use) => use(contextOptions.colorScheme), { option: true }],
-  deviceScaleFactor: [({ contextOptions }, use) => use(contextOptions.deviceScaleFactor), { option: true }],
-  extraHTTPHeaders: [({ contextOptions }, use) => use(contextOptions.extraHTTPHeaders), { option: true }],
-  geolocation: [({ contextOptions }, use) => use(contextOptions.geolocation), { option: true }],
-  hasTouch: [({ contextOptions }, use) => use(contextOptions.hasTouch), { option: true }],
-  httpCredentials: [({ contextOptions }, use) => use(contextOptions.httpCredentials), { option: true }],
-  ignoreHTTPSErrors: [({ contextOptions }, use) => use(contextOptions.ignoreHTTPSErrors), { option: true }],
-  isMobile: [({ contextOptions }, use) => use(contextOptions.isMobile), { option: true }],
-  javaScriptEnabled: [({ contextOptions }, use) => use(contextOptions.javaScriptEnabled ?? true), { option: true }],
-  locale: [({ contextOptions }, use) => use(contextOptions.locale ?? 'en-US'), { option: true }],
-  offline: [({ contextOptions }, use) => use(contextOptions.offline), { option: true }],
-  permissions: [({ contextOptions }, use) => use(contextOptions.permissions), { option: true }],
-  proxy: [({ contextOptions }, use) => use(contextOptions.proxy), { option: true }],
-  storageState: [({ contextOptions }, use) => use(contextOptions.storageState), { option: true }],
-  timezoneId: [({ contextOptions }, use) => use(contextOptions.timezoneId), { option: true }],
-  userAgent: [({ contextOptions }, use) => use(contextOptions.userAgent), { option: true }],
+  }, { scope: 'worker', timeout: 0 } ],
+
+  acceptDownloads: [ ({ contextOptions }, use) => use(contextOptions.acceptDownloads ?? true), { option: true } ],
+  bypassCSP: [ ({ contextOptions }, use) => use(contextOptions.bypassCSP), { option: true } ],
+  colorScheme: [ ({ contextOptions }, use) => use(contextOptions.colorScheme), { option: true } ],
+  deviceScaleFactor: [ ({ contextOptions }, use) => use(contextOptions.deviceScaleFactor), { option: true } ],
+  extraHTTPHeaders: [ ({ contextOptions }, use) => use(contextOptions.extraHTTPHeaders), { option: true } ],
+  geolocation: [ ({ contextOptions }, use) => use(contextOptions.geolocation), { option: true } ],
+  hasTouch: [ ({ contextOptions }, use) => use(contextOptions.hasTouch), { option: true } ],
+  httpCredentials: [ ({ contextOptions }, use) => use(contextOptions.httpCredentials), { option: true } ],
+  ignoreHTTPSErrors: [ ({ contextOptions }, use) => use(contextOptions.ignoreHTTPSErrors), { option: true } ],
+  isMobile: [ ({ contextOptions }, use) => use(contextOptions.isMobile), { option: true } ],
+  javaScriptEnabled: [ ({ contextOptions }, use) => use(contextOptions.javaScriptEnabled ?? true), { option: true } ],
+  locale: [ ({ contextOptions }, use) => use(contextOptions.locale ?? 'en-US'), { option: true } ],
+  offline: [ ({ contextOptions }, use) => use(contextOptions.offline), { option: true } ],
+  permissions: [ ({ contextOptions }, use) => use(contextOptions.permissions), { option: true } ],
+  proxy: [ ({ contextOptions }, use) => use(contextOptions.proxy), { option: true } ],
+  storageState: [ ({ contextOptions }, use) => use(contextOptions.storageState), { option: true } ],
+  timezoneId: [ ({ contextOptions }, use) => use(contextOptions.timezoneId), { option: true } ],
+  userAgent: [ ({ contextOptions }, use) => use(contextOptions.userAgent), { option: true } ],
   viewport: [({ contextOptions }, use) => use(contextOptions.viewport === undefined ? { width: 1280, height: 720 } : contextOptions.viewport), { option: true }],
-  actionTimeout: [0, { option: true }],
-  navigationTimeout: [0, { option: true }],
-  baseURL: [async ({ }, use) => {
+  actionTimeout: [ 0, { option: true } ],
+  navigationTimeout: [ 0, { option: true } ],
+  baseURL: [ async ({ }, use) => {
     await use(process.env.PLAYWRIGHT_TEST_BASE_URL);
-  }, { option: true }],
-  serviceWorkers: [({ contextOptions }, use) => use(contextOptions.serviceWorkers ?? 'allow'), { option: true }],
-  contextOptions: [{}, { option: true }],
+  }, { option: true } ],
+  serviceWorkers: [ ({ contextOptions }, use) => use(contextOptions.serviceWorkers ?? 'allow'), { option: true } ],
+  contextOptions: [ {}, { option: true } ],
 
   _combinedContextOptions: async ({
     acceptDownloads,
@@ -223,7 +241,7 @@ export const test = _baseTest.extend<TestFixtures, WorkerFixtures>({
     });
   },
 
-  _snapshotSuffix: [process.env.PW_TEST_SNAPSHOT_SUFFIX ?? process.platform, { scope: 'worker' }],
+  _snapshotSuffix: [process.platform, { scope: 'worker' }],
 
   _setupContextOptionsAndArtifacts: [async ({ playwright, _snapshotSuffix, _combinedContextOptions, _browserOptions, _artifactsDir, trace, screenshot, actionTimeout, navigationTimeout }, use, testInfo) => {
     testInfo.snapshotSuffix = _snapshotSuffix;
diff --git a/packages/playwright-test/src/loader.ts b/packages/playwright-test/src/loader.ts
index 7beb4dcedf1e88fa99efa8e9699b8e7f1cc0feb5..baf3d6a1bdb1ca8b47dbfb784526b21b294dfd4e 100644
--- a/packages/playwright-test/src/loader.ts
+++ b/packages/playwright-test/src/loader.ts
@@ -94,7 +94,6 @@ export class Loader {
     config.shard = takeFirst(this._configCLIOverrides.shard, config.shard);
     config.timeout = takeFirst(this._configCLIOverrides.timeout, config.timeout);
     config.updateSnapshots = takeFirst(this._configCLIOverrides.updateSnapshots, config.updateSnapshots);
-    config.ignoreSnapshots = takeFirst(this._configCLIOverrides.ignoreSnapshots, config.ignoreSnapshots);
     if (this._configCLIOverrides.projects && config.projects)
       throw new Error(`Cannot use --browser option when configuration file defines projects. Specify browserName in the projects instead.`);
     config.projects = takeFirst(this._configCLIOverrides.projects, config.projects as any);
@@ -140,7 +139,6 @@ export class Loader {
     this._fullConfig.reportSlowTests = takeFirst(config.reportSlowTests, baseFullConfig.reportSlowTests);
     this._fullConfig.quiet = takeFirst(config.quiet, baseFullConfig.quiet);
     this._fullConfig.shard = takeFirst(config.shard, baseFullConfig.shard);
-    this._fullConfig._ignoreSnapshots = takeFirst(config.ignoreSnapshots, baseFullConfig._ignoreSnapshots);
     this._fullConfig.updateSnapshots = takeFirst(config.updateSnapshots, baseFullConfig.updateSnapshots);
     this._fullConfig.workers = takeFirst(config.workers, baseFullConfig.workers);
     const webServers = takeFirst(config.webServer, baseFullConfig.webServer);
@@ -295,8 +293,6 @@ export class Loader {
   }
 
   private async _requireOrImport(file: string) {
-    if (process.platform === 'win32')
-      file = await fixWin32FilepathCapitalization(file);
     const revertBabelRequire = installTransform();
     const isModule = fileIsModule(file);
     try {
@@ -451,7 +447,7 @@ function toReporters(reporters: BuiltInReporter | ReporterDescription[] | undefi
   if (!reporters)
     return;
   if (typeof reporters === 'string')
-    return [[reporters]];
+    return [ [reporters] ];
   return reporters;
 }
 
@@ -555,11 +551,6 @@ function validateConfig(file: string, config: Config) {
       throw errorWithFile(file, `config.shard.current must be a positive number, not greater than config.shard.total`);
   }
 
-  if ('ignoreSnapshots' in config && config.ignoreSnapshots !== undefined) {
-    if (typeof config.ignoreSnapshots !== 'boolean')
-      throw errorWithFile(file, `config.ignoreSnapshots must be a boolean`);
-  }
-
   if ('updateSnapshots' in config && config.updateSnapshots !== undefined) {
     if (typeof config.updateSnapshots !== 'string' || !['all', 'none', 'missing'].includes(config.updateSnapshots))
       throw errorWithFile(file, `config.updateSnapshots must be one of "all", "none" or "missing"`);
@@ -640,7 +631,7 @@ export const baseFullConfig: FullConfigInternal = {
   metadata: {},
   preserveOutput: 'always',
   projects: [],
-  reporter: [[process.env.CI ? 'dot' : 'list']],
+  reporter: [ [process.env.CI ? 'dot' : 'list'] ],
   reportSlowTests: { max: 5, threshold: 15000 },
   rootDir: path.resolve(process.cwd()),
   quiet: false,
@@ -654,7 +645,6 @@ export const baseFullConfig: FullConfigInternal = {
   _globalOutputDir: path.resolve(process.cwd()),
   _configDir: '',
   _testGroupsCount: 0,
-  _ignoreSnapshots: false,
   _workerIsolation: 'isolate-pools',
 };
 
@@ -662,7 +652,7 @@ function resolveReporters(reporters: Config['reporter'], rootDir: string): Repor
   return toReporters(reporters as any)?.map(([id, arg]) => {
     if (builtInReporters.includes(id as any))
       return [id, arg];
-    return [require.resolve(id, { paths: [rootDir] }), arg];
+    return [require.resolve(id, { paths: [ rootDir ] }), arg];
   });
 }
 
@@ -688,23 +678,3 @@ export function folderIsModule(folder: string): boolean {
   // Rely on `require` internal caching logic.
   return require(packageJsonPath).type === 'module';
 }
-
-async function fixWin32FilepathCapitalization(file: string): Promise<string> {
-  /**
-   * On Windows with PowerShell <= 6 it is possible to have a CWD with different
-   * casing than what the actual directory on the filesystem is. This can cause
-   * that we require the file multiple times with different casing. To mitigate
-   * this we get the actual underlying filesystem path and use that.
-   * https://github.com/microsoft/playwright/issues/9193#issuecomment-1219362150
-   */
-  const realFile = await new Promise<string>((resolve, reject) => fs.realpath.native(file, (error, realFile) => {
-    if (error)
-      return reject(error);
-    resolve(realFile);
-  }));
-  // We do not want to resolve them (e.g. 8.3 filenames), so we do a best effort
-  // approach by only using it if the actual lowercase characters are the same:
-  if (realFile.toLowerCase() === file.toLowerCase())
-    return realFile;
-  return file;
-}
diff --git a/packages/playwright-test/src/matchers/matchers.ts b/packages/playwright-test/src/matchers/matchers.ts
index 3627a9fb3bf8dba753e8e199d5aff11ebe4563d3..2441058ca337ef33e7be1014c744db95a33e2d84 100644
--- a/packages/playwright-test/src/matchers/matchers.ts
+++ b/packages/playwright-test/src/matchers/matchers.ts
@@ -17,7 +17,7 @@
 import type { Locator, Page, APIResponse } from 'playwright-core';
 import type { FrameExpectOptions } from 'playwright-core/lib/client/types';
 import { colors } from 'playwright-core/lib/utilsBundle';
-import { constructURLBasedOnBaseURL, isRegExp } from 'playwright-core/lib/utils';
+import { constructURLBasedOnBaseURL } from 'playwright-core/lib/utils';
 import type { Expect } from '../types';
 import { expectTypes, callLogText } from '../util';
 import { toBeTruthy } from './toBeTruthy';
@@ -58,11 +58,10 @@ export function toBeDisabled(
 export function toBeEditable(
   this: ReturnType<Expect['getState']>,
   locator: LocatorEx,
-  options?: { editable?: boolean, timeout?: number },
+  options?: { timeout?: number },
 ) {
   return toBeTruthy.call(this, 'toBeEditable', locator, 'Locator', async (isNot, timeout, customStackTrace) => {
-    const editable = !options || options.editable === undefined || options.editable === true;
-    return await locator._expect(customStackTrace, editable ? 'to.be.editable' : 'to.be.readonly', { isNot, timeout });
+    return await locator._expect(customStackTrace, 'to.be.editable', { isNot, timeout });
   }, options);
 }
 
@@ -79,11 +78,10 @@ export function toBeEmpty(
 export function toBeEnabled(
   this: ReturnType<Expect['getState']>,
   locator: LocatorEx,
-  options?: { enabled?: boolean, timeout?: number },
+  options?: { timeout?: number },
 ) {
   return toBeTruthy.call(this, 'toBeEnabled', locator, 'Locator', async (isNot, timeout, customStackTrace) => {
-    const enabled = !options || options.enabled === undefined || options.enabled === true;
-    return await locator._expect(customStackTrace, enabled ? 'to.be.enabled' : 'to.be.disabled', { isNot, timeout });
+    return await locator._expect(customStackTrace, 'to.be.enabled', { isNot, timeout });
   }, options);
 }
 
@@ -110,11 +108,10 @@ export function toBeHidden(
 export function toBeVisible(
   this: ReturnType<Expect['getState']>,
   locator: LocatorEx,
-  options?: { visible?: boolean, timeout?: number },
+  options?: { timeout?: number },
 ) {
   return toBeTruthy.call(this, 'toBeVisible', locator, 'Locator', async (isNot, timeout, customStackTrace) => {
-    const visible = !options || options.visible === undefined || options.visible === true;
-    return await locator._expect(customStackTrace, visible ? 'to.be.visible' : 'to.be.hidden', { isNot, timeout });
+    return await locator._expect(customStackTrace, 'to.be.visible', { isNot, timeout });
   }, options);
 }
 
@@ -141,25 +138,13 @@ export function toHaveAttribute(
   this: ReturnType<Expect['getState']>,
   locator: LocatorEx,
   name: string,
-  expected: string | RegExp | undefined | { timeout?: number},
+  expected: string | RegExp,
   options?: { timeout?: number },
 ) {
-  if (!options) {
-    // Update params for the case toHaveAttribute(name, options);
-    if (typeof expected === 'object' && !isRegExp(expected)) {
-      options = expected;
-      expected = undefined;
-    }
-  }
-  if (expected === undefined) {
-    return toBeTruthy.call(this, 'toHaveAttribute', locator, 'Locator', async (isNot, timeout, customStackTrace) => {
-      return await locator._expect(customStackTrace, 'to.have.attribute', { expressionArg: name, isNot, timeout });
-    }, options);
-  }
   return toMatchText.call(this, 'toHaveAttribute', locator, 'Locator', async (isNot, timeout, customStackTrace) => {
-    const expectedText = toExpectedTextValues([expected as (string | RegExp)]);
-    return await locator._expect(customStackTrace, 'to.have.attribute.value', { expressionArg: name, expectedText, isNot, timeout });
-  }, expected as (string | RegExp), options);
+    const expectedText = toExpectedTextValues([expected]);
+    return await locator._expect(customStackTrace, 'to.have.attribute', { expressionArg: name, expectedText, isNot, timeout });
+  }, expected, options);
 }
 
 export function toHaveClass(
diff --git a/packages/playwright-test/src/matchers/toMatchSnapshot.ts b/packages/playwright-test/src/matchers/toMatchSnapshot.ts
index 733bb8a5ce830d9ef4d5d0f0c6cfe05c1ebaf3be..26ced3e18b2b3c4530765dfde65693c0b9da3f3b 100644
--- a/packages/playwright-test/src/matchers/toMatchSnapshot.ts
+++ b/packages/playwright-test/src/matchers/toMatchSnapshot.ts
@@ -251,10 +251,6 @@ export function toMatchSnapshot(
     throw new Error(`toMatchSnapshot() must be called during the test`);
   if (received instanceof Promise)
     throw new Error('An unresolved Promise was passed to toMatchSnapshot(), make sure to resolve it by adding await to it.');
-
-  if (testInfo.config._ignoreSnapshots)
-    return { pass: !this.isNot, message: () => '' };
-
   const helper = new SnapshotHelper(
       testInfo, testInfo.snapshotPath.bind(testInfo), determineFileExtension(received),
       testInfo.project._expect?.toMatchSnapshot || {},
@@ -296,10 +292,6 @@ export async function toHaveScreenshot(
   const testInfo = currentTestInfo();
   if (!testInfo)
     throw new Error(`toHaveScreenshot() must be called during the test`);
-
-  if (testInfo.config._ignoreSnapshots)
-    return { pass: !this.isNot, message: () => '' };
-
   const config = (testInfo.project._expect as any)?.toHaveScreenshot;
   const snapshotPathResolver = process.env.PWTEST_USE_SCREENSHOTS_DIR_FOR_TEST
     ? testInfo._screenshotPath.bind(testInfo)
diff --git a/packages/playwright-test/src/mount.ts b/packages/playwright-test/src/mount.ts
index 17ab6c3cde1b1230327336b05dc827ac170d9ed9..feeb6c9bf504e0fe04ddfa3c780619215b40bda4 100644
--- a/packages/playwright-test/src/mount.ts
+++ b/packages/playwright-test/src/mount.ts
@@ -21,7 +21,7 @@ let boundCallbacksForMount: Function[] = [];
 
 interface MountResult extends Locator {
   unmount(locator: Locator): Promise<void>;
-  rerender(options: Omit<MountOptions, 'hooksConfig'> | string | JsxComponent): Promise<void>;
+  rerender(options: Omit<MountOptions, 'hooksConfig'>): Promise<void>;
 }
 
 export const fixtures: Fixtures<
@@ -60,8 +60,11 @@ export const fixtures: Fixtures<
               await window.playwrightUnmount(rootElement);
             });
           },
-          rerender: async (component: JsxComponent | string, options?: Omit<MountOptions, 'hooksConfig'>) => {
-            await innerRerender(page, component, options);
+          rerender: async (options: Omit<MountOptions, 'hooksConfig'>) => {
+            await locator.evaluate(async (element, options) => {
+              const rootElement = document.getElementById('root')!;
+              return await window.playwrightRerender(rootElement, options);
+            }, options);
           }
         });
       });
@@ -69,32 +72,13 @@ export const fixtures: Fixtures<
     },
   };
 
-async function innerRerender(page: Page, jsxOrType: JsxComponent | string, options: Omit<MountOptions, 'hooksConfig'> = {}): Promise<void> {
-  const component = createComponent(jsxOrType, options);
-  wrapFunctions(component, page, boundCallbacksForMount);
-
-  await page.evaluate(async ({ component }) => {
-    const unwrapFunctions = (object: any) => {
-      for (const [key, value] of Object.entries(object)) {
-        if (typeof value === 'string' && (value as string).startsWith('__pw_func_')) {
-          const ordinal = +value.substring('__pw_func_'.length);
-          object[key] = (...args: any[]) => {
-            (window as any)['__ct_dispatch'](ordinal, args);
-          };
-        } else if (typeof value === 'object' && value) {
-          unwrapFunctions(value);
-        }
-      }
-    };
-
-    unwrapFunctions(component);
-    const rootElement = document.getElementById('root')!;
-    return await window.playwrightRerender(rootElement, component);
-  }, { component });
-}
-
 async function innerMount(page: Page, jsxOrType: JsxComponent | string, options: MountOptions = {}): Promise<string> {
-  const component = createComponent(jsxOrType, options);
+  let component: Component;
+  if (typeof jsxOrType === 'string')
+    component = { kind: 'object', type: jsxOrType, options };
+  else
+    component = jsxOrType;
+
   wrapFunctions(component, page, boundCallbacksForMount);
 
   // WebKit does not wait for deferred scripts.
@@ -130,11 +114,6 @@ async function innerMount(page: Page, jsxOrType: JsxComponent | string, options:
   return selector;
 }
 
-function createComponent(jsxOrType: JsxComponent | string, options: Omit<MountOptions, 'hooksConfig'> = {}): Component {
-  if (typeof jsxOrType !== 'string') return jsxOrType;
-  return { kind: 'object', type: jsxOrType, options };
-}
-
 function wrapFunctions(object: any, page: Page, callbacks: Function[]) {
   for (const [key, value] of Object.entries(object)) {
     const type = typeof value;
diff --git a/packages/playwright-test/src/plugins/webServerPlugin.ts b/packages/playwright-test/src/plugins/webServerPlugin.ts
index 4ce87a6de85cf0ed69b46997f5edd00031f1c560..978ef8d5a8dae2b60c0f1461928cf2bdbe3ce339 100644
--- a/packages/playwright-test/src/plugins/webServerPlugin.ts
+++ b/packages/playwright-test/src/plugins/webServerPlugin.ts
@@ -159,12 +159,10 @@ async function isURLAvailable(url: URL, ignoreHTTPSErrors: boolean, onStdErr: Re
 }
 
 async function httpStatusCode(url: URL, ignoreHTTPSErrors: boolean, onStdErr: Reporter['onStdErr']): Promise<number> {
-  const commonRequestOptions = { headers: { Accept: '*/*' } };
   const isHttps = url.protocol === 'https:';
   const requestOptions = isHttps ? {
-    ...commonRequestOptions,
     rejectUnauthorized: !ignoreHTTPSErrors,
-  } : commonRequestOptions;
+  } : {};
   return new Promise(resolve => {
     debugWebServer(`HTTP GET: ${url}`);
     (isHttps ? https : http).get(url, requestOptions, res => {
diff --git a/packages/playwright-test/src/reporters/base.ts b/packages/playwright-test/src/reporters/base.ts
index 0b9844721d4df31d7dec5a00361e69bb6ece0692..6c1d34a698e26f1462710adee0c9b65a18f659fb 100644
--- a/packages/playwright-test/src/reporters/base.ts
+++ b/packages/playwright-test/src/reporters/base.ts
@@ -132,7 +132,7 @@ export class BaseReporter implements ReporterInternal  {
     fileDurations.sort((a, b) => b[1] - a[1]);
     const count = Math.min(fileDurations.length, this.config.reportSlowTests.max || Number.POSITIVE_INFINITY);
     const threshold =  this.config.reportSlowTests.threshold;
-    return fileDurations.filter(([, duration]) => duration > threshold).slice(0, count);
+    return fileDurations.filter(([,duration]) => duration > threshold).slice(0, count);
   }
 
   protected generateSummaryMessage({ skipped, expected, interrupted, unexpected, flaky, fatalErrors }: TestSummary) {
@@ -356,14 +356,10 @@ function stepSuffix(step: TestStep | undefined) {
   return stepTitles.map(t => ' âº ' + t).join('');
 }
 
-export function formatTestTitle(config: FullConfig, test: TestCase, step?: TestStep, omitLocation: boolean = false): string {
+export function formatTestTitle(config: FullConfig, test: TestCase, step?: TestStep): string {
   // root, project, file, ...describes, test
   const [, projectName, , ...titles] = test.titlePath();
-  let location;
-  if (omitLocation)
-    location = `${relativeTestPath(config, test)}`;
-  else
-    location = `${relativeTestPath(config, test)}:${test.location.line}:${test.location.column}`;
+  const location = `${relativeTestPath(config, test)}:${test.location.line}:${test.location.column}`;
   const projectTitle = projectName ? `[${projectName}] âº ` : '';
   return `${projectTitle}${location} âº ${titles.join(' âº ')}${stepSuffix(step)}`;
 }
@@ -379,9 +375,7 @@ export function formatError(config: FullConfig, error: TestError, highlightCode:
   const tokens = [];
   let location: Location | undefined;
   if (stack) {
-    // Now that we filter out internals from our stack traces, we can safely render
-    // the helper / original exception locations.
-    const parsed = prepareErrorStack(stack);
+    const parsed = prepareErrorStack(stack, file);
     tokens.push(parsed.message);
     location = parsed.location;
     if (location) {
@@ -422,11 +416,15 @@ function indent(lines: string, tab: string) {
   return lines.replace(/^(?=.+$)/gm, tab);
 }
 
-export function prepareErrorStack(stack: string): {
+export function prepareErrorStack(stack: string, file?: string): {
   message: string;
   stackLines: string[];
   location?: Location;
 } {
+  if (file) {
+    // Stack will have /private/var/folders instead of /var/folders on Mac.
+    file = fs.realpathSync(file);
+  }
   const lines = stack.split('\n');
   let firstStackLine = lines.findIndex(line => line.startsWith('    at '));
   if (firstStackLine === -1)
@@ -438,8 +436,10 @@ export function prepareErrorStack(stack: string): {
     const { frame: parsed, fileName: resolvedFile } = parseStackTraceLine(line);
     if (!parsed || !resolvedFile)
       continue;
-    location = { file: resolvedFile, column: parsed.column || 0, line: parsed.line || 0 };
-    break;
+    if (!file || resolvedFile === file) {
+      location = { file: resolvedFile, column: parsed.column || 0, line: parsed.line || 0 };
+      break;
+    }
   }
   return { message, stackLines, location };
 }
diff --git a/packages/playwright-test/src/reporters/html.ts b/packages/playwright-test/src/reporters/html.ts
index 4fd9c75a1447724ed1d0b7658dc2ed28c9a4437f..8ef1b4e3e0fe4286c49b52cb3e9e2288c3245caf 100644
--- a/packages/playwright-test/src/reporters/html.ts
+++ b/packages/playwright-test/src/reporters/html.ts
@@ -503,6 +503,7 @@ class HtmlBuilder {
           name: a.name,
           contentType: a.contentType,
           path: 'data/' + sha1,
+          body: a.body,
         };
       }
 
diff --git a/packages/playwright-test/src/reporters/json.ts b/packages/playwright-test/src/reporters/json.ts
index 493b6272473b7601ad07a433553b746dcc89832d..7bb3f4d8d35c91dee0f519f4e873a1f6ee7d92cd 100644
--- a/packages/playwright-test/src/reporters/json.ts
+++ b/packages/playwright-test/src/reporters/json.ts
@@ -149,8 +149,7 @@ class JSONReporter implements Reporter {
       title: test.title,
       ok: test.ok(),
       tags: (test.title.match(/@[\S]+/g) || []).map(t => t.substring(1)),
-      tests: [this._serializeTest(test)],
-      id: test.id,
+      tests: [ this._serializeTest(test) ],
       ...this._relativeLocation(test.location),
     };
   }
@@ -177,7 +176,6 @@ class JSONReporter implements Reporter {
       stderr: result.stderr.map(s => stdioEntry(s)),
       retry: result.retry,
       steps: steps.length ? steps.map(s => this._serializeTestStep(s)) : undefined,
-      startTime: result.startTime,
       attachments: result.attachments.map(a => ({
         name: a.name,
         contentType: a.contentType,
@@ -186,7 +184,7 @@ class JSONReporter implements Reporter {
       })),
     };
     if (result.error?.stack)
-      jsonResult.errorLocation = prepareErrorStack(result.error.stack).location;
+      jsonResult.errorLocation = prepareErrorStack(result.error.stack, test.location.file).location;
     return jsonResult;
   }
 
diff --git a/packages/playwright-test/src/reporters/junit.ts b/packages/playwright-test/src/reporters/junit.ts
index 90b66b7f1973cc28291bf206914474e254b3a1ee..0ed0c1ef3e15c5c92419011651acaacde4c49fdc 100644
--- a/packages/playwright-test/src/reporters/junit.ts
+++ b/packages/playwright-test/src/reporters/junit.ts
@@ -133,7 +133,7 @@ class JUnitReporter implements Reporter {
       attributes: {
         // Skip root, project, file
         name: test.titlePath().slice(3).join(' '),
-        classname: formatTestTitle(this.config, test, undefined, true),
+        classname: formatTestTitle(this.config, test),
         time: (test.results.reduce((acc, value) => acc + value.duration, 0)) / 1000
       },
       children: [] as XMLEntry[]
diff --git a/packages/playwright-test/src/runner.ts b/packages/playwright-test/src/runner.ts
index c783afae9d4717b7021f99099d27d228e6260611..fbb8aab9822062a93d3e4cbe161e0076769e4d4b 100644
--- a/packages/playwright-test/src/runner.ts
+++ b/packages/playwright-test/src/runner.ts
@@ -56,7 +56,6 @@ type RunOptions = {
   testFileFilters?: TestFileFilter[];
   projectFilter?: string[];
   watchMode?: boolean;
-  passWithNoTests?: boolean;
 };
 
 export type ConfigCLIOverrides = {
@@ -73,7 +72,6 @@ export type ConfigCLIOverrides = {
   reporter?: string;
   shard?: { current: number, total: number };
   timeout?: number;
-  ignoreSnapshots?: boolean;
   updateSnapshots?: 'all'|'none'|'missing';
   workers?: number;
   projects?: { name: string, use?: any }[],
@@ -339,7 +337,7 @@ export class Runner {
 
     // 7. Fail when no tests.
     let total = rootSuite.allTests().length;
-    if (!total && !options.passWithNoTests)
+    if (!total)
       fatalErrors.push(createNoTestsError());
 
     // 8. Compute shards.
diff --git a/packages/playwright-test/src/transform.ts b/packages/playwright-test/src/transform.ts
index 35cbb2b1a5da781f1c3124b2a79a1c7817f60473..b7c4208a97205546efc96794f7cb2b9d0cb892c9 100644
--- a/packages/playwright-test/src/transform.ts
+++ b/packages/playwright-test/src/transform.ts
@@ -97,7 +97,9 @@ export function resolveHook(filename: string, specifier: string): string | undef
   if (builtins.has(specifier))
     return;
   const isTypeScript = filename.endsWith('.ts') || filename.endsWith('.tsx');
-  const tsconfig = isTypeScript ? loadAndValidateTsconfigForFile(filename) : undefined;
+  if (!isTypeScript)
+    return;
+  const tsconfig = loadAndValidateTsconfigForFile(filename);
   if (tsconfig && !isRelativeSpecifier(specifier)) {
     let longestPrefixLength = -1;
     let pathMatchedByLongestPrefix: string | undefined;
diff --git a/packages/playwright-test/src/types.ts b/packages/playwright-test/src/types.ts
index 45de213264dbc5af2d99fdba6ea4cba1096b27ed..cc70699d38b5cf6b19555674040b5af17551e2f3 100644
--- a/packages/playwright-test/src/types.ts
+++ b/packages/playwright-test/src/types.ts
@@ -46,7 +46,6 @@ export interface FullConfigInternal extends FullConfigPublic {
   _configDir: string;
   _testGroupsCount: number;
   _watchMode: boolean;
-  _ignoreSnapshots: boolean;
   _workerIsolation: WorkerIsolation;
   /**
    * If populated, this should also be the first/only entry in _webServers. Legacy singleton `webServer` as well as those provided via an array in the user-facing playwright.config.{ts,js} will be in `_webServers`. The legacy field (`webServer`) field additionally stores the backwards-compatible singleton `webServer` since it had been showing up in globalSetup to the user.
diff --git a/packages/playwright-test/src/worker.ts b/packages/playwright-test/src/worker.ts
index 1a7b17b75e431e43085f29511e144da90bf37e6e..1a8c9ac8b209628e48831126ff7d0c1319f7ebbe 100644
--- a/packages/playwright-test/src/worker.ts
+++ b/packages/playwright-test/src/worker.ts
@@ -46,8 +46,8 @@ if (!process.env.PW_RUNNER_DEBUG) {
 }
 
 process.on('disconnect', gracefullyCloseAndExit);
-process.on('SIGINT', () => {});
-process.on('SIGTERM', () => {});
+process.on('SIGINT',() => {});
+process.on('SIGTERM',() => {});
 
 let workerRunner: WorkerRunner;
 let workerIndex: number | undefined;
diff --git a/packages/playwright-test/src/workerRunner.ts b/packages/playwright-test/src/workerRunner.ts
index 70ca8c82f6d9301460f6c5a2f85588abcaa1efa9..1ad8af6f80b4b46861a2b9c66073e2e3196799c4 100644
--- a/packages/playwright-test/src/workerRunner.ts
+++ b/packages/playwright-test/src/workerRunner.ts
@@ -165,7 +165,7 @@ export class WorkerRunner extends EventEmitter {
 
   async runTestGroup(runPayload: RunPayload) {
     this._runFinished = new ManualPromise<void>();
-    const entries = new Map(runPayload.entries.map(e => [e.testId, e]));
+    const entries = new Map(runPayload.entries.map(e => [ e.testId, e ]));
     let fatalUnknownTestIds;
     try {
       await this._loadIfNeeded();
diff --git a/packages/playwright-test/types/component.d.ts b/packages/playwright-test/types/component.d.ts
index 5fc210c814c93d045264050a5364f0b4a12b7016..561d4008328a5f859be5179054d6c2add67eb6ac 100644
--- a/packages/playwright-test/types/component.d.ts
+++ b/packages/playwright-test/types/component.d.ts
@@ -40,6 +40,6 @@ declare global {
   interface Window {
     playwrightMount(component: Component, rootElement: Element, hooksConfig: any): Promise<void>;
     playwrightUnmount(rootElement: Element): Promise<void>;
-    playwrightRerender(rootElement: Element, optionsOrComponent: Omit<MountOptions, 'hooksConfig'> | Component): Promise<void>;
+    playwrightRerender(rootElement: Element, options: Omit<MountOptions, 'hooksConfig'>): Promise<void>;
   }
 }
diff --git a/packages/playwright-test/types/test.d.ts b/packages/playwright-test/types/test.d.ts
index 4687c35e279b933f207ad8cda5679a06815e4e04..5471fed48f8f229cfa5094e0f161c4fc1d812083 100644
--- a/packages/playwright-test/types/test.d.ts
+++ b/packages/playwright-test/types/test.d.ts
@@ -678,12 +678,6 @@ interface TestConfig {
    */
   grepInvert?: RegExp|Array<RegExp>;
 
-  /**
-   * Whether to skip snapshot expectations, such as `expect(value).toMatchSnapshot()` and `await
-   * expect(page).toHaveScreenshot()`.
-   */
-  ignoreSnapshots?: boolean;
-
   /**
    * The maximum number of test failures for the whole test suite run. After reaching this number, testing will stop and exit
    * with an error. Setting to zero (default) disables this behavior.
@@ -3186,7 +3180,7 @@ interface APIResponseAssertions {
   not: APIResponseAssertions;
 
   /**
-   * Ensures the response status code is within `200..299` range.
+   * Ensures the response status code is within [200..299] range.
    *
    * ```js
    * await expect(response).toBeOK();
@@ -3274,8 +3268,6 @@ interface LocatorAssertions {
    * @param options
    */
   toBeEditable(options?: {
-    editable?: boolean;
-
     /**
      * Time to retry the assertion for. Defaults to `timeout` in `TestConfig.expect`.
      */
@@ -3310,8 +3302,6 @@ interface LocatorAssertions {
    * @param options
    */
   toBeEnabled(options?: {
-    enabled?: boolean;
-
     /**
      * Time to retry the assertion for. Defaults to `timeout` in `TestConfig.expect`.
      */
@@ -3336,8 +3326,7 @@ interface LocatorAssertions {
   }): Promise<void>;
 
   /**
-   * Ensures that [Locator] either does not resolve to any DOM node, or resolves to a
-   * [non-visible](https://playwright.dev/docs/api/actionability#visible) one.
+   * Ensures the [Locator] points to a hidden DOM node, which is the opposite of [visible](https://playwright.dev/docs/api/actionability#visible).
    *
    * ```js
    * const locator = page.locator('.my-element');
@@ -3354,8 +3343,7 @@ interface LocatorAssertions {
   }): Promise<void>;
 
   /**
-   * Ensures that [Locator] points to an [attached](https://playwright.dev/docs/api/actionability#visible) and [visible](https://playwright.dev/docs/api/actionability#visible) DOM
-   * node.
+   * Ensures the [Locator] points to a [visible](https://playwright.dev/docs/api/actionability#visible) DOM node.
    *
    * ```js
    * const locator = page.locator('.my-element');
@@ -3369,8 +3357,6 @@ interface LocatorAssertions {
      * Time to retry the assertion for. Defaults to `timeout` in `TestConfig.expect`.
      */
     timeout?: number;
-
-    visible?: boolean;
   }): Promise<void>;
 
   /**
@@ -3437,11 +3423,10 @@ interface LocatorAssertions {
   }): Promise<void>;
 
   /**
-   * Ensures the [Locator] points to an element with given attribute value.
+   * Ensures the [Locator] points to an element with given attribute.
    *
    * ```js
    * const locator = page.locator('input');
-   * // Assert attribute with given value.
    * await expect(locator).toHaveAttribute('type', 'text');
    * ```
    *
@@ -3456,26 +3441,6 @@ interface LocatorAssertions {
     timeout?: number;
   }): Promise<void>;
 
-  /**
-   * Ensures the [Locator] points to an element with given attribute. The method will assert attribute presence.
-   *
-   * ```js
-   * const locator = page.locator('input');
-   * // Assert attribute existance.
-   * await expect(locator).toHaveAttribute('disabled');
-   * await expect(locator).not.toHaveAttribute('open');
-   * ```
-   *
-   * @param name Attribute name.
-   * @param options
-   */
-  toHaveAttribute(name: string, options?: {
-    /**
-     * Time to retry the assertion for. Defaults to `timeout` in `TestConfig.expect`.
-     */
-    timeout?: number;
-  }): Promise<void>;
-
   /**
    * Ensures the [Locator] points to an element with given CSS classes. This needs to be a full match or using a relaxed
    * regular expression.
diff --git a/packages/playwright-test/types/testReporter.d.ts b/packages/playwright-test/types/testReporter.d.ts
index 9581ea18fa90f74d403e1355e394aedd0a55bb07..cc3a731b226f23745625bc6af52f992ce32ae96f 100644
--- a/packages/playwright-test/types/testReporter.d.ts
+++ b/packages/playwright-test/types/testReporter.d.ts
@@ -469,7 +469,6 @@ export interface JSONReportSpec {
   title: string;
   ok: boolean;
   tests: JSONReportTest[];
-  id: string;
   file: string;
   line: number;
   column: number;
@@ -493,7 +492,6 @@ export interface JSONReportTestResult {
   stderr: JSONReportSTDIOEntry[];
   retry: number;
   steps?: JSONReportTestStep[];
-  startTime: Date;
   attachments: {
     name: string;
     path?: string;
diff --git a/packages/playwright-webkit/package.json b/packages/playwright-webkit/package.json
index b7f8983c371658a88010982b54be77706b9d38b5..bb28f24179688c8ff553bb85dc3c1d47bea14291 100644
--- a/packages/playwright-webkit/package.json
+++ b/packages/playwright-webkit/package.json
@@ -1,6 +1,6 @@
 {
   "name": "playwright-webkit",
-  "version": "1.27.0-next",
+  "version": "1.25.2",
   "description": "A high-level API to automate WebKit",
   "repository": "github:Microsoft/playwright",
   "homepage": "https://playwright.dev",
@@ -28,6 +28,6 @@
     "install": "node install.js"
   },
   "dependencies": {
-    "playwright-core": "1.27.0-next"
+    "playwright-core": "1.25.2"
   }
 }
diff --git a/packages/playwright/package.json b/packages/playwright/package.json
index 8520a65c9d6b417f39f2378e30df414e2236dfa0..746c41e0fd51ed7fe13d0bf88e31943ecd301ec9 100644
--- a/packages/playwright/package.json
+++ b/packages/playwright/package.json
@@ -1,6 +1,6 @@
 {
   "name": "playwright",
-  "version": "1.27.0-next",
+  "version": "1.25.2",
   "description": "A high-level API to automate web browsers",
   "repository": "github:Microsoft/playwright",
   "homepage": "https://playwright.dev",
@@ -28,6 +28,6 @@
     "install": "node install.js"
   },
   "dependencies": {
-    "playwright-core": "1.27.0-next"
+    "playwright-core": "1.25.2"
   }
 }
diff --git a/packages/recorder/src/recorder.tsx b/packages/recorder/src/recorder.tsx
index 0d23de26394563e0f0f3d74950693fe9a0babb71..ff20979e951123660ee0e71d2413e1e984f0f647 100644
--- a/packages/recorder/src/recorder.tsx
+++ b/packages/recorder/src/recorder.tsx
@@ -53,27 +53,22 @@ export const Recorder: React.FC<RecorderProps> = ({
     setFocusSelectorInput(!!focus);
   };
 
-  const [fileId, setFileId] = React.useState<string | undefined>();
+  const [f, setFile] = React.useState<string | undefined>();
+  const file = f || sources[0]?.file;
 
-  React.useEffect(() => {
-    if (!fileId && sources.length > 0)
-      setFileId(sources[0].id);
-  }, [fileId, sources]);
-
-  const source: Source = sources.find(s => s.id === fileId) || {
-    id: 'default',
+  const source = sources.find(s => s.file === file) || {
     isRecorded: false,
     text: '',
     language: 'javascript',
-    label: '',
+    file: '',
     highlight: []
   };
   window.playwrightSetFileIfNeeded = (value: string) => {
-    const newSource = sources.find(s => s.id === value);
+    const newSource = sources.find(s => s.file === value);
     // Do not forcefully switch between two recorded sources, because
     // user did explicitly choose one.
     if (newSource && !newSource.isRecorded || !source.isRecorded)
-      setFileId(value);
+      setFile(value);
   };
 
   const messagesEndRef = React.createRef<HTMLDivElement>();
@@ -130,9 +125,15 @@ export const Recorder: React.FC<RecorderProps> = ({
       }}></ToolbarButton>
       <div style={{ flex: 'auto' }}></div>
       <div>Target:</div>
-      <select className='recorder-chooser' hidden={!sources.length} value={fileId} onChange={event => {
-        setFileId(event.target.selectedOptions[0].value);
-      }}>{renderSourceOptions(sources)}</select>
+      <select className='recorder-chooser' hidden={!sources.length} value={file} onChange={event => {
+        setFile(event.target.selectedOptions[0].value);
+      }}>{
+          sources.map(s => {
+            const title = s.file.replace(/.*[/\\]([^/\\]+)/, '$1');
+            return <option key={s.file} value={s.file}>{title}</option>;
+          })
+        }
+      </select>
       <ToolbarButton icon='clear-all' title='Clear' disabled={!source || !source.text} onClick={() => {
         window.dispatch({ event: 'clear' });
       }}></ToolbarButton>
@@ -158,25 +159,6 @@ export const Recorder: React.FC<RecorderProps> = ({
   </div>;
 };
 
-function renderSourceOptions(sources: Source[]): React.ReactNode {
-  const transformTitle = (title: string): string => title.replace(/.*[/\\]([^/\\]+)/, '$1');
-  const renderOption = (source: Source): React.ReactNode => (
-    <option key={source.id} value={source.id}>{transformTitle(source.label)}</option>
-  );
-
-  const hasGroup = sources.some(s => s.group);
-  if (hasGroup) {
-    const groups = new Set(sources.map(s => s.group));
-    return Array.from(groups).map(group => (
-      <optgroup label={group} key={group}>
-        {sources.filter(s => s.group === group).map(source => renderOption(source))}
-      </optgroup>
-    ));
-  }
-
-  return sources.map(source => renderOption(source));
-}
-
 function copy(text: string) {
   const textArea = document.createElement('textarea');
   textArea.style.position = 'absolute';
diff --git a/packages/trace-viewer/src/DEPS.list b/packages/trace-viewer/src/DEPS.list
index 7f22b2f03d2d9e2fe4a55749d633048db5446cc7..2ebecad755af621622eb6b5306b23fc342492ef9 100644
--- a/packages/trace-viewer/src/DEPS.list
+++ b/packages/trace-viewer/src/DEPS.list
@@ -1,4 +1,3 @@
 [*]
-@playwright-core/utils/multimap.ts
 @web/**
 ui/
diff --git a/packages/trace-viewer/src/snapshotRenderer.ts b/packages/trace-viewer/src/snapshotRenderer.ts
index 280744008b74056f063d54de93c89b1a65512340..f24cb563269d01d36a32650d321dca9bf2c64a91 100644
--- a/packages/trace-viewer/src/snapshotRenderer.ts
+++ b/packages/trace-viewer/src/snapshotRenderer.ts
@@ -286,7 +286,7 @@ function snapshotScript() {
  * Best-effort Electron support: rewrite custom protocol in DOM.
  * vscode-file://vscode-app/ -> https://pw-vscode-file--vscode-app/
  */
-const schemas = ['about:', 'blob:', 'data:', 'file:', 'ftp:', 'http:', 'https:', 'mailto:', 'sftp:', 'ws:', 'wss:'];
+const schemas = ['about:', 'blob:', 'data:', 'file:', 'ftp:', 'http:', 'https:', 'mailto:', 'sftp:', 'ws:', 'wss:' ];
 const kLegacyBlobPrefix = 'http://playwright.bloburl/#';
 
 export function rewriteURLForCustomProtocol(href: string): string {
diff --git a/packages/trace-viewer/src/sw.ts b/packages/trace-viewer/src/sw.ts
index 2229ea5fb66c7f2db849637da78eadc35c2ae9f1..b030af6b2b6357ab85602f573b246cc98d95a1ad 100644
--- a/packages/trace-viewer/src/sw.ts
+++ b/packages/trace-viewer/src/sw.ts
@@ -14,7 +14,6 @@
  * limitations under the License.
  */
 
-import { MultiMap } from '@playwright-core/utils/multimap';
 import { SnapshotServer } from './snapshotServer';
 import { TraceModel } from './traceModel';
 
@@ -33,11 +32,11 @@ const scopePath = new URL(self.registration.scope).pathname;
 
 const loadedTraces = new Map<string, { traceModel: TraceModel, snapshotServer: SnapshotServer }>();
 
-const clientIdToTraceUrls = new MultiMap<string, string>();
+const clientIdToTraceUrl = new Map<string, string>();
 
 async function loadTrace(trace: string, clientId: string, progress: (done: number, total: number) => void): Promise<TraceModel> {
   const entry = loadedTraces.get(trace);
-  clientIdToTraceUrls.set(clientId, trace);
+  clientIdToTraceUrl.set(clientId, trace);
   if (entry)
     return entry.traceModel;
   const traceModel = new TraceModel();
@@ -124,12 +123,12 @@ async function gc() {
   const clients = await self.clients.matchAll();
   const usedTraces = new Set<string>();
 
-  for (const [clientId, traceUrls] of clientIdToTraceUrls) {
+  for (const [clientId, traceUrl] of clientIdToTraceUrl) {
     // @ts-ignore
     if (!clients.find(c => c.id === clientId))
-      clientIdToTraceUrls.deleteAll(clientId);
+      clientIdToTraceUrl.delete(clientId);
     else
-      traceUrls.forEach(url => usedTraces.add(url));
+      usedTraces.add(traceUrl);
   }
 
   for (const traceUrl of loadedTraces.keys()) {
diff --git a/packages/trace-viewer/src/ui/consoleTab.css b/packages/trace-viewer/src/ui/consoleTab.css
index 8546ad98b0641b64bf6daff378e43e7ff400910c..648ddfed0b2e0e1c949a57c683d29df15cd2d054 100644
--- a/packages/trace-viewer/src/ui/consoleTab.css
+++ b/packages/trace-viewer/src/ui/consoleTab.css
@@ -59,7 +59,6 @@
 .console-line-message {
   white-space: initial;
   word-break: break-word;
-  white-space: pre-wrap;
   position: relative;
   top: -2px;
 }
diff --git a/packages/web/src/third_party/vscode/codicon.css b/packages/web/src/third_party/vscode/codicon.css
index 6c90f21048877df4ac9ab9db696318807f99b09d..980d3053ae0102f2f9328762ffb2d6a589ad694a 100644
--- a/packages/web/src/third_party/vscode/codicon.css
+++ b/packages/web/src/third_party/vscode/codicon.css
@@ -23,7 +23,7 @@
 	user-select: none;
 }
 
-.codicon-blank:before { content: '\2003'; }
+.codicon-blank:before { content: '\81'; }
 .codicon-add:before { content: '\ea60'; }
 .codicon-plus:before { content: '\ea60'; }
 .codicon-gist-new:before { content: '\ea60'; }
diff --git a/tests/android/androidTest.ts b/tests/android/androidTest.ts
index 20a46087f47da682f4c4678d92d9441f816ce4e3..67f0b99e2445cb84a55b5d7ada00747ff794679b 100644
--- a/tests/android/androidTest.ts
+++ b/tests/android/androidTest.ts
@@ -50,7 +50,6 @@ export const androidTest = baseTest.extend<PageTestFixtures, AndroidWorkerFixtur
 
   isAndroid: [true, { scope: 'worker' }],
   isElectron: [false, { scope: 'worker' }],
-  isWebView2: [false, { scope: 'worker' }],
 
   androidContext: [async ({ androidDevice }, run) => {
     const context = await androidDevice.launchBrowser();
diff --git a/tests/android/playwright.config.ts b/tests/android/playwright.config.ts
index 5e6305738966a168533ca22bcdbaa42042f46443..15029ad768bf67bc73a2d1802630ecfd8fb2dd23 100644
--- a/tests/android/playwright.config.ts
+++ b/tests/android/playwright.config.ts
@@ -35,8 +35,8 @@ const config: Config<ServerWorkerOptions & PlaywrightWorkerOptions & PlaywrightT
   preserveOutput: process.env.CI ? 'failures-only' : 'always',
   retries: process.env.CI ? 1 : 0,
   reporter: process.env.CI ? [
-    ['dot'],
-    ['json', { outputFile: path.join(outputDir, 'report.json') }],
+    [ 'dot' ],
+    [ 'json', { outputFile: path.join(outputDir, 'report.json') } ],
   ] : 'line',
   projects: [],
 };
diff --git a/tests/assets/consolelog.html b/tests/assets/consolelog.html
index 9ef271812d469da9724f52a91bb4cf4b3fa1e0b7..7fa1b211a4df07114b401542d00bf8b75073c3a8 100644
--- a/tests/assets/consolelog.html
+++ b/tests/assets/consolelog.html
@@ -5,7 +5,7 @@
   </head>
   <body>
     <script>
-      console.log('here:' + location.href)
+      console.log('yellow')
     </script>
   </body>
 </html>
diff --git a/tests/assets/preload.html b/tests/assets/preload.html
deleted file mode 100644
index dc10ff6d69627dd94e11e4ed2c75b00247d9fe5d..0000000000000000000000000000000000000000
--- a/tests/assets/preload.html
+++ /dev/null
@@ -1,5 +0,0 @@
-<script>
-let preloadedStyles = false;
-</script>
-<link rel="preload" href="./one-style.css" as="style" onload="window.preloadedStyles=true;this.onload=null;this.rel='stylesheet'" />
-<div>hello, world!</div>
diff --git a/tests/components/ct-react-vite/playwright/index.html b/tests/components/ct-react-vite/playwright/index.html
index 25e6da163c81c0b212fab637b026d77f8a7416b3..2cd3885b70205a364a3c15c80de459776dca9e07 100644
--- a/tests/components/ct-react-vite/playwright/index.html
+++ b/tests/components/ct-react-vite/playwright/index.html
@@ -2,7 +2,7 @@
 <html lang="en">
   <head>
     <meta charset="UTF-8" />
-    <link rel="icon" type="image/svg+xml" href="/src/assets/favicon.svg" />
+    <link rel="icon" type="image/svg+xml" href="/src/favicon.svg" />
     <meta name="viewport" content="width=device-width, initial-scale=1.0" />
     <title>Vite App</title>
   </head>
diff --git a/tests/components/ct-react-vite/playwright/index.ts b/tests/components/ct-react-vite/playwright/index.ts
index 267e6fd64fb603a844ae8c274ebb73ba49beb642..3d3b46bdc0efcc2a035f827c898e5d7212bf8f5c 100644
--- a/tests/components/ct-react-vite/playwright/index.ts
+++ b/tests/components/ct-react-vite/playwright/index.ts
@@ -1,5 +1,7 @@
 //@ts-check
-import '../src/assets/index.css';
+
+import '../src/index.css';
+
 import { beforeMount, afterMount } from '@playwright/experimental-ct-react/hooks';
 
 beforeMount(async ({ hooksConfig }) => {
diff --git a/tests/components/ct-react-vite/src/App.spec.tsx b/tests/components/ct-react-vite/src/App.spec.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..4de184d7c05df75ef07a8c592acd79ff42363fb7
--- /dev/null
+++ b/tests/components/ct-react-vite/src/App.spec.tsx
@@ -0,0 +1,27 @@
+import { test, expect } from '@playwright/experimental-ct-react';
+import App from './App';
+
+test.use({ viewport: { width: 500, height: 500 } });
+
+test('should work', async ({ mount }) => {
+  const component = await mount(<App></App>);
+  await expect(component).toContainText('Hello Vite + React!');
+});
+
+test('should configure app', async ({ page, mount }) => {
+  const messages: string[] = [];
+  page.on('console', m => messages.push(m.text()));
+  await mount(<App></App>, {
+    hooksConfig: {
+      route: 'A'
+    }
+  });
+  expect(messages).toEqual(['Before mount: {\"route\":\"A\"}', 'After mount']);
+});
+
+test('should unmount', async ({ page, mount }) => {
+  const component = await mount(<App></App>);
+  await expect(page.locator('#root')).toContainText('Hello Vite + React!');
+  await component.unmount();
+  await expect(page.locator('#root')).not.toContainText('Hello Vite + React!');
+});
diff --git a/tests/components/ct-react-vite/src/App.tsx b/tests/components/ct-react-vite/src/App.tsx
index 1a5c71390f6bc90ae9036520ad8a21d29aac29b3..78b8518c54c55c150383b85148acdbe2ba897a39 100644
--- a/tests/components/ct-react-vite/src/App.tsx
+++ b/tests/components/ct-react-vite/src/App.tsx
@@ -1,5 +1,6 @@
+import React from 'react'
 import { useState } from 'react'
-import logo from './components/logo.svg'
+import logo from './logo.svg'
 import './App.css'
 
 function App() {
diff --git a/tests/components/ct-react-vite/src/assets/favicon.svg b/tests/components/ct-react-vite/src/assets/favicon.svg
deleted file mode 100644
index de4aeddc12bdfe6c668dd57c6b457a659c058914..0000000000000000000000000000000000000000
--- a/tests/components/ct-react-vite/src/assets/favicon.svg
+++ /dev/null
@@ -1,15 +0,0 @@
-<svg width="410" height="404" viewBox="0 0 410 404" fill="none" xmlns="http://www.w3.org/2000/svg">
-<path d="M399.641 59.5246L215.643 388.545C211.844 395.338 202.084 395.378 198.228 388.618L10.5817 59.5563C6.38087 52.1896 12.6802 43.2665 21.0281 44.7586L205.223 77.6824C206.398 77.8924 207.601 77.8904 208.776 77.6763L389.119 44.8058C397.439 43.2894 403.768 52.1434 399.641 59.5246Z" fill="url(#paint0_linear)"/>
-<path d="M292.965 1.5744L156.801 28.2552C154.563 28.6937 152.906 30.5903 152.771 32.8664L144.395 174.33C144.198 177.662 147.258 180.248 150.51 179.498L188.42 170.749C191.967 169.931 195.172 173.055 194.443 176.622L183.18 231.775C182.422 235.487 185.907 238.661 189.532 237.56L212.947 230.446C216.577 229.344 220.065 232.527 219.297 236.242L201.398 322.875C200.278 328.294 207.486 331.249 210.492 326.603L212.5 323.5L323.454 102.072C325.312 98.3645 322.108 94.137 318.036 94.9228L279.014 102.454C275.347 103.161 272.227 99.746 273.262 96.1583L298.731 7.86689C299.767 4.27314 296.636 0.855181 292.965 1.5744Z" fill="url(#paint1_linear)"/>
-<defs>
-<linearGradient id="paint0_linear" x1="6.00017" y1="32.9999" x2="235" y2="344" gradientUnits="userSpaceOnUse">
-<stop stop-color="#41D1FF"/>
-<stop offset="1" stop-color="#BD34FE"/>
-</linearGradient>
-<linearGradient id="paint1_linear" x1="194.651" y1="8.81818" x2="236.076" y2="292.989" gradientUnits="userSpaceOnUse">
-<stop stop-color="#FFEA83"/>
-<stop offset="0.0833333" stop-color="#FFDD35"/>
-<stop offset="1" stop-color="#FFA800"/>
-</linearGradient>
-</defs>
-</svg>
diff --git a/tests/components/ct-react-vite/src/assets/index.css b/tests/components/ct-react-vite/src/assets/index.css
deleted file mode 100644
index ec2585e8c0bb8188184ed1e0703c4c8f2a8419b0..0000000000000000000000000000000000000000
--- a/tests/components/ct-react-vite/src/assets/index.css
+++ /dev/null
@@ -1,13 +0,0 @@
-body {
-  margin: 0;
-  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
-    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
-    sans-serif;
-  -webkit-font-smoothing: antialiased;
-  -moz-osx-font-smoothing: grayscale;
-}
-
-code {
-  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
-    monospace;
-}
diff --git a/tests/components/ct-react-vite/src/assets/logo.svg b/tests/components/ct-react-vite/src/assets/logo.svg
deleted file mode 100644
index 6b60c1042f58d9fabb75485aa3624dddcf633b5c..0000000000000000000000000000000000000000
--- a/tests/components/ct-react-vite/src/assets/logo.svg
+++ /dev/null
@@ -1,7 +0,0 @@
-<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3">
-    <g fill="#61DAFB">
-        <path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/>
-        <circle cx="420.9" cy="296.5" r="45.7"/>
-        <path d="M520.5 78.1z"/>
-    </g>
-</svg>
diff --git a/tests/components/ct-react-vite/src/components/Button.tsx b/tests/components/ct-react-vite/src/components/Button.tsx
deleted file mode 100644
index 78b0a7791f55b89ae27a8625a1498e30ecc268d7..0000000000000000000000000000000000000000
--- a/tests/components/ct-react-vite/src/components/Button.tsx
+++ /dev/null
@@ -1,7 +0,0 @@
-type ButtonProps = {
-  title: string;
-  onClick?(props: string): void;
-}
-export default function Button(props: ButtonProps) {
-  return <button onClick={() => props.onClick?.('hello')}>{props.title}</button>
-}
diff --git a/tests/components/ct-react-vite/src/components/Counter.tsx b/tests/components/ct-react-vite/src/components/Counter.tsx
deleted file mode 100644
index 2548202aec41a8958e15af27556df5f5c925e55a..0000000000000000000000000000000000000000
--- a/tests/components/ct-react-vite/src/components/Counter.tsx
+++ /dev/null
@@ -1,19 +0,0 @@
-import { useRef } from "react"
-
- type CounterProps = {
-   count?: number;
-   onClick?(props: string): void;
-   children?: any;
- }
-
- let _remountCount = 1;
-
- export default function Counter(props: CounterProps) {
-   const remountCount = useRef(_remountCount++);
-   return <div onClick={() => props.onClick?.('hello')}>
-     <div id="props">{ props.count }</div>
-     <div id="remount-count">{ remountCount.current }</div>
-     { props.children }
-   </div>
- }
- 
\ No newline at end of file
diff --git a/tests/components/ct-react-vite/src/components/DefaultChildren.tsx b/tests/components/ct-react-vite/src/components/DefaultChildren.tsx
deleted file mode 100644
index 691b6a080615cf761c2d079b68dc7115c6a6f2d2..0000000000000000000000000000000000000000
--- a/tests/components/ct-react-vite/src/components/DefaultChildren.tsx
+++ /dev/null
@@ -1,15 +0,0 @@
-type DefaultChildrenProps = {
-  children?: any;
-}
-
-export default function DefaultChildren(props: DefaultChildrenProps) {
-  return <div>
-    <h1>Welcome!</h1>
-    <main>
-      {props.children}
-    </main>
-    <footer>
-      Thanks for visiting.
-    </footer>
-  </div>
-}
diff --git a/tests/components/ct-react-vite/src/components/MultiRoot.tsx b/tests/components/ct-react-vite/src/components/MultiRoot.tsx
deleted file mode 100644
index f29e397c0fe5447efa3c9a0440155220c3e82e74..0000000000000000000000000000000000000000
--- a/tests/components/ct-react-vite/src/components/MultiRoot.tsx
+++ /dev/null
@@ -1,6 +0,0 @@
-export default function MultiRoot() {
-  return <>
-    <div>root 1</div>
-    <div>root 2</div>
-  </>
-}
diff --git a/tests/components/ct-react-vite/src/components/MultipleChildren.tsx b/tests/components/ct-react-vite/src/components/MultipleChildren.tsx
deleted file mode 100644
index 63bd0104c62f55a28bc93ce40c289c318caf75c6..0000000000000000000000000000000000000000
--- a/tests/components/ct-react-vite/src/components/MultipleChildren.tsx
+++ /dev/null
@@ -1,18 +0,0 @@
-
-type MultipleChildrenProps = {
-  children?: [any, any, any];
-}
-
-export default function MultipleChildren(props: MultipleChildrenProps) {
-  return <div>
-  <header>
-    {props.children?.at(0)}
-  </header>
-  <main>
-    {props.children?.at(1)}
-  </main>
-  <footer>
-    {props.children?.at(2)}
-  </footer>
-</div>
-}
diff --git a/tests/components/ct-react-vite/src/favicon.svg b/tests/components/ct-react-vite/src/favicon.svg
new file mode 100644
index 0000000000000000000000000000000000000000..de4aeddc12bdfe6c668dd57c6b457a659c058914
--- /dev/null
+++ b/tests/components/ct-react-vite/src/favicon.svg
@@ -0,0 +1,15 @@
+<svg width="410" height="404" viewBox="0 0 410 404" fill="none" xmlns="http://www.w3.org/2000/svg">
+<path d="M399.641 59.5246L215.643 388.545C211.844 395.338 202.084 395.378 198.228 388.618L10.5817 59.5563C6.38087 52.1896 12.6802 43.2665 21.0281 44.7586L205.223 77.6824C206.398 77.8924 207.601 77.8904 208.776 77.6763L389.119 44.8058C397.439 43.2894 403.768 52.1434 399.641 59.5246Z" fill="url(#paint0_linear)"/>
+<path d="M292.965 1.5744L156.801 28.2552C154.563 28.6937 152.906 30.5903 152.771 32.8664L144.395 174.33C144.198 177.662 147.258 180.248 150.51 179.498L188.42 170.749C191.967 169.931 195.172 173.055 194.443 176.622L183.18 231.775C182.422 235.487 185.907 238.661 189.532 237.56L212.947 230.446C216.577 229.344 220.065 232.527 219.297 236.242L201.398 322.875C200.278 328.294 207.486 331.249 210.492 326.603L212.5 323.5L323.454 102.072C325.312 98.3645 322.108 94.137 318.036 94.9228L279.014 102.454C275.347 103.161 272.227 99.746 273.262 96.1583L298.731 7.86689C299.767 4.27314 296.636 0.855181 292.965 1.5744Z" fill="url(#paint1_linear)"/>
+<defs>
+<linearGradient id="paint0_linear" x1="6.00017" y1="32.9999" x2="235" y2="344" gradientUnits="userSpaceOnUse">
+<stop stop-color="#41D1FF"/>
+<stop offset="1" stop-color="#BD34FE"/>
+</linearGradient>
+<linearGradient id="paint1_linear" x1="194.651" y1="8.81818" x2="236.076" y2="292.989" gradientUnits="userSpaceOnUse">
+<stop stop-color="#FFEA83"/>
+<stop offset="0.0833333" stop-color="#FFDD35"/>
+<stop offset="1" stop-color="#FFA800"/>
+</linearGradient>
+</defs>
+</svg>
diff --git a/tests/components/ct-react-vite/src/index.css b/tests/components/ct-react-vite/src/index.css
new file mode 100644
index 0000000000000000000000000000000000000000..ec2585e8c0bb8188184ed1e0703c4c8f2a8419b0
--- /dev/null
+++ b/tests/components/ct-react-vite/src/index.css
@@ -0,0 +1,13 @@
+body {
+  margin: 0;
+  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
+    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
+    sans-serif;
+  -webkit-font-smoothing: antialiased;
+  -moz-osx-font-smoothing: grayscale;
+}
+
+code {
+  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
+    monospace;
+}
diff --git a/tests/components/ct-react-vite/src/logo.svg b/tests/components/ct-react-vite/src/logo.svg
new file mode 100644
index 0000000000000000000000000000000000000000..6b60c1042f58d9fabb75485aa3624dddcf633b5c
--- /dev/null
+++ b/tests/components/ct-react-vite/src/logo.svg
@@ -0,0 +1,7 @@
+<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3">
+    <g fill="#61DAFB">
+        <path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/>
+        <circle cx="420.9" cy="296.5" r="45.7"/>
+        <path d="M520.5 78.1z"/>
+    </g>
+</svg>
diff --git a/tests/components/ct-react-vite/src/main.tsx b/tests/components/ct-react-vite/src/main.tsx
index 919f50052bb2472be00ee251baa2b456ca3f5920..606a3cf44ec02bf1c481354445f110f547f5cec2 100644
--- a/tests/components/ct-react-vite/src/main.tsx
+++ b/tests/components/ct-react-vite/src/main.tsx
@@ -1,6 +1,6 @@
 import React from 'react'
 import ReactDOM from 'react-dom'
-import './assets/index.css'
+import './index.css'
 import App from './App'
 
 ReactDOM.render(
diff --git a/tests/components/ct-react-vite/src/tests.spec.tsx b/tests/components/ct-react-vite/src/tests.spec.tsx
deleted file mode 100644
index 99b46d578088b5683c27a57839c3dea19923dc74..0000000000000000000000000000000000000000
--- a/tests/components/ct-react-vite/src/tests.spec.tsx
+++ /dev/null
@@ -1,120 +0,0 @@
-import { test, expect } from '@playwright/experimental-ct-react';
-import Button from './components/Button';
-import DefaultChildren from './components/DefaultChildren';
-import MultipleChildren from './components/MultipleChildren';
-import MultiRoot from './components/MultiRoot';
-import Counter from './components/Counter';
-
-test.use({ viewport: { width: 500, height: 500 } });
-
-test('render props', async ({ mount }) => {
-  const component = await mount(<Button title="Submit" />);
-  await expect(component).toContainText('Submit');
-});
-
-test('renderer updates props without remounting', async ({ mount }) => {
-  const component = await mount(<Counter count={9001} />)
-  await expect(component.locator('#props')).toContainText('9001')
-
-  await component.rerender(<Counter count={1337} />)
-  await expect(component).not.toContainText('9001')
-  await expect(component.locator('#props')).toContainText('1337')
-
-  await expect(component.locator('#remount-count')).toContainText('1')
-})
-
-test('renderer updates callbacks without remounting', async ({ mount }) => {
-  const component = await mount(<Counter />)
-
-  const messages: string[] = []
-  await component.rerender(<Counter onClick={message => { 
-    messages.push(message) 
-  }} />)
-  await component.click();
-  expect(messages).toEqual(['hello'])
-
-  await expect(component.locator('#remount-count')).toContainText('1')
-})
-
-test('renderer updates slots without remounting', async ({ mount }) => {
-  const component = await mount(<Counter>Default Slot</Counter>)
-  await expect(component).toContainText('Default Slot')
-
-  await component.rerender(<Counter>Test Slot</Counter>)
-  await expect(component).not.toContainText('Default Slot')
-  await expect(component).toContainText('Test Slot')
-
-  await expect(component.locator('#remount-count')).toContainText('1')
-})
-
-test('execute callback when the button is clicked', async ({ mount }) => {
-  const messages: string[] = []
-  const component = await mount(<Button title="Submit" onClick={data => {
-    messages.push(data)
-  }}></Button>)
-  await component.click()
-  expect(messages).toEqual(['hello'])
-})
-
-test('render a default child', async ({ mount }) => {
-  const component = await mount(<DefaultChildren>
-    Main Content
-  </DefaultChildren>)
-  await expect(component).toContainText('Main Content')
-})
-
-test('render multiple children', async ({ mount }) => {
-  const component = await mount(<DefaultChildren>
-    <div id="one">One</div>
-    <div id="two">Two</div>
-  </DefaultChildren>)
-  await expect(component.locator('#one')).toContainText('One')
-  await expect(component.locator('#two')).toContainText('Two')
-})
-
-test('render named children', async ({ mount }) => {
-  const component = await mount(<MultipleChildren>
-    <div>Header</div>
-    <div>Main Content</div>
-    <div>Footer</div>
-  </MultipleChildren>);
-  await expect(component).toContainText('Header')
-  await expect(component).toContainText('Main Content')
-  await expect(component).toContainText('Footer')
-})
-
-test('execute callback when a child node is clicked', async ({ mount }) => {
-  let clickFired = false;
-  const component = await mount(<DefaultChildren>
-    <span onClick={() => clickFired = true}>Main Content</span>
-  </DefaultChildren>);
-  await component.locator('text=Main Content').click();
-  expect(clickFired).toBeTruthy();
-})
-
-test('run hooks', async ({ page, mount }) => {
-  const messages: string[] = [];
-  page.on('console', m => messages.push(m.text()));
-  await mount(<Button title="Submit" />, {
-    hooksConfig: {
-      route: 'A'
-    }
-  });
-  expect(messages).toEqual(['Before mount: {\"route\":\"A\"}', 'After mount']);
-});
-
-test('unmount', async ({ page, mount }) => {
-  const component = await mount(<Button title="Submit" />)
-  await expect(page.locator('#root')).toContainText('Submit')
-  await component.unmount();
-  await expect(page.locator('#root')).not.toContainText('Submit');
-});
-
-test('unmount a multi root component', async ({ mount, page }) => {
-  const component = await mount(<MultiRoot />)
-  await expect(page.locator('#root')).toContainText('root 1')
-  await expect(page.locator('#root')).toContainText('root 2')
-  await component.unmount()
-  await expect(page.locator('#root')).not.toContainText('root 1')
-  await expect(page.locator('#root')).not.toContainText('root 2')
-})
diff --git a/tests/components/ct-react/package.json b/tests/components/ct-react/package.json
index 3d6fb76e13f56b3ef445286a8165d5f70c92bec6..32f6a8b5f8d65205f7237e6b0b4ba1397f253d97 100644
--- a/tests/components/ct-react/package.json
+++ b/tests/components/ct-react/package.json
@@ -3,6 +3,10 @@
   "version": "0.1.0",
   "private": true,
   "dependencies": {
+    "@testing-library/jest-dom": "^5.16.2",
+    "@testing-library/react": "^12.1.3",
+    "@testing-library/user-event": "^13.5.0",
+    "@types/jest": "^27.4.1",
     "@types/node": "^16.11.26",
     "@types/react": "^17.0.39",
     "@types/react-dom": "^17.0.13",
@@ -18,6 +22,7 @@
   "scripts": {
     "start": "react-scripts start",
     "build": "react-scripts build",
+    "test": "react-scripts test",
     "eject": "react-scripts eject"
   },
   "eslintConfig": {
diff --git a/tests/components/ct-react/playwright/index.html b/tests/components/ct-react/playwright/index.html
index 4f2691ac846091fd0d701202b42c299de4e7d689..7a654f3a7948476e198067e4cf5e1ac21d66fe44 100644
--- a/tests/components/ct-react/playwright/index.html
+++ b/tests/components/ct-react/playwright/index.html
@@ -1,10 +1,9 @@
 <!DOCTYPE html>
-<html lang="en">
+<html lang="">
   <head>
-    <meta charset="UTF-8" />
-    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
-    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
-    <title>React App</title>
+    <meta charset="utf-8">
+    <meta http-equiv="X-UA-Compatible" content="IE=edge">
+    <meta name="viewport" content="width=device-width,initial-scale=1.0">
   </head>
   <body>
     <div id="root"></div>
diff --git a/tests/components/ct-react/playwright/index.js b/tests/components/ct-react/playwright/index.js
index cbed78450e1357c9cca01bf446311e6f8783da7d..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 100644
--- a/tests/components/ct-react/playwright/index.js
+++ b/tests/components/ct-react/playwright/index.js
@@ -1,10 +0,0 @@
-import '../src/assets/index.css';
-import { beforeMount, afterMount } from '@playwright/experimental-ct-react/hooks';
-
-beforeMount(async ({ hooksConfig }) => {
-  console.log(`Before mount: ${JSON.stringify(hooksConfig)}`);
-});
-
-afterMount(async ({}) => {
-  console.log(`After mount`);
-});
diff --git a/tests/components/ct-react/src/App.spec.tsx b/tests/components/ct-react/src/App.spec.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..9d7c57d8289212be45bbc61b2caec00a8d9c9ad6
--- /dev/null
+++ b/tests/components/ct-react/src/App.spec.tsx
@@ -0,0 +1,9 @@
+import { test, expect } from '@playwright/experimental-ct-react';
+import App from './App';
+
+test.use({ viewport: { width: 500, height: 500 } });
+
+test('should work', async ({ mount }) => {
+  const component = await mount(<App></App>);
+  await expect(component).toContainText('Learn React');
+});
diff --git a/tests/components/ct-react/src/App.tsx b/tests/components/ct-react/src/App.tsx
index fa51be8aaa70aa79f8dcd184ef25254d171429c0..a53698aab3c66049c61980112dd0109dd2cd0845 100644
--- a/tests/components/ct-react/src/App.tsx
+++ b/tests/components/ct-react/src/App.tsx
@@ -1,4 +1,5 @@
-import logo from './assets/logo.svg';
+import React from 'react';
+import logo from './logo.svg';
 import './App.css';
 
 function App() {
diff --git a/tests/components/ct-react/src/DelayedData.spec.tsx b/tests/components/ct-react/src/DelayedData.spec.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..e42c57f9c0fa02d997b3064693b1498e504ff797
--- /dev/null
+++ b/tests/components/ct-react/src/DelayedData.spec.tsx
@@ -0,0 +1,7 @@
+import { test, expect } from '@playwright/experimental-ct-react'
+import { DelayedData } from './DelayedData';
+
+test('toHaveText works on delayed data', async ({ mount }) => {
+  const component = await mount(<DelayedData data='complete' />);
+  await expect(component).toHaveText('complete');
+});
diff --git a/tests/components/ct-react/src/DelayedData.tsx b/tests/components/ct-react/src/DelayedData.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..5eb7cb21f58752a5a6de9a735b4184c0a9433181
--- /dev/null
+++ b/tests/components/ct-react/src/DelayedData.tsx
@@ -0,0 +1,14 @@
+import React, { useEffect, useState } from 'react';
+
+export const DelayedData: React.FC<{ data: string }> = ({ data }) => {
+  const [status, setStatus] = useState('loading');
+
+  useEffect(() => {
+    const timeout = setTimeout(() => setStatus(data), 500);
+    return () => {
+      clearTimeout(timeout);
+    }
+  }, [data])
+
+  return <p>{status}</p>
+};
diff --git a/tests/components/ct-react/src/Events.spec.tsx b/tests/components/ct-react/src/Events.spec.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..ec7a4e9b57e1f2f49a61f748a4d64c132d2fbdca
--- /dev/null
+++ b/tests/components/ct-react/src/Events.spec.tsx
@@ -0,0 +1,14 @@
+import { test, expect } from '@playwright/experimental-ct-react';
+
+test('should marshall events', async ({ mount }) => {
+  let event: any;
+  const component = await mount(<button onClick={e => event = e }>Submit</button>);
+  await component.click();
+  expect(event).toEqual(expect.objectContaining({
+    type: 'click',
+    pageX: expect.any(Number),
+    pageY: expect.any(Number),
+    ctrlKey: false,
+    isTrusted: true,
+  }));
+});
diff --git a/tests/components/ct-react/src/Fetch.spec.tsx b/tests/components/ct-react/src/Fetch.spec.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..907051a0184f988bdb8e99a20d17f654dc9a8be4
--- /dev/null
+++ b/tests/components/ct-react/src/Fetch.spec.tsx
@@ -0,0 +1,30 @@
+import { test as _test, expect } from '@playwright/experimental-ct-react'
+import { Fetch } from './Fetch';
+import { serverFixtures } from '../../../../tests/config/serverFixtures';
+
+const test = _test.extend(serverFixtures);
+
+test('components routing should go through context', async ({ mount, context, server }) => {
+  server.setRoute('/hello', (req, res) => {
+    res.write('served via server');
+    res.end();
+  });
+
+  let markRouted: (url: string) => void;
+  const routedViaContext = new Promise(res => markRouted = res);
+  await context.route('**/hello', async (route, request) => {
+    markRouted(`${request.method()} ${request.url()}`);
+    await route.fulfill({
+      body: 'intercepted',
+    });
+  });
+
+  const whoServedTheRequest = Promise.race([
+    server.waitForRequest('/hello').then((req) => `served via server: ${req.method} ${req.url}`),
+    routedViaContext.then(req => `served via context: ${req}`),
+  ]);
+
+  const component = await mount(<Fetch url={server.PREFIX + '/hello'} />);
+  await expect.soft(whoServedTheRequest).resolves.toMatch(/served via context: GET.*\/hello.*/i);
+  await expect.soft(component).toHaveText('intercepted');
+});
diff --git a/tests/components/ct-react/src/Fetch.tsx b/tests/components/ct-react/src/Fetch.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..06cf76f20f8481300c36103c2297825b0ed10c7e
--- /dev/null
+++ b/tests/components/ct-react/src/Fetch.tsx
@@ -0,0 +1,9 @@
+import React, { useEffect, useState } from 'react';
+
+export const Fetch: React.FC<{ url: string }> = ({ url }) => {
+  const [data, setData] = useState('no response yet');
+  useEffect(() => {
+    fetch(url).then(res => res.text()).then(setData);
+  }, [url]);
+  return <p>{data}</p>;
+}
diff --git a/tests/components/ct-react/src/assets/index.css b/tests/components/ct-react/src/assets/index.css
deleted file mode 100644
index ec2585e8c0bb8188184ed1e0703c4c8f2a8419b0..0000000000000000000000000000000000000000
--- a/tests/components/ct-react/src/assets/index.css
+++ /dev/null
@@ -1,13 +0,0 @@
-body {
-  margin: 0;
-  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
-    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
-    sans-serif;
-  -webkit-font-smoothing: antialiased;
-  -moz-osx-font-smoothing: grayscale;
-}
-
-code {
-  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
-    monospace;
-}
diff --git a/tests/components/ct-react/src/assets/logo.svg b/tests/components/ct-react/src/assets/logo.svg
deleted file mode 100644
index 9dfc1c058cebbef8b891c5062be6f31033d7d186..0000000000000000000000000000000000000000
--- a/tests/components/ct-react/src/assets/logo.svg
+++ /dev/null
@@ -1 +0,0 @@
-<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
\ No newline at end of file
diff --git a/tests/components/ct-react/src/components/Button.tsx b/tests/components/ct-react/src/components/Button.tsx
deleted file mode 100644
index 78b0a7791f55b89ae27a8625a1498e30ecc268d7..0000000000000000000000000000000000000000
--- a/tests/components/ct-react/src/components/Button.tsx
+++ /dev/null
@@ -1,7 +0,0 @@
-type ButtonProps = {
-  title: string;
-  onClick?(props: string): void;
-}
-export default function Button(props: ButtonProps) {
-  return <button onClick={() => props.onClick?.('hello')}>{props.title}</button>
-}
diff --git a/tests/components/ct-react/src/components/Counter.tsx b/tests/components/ct-react/src/components/Counter.tsx
deleted file mode 100644
index 2548202aec41a8958e15af27556df5f5c925e55a..0000000000000000000000000000000000000000
--- a/tests/components/ct-react/src/components/Counter.tsx
+++ /dev/null
@@ -1,19 +0,0 @@
-import { useRef } from "react"
-
- type CounterProps = {
-   count?: number;
-   onClick?(props: string): void;
-   children?: any;
- }
-
- let _remountCount = 1;
-
- export default function Counter(props: CounterProps) {
-   const remountCount = useRef(_remountCount++);
-   return <div onClick={() => props.onClick?.('hello')}>
-     <div id="props">{ props.count }</div>
-     <div id="remount-count">{ remountCount.current }</div>
-     { props.children }
-   </div>
- }
- 
\ No newline at end of file
diff --git a/tests/components/ct-react/src/components/DefaultChildren.tsx b/tests/components/ct-react/src/components/DefaultChildren.tsx
deleted file mode 100644
index 691b6a080615cf761c2d079b68dc7115c6a6f2d2..0000000000000000000000000000000000000000
--- a/tests/components/ct-react/src/components/DefaultChildren.tsx
+++ /dev/null
@@ -1,15 +0,0 @@
-type DefaultChildrenProps = {
-  children?: any;
-}
-
-export default function DefaultChildren(props: DefaultChildrenProps) {
-  return <div>
-    <h1>Welcome!</h1>
-    <main>
-      {props.children}
-    </main>
-    <footer>
-      Thanks for visiting.
-    </footer>
-  </div>
-}
diff --git a/tests/components/ct-react/src/components/DelayedData.tsx b/tests/components/ct-react/src/components/DelayedData.tsx
deleted file mode 100644
index 6cbbe2618c107c82da6a84ab83a3af4f7a41be1f..0000000000000000000000000000000000000000
--- a/tests/components/ct-react/src/components/DelayedData.tsx
+++ /dev/null
@@ -1,16 +0,0 @@
-import { useEffect, useState } from 'react';
-
-type DelayedData = {
-  data: string;
-}
-
-export default function DelayedData(props: DelayedData) {
-  const [status, setStatus] = useState('loading');
-
-  useEffect(() => {
-    const timeout = setTimeout(() => setStatus(props.data), 500);
-    return () => clearTimeout(timeout);
-  }, [props.data])
-
-  return <p>{status}</p>
-};
diff --git a/tests/components/ct-react/src/components/Fetch.tsx b/tests/components/ct-react/src/components/Fetch.tsx
deleted file mode 100644
index 52be98ff4eb306b512f4e087b6f692f56625f6c3..0000000000000000000000000000000000000000
--- a/tests/components/ct-react/src/components/Fetch.tsx
+++ /dev/null
@@ -1,13 +0,0 @@
-import React, { useEffect, useState } from 'react';
-
-type FetchProps = {
-  url: string;
-}
-
-export default function Fetch(props: FetchProps) {
-  const [data, setData] = useState('no response yet');
-  useEffect(() => {
-    fetch(props.url).then(res => res.text()).then(setData);
-  }, [props.url]);
-  return <p>{data}</p>;
-}
diff --git a/tests/components/ct-react/src/components/MultiRoot.tsx b/tests/components/ct-react/src/components/MultiRoot.tsx
deleted file mode 100644
index f29e397c0fe5447efa3c9a0440155220c3e82e74..0000000000000000000000000000000000000000
--- a/tests/components/ct-react/src/components/MultiRoot.tsx
+++ /dev/null
@@ -1,6 +0,0 @@
-export default function MultiRoot() {
-  return <>
-    <div>root 1</div>
-    <div>root 2</div>
-  </>
-}
diff --git a/tests/components/ct-react/src/components/MultipleChildren.tsx b/tests/components/ct-react/src/components/MultipleChildren.tsx
deleted file mode 100644
index 63bd0104c62f55a28bc93ce40c289c318caf75c6..0000000000000000000000000000000000000000
--- a/tests/components/ct-react/src/components/MultipleChildren.tsx
+++ /dev/null
@@ -1,18 +0,0 @@
-
-type MultipleChildrenProps = {
-  children?: [any, any, any];
-}
-
-export default function MultipleChildren(props: MultipleChildrenProps) {
-  return <div>
-  <header>
-    {props.children?.at(0)}
-  </header>
-  <main>
-    {props.children?.at(1)}
-  </main>
-  <footer>
-    {props.children?.at(2)}
-  </footer>
-</div>
-}
diff --git a/tests/components/ct-react/src/index.css b/tests/components/ct-react/src/index.css
new file mode 100644
index 0000000000000000000000000000000000000000..ec2585e8c0bb8188184ed1e0703c4c8f2a8419b0
--- /dev/null
+++ b/tests/components/ct-react/src/index.css
@@ -0,0 +1,13 @@
+body {
+  margin: 0;
+  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
+    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
+    sans-serif;
+  -webkit-font-smoothing: antialiased;
+  -moz-osx-font-smoothing: grayscale;
+}
+
+code {
+  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
+    monospace;
+}
diff --git a/tests/components/ct-react/src/index.js b/tests/components/ct-react/src/index.js
deleted file mode 100644
index 9705643d881cf161648b3e91c3eb8efc9159df48..0000000000000000000000000000000000000000
--- a/tests/components/ct-react/src/index.js
+++ /dev/null
@@ -1,11 +0,0 @@
-import React from 'react';
-import ReactDOM from 'react-dom';
-import './App.css';
-import App from './App';
-
-ReactDOM.render(
-  <React.StrictMode>
-    <App />
-  </React.StrictMode>,
-  document.getElementById('root')
-);
diff --git a/tests/components/ct-react/src/index.tsx b/tests/components/ct-react/src/index.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..6832e7832bb9d3f06d1a7e7f18567ee6f524873d
--- /dev/null
+++ b/tests/components/ct-react/src/index.tsx
@@ -0,0 +1,11 @@
+import React from 'react';
+import ReactDOM from 'react-dom';
+import './index.css';
+import App from './App';
+
+ReactDOM.render(
+  <React.StrictMode>
+    <App />
+  </React.StrictMode>,
+  document.getElementById('root')
+);
diff --git a/tests/components/ct-react/src/logo.svg b/tests/components/ct-react/src/logo.svg
new file mode 100644
index 0000000000000000000000000000000000000000..9dfc1c058cebbef8b891c5062be6f31033d7d186
--- /dev/null
+++ b/tests/components/ct-react/src/logo.svg
@@ -0,0 +1 @@
+<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
\ No newline at end of file
diff --git a/tests/components/ct-react/src/tests.spec.tsx b/tests/components/ct-react/src/tests.spec.tsx
deleted file mode 100644
index 9b5bc3415823a41881cacb97fede3994562289bf..0000000000000000000000000000000000000000
--- a/tests/components/ct-react/src/tests.spec.tsx
+++ /dev/null
@@ -1,154 +0,0 @@
-import { test, expect } from '@playwright/experimental-ct-react'
-import { serverFixtures } from '../../../../tests/config/serverFixtures';
-import Fetch from './components/Fetch';
-import DelayedData from './components/DelayedData';
-import Button from './components/Button';
-import DefaultChildren from './components/DefaultChildren';
-import MultipleChildren from './components/MultipleChildren';
-import MultiRoot from './components/MultiRoot';
-import Counter from './components/Counter';
-
-test.use({ viewport: { width: 500, height: 500 } });
-
-test('render props', async ({ mount }) => {
-  const component = await mount(<Button title="Submit" />);
-  await expect(component).toContainText('Submit');
-});
-
-test('renderer updates props without remounting', async ({ mount }) => {
-  const component = await mount(<Counter count={9001} />)
-  await expect(component.locator('#props')).toContainText('9001')
-
-  await component.rerender(<Counter count={1337} />)
-  await expect(component).not.toContainText('9001')
-  await expect(component.locator('#props')).toContainText('1337')
-
-  await expect(component.locator('#remount-count')).toContainText('1')
-});
-
-test('renderer updates callbacks without remounting', async ({ mount }) => {
-  const component = await mount(<Counter />)
-
-  const messages: string[] = []
-  await component.rerender(<Counter onClick={message => { 
-    messages.push(message) 
-  }} />)
-  await component.click();
-  expect(messages).toEqual(['hello'])
-
-  await expect(component.locator('#remount-count')).toContainText('1')
-});
-
-test('renderer updates slots without remounting', async ({ mount }) => {
-  const component = await mount(<Counter>Default Slot</Counter>)
-  await expect(component).toContainText('Default Slot')
-
-  await component.rerender(<Counter>Test Slot</Counter>)
-  await expect(component).not.toContainText('Default Slot')
-  await expect(component).toContainText('Test Slot')
-
-  await expect(component.locator('#remount-count')).toContainText('1')
-});
-
-test('execute callback when the button is clicked', async ({ mount }) => {
-  const messages: string[] = []
-  const component = await mount(<Button title="Submit" onClick={data => {
-    messages.push(data)
-  }}></Button>)
-  await component.click()
-  expect(messages).toEqual(['hello'])
-})
-
-test('render a default child', async ({ mount }) => {
-  const component = await mount(<DefaultChildren>
-    Main Content
-  </DefaultChildren>)
-  await expect(component).toContainText('Main Content')
-})
-
-test('render multiple children', async ({ mount }) => {
-  const component = await mount(<DefaultChildren>
-    <div id="one">One</div>
-    <div id="two">Two</div>
-  </DefaultChildren>)
-  await expect(component.locator('#one')).toContainText('One')
-  await expect(component.locator('#two')).toContainText('Two')
-})
-
-test('render named children', async ({ mount }) => {
-  const component = await mount(<MultipleChildren>
-    <div>Header</div>
-    <div>Main Content</div>
-    <div>Footer</div>
-  </MultipleChildren>);
-  await expect(component).toContainText('Header')
-  await expect(component).toContainText('Main Content')
-  await expect(component).toContainText('Footer')
-})
-
-test('execute callback when a child node is clicked', async ({ mount }) => {
-  let clickFired = false;
-  const component = await mount(<DefaultChildren>
-    <span onClick={() => clickFired = true}>Main Content</span>
-  </DefaultChildren>);
-  await component.locator('text=Main Content').click();
-  expect(clickFired).toBeTruthy();
-})
-
-test('run hooks', async ({ page, mount }) => {
-  const messages: string[] = [];
-  page.on('console', m => messages.push(m.text()));
-  await mount(<Button title="Submit" />, {
-    hooksConfig: {
-      route: 'A'
-    }
-  });
-  expect(messages).toEqual(['Before mount: {\"route\":\"A\"}', 'After mount']);
-});
-
-test('unmount', async ({ page, mount }) => {
-  const component = await mount(<Button title="Submit" />)
-  await expect(page.locator('#root')).toContainText('Submit')
-  await component.unmount();
-  await expect(page.locator('#root')).not.toContainText('Submit');
-});
-
-test('unmount a multi root component', async ({ mount, page }) => {
-  const component = await mount(<MultiRoot />)
-  await expect(page.locator('#root')).toContainText('root 1')
-  await expect(page.locator('#root')).toContainText('root 2')
-  await component.unmount()
-  await expect(page.locator('#root')).not.toContainText('root 1')
-  await expect(page.locator('#root')).not.toContainText('root 2')
-})
-
-test('render delayed data', async ({ mount }) => {
-  const component = await mount(<DelayedData data='complete' />);
-  await expect(component).toHaveText('complete');
-});
-
-const testWithServer = test.extend(serverFixtures);
-testWithServer('components routing should go through context', async ({ mount, context, server }) => {
-  server.setRoute('/hello', (req, res) => {
-    res.write('served via server');
-    res.end();
-  });
-
-  let markRouted: (url: string) => void;
-  const routedViaContext = new Promise(res => markRouted = res);
-  await context.route('**/hello', async (route, request) => {
-    markRouted(`${request.method()} ${request.url()}`);
-    await route.fulfill({
-      body: 'intercepted',
-    });
-  });
-
-  const whoServedTheRequest = Promise.race([
-    server.waitForRequest('/hello').then((req) => `served via server: ${req.method} ${req.url}`),
-    routedViaContext.then(req => `served via context: ${req}`),
-  ]);
-
-  const component = await mount(<Fetch url={server.PREFIX + '/hello'} />);
-  await expect.soft(whoServedTheRequest).resolves.toMatch(/served via context: GET.*\/hello.*/i);
-  await expect.soft(component).toHaveText('intercepted');
-});
diff --git a/tests/components/ct-solid/.gitignore b/tests/components/ct-solid/.gitignore
deleted file mode 100644
index f06235c460c2de3d97efc8371125594b7b761b08..0000000000000000000000000000000000000000
--- a/tests/components/ct-solid/.gitignore
+++ /dev/null
@@ -1,2 +0,0 @@
-node_modules
-dist
diff --git a/tests/components/ct-solid/README.md b/tests/components/ct-solid/README.md
deleted file mode 100644
index 434f7bb9df876d54929e9e1c024d7167ce5b618b..0000000000000000000000000000000000000000
--- a/tests/components/ct-solid/README.md
+++ /dev/null
@@ -1,34 +0,0 @@
-## Usage
-
-Those templates dependencies are maintained via [pnpm](https://pnpm.io) via `pnpm up -Lri`.
-
-This is the reason you see a `pnpm-lock.yaml`. That being said, any package manager will work. This file can be safely be removed once you clone a template.
-
-```bash
-$ npm install # or pnpm install or yarn install
-```
-
-### Learn more on the [Solid Website](https://solidjs.com) and come chat with us on our [Discord](https://discord.com/invite/solidjs)
-
-## Available Scripts
-
-In the project directory, you can run:
-
-### `npm dev` or `npm start`
-
-Runs the app in the development mode.<br>
-Open [http://localhost:3000](http://localhost:3000) to view it in the browser.
-
-The page will reload if you make edits.<br>
-
-### `npm run build`
-
-Builds the app for production to the `dist` folder.<br>
-It correctly bundles Solid in production mode and optimizes the build for the best performance.
-
-The build is minified and the filenames include the hashes.<br>
-Your app is ready to be deployed!
-
-## Deployment
-
-You can deploy the `dist` folder to any static host provider (netlify, surge, now, etc.)
diff --git a/tests/components/ct-solid/index.html b/tests/components/ct-solid/index.html
deleted file mode 100644
index 48c59fc1242d34c1a1dd680db4e7328a4e043abd..0000000000000000000000000000000000000000
--- a/tests/components/ct-solid/index.html
+++ /dev/null
@@ -1,16 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-  <head>
-    <meta charset="utf-8" />
-    <meta name="viewport" content="width=device-width, initial-scale=1" />
-    <meta name="theme-color" content="#000000" />
-    <link rel="shortcut icon" type="image/ico" href="/src/assets/favicon.ico" />
-    <title>Solid App</title>
-  </head>
-  <body>
-    <noscript>You need to enable JavaScript to run this app.</noscript>
-    <div id="root"></div>
-
-    <script src="/src/index.tsx" type="module"></script>
-  </body>
-</html>
diff --git a/tests/components/ct-solid/package.json b/tests/components/ct-solid/package.json
deleted file mode 100644
index 8176ee5f4b94f6810c3ed62e819985c8a1e159c9..0000000000000000000000000000000000000000
--- a/tests/components/ct-solid/package.json
+++ /dev/null
@@ -1,24 +0,0 @@
-{
-  "name": "ct-solid",
-  "version": "0.0.0",
-  "description": "",
-  "scripts": {
-    "start": "vite",
-    "dev": "vite",
-    "build": "vite build",
-    "serve": "vite preview"
-  },
-  "license": "MIT",
-  "devDependencies": {
-    "typescript": "^4.7.4",
-    "vite": "^3.0.0",
-    "vite-plugin-solid": "^2.3.0"
-  },
-  "dependencies": {
-    "solid-js": "^1.4.7"
-  },
-  "@standaloneDevDependencies": {
-    "@playwright/experimental-ct-solid": "^1.22.2",
-    "@playwright/test": "^1.22.2"
-  }
-}
diff --git a/tests/components/ct-solid/playwright.config.ts b/tests/components/ct-solid/playwright.config.ts
deleted file mode 100644
index 891aeb6e04af3e50b808e6e9e18e65b9d6a4920a..0000000000000000000000000000000000000000
--- a/tests/components/ct-solid/playwright.config.ts
+++ /dev/null
@@ -1,43 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import { type PlaywrightTestConfig, devices } from '@playwright/experimental-ct-solid';
-
-const config: PlaywrightTestConfig = {
-  testDir: 'src',
-  forbidOnly: !!process.env.CI,
-  retries: process.env.CI ? 2 : 0,
-  reporter: 'html',
-  use: {
-    trace: 'on-first-retry',
-  },
-  projects: [
-    {
-      name: 'chromium',
-      use: { ...devices['Desktop Chrome'] },
-    },
-    {
-      name: 'firefox',
-      use: { ...devices['Desktop Firefox'] },
-    },
-    {
-      name: 'webkit',
-      use: { ...devices['Desktop Safari'] },
-    },
-  ],
-};
-
-export default config;
diff --git a/tests/components/ct-solid/playwright/index.html b/tests/components/ct-solid/playwright/index.html
deleted file mode 100644
index 9c332655e8095731df089e35423fef811215e33e..0000000000000000000000000000000000000000
--- a/tests/components/ct-solid/playwright/index.html
+++ /dev/null
@@ -1,13 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-  <head>
-    <meta charset="UTF-8" />
-    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
-    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
-    <title>Solid App</title>
-  </head>
-  <body>
-    <div id="root"></div>
-    <script type="module" src="/playwright/index.js"></script>
-  </body>
-</html>
diff --git a/tests/components/ct-solid/playwright/index.js b/tests/components/ct-solid/playwright/index.js
deleted file mode 100644
index 313b081507c47160f9fdae98e77e5b3f7f34b967..0000000000000000000000000000000000000000
--- a/tests/components/ct-solid/playwright/index.js
+++ /dev/null
@@ -1,10 +0,0 @@
-import '../src/assets/index.css';
-import { beforeMount, afterMount } from '@playwright/experimental-ct-solid/hooks';
-
-beforeMount(async ({ hooksConfig }) => {
-  console.log(`Before mount: ${JSON.stringify(hooksConfig)}`);
-});
-
-afterMount(async ({}) => {
-  console.log(`After mount`);
-});
diff --git a/tests/components/ct-solid/src/App.module.css b/tests/components/ct-solid/src/App.module.css
deleted file mode 100644
index 48308b24a8402dd20d3bdd448cf47dc7eb5da937..0000000000000000000000000000000000000000
--- a/tests/components/ct-solid/src/App.module.css
+++ /dev/null
@@ -1,33 +0,0 @@
-.App {
-  text-align: center;
-}
-
-.logo {
-  animation: logo-spin infinite 20s linear;
-  height: 40vmin;
-  pointer-events: none;
-}
-
-.header {
-  background-color: #282c34;
-  min-height: 100vh;
-  display: flex;
-  flex-direction: column;
-  align-items: center;
-  justify-content: center;
-  font-size: calc(10px + 2vmin);
-  color: white;
-}
-
-.link {
-  color: #b318f0;
-}
-
-@keyframes logo-spin {
-  from {
-    transform: rotate(0deg);
-  }
-  to {
-    transform: rotate(360deg);
-  }
-}
diff --git a/tests/components/ct-solid/src/App.tsx b/tests/components/ct-solid/src/App.tsx
deleted file mode 100644
index 5810710a36175522ba340b4b4d7edaa828f9c23c..0000000000000000000000000000000000000000
--- a/tests/components/ct-solid/src/App.tsx
+++ /dev/null
@@ -1,27 +0,0 @@
-import type { Component } from 'solid-js';
-
-import logo from './assets/logo.svg';
-import styles from './App.module.css';
-
-const App: Component = () => {
-  return (
-    <div class={styles.App}>
-      <header class={styles.header}>
-        <img src={logo} class={styles.logo} alt="logo" />
-        <p>
-          Edit <code>src/App.tsx</code> and save to reload.
-        </p>
-        <a
-          class={styles.link}
-          href="https://github.com/solidjs/solid"
-          target="_blank"
-          rel="noopener noreferrer"
-        >
-          Learn Solid
-        </a>
-      </header>
-    </div>
-  );
-};
-
-export default App;
diff --git a/tests/components/ct-solid/src/assets/favicon.ico b/tests/components/ct-solid/src/assets/favicon.ico
deleted file mode 100644
index b836b2bccac650e0e7d90514083add91d2c027ff..0000000000000000000000000000000000000000
Binary files a/tests/components/ct-solid/src/assets/favicon.ico and /dev/null differ
diff --git a/tests/components/ct-solid/src/assets/index.css b/tests/components/ct-solid/src/assets/index.css
deleted file mode 100644
index ec2585e8c0bb8188184ed1e0703c4c8f2a8419b0..0000000000000000000000000000000000000000
--- a/tests/components/ct-solid/src/assets/index.css
+++ /dev/null
@@ -1,13 +0,0 @@
-body {
-  margin: 0;
-  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
-    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
-    sans-serif;
-  -webkit-font-smoothing: antialiased;
-  -moz-osx-font-smoothing: grayscale;
-}
-
-code {
-  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
-    monospace;
-}
diff --git a/tests/components/ct-solid/src/assets/logo.svg b/tests/components/ct-solid/src/assets/logo.svg
deleted file mode 100644
index 025aa303c5e3a97dff4f3bcc4ac3015e9e236220..0000000000000000000000000000000000000000
--- a/tests/components/ct-solid/src/assets/logo.svg
+++ /dev/null
@@ -1 +0,0 @@
-<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 166 155.3"><path d="M163 35S110-4 69 5l-3 1c-6 2-11 5-14 9l-2 3-15 26 26 5c11 7 25 10 38 7l46 9 18-30z" fill="#76b3e1"/><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="27.5" y1="3" x2="152" y2="63.5"><stop offset=".1" stop-color="#76b3e1"/><stop offset=".3" stop-color="#dcf2fd"/><stop offset="1" stop-color="#76b3e1"/></linearGradient><path d="M163 35S110-4 69 5l-3 1c-6 2-11 5-14 9l-2 3-15 26 26 5c11 7 25 10 38 7l46 9 18-30z" opacity=".3" fill="url(#a)"/><path d="M52 35l-4 1c-17 5-22 21-13 35 10 13 31 20 48 15l62-21S92 26 52 35z" fill="#518ac8"/><linearGradient id="b" gradientUnits="userSpaceOnUse" x1="95.8" y1="32.6" x2="74" y2="105.2"><stop offset="0" stop-color="#76b3e1"/><stop offset=".5" stop-color="#4377bb"/><stop offset="1" stop-color="#1f3b77"/></linearGradient><path d="M52 35l-4 1c-17 5-22 21-13 35 10 13 31 20 48 15l62-21S92 26 52 35z" opacity=".3" fill="url(#b)"/><linearGradient id="c" gradientUnits="userSpaceOnUse" x1="18.4" y1="64.2" x2="144.3" y2="149.8"><stop offset="0" stop-color="#315aa9"/><stop offset=".5" stop-color="#518ac8"/><stop offset="1" stop-color="#315aa9"/></linearGradient><path d="M134 80a45 45 0 00-48-15L24 85 4 120l112 19 20-36c4-7 3-15-2-23z" fill="url(#c)"/><linearGradient id="d" gradientUnits="userSpaceOnUse" x1="75.2" y1="74.5" x2="24.4" y2="260.8"><stop offset="0" stop-color="#4377bb"/><stop offset=".5" stop-color="#1a336b"/><stop offset="1" stop-color="#1a336b"/></linearGradient><path d="M114 115a45 45 0 00-48-15L4 120s53 40 94 30l3-1c17-5 23-21 13-34z" fill="url(#d)"/></svg>
\ No newline at end of file
diff --git a/tests/components/ct-solid/src/components/Button.tsx b/tests/components/ct-solid/src/components/Button.tsx
deleted file mode 100644
index 78b0a7791f55b89ae27a8625a1498e30ecc268d7..0000000000000000000000000000000000000000
--- a/tests/components/ct-solid/src/components/Button.tsx
+++ /dev/null
@@ -1,7 +0,0 @@
-type ButtonProps = {
-  title: string;
-  onClick?(props: string): void;
-}
-export default function Button(props: ButtonProps) {
-  return <button onClick={() => props.onClick?.('hello')}>{props.title}</button>
-}
diff --git a/tests/components/ct-solid/src/components/DefaultChildren.tsx b/tests/components/ct-solid/src/components/DefaultChildren.tsx
deleted file mode 100644
index 691b6a080615cf761c2d079b68dc7115c6a6f2d2..0000000000000000000000000000000000000000
--- a/tests/components/ct-solid/src/components/DefaultChildren.tsx
+++ /dev/null
@@ -1,15 +0,0 @@
-type DefaultChildrenProps = {
-  children?: any;
-}
-
-export default function DefaultChildren(props: DefaultChildrenProps) {
-  return <div>
-    <h1>Welcome!</h1>
-    <main>
-      {props.children}
-    </main>
-    <footer>
-      Thanks for visiting.
-    </footer>
-  </div>
-}
diff --git a/tests/components/ct-solid/src/components/MultiRoot.tsx b/tests/components/ct-solid/src/components/MultiRoot.tsx
deleted file mode 100644
index f29e397c0fe5447efa3c9a0440155220c3e82e74..0000000000000000000000000000000000000000
--- a/tests/components/ct-solid/src/components/MultiRoot.tsx
+++ /dev/null
@@ -1,6 +0,0 @@
-export default function MultiRoot() {
-  return <>
-    <div>root 1</div>
-    <div>root 2</div>
-  </>
-}
diff --git a/tests/components/ct-solid/src/index.tsx b/tests/components/ct-solid/src/index.tsx
deleted file mode 100644
index 1cb0a23d3845842732d242ccf9f313357080a408..0000000000000000000000000000000000000000
--- a/tests/components/ct-solid/src/index.tsx
+++ /dev/null
@@ -1,7 +0,0 @@
-/* @refresh reload */
-import { render } from 'solid-js/web';
-
-import './assets/index.css';
-import App from './App';
-
-render(() => <App />, document.getElementById('root') as HTMLElement);
diff --git a/tests/components/ct-solid/src/tests.spec.tsx b/tests/components/ct-solid/src/tests.spec.tsx
deleted file mode 100644
index e16720aa6c83a3f742cc126e2378604d0fd8f000..0000000000000000000000000000000000000000
--- a/tests/components/ct-solid/src/tests.spec.tsx
+++ /dev/null
@@ -1,54 +0,0 @@
-import { test, expect } from '@playwright/experimental-ct-solid'
-import Button from './components/Button';
-import DefaultChildren from './components/DefaultChildren';
-import MultiRoot from './components/MultiRoot';
-
-test.use({ viewport: { width: 500, height: 500 } });
-
-test('render props', async ({ mount }) => {
-  const component = await mount(<Button title="Submit" />);
-  await expect(component).toContainText('Submit');
-});
-
-test('execute callback when the button is clicked', async ({ mount }) => {
-  const messages: string[] = []
-  const component = await mount(<Button title="Submit" onClick={data => {
-    messages.push(data)
-  }}></Button>)
-  await component.click()
-  expect(messages).toEqual(['hello'])
-})
-
-test('default child should work', async ({ mount }) => {
-  const component = await mount(<DefaultChildren>
-    Main Content
-  </DefaultChildren>)
-  await expect(component).toContainText('Main Content')
-})
-
-test('run hooks', async ({ page, mount }) => {
-  const messages: string[] = [];
-  page.on('console', m => messages.push(m.text()));
-  await mount(<Button title="Submit" />, {
-    hooksConfig: {
-      route: 'A'
-    }
-  });
-  expect(messages).toEqual(['Before mount: {\"route\":\"A\"}', 'After mount']);
-});
-
-test('unmount', async ({ page, mount }) => {
-  const component = await mount(<Button title="Submit" />)
-  await expect(page.locator('#root')).toContainText('Submit')
-  await component.unmount();
-  await expect(page.locator('#root')).not.toContainText('Submit');
-});
-
-test('unmount a multi root component', async ({ mount, page }) => {
-  const component = await mount(<MultiRoot />)
-  await expect(page.locator('#root')).toContainText('root 1')
-  await expect(page.locator('#root')).toContainText('root 2')
-  await component.unmount()
-  await expect(page.locator('#root')).not.toContainText('root 1')
-  await expect(page.locator('#root')).not.toContainText('root 2')
-});
diff --git a/tests/components/ct-solid/tsconfig.json b/tests/components/ct-solid/tsconfig.json
deleted file mode 100644
index 249b2732a748e3dd1aa303b36780e97ce778ce57..0000000000000000000000000000000000000000
--- a/tests/components/ct-solid/tsconfig.json
+++ /dev/null
@@ -1,15 +0,0 @@
-{
-  "compilerOptions": {
-    "strict": true,
-    "target": "ESNext",
-    "module": "ESNext",
-    "moduleResolution": "node",
-    "allowSyntheticDefaultImports": true,
-    "esModuleInterop": true,
-    "jsx": "preserve",
-    "jsxImportSource": "solid-js",
-    "types": ["vite/client"],
-    "noEmit": true,
-    "isolatedModules": true
-  }
-}
diff --git a/tests/components/ct-solid/vite.config.ts b/tests/components/ct-solid/vite.config.ts
deleted file mode 100644
index 9ff59a172211ab30ffd45194a0749233e3b949b2..0000000000000000000000000000000000000000
--- a/tests/components/ct-solid/vite.config.ts
+++ /dev/null
@@ -1,12 +0,0 @@
-import { defineConfig } from 'vite';
-import solidPlugin from 'vite-plugin-solid';
-
-export default defineConfig({
-  plugins: [solidPlugin()],
-  server: {
-    port: 3000,
-  },
-  build: {
-    target: 'esnext',
-  },
-});
diff --git a/tests/components/ct-svelte-vite/src/App.svelte b/tests/components/ct-svelte-vite/src/App.svelte
index 69b11de63df7e2f833116a1e00a0c0957b5672a4..468095369926937acf7c1b44b8d981f5f4425b56 100644
--- a/tests/components/ct-svelte-vite/src/App.svelte
+++ b/tests/components/ct-svelte-vite/src/App.svelte
@@ -1,11 +1,14 @@
 <script lang="ts">
   import logo from './assets/svelte.png'
+  import Counter from './lib/Counter.svelte'
 </script>
 
 <main>
   <img src={logo} alt="Svelte Logo" />
   <h1>Hello Typescript!</h1>
 
+  <Counter suffix={'42'}/>
+
   <p>
     Visit <a href="https://svelte.dev">svelte.dev</a> to learn how to build Svelte
     apps.
diff --git a/tests/components/ct-svelte-vite/src/components/Button.svelte b/tests/components/ct-svelte-vite/src/components/Button.svelte
deleted file mode 100644
index 2011c48b6b4cc6fbab2eac721a9469d0c11c0f42..0000000000000000000000000000000000000000
--- a/tests/components/ct-svelte-vite/src/components/Button.svelte
+++ /dev/null
@@ -1,7 +0,0 @@
-<script lang="ts">
-  import { createEventDispatcher } from "svelte";
-  export let title: string;
-  const dispatch = createEventDispatcher();
-</script>
- 
-<button on:click={() => dispatch('submit', 'hello')}>{title}</button>
diff --git a/tests/components/ct-svelte-vite/src/components/DefaultSlot.svelte b/tests/components/ct-svelte-vite/src/components/DefaultSlot.svelte
deleted file mode 100644
index 201dda6ce3f338a85229a038f7803d89f290dfcc..0000000000000000000000000000000000000000
--- a/tests/components/ct-svelte-vite/src/components/DefaultSlot.svelte
+++ /dev/null
@@ -1,9 +0,0 @@
-<div>
-  <h1>Welcome!</h1>
-  <main>
-    <slot />
-  </main>
-  <footer>
-    Thanks for visiting.
-  </footer>
-</div>
diff --git a/tests/components/ct-svelte-vite/src/components/MultiRoot.svelte b/tests/components/ct-svelte-vite/src/components/MultiRoot.svelte
deleted file mode 100644
index 87996d0ce0062a876bdf20cd466454b978f749ca..0000000000000000000000000000000000000000
--- a/tests/components/ct-svelte-vite/src/components/MultiRoot.svelte
+++ /dev/null
@@ -1,2 +0,0 @@
-<div>root 1</div>
-<div>root 2</div>
diff --git a/tests/components/ct-svelte-vite/src/lib/ContactCard.svelte b/tests/components/ct-svelte-vite/src/lib/ContactCard.svelte
new file mode 100644
index 0000000000000000000000000000000000000000..f62caed6eace530c9bb9c4d0010cebdb6c3d6eef
--- /dev/null
+++ b/tests/components/ct-svelte-vite/src/lib/ContactCard.svelte
@@ -0,0 +1,47 @@
+<article class="contact-card">
+  <h2>
+    <slot name="name">
+      <span class="missing">Unknown name</span>
+    </slot>
+  </h2>
+
+  <div class="address">
+    <slot name="address">
+      <span class="missing">Unknown address</span>
+    </slot>
+  </div>
+
+  <div class="email">
+    <slot name="email">
+      <span class="missing">Unknown email</span>
+    </slot>
+  </div>
+</article>
+
+<style>
+  .contact-card {
+    width: 300px;
+    border: 1px solid #aaa;
+    border-radius: 2px;
+    box-shadow: 2px 2px 8px rgba(0,0,0,0.1);
+    padding: 1em;
+  }
+
+  h2 {
+    padding: 0 0 0.2em 0;
+    margin: 0 0 1em 0;
+    border-bottom: 1px solid #ff3e00
+  }
+
+  .address, .email {
+    padding: 0 0 0 1.5em;
+    background:  0 50% no-repeat;
+    background-size: 1em 1em;
+    margin: 0 0 0.5em 0;
+    line-height: 1.2;
+  }
+
+  .missing {
+    color: #999;
+  }
+</style>
diff --git a/tests/components/ct-svelte-vite/src/lib/Counter.spec.ts b/tests/components/ct-svelte-vite/src/lib/Counter.spec.ts
new file mode 100644
index 0000000000000000000000000000000000000000..7b7c183f25a3b232e670d21875e6213babb2d631
--- /dev/null
+++ b/tests/components/ct-svelte-vite/src/lib/Counter.spec.ts
@@ -0,0 +1,60 @@
+/**
+ * Copyright (c) Microsoft Corporation. All rights reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import { test, expect } from '@playwright/experimental-ct-svelte';
+import Counter from './Counter.svelte';
+
+test.use({ viewport: { width: 500, height: 500 } });
+
+test('should work', async ({ mount }) => {
+  const values = [];
+  const component = await mount(Counter, {
+    props: {
+      suffix: 'my suffix',
+    },
+    on: {
+      changed: value => values.push(value)
+    }
+  });
+  await expect(component).toContainText('my suffix');
+  await component.click();
+  expect(values).toEqual([{ count: 1 }]);
+});
+
+test('should configure app', async ({ page, mount }) => {
+  const messages: string[] = [];
+  page.on('console', m => messages.push(m.text()));
+  await mount(Counter, {
+    props: {
+      units: 's',
+    },
+    hooksConfig: {
+      route: 'A'
+    }
+  });
+  expect(messages).toEqual(['Before mount: {\"route\":\"A\"}', 'After mount']);
+});
+
+test('should unmount', async ({ page, mount }) => {
+  const component = await mount(Counter, {
+    props: {
+      suffix: 'my suffix',
+    },
+  });
+  await expect(page.locator('#root')).toContainText('my suffix')
+  await component.unmount();
+  await expect(page.locator('#root')).not.toContainText('my suffix');
+});
diff --git a/tests/components/ct-svelte-vite/src/lib/Counter.svelte b/tests/components/ct-svelte-vite/src/lib/Counter.svelte
new file mode 100644
index 0000000000000000000000000000000000000000..9d12575efce7d7709ab715aa6ec5ea3282d6287f
--- /dev/null
+++ b/tests/components/ct-svelte-vite/src/lib/Counter.svelte
@@ -0,0 +1,38 @@
+<script lang="ts">
+  import { createEventDispatcher } from 'svelte';
+  export let suffix: string;
+  let count: number = 0;
+  const dispatch = createEventDispatcher();
+  const increment = () => {
+    ++count;
+    dispatch('changed', { count });
+  };
+</script>
+
+<button on:click={increment}>
+  Clicks: {count} {suffix}
+</button>
+
+<style>
+  button {
+    font-family: inherit;
+    font-size: inherit;
+    padding: 1em 2em;
+    color: #ff3e00;
+    background-color: rgba(255, 62, 0, 0.1);
+    border-radius: 2em;
+    border: 2px solid rgba(255, 62, 0, 0);
+    outline: none;
+    width: 200px;
+    font-variant-numeric: tabular-nums;
+    cursor: pointer;
+  }
+
+  button:focus {
+    border: 2px solid #ff3e00;
+  }
+
+  button:active {
+    background-color: rgba(255, 62, 0, 0.2);
+  }
+</style>
diff --git a/tests/components/ct-svelte-vite/src/tests.spec.ts b/tests/components/ct-svelte-vite/src/tests.spec.ts
deleted file mode 100644
index be24cb8e9cbf0be978bcc7859264699398628775..0000000000000000000000000000000000000000
--- a/tests/components/ct-svelte-vite/src/tests.spec.ts
+++ /dev/null
@@ -1,86 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import { test, expect } from '@playwright/experimental-ct-svelte';
-import Button from './components/Button.svelte';
-import DefaultSlot from './components/DefaultSlot.svelte';
-import MultiRoot from './components/MultiRoot.svelte';
-
-test.use({ viewport: { width: 500, height: 500 } });
-
-test('render props', async ({ mount }) => {
-  const component = await mount(Button, {
-    props: {
-      title: 'Submit'
-    }
-  })
-  await expect(component).toContainText('Submit')
-})
-
-test('emit an submit event when the button is clicked', async ({ mount }) => {
-  const messages = []
-  const component = await mount(Button, {
-    props: {
-      title: 'Submit'
-    },
-    on: {
-      submit: data => messages.push(data)
-    }
-  })
-  await component.click()
-  expect(messages).toEqual(['hello'])
-})
-
-test('render a default slot', async ({ mount }) => {
-  const component = await mount(DefaultSlot, {
-    slots: {
-      default: 'Main Content'
-    }
-  })
-  await expect(component).toContainText('Main Content')
-})
-
-test('run hooks', async ({ page, mount }) => {
-  const messages = []
-  page.on('console', m => messages.push(m.text()))
-  await mount(Button, {
-    props: {
-      title: 'Submit'
-    },
-    hooksConfig: { route: 'A' }
-  })
-  expect(messages).toEqual(['Before mount: {\"route\":\"A\"}', 'After mount']);
-})
-
-test('unmount', async ({ page, mount }) => {
-  const component = await mount(Button, {
-    props: {
-      title: 'Submit'
-    }
-  })
-  await expect(page.locator('#root')).toContainText('Submit')
-  await component.unmount();
-  await expect(page.locator('#root')).not.toContainText('Submit');
-});
-
-test('unmount a multi root component', async ({ mount, page }) => {
-  const component = await mount(MultiRoot)
-  await expect(page.locator('#root')).toContainText('root 1')
-  await expect(page.locator('#root')).toContainText('root 2')
-  await component.unmount()
-  await expect(page.locator('#root')).not.toContainText('root 1')
-  await expect(page.locator('#root')).not.toContainText('root 2')
-})
diff --git a/tests/components/ct-svelte-vite/src/tests.ts b/tests/components/ct-svelte-vite/src/tests.ts
new file mode 100644
index 0000000000000000000000000000000000000000..a1ce4f99ea9067f6346f8a16a41923e2670ba40b
--- /dev/null
+++ b/tests/components/ct-svelte-vite/src/tests.ts
@@ -0,0 +1,10 @@
+import register from '@playwright/experimental-ct-svelte/register';
+import App from './App.svelte';
+import ContactCard from './lib/ContactCard.svelte';
+import Counter from './lib/Counter.svelte';
+
+register({
+  App,
+  Counter,
+  ContactCard
+});
diff --git a/tests/components/ct-svelte/playwright/index.ts b/tests/components/ct-svelte/playwright/index.ts
index d3a5d6623b83f5b1268cb32baa1c2fc2ee6720e4..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 100644
--- a/tests/components/ct-svelte/playwright/index.ts
+++ b/tests/components/ct-svelte/playwright/index.ts
@@ -1,10 +0,0 @@
-//@ts-check
-import { beforeMount, afterMount } from '@playwright/experimental-ct-svelte/hooks';
-
-beforeMount(async ({ hooksConfig }) => {
-  console.log(`Before mount: ${JSON.stringify(hooksConfig)}`);
-});
-  
-afterMount(async ({}) => {
-  console.log(`After mount`);
-});
diff --git a/tests/components/ct-svelte/src/App.spec.ts b/tests/components/ct-svelte/src/App.spec.ts
new file mode 100644
index 0000000000000000000000000000000000000000..68223ddc062c7ab2b4bab2c616d315dfc83ce28e
--- /dev/null
+++ b/tests/components/ct-svelte/src/App.spec.ts
@@ -0,0 +1,29 @@
+/**
+ * Copyright (c) Microsoft Corporation. All rights reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import { test, expect } from '@playwright/experimental-ct-svelte';
+import App from './App.svelte';
+
+test.use({ viewport: { width: 500, height: 500 } });
+
+test('should work', async ({ mount }) => {
+  const component = await mount(App, {
+    props: {
+      name: 'world'
+    }
+  });
+  await expect(component).toContainText('Hello world!');
+})
diff --git a/tests/components/ct-svelte/src/App.svelte b/tests/components/ct-svelte/src/App.svelte
index 9d6aec93d688e9aaa5ca793c1cc7409a631b713f..84cd1b59c9c0ee767c8730c67550a7826774a7fb 100644
--- a/tests/components/ct-svelte/src/App.svelte
+++ b/tests/components/ct-svelte/src/App.svelte
@@ -27,4 +27,4 @@
       max-width: none;
     }
   }
-</style>
+</style>
\ No newline at end of file
diff --git a/tests/components/ct-svelte/src/components/Button.svelte b/tests/components/ct-svelte/src/components/Button.svelte
deleted file mode 100644
index 8c46efd1f2549e4525c4f20d852245a4c644cd3f..0000000000000000000000000000000000000000
--- a/tests/components/ct-svelte/src/components/Button.svelte
+++ /dev/null
@@ -1,7 +0,0 @@
-<script>
-import { createEventDispatcher } from "svelte";
-export let title;
-const dispatch = createEventDispatcher();
-</script>
-    
-<button on:click={() => dispatch('submit', 'hello')}>{title}</button>
diff --git a/tests/components/ct-svelte/src/components/DefaultSlot.svelte b/tests/components/ct-svelte/src/components/DefaultSlot.svelte
deleted file mode 100644
index 201dda6ce3f338a85229a038f7803d89f290dfcc..0000000000000000000000000000000000000000
--- a/tests/components/ct-svelte/src/components/DefaultSlot.svelte
+++ /dev/null
@@ -1,9 +0,0 @@
-<div>
-  <h1>Welcome!</h1>
-  <main>
-    <slot />
-  </main>
-  <footer>
-    Thanks for visiting.
-  </footer>
-</div>
diff --git a/tests/components/ct-svelte/src/components/MultiRoot.svelte b/tests/components/ct-svelte/src/components/MultiRoot.svelte
deleted file mode 100644
index 87996d0ce0062a876bdf20cd466454b978f749ca..0000000000000000000000000000000000000000
--- a/tests/components/ct-svelte/src/components/MultiRoot.svelte
+++ /dev/null
@@ -1,2 +0,0 @@
-<div>root 1</div>
-<div>root 2</div>
diff --git a/tests/components/ct-svelte/src/main.js b/tests/components/ct-svelte/src/main.js
index 8e1efe955c9f4d3b3aa66b425a56af082885b96d..8f6710a97805278a7e5e8a0628703918c830b44e 100644
--- a/tests/components/ct-svelte/src/main.js
+++ b/tests/components/ct-svelte/src/main.js
@@ -7,4 +7,4 @@ const app = new App({
   }
 });
 
-export default app;
+export default app;
\ No newline at end of file
diff --git a/tests/components/ct-svelte/src/tests.spec.ts b/tests/components/ct-svelte/src/tests.spec.ts
deleted file mode 100644
index be24cb8e9cbf0be978bcc7859264699398628775..0000000000000000000000000000000000000000
--- a/tests/components/ct-svelte/src/tests.spec.ts
+++ /dev/null
@@ -1,86 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation. All rights reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import { test, expect } from '@playwright/experimental-ct-svelte';
-import Button from './components/Button.svelte';
-import DefaultSlot from './components/DefaultSlot.svelte';
-import MultiRoot from './components/MultiRoot.svelte';
-
-test.use({ viewport: { width: 500, height: 500 } });
-
-test('render props', async ({ mount }) => {
-  const component = await mount(Button, {
-    props: {
-      title: 'Submit'
-    }
-  })
-  await expect(component).toContainText('Submit')
-})
-
-test('emit an submit event when the button is clicked', async ({ mount }) => {
-  const messages = []
-  const component = await mount(Button, {
-    props: {
-      title: 'Submit'
-    },
-    on: {
-      submit: data => messages.push(data)
-    }
-  })
-  await component.click()
-  expect(messages).toEqual(['hello'])
-})
-
-test('render a default slot', async ({ mount }) => {
-  const component = await mount(DefaultSlot, {
-    slots: {
-      default: 'Main Content'
-    }
-  })
-  await expect(component).toContainText('Main Content')
-})
-
-test('run hooks', async ({ page, mount }) => {
-  const messages = []
-  page.on('console', m => messages.push(m.text()))
-  await mount(Button, {
-    props: {
-      title: 'Submit'
-    },
-    hooksConfig: { route: 'A' }
-  })
-  expect(messages).toEqual(['Before mount: {\"route\":\"A\"}', 'After mount']);
-})
-
-test('unmount', async ({ page, mount }) => {
-  const component = await mount(Button, {
-    props: {
-      title: 'Submit'
-    }
-  })
-  await expect(page.locator('#root')).toContainText('Submit')
-  await component.unmount();
-  await expect(page.locator('#root')).not.toContainText('Submit');
-});
-
-test('unmount a multi root component', async ({ mount, page }) => {
-  const component = await mount(MultiRoot)
-  await expect(page.locator('#root')).toContainText('root 1')
-  await expect(page.locator('#root')).toContainText('root 2')
-  await component.unmount()
-  await expect(page.locator('#root')).not.toContainText('root 1')
-  await expect(page.locator('#root')).not.toContainText('root 2')
-})
diff --git a/tests/components/ct-vue-cli/playwright/index.js b/tests/components/ct-vue-cli/playwright/index.js
index 29eaab5a6aba6b70a025350b1fe059253d28b475..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 100644
--- a/tests/components/ct-vue-cli/playwright/index.js
+++ b/tests/components/ct-vue-cli/playwright/index.js
@@ -1,11 +0,0 @@
-//@ts-check
-
-import { beforeMount, afterMount } from '@playwright/experimental-ct-vue/hooks';
-
-beforeMount(async ({ app, hooksConfig }) => {
-  console.log(`Before mount: ${JSON.stringify(hooksConfig)}, app: ${!!app}`);
-});
-
-afterMount(async ({ instance }) => {
-  console.log(`After mount el: ${instance.$el.constructor.name}`);
-});
diff --git a/tests/components/ct-vue-cli/src/components/Button.vue b/tests/components/ct-vue-cli/src/components/Button.vue
index 334a3d0364eb3c4dd19b0e8ce9b8a78af8e12cf3..8df50e23b3d106bc658c6db6aef16caa9f0ccfa8 100644
--- a/tests/components/ct-vue-cli/src/components/Button.vue
+++ b/tests/components/ct-vue-cli/src/components/Button.vue
@@ -3,6 +3,9 @@ defineProps({
   title: {
     type: String,
     required: true
+  },
+  emits: {
+    submit: null,
   }
 })
 </script>
diff --git a/tests/components/ct-vue-cli/src/components/Component.vue b/tests/components/ct-vue-cli/src/components/Component.vue
deleted file mode 100644
index 133c8e26707c9c1adbf6e6414e2e943858f1ccd7..0000000000000000000000000000000000000000
--- a/tests/components/ct-vue-cli/src/components/Component.vue
+++ /dev/null
@@ -1,3 +0,0 @@
-<template>
- <div>test</div>
-</template>
diff --git a/tests/components/ct-vue-cli/src/components/Counter.vue b/tests/components/ct-vue-cli/src/components/Counter.vue
deleted file mode 100644
index 6e211660b72f9e514567526d1b903462ce079af3..0000000000000000000000000000000000000000
--- a/tests/components/ct-vue-cli/src/components/Counter.vue
+++ /dev/null
@@ -1,21 +0,0 @@
-<template>
-  <div>
-    <span id="remount-count">{{ remountCount }}</span>
-    <span id="rerender-count">{{ count }}</span>
-  </div>
-</template>
-
-<script>
-let remountCount = 0
-</script>
-
-<script setup>
-defineProps({
-  count: {
-    type: Number,
-    required: true
-  }
-})
-remountCount++
-</script>
-
diff --git a/tests/components/ct-vue-cli/src/components/MultiRoot.vue b/tests/components/ct-vue-cli/src/components/MultiRoot.vue
deleted file mode 100644
index d1c348d7501f36bd93e5dc058a4be5fbeb0c70b4..0000000000000000000000000000000000000000
--- a/tests/components/ct-vue-cli/src/components/MultiRoot.vue
+++ /dev/null
@@ -1,4 +0,0 @@
-<template>
- <div>root 1</div>
- <div>root 2</div>
-</template>
\ No newline at end of file
diff --git a/tests/components/ct-vue-cli/src/components/NamedSlots.vue b/tests/components/ct-vue-cli/src/components/NamedSlots.vue
index 582608df32fc404fe9ad238005679ec9c9c4c5ce..b7e95f44878d2d2abaadd61965be31638826944f 100644
--- a/tests/components/ct-vue-cli/src/components/NamedSlots.vue
+++ b/tests/components/ct-vue-cli/src/components/NamedSlots.vue
@@ -3,6 +3,7 @@
     <header>
       <slot name="header" />
     </header>
+
     <main>
       <slot name="main" />
     </main>
diff --git a/tests/components/ct-vue-cli/src/notation-jsx.spec.tsx b/tests/components/ct-vue-cli/src/notation-jsx.spec.tsx
index fda81dad5e1769977cdbe5f4fff368f1950678f7..3ecea3cac2433f7398f97178d383d15c8223a8bd 100644
--- a/tests/components/ct-vue-cli/src/notation-jsx.spec.tsx
+++ b/tests/components/ct-vue-cli/src/notation-jsx.spec.tsx
@@ -1,31 +1,16 @@
 import { test, expect } from '@playwright/experimental-ct-vue'
 import Button from './components/Button.vue'
-import Counter from './components/Counter.vue'
 import DefaultSlot from './components/DefaultSlot.vue'
 import NamedSlots from './components/NamedSlots.vue'
-import MultiRoot from './components/MultiRoot.vue'
 
 test.use({ viewport: { width: 500, height: 500 } })
 
-test('render props', async ({ mount }) => {
-  const component = await mount(<Button title="Submit" />)
+test('props should work', async ({ mount }) => {
+  const component = await mount(<Button title='Submit'></Button>)
   await expect(component).toContainText('Submit')
 })
 
-test('renderer and keep the component instance intact', async ({ mount }) => {
-  const component = await mount(<Counter count={9001} />);
-  await expect(component.locator('#rerender-count')).toContainText('9001')
-  
-  await component.rerender({ props: { count: 1337 } })
-  await expect(component.locator('#rerender-count')).toContainText('1337')
-  
-  await component.rerender({ props: { count: 42 } })
-  await expect(component.locator('#rerender-count')).toContainText('42')
-
-  await expect(component.locator('#remount-count')).toContainText('1')
-})
-
-test('emit an submit event when the button is clicked', async ({ mount }) => {
+test('event should work', async ({ mount }) => {
   const messages = []
   const component = await mount(<Button title='Submit' v-on:submit={data => {
     messages.push(data)
@@ -34,14 +19,14 @@ test('emit an submit event when the button is clicked', async ({ mount }) => {
   expect(messages).toEqual(['hello'])
 })
 
-test('render a default slot', async ({ mount }) => {
+test('default  slot should work', async ({ mount }) => {
   const component = await mount(<DefaultSlot>
     Main Content
   </DefaultSlot>)
   await expect(component).toContainText('Main Content')
 })
 
-test('render a component with multiple children', async ({ mount }) => {
+test('multiple slots should work', async ({ mount }) => {
   const component = await mount(<DefaultSlot>
     <div id="one">One</div>
     <div id="two">Two</div>
@@ -50,7 +35,7 @@ test('render a component with multiple children', async ({ mount }) => {
   await expect(component.locator('#two')).toContainText('Two')
 })
 
-test('render a component with a named slot', async ({ mount }) => {
+test('named slots should work', async ({ mount }) => {
   const component = await mount(<NamedSlots>
     <template v-slot:header>
       Header
@@ -66,30 +51,3 @@ test('render a component with a named slot', async ({ mount }) => {
   await expect(component).toContainText('Main Content')
   await expect(component).toContainText('Footer')
 })
-
-test('emit a event when a slot is clicked', async ({ mount }) => {
-  let clickFired = false;
-  const component = await mount(<DefaultSlot>
-    <span v-on:click={() => clickFired = true}>Main Content</span>
-  </DefaultSlot>);
-  await component.locator('text=Main Content').click();
-  expect(clickFired).toBeTruthy();
-})
-
-test('run hooks', async ({ page, mount }) => {
-  const messages = []
-  page.on('console', m => messages.push(m.text()))
-  await mount(<Button title="Submit" />, {
-    hooksConfig: { route: 'A' }
-  })
-  expect(messages).toEqual(['Before mount: {\"route\":\"A\"}, app: true', 'After mount el: HTMLButtonElement'])
-})
-
-test('unmount a multi root component', async ({ mount, page }) => {
-  const component = await mount(<MultiRoot />)
-  await expect(page.locator('#root')).toContainText('root 1')
-  await expect(page.locator('#root')).toContainText('root 2')
-  await component.unmount()
-  await expect(page.locator('#root')).not.toContainText('root 1')
-  await expect(page.locator('#root')).not.toContainText('root 2')
-})
diff --git a/tests/components/ct-vue-cli/src/notation-vue.spec.ts b/tests/components/ct-vue-cli/src/notation-vue.spec.ts
index a620165a5a2600bd9845982e4ca5d2d4247c2968..ae611bcdaf750f3b80aded145cc02f3759521b12 100644
--- a/tests/components/ct-vue-cli/src/notation-vue.spec.ts
+++ b/tests/components/ct-vue-cli/src/notation-vue.spec.ts
@@ -1,15 +1,12 @@
 import { test, expect } from '@playwright/experimental-ct-vue'
 
 import Button from './components/Button.vue'
-import Counter from './components/Counter.vue'
 import DefaultSlot from './components/DefaultSlot.vue'
 import NamedSlots from './components/NamedSlots.vue'
-import MultiRoot from './components/MultiRoot.vue'
-import Component from './components/Component.vue'
 
 test.use({ viewport: { width: 500, height: 500 } })
 
-test('render props', async ({ mount }) => {
+test('props should work', async ({ mount }) => {
   const component = await mount(Button, {
     props: {
       title: 'Submit'
@@ -18,24 +15,7 @@ test('render props', async ({ mount }) => {
   await expect(component).toContainText('Submit')
 })
 
-test('renderer and keep the component instance intact', async ({ mount }) => {
-  const component = await mount<{ count: number }>(Counter, {
-    props: { 
-      count: 9001
-    }
-  });
-  await expect(component.locator('#rerender-count')).toContainText('9001')
-  
-  await component.rerender({ props: { count: 1337 } })
-  await expect(component.locator('#rerender-count')).toContainText('1337')
-  
-  await component.rerender({ props: { count: 42 } })
-  await expect(component.locator('#rerender-count')).toContainText('42')
-
-  await expect(component.locator('#remount-count')).toContainText('1')
-})
-
-test('emit an submit event when the button is clicked', async ({ mount }) => {
+test('event should work', async ({ mount }) => {
   const messages = []
   const component = await mount(Button, {
     props: {
@@ -49,7 +29,7 @@ test('emit an submit event when the button is clicked', async ({ mount }) => {
   expect(messages).toEqual(['hello'])
 })
 
-test('render a default slot', async ({ mount }) => {
+test('default slot should work', async ({ mount }) => {
   const component = await mount(DefaultSlot, {
     slots: {
       default: 'Main Content'
@@ -58,7 +38,7 @@ test('render a default slot', async ({ mount }) => {
   await expect(component).toContainText('Main Content')
 })
 
-test('render a component with multiple slots', async ({ mount }) => {
+test('multiple slots should work', async ({ mount }) => {
   const component = await mount(DefaultSlot, {
     slots: {
       default: ['one', 'two']
@@ -68,7 +48,7 @@ test('render a component with multiple slots', async ({ mount }) => {
   await expect(component).toContainText('two')
 })
 
-test('render a component with a named slot', async ({ mount }) => {
+test('named slots should work', async ({ mount }) => {
   const component = await mount(NamedSlots, {
     slots: {
       header: 'Header',
@@ -80,40 +60,3 @@ test('render a component with a named slot', async ({ mount }) => {
   await expect(component).toContainText('Main Content')
   await expect(component).toContainText('Footer')
 })
-
-test('render a component without options', async ({ mount }) => {
-  const component = await mount(Component)
-  await expect(component).toContainText('test')
-})
-
-test('run hooks', async ({ page, mount }) => {
-  const messages = []
-  page.on('console', m => messages.push(m.text()))
-  await mount(Button, {
-    props: {
-      title: 'Submit'
-    },
-    hooksConfig: { route: 'A' }
-  })
-  expect(messages).toEqual(['Before mount: {\"route\":\"A\"}, app: true', 'After mount el: HTMLButtonElement'])
-})
-
-test('unmount', async ({ page, mount }) => {
-  const component = await mount(Button, {
-    props: {
-      title: 'Submit'
-    }
-  })
-  await expect(page.locator('#root')).toContainText('Submit')
-  await component.unmount();
-  await expect(page.locator('#root')).not.toContainText('Submit');
-});
-
-test('unmount a multi root component', async ({ mount, page }) => {
-  const component = await mount(MultiRoot)
-  await expect(page.locator('#root')).toContainText('root 1')
-  await expect(page.locator('#root')).toContainText('root 2')
-  await component.unmount()
-  await expect(page.locator('#root')).not.toContainText('root 1')
-  await expect(page.locator('#root')).not.toContainText('root 2')
-})
diff --git a/tests/components/ct-vue-vite/src/notation-jsx.spec.tsx b/tests/components/ct-vue-vite/src/notation-jsx.spec.tsx
index c0316b4a7cbe05284373827ac4a58327187d9403..755c9a4882af4bb30392d6105723bf4f91177d1e 100644
--- a/tests/components/ct-vue-vite/src/notation-jsx.spec.tsx
+++ b/tests/components/ct-vue-vite/src/notation-jsx.spec.tsx
@@ -7,7 +7,7 @@ import MultiRoot from './components/MultiRoot.vue'
 
 test.use({ viewport: { width: 500, height: 500 } })
 
-test('render props', async ({ mount }) => {
+test('props should work', async ({ mount }) => {
   const component = await mount(<Button title="Submit" />)
   await expect(component).toContainText('Submit')
 })
@@ -25,7 +25,7 @@ test('renderer and keep the component instance intact', async ({ mount }) => {
   await expect(component.locator('#remount-count')).toContainText('1')
 })
 
-test('emit an submit event when the button is clicked', async ({ mount }) => {
+test('event should work', async ({ mount }) => {
   const messages = []
   const component = await mount(<Button title='Submit' v-on:submit={data => {
     messages.push(data)
@@ -34,14 +34,14 @@ test('emit an submit event when the button is clicked', async ({ mount }) => {
   expect(messages).toEqual(['hello'])
 })
 
-test('render a default slot', async ({ mount }) => {
+test('default slot should work', async ({ mount }) => {
   const component = await mount(<DefaultSlot>
     Main Content
   </DefaultSlot>)
   await expect(component).toContainText('Main Content')
 })
 
-test('render a component with multiple slots', async ({ mount }) => {
+test('multiple slots should work', async ({ mount }) => {
   const component = await mount(<DefaultSlot>
     <div id="one">One</div>
     <div id="two">Two</div>
@@ -50,7 +50,7 @@ test('render a component with multiple slots', async ({ mount }) => {
   await expect(component.locator('#two')).toContainText('Two')
 })
 
-test('render a component with a named slot', async ({ mount }) => {
+test('named slots should work', async ({ mount }) => {
   const component = await mount(<NamedSlots>
     <template v-slot:header>
       Header
@@ -67,7 +67,7 @@ test('render a component with a named slot', async ({ mount }) => {
   await expect(component).toContainText('Footer')
 })
 
-test('emit a event when a slot is clicked', async ({ mount }) => {
+test('slot should emit events', async ({ mount }) => {
   let clickFired = false;
   const component = await mount(<DefaultSlot>
     <span v-on:click={() => clickFired = true}>Main Content</span>
@@ -76,7 +76,7 @@ test('emit a event when a slot is clicked', async ({ mount }) => {
   expect(clickFired).toBeTruthy();
 })
 
-test('run hooks', async ({ page, mount }) => {
+test('should run hooks', async ({ page, mount }) => {
   const messages = []
   page.on('console', m => messages.push(m.text()))
   await mount(<Button title="Submit" />, {
@@ -85,7 +85,7 @@ test('run hooks', async ({ page, mount }) => {
   expect(messages).toEqual(['Before mount: {\"route\":\"A\"}, app: true', 'After mount el: HTMLButtonElement'])
 })
 
-test('unmount a multi root component', async ({ mount, page }) => {
+test('unmount a multi root component should work', async ({ mount, page }) => {
   const component = await mount(<MultiRoot />)
 
   await expect(page.locator('#root')).toContainText('root 1')
diff --git a/tests/components/ct-vue-vite/src/notation-vue.spec.js b/tests/components/ct-vue-vite/src/notation-vue.spec.js
index 8b54ba3769dc698a8908e770cd115fbe9b3d09fc..cbcc3b339079a623eb4c326389a250074921e3df 100644
--- a/tests/components/ct-vue-vite/src/notation-vue.spec.js
+++ b/tests/components/ct-vue-vite/src/notation-vue.spec.js
@@ -8,7 +8,7 @@ import Component from './components/Component.vue'
 
 test.use({ viewport: { width: 500, height: 500 } })
 
-test('render props', async ({ mount }) => {
+test('props should work', async ({ mount }) => {
   const component = await mount(Button, {
     props: {
       title: 'Submit'
@@ -35,7 +35,7 @@ test('renderer and keep the component instance intact', async ({ mount }) => {
 })
 
 
-test('emit an submit event when the button is clicked', async ({ mount }) => {
+test('event should work', async ({ mount }) => {
   const messages = []
   const component = await mount(Button, {
     props: {
@@ -49,7 +49,7 @@ test('emit an submit event when the button is clicked', async ({ mount }) => {
   expect(messages).toEqual(['hello'])
 })
 
-test('render a default slot', async ({ mount }) => {
+test('default slot should work', async ({ mount }) => {
   const component = await mount(DefaultSlot, {
     slots: {
       default: 'Main Content'
@@ -58,7 +58,7 @@ test('render a default slot', async ({ mount }) => {
   await expect(component).toContainText('Main Content')
 })
 
-test('render a component with multiple slots', async ({ mount }) => {
+test('multiple slots should work', async ({ mount }) => {
   const component = await mount(DefaultSlot, {
     slots: {
       default: ['one', 'two']
@@ -68,7 +68,7 @@ test('render a component with multiple slots', async ({ mount }) => {
   await expect(component).toContainText('two')
 })
 
-test('render a component with a named slot', async ({ mount }) => {
+test('named slots should work', async ({ mount }) => {
   const component = await mount(NamedSlots, {
     slots: {
       header: 'Header',
@@ -81,12 +81,12 @@ test('render a component with a named slot', async ({ mount }) => {
   await expect(component).toContainText('Footer')
 })
 
-test('render a component without options', async ({ mount }) => {
+test('optionless should work', async ({ mount }) => {
   const component = await mount(Component)
   await expect(component).toContainText('test')
 })
 
-test('run hooks', async ({ page, mount }) => {
+test('should run hooks', async ({ page, mount }) => {
   const messages = []
   page.on('console', m => messages.push(m.text()))
   await mount(Button, {
@@ -98,7 +98,7 @@ test('run hooks', async ({ page, mount }) => {
   expect(messages).toEqual(['Before mount: {\"route\":\"A\"}, app: true', 'After mount el: HTMLButtonElement'])
 })
 
-test('unmount a multi root component', async ({ mount, page }) => {
+test('unmount a multi root component should work', async ({ mount, page }) => {
   const component = await mount(MultiRoot)
 
   await expect(page.locator('#root')).toContainText('root 1')
diff --git a/tests/components/ct-vue-vite/src/notation-vue.spec.ts b/tests/components/ct-vue-vite/src/notation-vue.spec.ts
index 5177bdbb09445ac7bdd5804942fa228a2d5aa080..c37774f8f3aebe6c44a0924eaf98ddb76fe5590e 100644
--- a/tests/components/ct-vue-vite/src/notation-vue.spec.ts
+++ b/tests/components/ct-vue-vite/src/notation-vue.spec.ts
@@ -9,7 +9,7 @@ import Component from './components/Component.vue'
 
 test.use({ viewport: { width: 500, height: 500 } })
 
-test('render props', async ({ mount }) => {
+test('props should work', async ({ mount }) => {
   const component = await mount(Button, {
     props: {
       title: 'Submit'
@@ -35,7 +35,7 @@ test('renderer and keep the component instance intact', async ({ mount }) => {
   await expect(component.locator('#remount-count')).toContainText('1')
 })
 
-test('emit an submit event when the button is clicked', async ({ mount }) => {
+test('event should work', async ({ mount }) => {
   const messages = []
   const component = await mount(Button, {
     props: {
@@ -49,7 +49,7 @@ test('emit an submit event when the button is clicked', async ({ mount }) => {
   expect(messages).toEqual(['hello'])
 })
 
-test('render a default slot', async ({ mount }) => {
+test('default slot should work', async ({ mount }) => {
   const component = await mount(DefaultSlot, {
     slots: {
       default: 'Main Content'
@@ -58,7 +58,7 @@ test('render a default slot', async ({ mount }) => {
   await expect(component).toContainText('Main Content')
 })
 
-test('render a component with multiple slots', async ({ mount }) => {
+test('multiple slots should work', async ({ mount }) => {
   const component = await mount(DefaultSlot, {
     slots: {
       default: ['one', 'two']
@@ -68,7 +68,7 @@ test('render a component with multiple slots', async ({ mount }) => {
   await expect(component).toContainText('two')
 })
 
-test('render a component with a named slot', async ({ mount }) => {
+test('named slots should work', async ({ mount }) => {
   const component = await mount(NamedSlots, {
     slots: {
       header: 'Header',
@@ -81,12 +81,12 @@ test('render a component with a named slot', async ({ mount }) => {
   await expect(component).toContainText('Footer')
 })
 
-test('render a component without options', async ({ mount }) => {
+test('optionless should work', async ({ mount }) => {
   const component = await mount(Component)
   await expect(component).toContainText('test')
 })
 
-test('run hooks', async ({ page, mount }) => {
+test('should run hooks', async ({ page, mount }) => {
   const messages = []
   page.on('console', m => messages.push(m.text()))
   await mount(Button, {
@@ -98,7 +98,7 @@ test('run hooks', async ({ page, mount }) => {
   expect(messages).toEqual(['Before mount: {\"route\":\"A\"}, app: true', 'After mount el: HTMLButtonElement'])
 })
 
-test('unmount', async ({ page, mount }) => {
+test('should unmount', async ({ page, mount }) => {
   const component = await mount(Button, {
     props: {
       title: 'Submit'
@@ -109,7 +109,7 @@ test('unmount', async ({ page, mount }) => {
   await expect(page.locator('#root')).not.toContainText('Submit');
 });
 
-test('unmount a multi root component', async ({ mount, page }) => {
+test('unmount a multi root component should work', async ({ mount, page }) => {
   const component = await mount(MultiRoot)
 
   await expect(page.locator('#root')).toContainText('root 1')
diff --git a/tests/components/ct-vue-vite/vue.d.ts b/tests/components/ct-vue-vite/vue.d.ts
index df9f4ba88567b73fe41eb4805f596a6d929df43f..d4d073050ed3e6c3c015b285b28e25ab6290d415 100644
--- a/tests/components/ct-vue-vite/vue.d.ts
+++ b/tests/components/ct-vue-vite/vue.d.ts
@@ -1 +1,4 @@
-declare module '*.vue';
+declare module '*.vue' {
+  const value: any;
+  export default value;
+}
diff --git a/tests/components/ct-vue2-cli/src/components/Button.vue b/tests/components/ct-vue2-cli/src/components/Button.vue
index bf008d3f7c740521db9029de6cf0fc5a78ee3dc6..02b43df13b8c5b9d841485d3e1752ae592ed71a9 100644
--- a/tests/components/ct-vue2-cli/src/components/Button.vue
+++ b/tests/components/ct-vue2-cli/src/components/Button.vue
@@ -1,5 +1,7 @@
 <template>
-  <button @click="$emit('submit', 'hello')">{{ title }}</button>
+<button @click='$emit("submit", "hello")'>
+  {{ title }}
+</button>
 </template>
 
 <script>
diff --git a/tests/components/ct-vue2-cli/src/components/Component.vue b/tests/components/ct-vue2-cli/src/components/Component.vue
deleted file mode 100644
index 133c8e26707c9c1adbf6e6414e2e943858f1ccd7..0000000000000000000000000000000000000000
--- a/tests/components/ct-vue2-cli/src/components/Component.vue
+++ /dev/null
@@ -1,3 +0,0 @@
-<template>
- <div>test</div>
-</template>
diff --git a/tests/components/ct-vue2-cli/src/components/Counter.vue b/tests/components/ct-vue2-cli/src/components/Counter.vue
deleted file mode 100644
index 9f4251ae9f29dac20424d5c42ee233507c328f4c..0000000000000000000000000000000000000000
--- a/tests/components/ct-vue2-cli/src/components/Counter.vue
+++ /dev/null
@@ -1,21 +0,0 @@
-<template>
-   <div>
-     <span id="remount-count">{{ remountCount }}</span>
-     <span id="rerender-count">{{ count }}</span>
-   </div>
- </template>
-
-<script>
-  let remountCount = 0;
-  
-  export default {
-    name: 'Button',
-    props: ['count'],
-    data() {
-      return { remountCount }
-    },
-    beforeCreate() {
-      remountCount++;
-    },
-  }
-</script>
diff --git a/tests/components/ct-vue2-cli/src/components/NamedSlots.vue b/tests/components/ct-vue2-cli/src/components/NamedSlots.vue
index 582608df32fc404fe9ad238005679ec9c9c4c5ce..b7e95f44878d2d2abaadd61965be31638826944f 100644
--- a/tests/components/ct-vue2-cli/src/components/NamedSlots.vue
+++ b/tests/components/ct-vue2-cli/src/components/NamedSlots.vue
@@ -3,6 +3,7 @@
     <header>
       <slot name="header" />
     </header>
+
     <main>
       <slot name="main" />
     </main>
diff --git a/tests/components/ct-vue2-cli/src/notation-jsx.spec.tsx b/tests/components/ct-vue2-cli/src/notation-jsx.spec.tsx
index e37a8232a9d5c19e3177b27831d6d0835d153863..a6928e89cfa27eaa5bb2e5fb66efb0a9bf8a44d8 100644
--- a/tests/components/ct-vue2-cli/src/notation-jsx.spec.tsx
+++ b/tests/components/ct-vue2-cli/src/notation-jsx.spec.tsx
@@ -1,30 +1,16 @@
 import { test, expect } from '@playwright/experimental-ct-vue2'
 import Button from './components/Button.vue'
-import Counter from './components/Counter.vue'
 import DefaultSlot from './components/DefaultSlot.vue'
 import NamedSlots from './components/NamedSlots.vue'
 
 test.use({ viewport: { width: 500, height: 500 } })
 
-test('render props', async ({ mount }) => {
-  const component = await mount(<Button title="Submit" />)
+test('props should work', async ({ mount }) => {
+  const component = await mount(<Button title='Submit'></Button>)
   await expect(component).toContainText('Submit')
 })
 
-test('renderer and keep the component instance intact', async ({ mount }) => {
-  const component = await mount(<Counter count={9001} />)
-  await expect(component.locator('#rerender-count')).toContainText('9001')
-  
-  await component.rerender({ props: { count: 1337 } })
-  await expect(component.locator('#rerender-count')).toContainText('1337')
-  
-  await component.rerender({ props: { count: 42 } })
-  await expect(component.locator('#rerender-count')).toContainText('42')
-
-  await expect(component.locator('#remount-count')).toContainText('1')
-})
-
-test('emit an submit event when the button is clicked', async ({ mount }) => {
+test('event should work', async ({ mount }) => {
   const messages = []
   const component = await mount(<Button title='Submit' v-on:submit={data => {
     messages.push(data)
@@ -33,14 +19,14 @@ test('emit an submit event when the button is clicked', async ({ mount }) => {
   expect(messages).toEqual(['hello'])
 })
 
-test('render a default slot', async ({ mount }) => {
+test('default slot should work', async ({ mount }) => {
   const component = await mount(<DefaultSlot>
     Main Content
   </DefaultSlot>)
   await expect(component).toContainText('Main Content')
 })
 
-test('render a component with multiple slots', async ({ mount }) => {
+test('multiple slots should work', async ({ mount }) => {
   const component = await mount(<DefaultSlot>
     <div id="one">One</div>
     <div id="two">Two</div>
@@ -49,7 +35,7 @@ test('render a component with multiple slots', async ({ mount }) => {
   await expect(component.locator('#two')).toContainText('Two')
 })
 
-test('render a component with a named slot', async ({ mount }) => {
+test('named slots should work', async ({ mount }) => {
   const component = await mount(<NamedSlots>
     <template v-slot:header>
       Header
@@ -66,7 +52,7 @@ test('render a component with a named slot', async ({ mount }) => {
   await expect(component).toContainText('Footer')
 })
 
-test('emit a event when a slot is clicked', async ({ mount }) => {
+test('slot should emit events', async ({ mount }) => {
   let clickFired = false;
   const component = await mount(<DefaultSlot>
     <span v-on:click={() => clickFired = true}>Main Content</span>
@@ -75,10 +61,10 @@ test('emit a event when a slot is clicked', async ({ mount }) => {
   expect(clickFired).toBeTruthy();
 })
 
-test('run hooks', async ({ page, mount }) => {
+test('should run hooks', async ({ page, mount }) => {
   const messages = []
   page.on('console', m => messages.push(m.text()))
-  await mount(<Button title="Submit" />, {
+  await mount(<Button title='Submit'></Button>, {
     hooksConfig: { route: 'A' }
   })
   expect(messages).toEqual(['Before mount: {\"route\":\"A\"}', 'After mount el: HTMLButtonElement'])
diff --git a/tests/components/ct-vue2-cli/src/notation-vue.spec.ts b/tests/components/ct-vue2-cli/src/notation-vue.spec.ts
index 255c955db1016b8494e51b09aba7d004735b132f..4a96827b1a1d173bc8789b865bf2df11abba7459 100644
--- a/tests/components/ct-vue2-cli/src/notation-vue.spec.ts
+++ b/tests/components/ct-vue2-cli/src/notation-vue.spec.ts
@@ -1,13 +1,12 @@
 import { test, expect } from '@playwright/experimental-ct-vue2'
+
 import Button from './components/Button.vue'
-import Counter from './components/Counter.vue'
 import DefaultSlot from './components/DefaultSlot.vue'
 import NamedSlots from './components/NamedSlots.vue'
-import Component from './components/Component.vue'
 
 test.use({ viewport: { width: 500, height: 500 } })
 
-test('render props', async ({ mount }) => {
+test('props should work', async ({ mount }) => {
   const component = await mount(Button, {
     props: {
       title: 'Submit'
@@ -16,24 +15,7 @@ test('render props', async ({ mount }) => {
   await expect(component).toContainText('Submit')
 })
 
-test('renderer and keep the component instance intact', async ({ mount }) => {
-  const component = await mount<{ count: number }>(Counter, {
-    props: {
-      count: 9001
-    }
-  })
-  await expect(component.locator('#rerender-count')).toContainText('9001')
-
-  await component.rerender({ props: { count: 1337 } })
-  await expect(component.locator('#rerender-count')).toContainText('1337')
-
-  await component.rerender({ props: { count: 42 } })
-  await expect(component.locator('#rerender-count')).toContainText('42')
-
-  await expect(component.locator('#remount-count')).toContainText('1')
-})
-
-test('emit an submit event when the button is clicked', async ({ mount }) => {
+test('event should work', async ({ mount }) => {
   const messages = []
   const component = await mount(Button, {
     props: {
@@ -47,7 +29,7 @@ test('emit an submit event when the button is clicked', async ({ mount }) => {
   expect(messages).toEqual(['hello'])
 })
 
-test('render a default slot', async ({ mount }) => {
+test('default slot should work', async ({ mount }) => {
   const component = await mount(DefaultSlot, {
     slots: {
       default: 'Main Content'
@@ -56,7 +38,7 @@ test('render a default slot', async ({ mount }) => {
   await expect(component).toContainText('Main Content')
 })
 
-test('render a component with multiple slots', async ({ mount }) => {
+test('multiple slots should work', async ({ mount }) => {
   const component = await mount(DefaultSlot, {
     slots: {
       default: ['one', 'two']
@@ -66,7 +48,7 @@ test('render a component with multiple slots', async ({ mount }) => {
   await expect(component).toContainText('two')
 })
 
-test('render a component with a named slot', async ({ mount }) => {
+test('named slots should work', async ({ mount }) => {
   const component = await mount(NamedSlots, {
     slots: {
       header: 'Header',
@@ -79,12 +61,7 @@ test('render a component with a named slot', async ({ mount }) => {
   await expect(component).toContainText('Footer')
 })
 
-test('render a component without options', async ({ mount }) => {
-  const component = await mount(Component)
-  await expect(component).toContainText('test')
-})
-
-test('run hooks', async ({ page, mount }) => {
+test('should run hooks', async ({ page, mount }) => {
   const messages = []
   page.on('console', m => messages.push(m.text()))
   await mount(Button, {
@@ -96,7 +73,7 @@ test('run hooks', async ({ page, mount }) => {
   expect(messages).toEqual(['Before mount: {\"route\":\"A\"}', 'After mount el: HTMLButtonElement'])
 })
 
-test('unmount', async ({ page, mount }) => {
+test('should unmount', async ({ page, mount }) => {
   const component = await mount(Button, {
     props: {
       title: 'Submit'
diff --git a/tests/components/ct-vue2-cli/src/vue.d.ts b/tests/components/ct-vue2-cli/src/vue.d.ts
index df9f4ba88567b73fe41eb4805f596a6d929df43f..d4d073050ed3e6c3c015b285b28e25ab6290d415 100644
--- a/tests/components/ct-vue2-cli/src/vue.d.ts
+++ b/tests/components/ct-vue2-cli/src/vue.d.ts
@@ -1 +1,4 @@
-declare module '*.vue';
+declare module '*.vue' {
+  const value: any;
+  export default value;
+}
diff --git a/tests/config/browserTest.ts b/tests/config/browserTest.ts
index d49d8bb26e57796327ebafc1d9054b3c528b8a51..6eaed6cfb7d7911278a481fecc355ceff7c877f7 100644
--- a/tests/config/browserTest.ts
+++ b/tests/config/browserTest.ts
@@ -47,11 +47,11 @@ type BrowserTestTestFixtures = PageTestFixtures & {
 const test = baseTest.extend<BrowserTestTestFixtures, BrowserTestWorkerFixtures>({
   browserVersion: [async ({ browser }, run) => {
     await run(browser.version());
-  }, { scope: 'worker' }],
+  }, { scope: 'worker' } ],
 
   browserType: [async ({ playwright, browserName }, run) => {
     await run(playwright[browserName]);
-  }, { scope: 'worker' }],
+  }, { scope: 'worker' } ],
 
   allowsThirdParty: [async ({ browserName, browserMajorVersion, channel }, run) => {
     if (browserName === 'firefox' && !channel)
@@ -60,7 +60,7 @@ const test = baseTest.extend<BrowserTestTestFixtures, BrowserTestWorkerFixtures>
       await run(browserMajorVersion >= 97 && browserMajorVersion < 103);
     else
       await run(false);
-  }, { scope: 'worker' }],
+  }, { scope: 'worker' } ],
 
   defaultSameSiteCookieValue: [async ({ browserName, browserMajorVersion, channel }, run) => {
     if (browserName === 'chromium')
@@ -73,15 +73,14 @@ const test = baseTest.extend<BrowserTestTestFixtures, BrowserTestWorkerFixtures>
       await run(browserMajorVersion >= 103 ? 'None' : 'Lax');
     else
       throw new Error('unknown browser - ' + browserName);
-  }, { scope: 'worker' }],
+  }, { scope: 'worker' } ],
 
   browserMajorVersion: [async ({ browserVersion }, run) => {
     await run(Number(browserVersion.split('.')[0]));
-  }, { scope: 'worker' }],
+  }, { scope: 'worker' } ],
 
-  isAndroid: [false, { scope: 'worker' }],
-  isElectron: [false, { scope: 'worker' }],
-  isWebView2: [false, { scope: 'worker' }],
+  isAndroid: [false, { scope: 'worker' } ],
+  isElectron: [false, { scope: 'worker' } ],
 
   contextFactory: async ({ _contextFactory }: any, run) => {
     await run(_contextFactory);
diff --git a/tests/config/coverageFixtures.ts b/tests/config/coverageFixtures.ts
index 47f4aa98d1e7dbbe5b95e0e72c2b2bc8bc2a79dc..3ecc2351d2035ea5169434b2bef05f13411a2574 100644
--- a/tests/config/coverageFixtures.ts
+++ b/tests/config/coverageFixtures.ts
@@ -24,8 +24,8 @@ export type CoverageWorkerOptions = {
 };
 
 export const coverageTest = test.extend<{}, { __collectCoverage: void } & CoverageWorkerOptions>({
-  coverageName: [undefined, { scope: 'worker', option: true  }],
-  __collectCoverage: [async ({ coverageName }, run, workerInfo) => {
+  coverageName: [ undefined, { scope: 'worker', option: true  } ],
+  __collectCoverage: [ async ({ coverageName }, run, workerInfo) => {
     if (!coverageName) {
       await run();
       return;
@@ -38,5 +38,5 @@ export const coverageTest = test.extend<{}, { __collectCoverage: void } & Covera
     const coverageJSON = Array.from(coverage.keys()).filter(key => coverage.get(key));
     await fs.promises.mkdir(path.dirname(coveragePath), { recursive: true });
     await fs.promises.writeFile(coveragePath, JSON.stringify(coverageJSON, undefined, 2), 'utf8');
-  }, { scope: 'worker', auto: true }],
+  }, { scope: 'worker', auto: true } ],
 });
diff --git a/tests/config/platformFixtures.ts b/tests/config/platformFixtures.ts
index 4a044c8dcc2e8ace369161731306bb79a5e2ae92..96afd4ae2bca89b30794fef028f94a659eecd319 100644
--- a/tests/config/platformFixtures.ts
+++ b/tests/config/platformFixtures.ts
@@ -24,8 +24,8 @@ export type PlatformWorkerFixtures = {
 };
 
 export const platformTest = test.extend<{}, PlatformWorkerFixtures>({
-  platform: [process.platform as 'win32' | 'darwin' | 'linux', { scope: 'worker' }],
-  isWindows: [process.platform === 'win32', { scope: 'worker' }],
-  isMac: [process.platform === 'darwin', { scope: 'worker' }],
-  isLinux: [process.platform === 'linux', { scope: 'worker' }],
+  platform: [ process.platform as 'win32' | 'darwin' | 'linux', { scope: 'worker' } ],
+  isWindows: [ process.platform === 'win32', { scope: 'worker' } ],
+  isMac: [ process.platform === 'darwin', { scope: 'worker' } ],
+  isLinux: [ process.platform === 'linux', { scope: 'worker' } ],
 });
diff --git a/tests/config/serverFixtures.ts b/tests/config/serverFixtures.ts
index b779c224d5eb71ec6cda5be0a226b91319f29793..095a7e5e07f696758531667f58c17efaa74c0267 100644
--- a/tests/config/serverFixtures.ts
+++ b/tests/config/serverFixtures.ts
@@ -34,8 +34,8 @@ export type ServerFixtures = {
 };
 
 export const serverFixtures: Fixtures<ServerFixtures, ServerWorkerOptions> = {
-  loopback: [undefined, { scope: 'worker', option: true }],
-  __servers: [async ({ loopback }, run, workerInfo) => {
+  loopback: [ undefined, { scope: 'worker', option: true } ],
+  __servers: [ async ({ loopback }, run, workerInfo) => {
     const assetsPath = path.join(__dirname, '..', 'assets');
     const cachedPath = path.join(__dirname, '..', 'assets', 'cached');
 
@@ -85,7 +85,7 @@ export const serverFixtures: Fixtures<ServerFixtures, ServerWorkerOptions> = {
       socksServer.close(),
       proxyServer.stop(),
     ]);
-  }, { scope: 'worker' }],
+  }, { scope: 'worker' } ],
 
   server: async ({ __servers }, run) => {
     __servers.server.reset();
diff --git a/tests/config/testModeFixtures.ts b/tests/config/testModeFixtures.ts
index 43d7974729be832aa5c762fcfa9a9af157b08013..add388dc4af60c08a1d12f9020a122e53e0e2971 100644
--- a/tests/config/testModeFixtures.ts
+++ b/tests/config/testModeFixtures.ts
@@ -33,8 +33,8 @@ export type TestModeWorkerFixtures = {
 };
 
 export const testModeTest = test.extend<TestModeTestFixtures, TestModeWorkerOptions & TestModeWorkerFixtures>({
-  mode: ['default', { scope: 'worker', option: true }],
-  playwright: [async ({ mode }, run) => {
+  mode: [ 'default', { scope: 'worker', option: true } ],
+  playwright: [ async ({ mode }, run) => {
     const testMode = {
       default: new DefaultTestMode(),
       service: new DefaultTestMode(),
@@ -46,7 +46,7 @@ export const testModeTest = test.extend<TestModeTestFixtures, TestModeWorkerOpti
     playwright._setSelectors(playwrightLibrary.selectors);
     await run(playwright);
     await testMode.teardown();
-  }, { scope: 'worker' }],
+  }, { scope: 'worker' } ],
 
   toImplInWorkerScope: [async ({ playwright }, use) => {
     await use((playwright as any)._toImpl);
diff --git a/tests/config/utils.ts b/tests/config/utils.ts
index 05f06661258af2c73eda80e6d973f5711f25791f..51ae0128e02b95b39f2072c442325af171fbf202 100644
--- a/tests/config/utils.ts
+++ b/tests/config/utils.ts
@@ -132,8 +132,3 @@ export function waitForTestLog<T>(page: Page, prefix: string): Promise<T> {
     });
   });
 }
-
-const ansiRegex = new RegExp('[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)|(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))', 'g');
-export function stripAnsi(str: string): string {
-  return str.replace(ansiRegex, '');
-}
diff --git a/tests/electron/electronTest.ts b/tests/electron/electronTest.ts
index beb2e5334e91548eda410ad92420997d1945e24a..949811a0a95c306180a28447c78db7e186fbb8d9 100644
--- a/tests/electron/electronTest.ts
+++ b/tests/electron/electronTest.ts
@@ -38,7 +38,6 @@ export const electronTest = baseTest.extend<TraceViewerFixtures>(traceViewerFixt
   browserMajorVersion: [Number(chromiumVersion.split('.')[0]), { scope: 'worker' }],
   isAndroid: [false, { scope: 'worker' }],
   isElectron: [true, { scope: 'worker' }],
-  isWebView2: [false, { scope: 'worker' }],
 
   electronApp: async ({ playwright }, run) => {
     // This env prevents 'Electron Security Policy' console message.
@@ -53,7 +52,7 @@ export const electronTest = baseTest.extend<TraceViewerFixtures>(traceViewerFixt
   newWindow: async ({ electronApp }, run) => {
     const windows: Page[] = [];
     await run(async () => {
-      const [window] = await Promise.all([
+      const [ window ] = await Promise.all([
         electronApp.waitForEvent('window'),
         electronApp.evaluate(async electron => {
           // Avoid "Error: Cannot create BrowserWindow before app is ready".
diff --git a/tests/electron/playwright.config.ts b/tests/electron/playwright.config.ts
index 8af77d078bb245ef80ab85c7476c2d84cff3364e..645aa28ee49548664d2d53eaf94c4b1fe0e38bb9 100644
--- a/tests/electron/playwright.config.ts
+++ b/tests/electron/playwright.config.ts
@@ -35,8 +35,8 @@ const config: Config<CoverageWorkerOptions & PlaywrightWorkerOptions & Playwrigh
   preserveOutput: process.env.CI ? 'failures-only' : 'always',
   retries: process.env.CI ? 3 : 0,
   reporter: process.env.CI ? [
-    ['dot'],
-    ['json', { outputFile: path.join(outputDir, 'report.json') }],
+    [ 'dot' ],
+    [ 'json', { outputFile: path.join(outputDir, 'report.json') } ],
   ] : 'line',
   projects: [],
 };
diff --git a/tests/installation/docker-integration.spec.ts b/tests/installation/docker-integration.spec.ts
deleted file mode 100755
index 3cffac2ac24d99f1fb3a0077efb368a85d873cf9..0000000000000000000000000000000000000000
--- a/tests/installation/docker-integration.spec.ts
+++ /dev/null
@@ -1,130 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { test, expect } from './npmTest';
-import * as path from 'path';
-import * as fs from 'fs';
-import { TestServer } from '../../utils/testserver';
-
-// Skipping docker tests on CI on non-linux since GHA does not have
-// Docker engine installed on macOS and Windows.
-test.skip(() => process.env.CI && process.platform !== 'linux');
-
-test.beforeAll(async ({ exec }) => {
-  // Delete any previous docker image to ensure clean run.
-  await exec('npx playwright docker delete-image', {
-    cwd: path.join(__dirname, '..', '..'),
-  });
-});
-
-test('make sure it tells to run `npx playwright docker build` when image is not instaleld', async ({ exec }) => {
-  await exec('npm i --foreground-scripts @playwright/test');
-  const result = await exec('npx playwright docker test docker.spec.js', {
-    expectToExitWithError: true,
-  });
-  expect(result).toContain('npx playwright docker build');
-});
-
-test.describe('installed image', () => {
-  test.beforeAll(async ({ exec }) => {
-    await exec('npx playwright docker build', {
-      env: { PWTEST_DOCKER_BASE_IMAGE: 'playwright:installation-tests-focal' },
-      cwd: path.join(__dirname, '..', '..'),
-    });
-  });
-  test.afterAll(async ({ exec }) => {
-    await exec('npx playwright docker delete-image', {
-      cwd: path.join(__dirname, '..', '..'),
-    });
-  });
-
-  test('make sure it auto-starts container', async ({ exec }) => {
-    await exec('npm i --foreground-scripts @playwright/test');
-    await exec('npx playwright docker stop');
-    const result = await exec('npx playwright docker test docker.spec.js --grep platform');
-    expect(result).toContain('@chromium Linux');
-  });
-
-  test.describe('running container', () => {
-    test.beforeAll(async ({ exec }) => {
-      await exec('npx playwright docker start', {
-        cwd: path.join(__dirname, '..', '..'),
-      });
-    });
-
-    test.afterAll(async ({ exec }) => {
-      await exec('npx playwright docker stop', {
-        cwd: path.join(__dirname, '..', '..'),
-      });
-    });
-
-    test('all browsers work headless', async ({ exec }) => {
-      await exec('npm i --foreground-scripts @playwright/test');
-      const result = await exec('npx playwright docker test docker.spec.js --grep platform --browser all');
-      expect(result).toContain('@chromium Linux');
-      expect(result).toContain('@webkit Linux');
-      expect(result).toContain('@firefox Linux');
-    });
-
-    test('all browsers work headed', async ({ exec }) => {
-      await exec('npm i --foreground-scripts @playwright/test');
-      {
-        const result = await exec(`npx playwright docker test docker.spec.js --headed --grep userAgent --browser chromium`);
-        expect(result).toContain('@chromium');
-        expect(result).not.toContain('Headless');
-        expect(result).toContain(' Chrome/');
-      }
-      {
-        const result = await exec(`npx playwright docker test docker.spec.js --headed --grep userAgent --browser webkit`);
-        expect(result).toContain('@webkit');
-        expect(result).toContain(' Version/');
-      }
-      {
-        const result = await exec(`npx playwright docker test docker.spec.js --headed --grep userAgent --browser firefox`);
-        expect(result).toContain('@firefox');
-        expect(result).toContain(' Firefox/');
-      }
-    });
-
-    test('screenshots have docker suffix', async ({ exec, tmpWorkspace }) => {
-      await exec('npm i --foreground-scripts @playwright/test');
-      await exec('npx playwright docker test docker.spec.js --grep screenshot --browser all', {
-        expectToExitWithError: true,
-      });
-      const files = await fs.promises.readdir(path.join(tmpWorkspace, 'docker.spec.js-snapshots'));
-      expect(files).toContain('img-chromium-docker.png');
-      expect(files).toContain('img-firefox-docker.png');
-      expect(files).toContain('img-webkit-docker.png');
-    });
-
-    test('port forwarding works', async ({ exec, tmpWorkspace }) => {
-      await exec('npm i --foreground-scripts @playwright/test');
-      const TEST_PORT = 8425;
-      const server = await TestServer.create(tmpWorkspace, TEST_PORT);
-      server.setRoute('/', (request, response) => {
-        response.end('Hello from host');
-      });
-      const result = await exec('npx playwright docker test docker.spec.js --grep localhost --browser all', {
-        env: {
-          TEST_PORT: TEST_PORT + '',
-        },
-      });
-      expect(result).toContain('@chromium Hello from host');
-      expect(result).toContain('@webkit Hello from host');
-      expect(result).toContain('@firefox Hello from host');
-    });
-  });
-});
-
diff --git a/tests/installation/fixture-scripts/docker.spec.js b/tests/installation/fixture-scripts/docker.spec.js
deleted file mode 100644
index edc16f1133a519d1ca0275bb1f57f2ab749a6b15..0000000000000000000000000000000000000000
--- a/tests/installation/fixture-scripts/docker.spec.js
+++ /dev/null
@@ -1,19 +0,0 @@
-const { test, expect } = require('@playwright/test');
-
-test('platform', async ({ page }) => {
-  console.log('@' + page.context().browser().browserType().name(), await page.evaluate(() => navigator.platform));
-});
-
-test('userAgent', async ({ page }) => {
-  console.log('@' + page.context().browser().browserType().name(), await page.evaluate(() => navigator.userAgent));
-});
-
-test('screenshot', async ({ page }) => {
-  await expect(page).toHaveScreenshot('img.png');
-});
-
-test('localhost', async ({ page }) => {
-  expect(process.env.TEST_PORT).toBeTruthy();
-  await page.goto('http://localhost:' + process.env.TEST_PORT);
-  console.log('@' + page.context().browser().browserType().name(), await page.textContent('body'));
-});
diff --git a/tests/installation/globalSetup.ts b/tests/installation/globalSetup.ts
index 0518517e65c412a206b9b3db637742d2a4623bbf..936ecb0b1320244e9ff7daa6b807dd11d7cfd57f 100644
--- a/tests/installation/globalSetup.ts
+++ b/tests/installation/globalSetup.ts
@@ -21,55 +21,40 @@ import fs from 'fs';
 import { TMP_WORKSPACES } from './npmTest';
 
 const PACKAGE_BUILDER_SCRIPT = path.join(__dirname, '..', '..', 'utils', 'pack_package.js');
-const DOCKER_BUILDER_SCRIPT = path.join(__dirname, '..', '..', 'utils', 'docker', 'build.sh');
 
 async function globalSetup() {
   await promisify(rimraf)(TMP_WORKSPACES);
   console.log(`Temporary workspaces will be created in ${TMP_WORKSPACES}. They will not be removed at the end. Set DEBUG=itest to determine which sub-dir a specific test is using.`);
   await fs.promises.mkdir(TMP_WORKSPACES, { recursive: true });
-
   if (process.env.PWTEST_INSTALLATION_TEST_SKIP_PACKAGE_BUILDS) {
     console.log('Skipped building packages. Unset PWTEST_INSTALLATION_TEST_SKIP_PACKAGE_BUILDS to build packages.');
-  } else {
-    console.log('Building packages. Set PWTEST_INSTALLATION_TEST_SKIP_PACKAGE_BUILDS to skip.');
-    const outputDir = path.join(__dirname, 'output');
-    await promisify(rimraf)(outputDir);
-    await fs.promises.mkdir(outputDir, { recursive: true });
-
-    const build = async (buildTarget: string, pkgNameOverride?: string) => {
-      const outPath = path.resolve(path.join(outputDir, `${buildTarget}.tgz`));
-      const { code, stderr, stdout } = await spawnAsync('node', [PACKAGE_BUILDER_SCRIPT, buildTarget, outPath]);
-      if (!!code)
-        throw new Error(`Failed to build: ${buildTarget}:\n${stderr}\n${stdout}`);
-      console.log('Built:', pkgNameOverride || buildTarget);
-      return [pkgNameOverride || buildTarget, outPath];
-    };
-
-    const builds = await Promise.all([
-      build('playwright-core'),
-      build('playwright-test', '@playwright/test'),
-      build('playwright'),
-      build('playwright-chromium'),
-      build('playwright-firefox'),
-      build('playwright-webkit'),
-    ]);
-
-    await fs.promises.writeFile(path.join(__dirname, '.registry.json'), JSON.stringify(Object.fromEntries(builds)));
+    return;
   }
 
-  if (process.env.CI && process.platform !== 'linux') {
-    console.log('Skipped building docker: docker tests are not supported on Windows and macOS Github Actions.');
-  } else if (process.env.PWTEST_INSTALLATION_TEST_SKIP_DOCKER_BUILD) {
-    console.log('Skipped building docker. Unset PWTEST_INSTALLATION_TEST_SKIP_DOCKER_BUILD to build docker.');
-  } else {
-    console.log('Building docker. Set PWTEST_INSTALLATION_TEST_SKIP_DOCKER_BUILD to skip.');
-    const DOCKER_IMAGE_NAME =  'playwright:installation-tests-focal';
-    const arch = process.arch === 'arm64' ? '--arm64' : '--amd64';
-    const { code, stderr, stdout } = await spawnAsync('bash', [DOCKER_BUILDER_SCRIPT, arch, 'focal', DOCKER_IMAGE_NAME]);
+  console.log('Building packages. Set PWTEST_INSTALLATION_TEST_SKIP_PACKAGE_BUILDS to skip.');
+  const outputDir = path.join(__dirname, 'output');
+  await promisify(rimraf)(outputDir);
+  await fs.promises.mkdir(outputDir, { recursive: true });
+
+  const build = async (buildTarget: string, pkgNameOverride?: string) => {
+    const outPath = path.resolve(path.join(outputDir, `${buildTarget}.tgz`));
+    const { code, stderr, stdout } = await spawnAsync('node', [PACKAGE_BUILDER_SCRIPT, buildTarget, outPath]);
     if (!!code)
-      throw new Error(`Failed to build docker:\n${stderr}\n${stdout}`);
-    console.log('Built: docker image ', DOCKER_IMAGE_NAME);
-  }
+      throw new Error(`Failed to build: ${buildTarget}:\n${stderr}\n${stdout}`);
+    console.log('Built:', pkgNameOverride || buildTarget);
+    return [pkgNameOverride || buildTarget, outPath];
+  };
+
+  const builds = await Promise.all([
+    build('playwright-core'),
+    build('playwright-test', '@playwright/test'),
+    build('playwright'),
+    build('playwright-chromium'),
+    build('playwright-firefox'),
+    build('playwright-webkit'),
+  ]);
+
+  await fs.promises.writeFile(path.join(__dirname, '.registry.json'), JSON.stringify(Object.fromEntries(builds)));
 }
 
 export default globalSetup;
diff --git a/tests/installation/npmTest.ts b/tests/installation/npmTest.ts
index 7e086c1071c0f87854bcda95487e9d2f7653cd98..86e8a9eeaa093bff9df9fc9718e9ecbd9b12be89 100644
--- a/tests/installation/npmTest.ts
+++ b/tests/installation/npmTest.ts
@@ -25,8 +25,8 @@ import debugLogger from 'debug';
 import { Registry }  from './registry';
 import { spawnAsync } from './spawnAsync';
 
-// os.tmpdir() on Windows returns a 8.3 filename, so we resolve it.
-export const TMP_WORKSPACES = path.join(os.platform() === 'darwin' ? '/tmp' : fs.realpathSync.native(os.tmpdir()), 'pwt', 'workspaces');
+
+export const TMP_WORKSPACES = path.join(os.platform() === 'darwin' ? '/tmp' : os.tmpdir(), 'pwt', 'workspaces');
 
 const debug = debugLogger('itest');
 
diff --git a/tests/installation/npx-global-help.spec.ts b/tests/installation/npx-global-help.spec.ts
index ba8d68fed8ed809885e92f4d724f22caf2005a1f..154104d420bd8d04c49895de4e260658112aecd6 100755
--- a/tests/installation/npx-global-help.spec.ts
+++ b/tests/installation/npx-global-help.spec.ts
@@ -16,7 +16,7 @@
 import { test, expect } from './npmTest';
 
 test('npx playwright --help should not download browsers', async ({ exec, installedSoftwareOnDisk }) => {
-  const result = await exec('npx playwright --help', { env: { npm_config_prefix: '' } }); // global npx and npm_config_prefix do not work together nicely (https://github.com/npm/cli/issues/5268)
+  const result = await exec('npx playwright --help');
   expect(result).toHaveLoggedSoftwareDownload([]);
   expect(await installedSoftwareOnDisk()).toEqual([]);
   expect(result).not.toContain(`To avoid unexpected behavior, please install your dependencies first`);
diff --git a/tests/installation/npx-global-install.spec.ts b/tests/installation/npx-global-install.spec.ts
index 0643903c0965f8daa168bd8b87afcb326a5dde93..876a2d1186a5c80453fa2d236be3e79371a66ccf 100755
--- a/tests/installation/npx-global-install.spec.ts
+++ b/tests/installation/npx-global-install.spec.ts
@@ -17,7 +17,7 @@ import { test, expect } from './npmTest';
 
 test('npx playwright install global', async ({ exec, installedSoftwareOnDisk }) => {
   test.skip(process.platform === 'win32', 'isLikelyNpxGlobal() does not work in this setup on our bots');
-  const result = await exec('npx playwright install', { env: { npm_config_prefix: '' } }); // global npx and npm_config_prefix do not work together nicely (https://github.com/npm/cli/issues/5268)
+  const result = await exec('npx playwright install');
   expect(result).toHaveLoggedSoftwareDownload(['chromium', 'ffmpeg', 'firefox', 'webkit']);
   expect(await installedSoftwareOnDisk()).toEqual(['chromium', 'ffmpeg', 'firefox', 'webkit']);
   expect(result).not.toContain(`Please run the following command to download new browsers`);
diff --git a/tests/installation/npx-global-spec-codegen.spec.ts b/tests/installation/npx-global-spec-codegen.spec.ts
index ba0a7acf357447ac2a456c7d31ea2880ec52fcc7..0bf1ccc1517e46ba858b6126a9d6070b80fd5c29 100755
--- a/tests/installation/npx-global-spec-codegen.spec.ts
+++ b/tests/installation/npx-global-spec-codegen.spec.ts
@@ -16,7 +16,7 @@
 import { test, expect } from './npmTest';
 
 test('npx playwright codegen', async ({ exec, installedSoftwareOnDisk }) => {
-  const stdio = await exec('npx playwright codegen', { expectToExitWithError: true, env: { npm_config_prefix: '' } }); // global npx and npm_config_prefix do not work together nicely (https://github.com/npm/cli/issues/5268)
+  const stdio = await exec('npx playwright codegen', { expectToExitWithError: true });
   expect(stdio).toHaveLoggedSoftwareDownload([]);
   expect(await installedSoftwareOnDisk()).toEqual([]);
   expect(stdio).toContain(`Please run the following command to download new browsers`);
diff --git a/tests/installation/playwright-cdn-should-race-with-timeout.spec.ts b/tests/installation/playwright-cdn-should-race-with-timeout.spec.ts
deleted file mode 100644
index f5db1ada8f430cd06695e88a49103b5d1eb9b2ec..0000000000000000000000000000000000000000
--- a/tests/installation/playwright-cdn-should-race-with-timeout.spec.ts
+++ /dev/null
@@ -1,30 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import http from 'http';
-import type { AddressInfo } from 'net';
-import { test, expect } from './npmTest';
-
-test(`playwright cdn should race with a timeout`, async ({ exec }) => {
-  test.slow(); // This test will timeout on all the 3 fallback CDNs -> 30 seconds duration.
-  const server = http.createServer(() => {});
-  await new Promise<void>(resolve => server.listen(0, resolve));
-  try {
-    const result = await exec('npm i --foreground-scripts playwright', { env: { PLAYWRIGHT_DOWNLOAD_HOST: `http://127.0.0.1:${(server.address() as AddressInfo).port}`, DEBUG: 'pw:install' }, expectToExitWithError: true });
-    expect(result).toContain(`timed out after 10000ms`);
-  } finally {
-    await new Promise(resolve => server.close(resolve));
-  }
-});
diff --git a/tests/installation/playwright-test-should-handle-incorrect-cwd-casing.spec.ts b/tests/installation/playwright-test-should-handle-incorrect-cwd-casing.spec.ts
deleted file mode 100644
index 6099097191b4ae779f37a8aeb92c8ff5bdec2aa0..0000000000000000000000000000000000000000
--- a/tests/installation/playwright-test-should-handle-incorrect-cwd-casing.spec.ts
+++ /dev/null
@@ -1,41 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import fs from 'fs';
-import path from 'path';
-import { test, expect } from './npmTest';
-
-test('@playwright/test should handle incorrect cwd casing', async ({ exec, tmpWorkspace }) => {
-  test.skip(process.platform !== 'win32');
-  const cwd = path.join(tmpWorkspace, 'expectedcasing');
-  fs.mkdirSync(cwd);
-  fs.writeFileSync(path.join(cwd, 'sample.spec.ts'), `
-    import { test, expect } from '@playwright/test';
-    test('should pass', async () => {
-      expect(1 + 1).toBe(2);
-    })
-  `);
-  fs.writeFileSync(path.join(cwd, 'sample.spec.js'), `
-    const { test, expect } = require('@playwright/test');
-    test('should pass', async () => {
-      expect(1 + 1).toBe(2);
-    })
-  `);
-  await exec('npm init -y', { cwd });
-  await exec('npm i --foreground-scripts @playwright/test', { cwd });
-
-  const output = await exec('npx playwright test --reporter=list', { cwd: path.join(tmpWorkspace, 'eXpEcTeDcAsInG') });
-  expect(output).toContain('2 passed');
-});
diff --git a/tests/installation/playwright.config.ts b/tests/installation/playwright.config.ts
index c0f553e44ba7ff40a4e8963af5b1b903461a0708..712fa633dc228db8b699f2ca753c6a5e2c3baf83 100644
--- a/tests/installation/playwright.config.ts
+++ b/tests/installation/playwright.config.ts
@@ -27,7 +27,7 @@ const config: PlaywrightTestConfig = {
   timeout: 5 * 60 * 1000,
   retries: 0,
   reporter: process.env.CI ? [
-    ['list'],
+    ['dot'],
     ['json', { outputFile: path.join(outputDir, 'report.json') }],
   ] : [['list'], ['html', { open: 'on-failure' }]],
   forbidOnly: !!process.env.CI,
diff --git a/tests/library/browsercontext-dsf.spec.ts b/tests/library/browsercontext-dsf.spec.ts
index 7cd33e72c9869e7b58971ce936c2f7ad16a43781..de35de59b005cd4cae878a30199ea139d2892093 100644
--- a/tests/library/browsercontext-dsf.spec.ts
+++ b/tests/library/browsercontext-dsf.spec.ts
@@ -21,7 +21,7 @@ it('should fetch lodpi assets @smoke', async ({ contextFactory, server }) => {
     deviceScaleFactor: 1
   });
   const page = await context.newPage();
-  const [request] = await Promise.all([
+  const [ request ] = await Promise.all([
     page.waitForRequest('**/image*'),
     page.goto(server.PREFIX + '/highdpi.html'),
   ]);
@@ -33,7 +33,7 @@ it('should fetch hidpi assets', async ({ contextFactory, server }) => {
     deviceScaleFactor: 2
   });
   const page = await context.newPage();
-  const [request] = await Promise.all([
+  const [ request ] = await Promise.all([
     page.waitForRequest('**/image*'),
     page.goto(server.PREFIX + '/highdpi.html'),
   ]);
diff --git a/tests/library/browsercontext-fetch.spec.ts b/tests/library/browsercontext-fetch.spec.ts
index 55d3a64a649e7bf6d1f600e236d5d56b71798229..97d24c50acd6a0cbae34ea2f243b48799f9258ca 100644
--- a/tests/library/browsercontext-fetch.spec.ts
+++ b/tests/library/browsercontext-fetch.spec.ts
@@ -409,7 +409,7 @@ it('should return error with wrong credentials', async ({ context, server }) =>
   expect(response2.status()).toBe(401);
 });
 
-for (const method of ['delete', 'get', 'head', 'patch', 'post', 'put']) {
+for (const method of ['delete', 'patch', 'post', 'put']) {
   it(`${method} should support post data`, async ({ context, server }) => {
     const [request, response] = await Promise.all([
       server.waitForRequest('/simple.json'),
@@ -876,6 +876,16 @@ it('should throw nice error on unsupported data type', async function({ context,
   expect(error.message).toContain(`Unexpected 'data' type`);
 });
 
+it('should throw when data passed for unsupported request', async function({ context, server }) {
+  const error = await context.request.fetch(server.EMPTY_PAGE, {
+    method: 'GET',
+    data: {
+      foo: 'bar'
+    }
+  }).catch(e => e);
+  expect(error.message).toContain(`Method GET does not accept post data`);
+});
+
 it('context request should export same storage state as context', async ({ context, page, server }) => {
   server.setRoute('/setcookie.html', (req, res) => {
     res.setHeader('Set-Cookie', ['a=b', 'c=d']);
@@ -936,7 +946,7 @@ it('should abort requests when browser context closes', async ({ contextFactory,
     });
   });
   const context = await contextFactory();
-  const [error] = await Promise.all([
+  const [ error ] = await Promise.all([
     context.request.get(server.EMPTY_PAGE).catch(e => e),
     context.request.post(server.EMPTY_PAGE).catch(e => e),
     server.waitForRequest('/empty.html').then(() => context.close())
diff --git a/tests/library/browsercontext-page-event.spec.ts b/tests/library/browsercontext-page-event.spec.ts
index 7ee2fe6f3c159929784db791a70bd3ca1b8b2b94..cdfade1dfb543e45472e5c8a041062fd77672b5a 100644
--- a/tests/library/browsercontext-page-event.spec.ts
+++ b/tests/library/browsercontext-page-event.spec.ts
@@ -179,7 +179,7 @@ it('should work with Ctrl-clicking', async ({ browser, server, isMac, browserNam
   await page.setContent('<a href="/one-style.html">yo</a>');
   const [popup] = await Promise.all([
     context.waitForEvent('page'),
-    page.click('a', { modifiers: [isMac ? 'Meta' : 'Control'] }),
+    page.click('a', { modifiers: [ isMac ? 'Meta' : 'Control'] }),
   ]);
   expect(await popup.opener()).toBe(null);
   await context.close();
@@ -194,7 +194,7 @@ it('should not hang on ctrl-click during provisional load', async ({ context, pa
   server.setRoute('/slow.html', () => {});
   const [popup] = await Promise.all([
     context.waitForEvent('page'),
-    server.waitForRequest('/slow.html').then(() => page.click('a', { modifiers: [isMac ? 'Meta' : 'Control'] })),
+    server.waitForRequest('/slow.html').then(() => page.click('a', { modifiers: [ isMac ? 'Meta' : 'Control'] })),
     page.evaluate(url => setTimeout(() => location.href = url, 0), server.CROSS_PROCESS_PREFIX + '/slow.html'),
   ]);
   expect(popup).toBeTruthy();
diff --git a/tests/library/browsercontext-pages.spec.ts b/tests/library/browsercontext-pages.spec.ts
index 6a50c35447cced6d2e66c0fe6eca231c483f4adb..9a11382890d2c1f426c2508bd2c8901517189ca7 100644
--- a/tests/library/browsercontext-pages.spec.ts
+++ b/tests/library/browsercontext-pages.spec.ts
@@ -94,8 +94,8 @@ it('should click the button with offset with page scale', async ({ browser, serv
   const round = x => Math.round(x + 0.01);
   let expected = { x: 28, y: 18 };  // 20;10 + 8px of border in each direction
   if (browserName === 'webkit') {
-    // WebKit rounds down during css -> dip -> css conversion.
-    expected = { x: 26, y: 17 };
+    // WebKit rounds up during css -> dip -> css conversion.
+    expected = { x: 29, y: 19 };
   } else if (browserName === 'chromium' && headless) {
     // Headless Chromium rounds down during css -> dip -> css conversion.
     expected = { x: 27, y: 18 };
diff --git a/tests/library/browsertype-connect.spec.ts b/tests/library/browsertype-connect.spec.ts
index dcc0edb67325e6336ea4d055db07c9622d4121fb..47e0c4a0be2f57aa8dd445418eb8bb391e3f51da 100644
--- a/tests/library/browsertype-connect.spec.ts
+++ b/tests/library/browsertype-connect.spec.ts
@@ -26,7 +26,7 @@ import formidable from 'formidable';
 
 test.slow(true, 'All connect tests are slow');
 
-test('should connect over wss', async ({ browserType, startRemoteServer, httpsServer, mode }) => {
+test('should connect over wss', async ({ browserType , startRemoteServer, httpsServer, mode }) => {
   test.skip(mode !== 'default'); // Out of process transport does not allow us to set env vars dynamically.
   const remoteServer = await startRemoteServer();
 
@@ -422,7 +422,7 @@ test('should save download', async ({ server, browserType, startRemoteServer },
   const browser = await browserType.connect({ wsEndpoint: remoteServer.wsEndpoint() });
   const page = await browser.newPage();
   await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-  const [download] = await Promise.all([
+  const [ download ] = await Promise.all([
     page.waitForEvent('download'),
     page.click('a')
   ]);
@@ -446,7 +446,7 @@ test('should error when saving download after deletion', async ({ server, browse
   const browser = await browserType.connect({ wsEndpoint: remoteServer.wsEndpoint() });
   const page = await browser.newPage();
   await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-  const [download] = await Promise.all([
+  const [ download ] = await Promise.all([
     page.waitForEvent('download'),
     page.click('a')
   ]);
@@ -627,16 +627,4 @@ test('should upload large file', async ({ browserType, startRemoteServer, server
   await Promise.all([uploadFile, file1.filepath].map(fs.promises.unlink));
 });
 
-test('should connect when launching', async ({ browserType, startRemoteServer, httpsServer, mode }) => {
-  const remoteServer = await startRemoteServer();
-  (browserType as any)._defaultConnectOptions = {
-    wsEndpoint: remoteServer.wsEndpoint()
-  };
-
-  const browser = await browserType.launch();
 
-  await Promise.all([
-    new Promise(f => browser.on('disconnected', f)),
-    remoteServer.close(),
-  ]);
-});
diff --git a/tests/library/channels.spec.ts b/tests/library/channels.spec.ts
index 0e85787a830b9c232c557338365a5cbd62b5e12d..d45239df6b078d8beb1a5f9f86879eafb26620bb 100644
--- a/tests/library/channels.spec.ts
+++ b/tests/library/channels.spec.ts
@@ -21,7 +21,7 @@ import { playwrightTest, expect } from '../config/browserTest';
 // Use something worker-scoped (e.g. expectScopeState) forces a new worker for this file.
 // Otherwise, a browser launched for other tests in this worker will affect the expectations.
 const it = playwrightTest.extend<{}, { expectScopeState: (object: any, golden: any) => void }>({
-  expectScopeState: [async ({ toImplInWorkerScope }, use) => {
+  expectScopeState: [ async ({ toImplInWorkerScope }, use) => {
     await use((object, golden) => {
       golden = trimGuids(golden);
       const remoteRoot = toImplInWorkerScope();
@@ -53,14 +53,14 @@ it('should scope context handles', async ({ browserType, server, expectScopeStat
       { _guid: 'selectors', objects: [] },
     ]
   };
-  expectScopeState(browser, GOLDEN_PRECONDITION);
+  await expectScopeState(browser, GOLDEN_PRECONDITION);
 
   const context = await browser.newContext();
   const page = await context.newPage();
   // Firefox Beta 96 yields a console warning for the pages that
   // don't use `<!DOCTYPE HTML> tag.
   await page.goto(server.PREFIX + '/empty-standard-mode.html');
-  expectScopeState(browser, {
+  await expectScopeState(browser, {
     _guid: '',
     objects: [
       { _guid: 'android', objects: [] },
@@ -69,12 +69,12 @@ it('should scope context handles', async ({ browserType, server, expectScopeStat
       { _guid: 'browser-type', objects: [
         { _guid: 'browser', objects: [
           { _guid: 'browser-context', objects: [
-            { _guid: 'request', objects: [] },
-            { _guid: 'response', objects: [] },
             { _guid: 'page', objects: [
               { _guid: 'frame', objects: [] },
             ] },
+            { _guid: 'request', objects: [] },
             { _guid: 'request-context', objects: [] },
+            { _guid: 'response', objects: [] },
             { _guid: 'tracing', objects: [] }
           ] },
         ] },
@@ -87,7 +87,7 @@ it('should scope context handles', async ({ browserType, server, expectScopeStat
   });
 
   await context.close();
-  expectScopeState(browser, GOLDEN_PRECONDITION);
+  await expectScopeState(browser, GOLDEN_PRECONDITION);
   await browser.close();
 });
 
@@ -110,10 +110,10 @@ it('should scope CDPSession handles', async ({ browserType, browserName, expectS
       { _guid: 'selectors', objects: [] },
     ]
   };
-  expectScopeState(browserType, GOLDEN_PRECONDITION);
+  await expectScopeState(browserType, GOLDEN_PRECONDITION);
 
   const session = await browser.newBrowserCDPSession();
-  expectScopeState(browserType, {
+  await expectScopeState(browserType, {
     _guid: '',
     objects: [
       { _guid: 'android', objects: [] },
@@ -132,7 +132,7 @@ it('should scope CDPSession handles', async ({ browserType, browserName, expectS
   });
 
   await session.detach();
-  expectScopeState(browserType, GOLDEN_PRECONDITION);
+  await expectScopeState(browserType, GOLDEN_PRECONDITION);
 
   await browser.close();
 });
@@ -151,11 +151,11 @@ it('should scope browser handles', async ({ browserType, expectScopeState }) =>
       { _guid: 'selectors', objects: [] },
     ]
   };
-  expectScopeState(browserType, GOLDEN_PRECONDITION);
+  await expectScopeState(browserType, GOLDEN_PRECONDITION);
 
   const browser = await browserType.launch();
   await browser.newContext();
-  expectScopeState(browserType, {
+  await expectScopeState(browserType, {
     _guid: '',
     objects: [
       { _guid: 'android', objects: [] },
@@ -180,7 +180,7 @@ it('should scope browser handles', async ({ browserType, expectScopeState }) =>
   });
 
   await browser.close();
-  expectScopeState(browserType, GOLDEN_PRECONDITION);
+  await expectScopeState(browserType, GOLDEN_PRECONDITION);
 });
 
 it('should work with the domain module', async ({ browserType, server, browserName }) => {
diff --git a/tests/library/chromium/chromium.spec.ts b/tests/library/chromium/chromium.spec.ts
index 13aa59d625e4b730338f53fd6347944b30c4d337..86b899bebd9f40dbcdc5e23bbfab92da638c15f5 100644
--- a/tests/library/chromium/chromium.spec.ts
+++ b/tests/library/chromium/chromium.spec.ts
@@ -72,14 +72,14 @@ test('should emit new service worker on update', async ({ context, page, server
     res.end();
   });
 
-  const [sw] = await Promise.all([
+  const [ sw ] = await Promise.all([
     context.waitForEvent('serviceworker'),
     page.goto(server.PREFIX + '/home'),
   ]);
 
   await expect.poll(() => sw.evaluate(() => self['PW_VERSION'])).toBe(0);
 
-  const [updatedSW] = await Promise.all([
+  const [ updatedSW ] = await Promise.all([
     context.waitForEvent('serviceworker'),
     page.click('#update'),
   ]);
@@ -223,7 +223,7 @@ playwrightTest('should connectOverCDP and manage downloads in default context',
     const page = await browser.contexts()[0].newPage();
     await page.setContent(`<a href="${server.PREFIX}/downloadWithFilename">download</a>`);
 
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -692,7 +692,7 @@ test.describe('PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS=1', () => {
       })
     );
 
-    const [sw] = await Promise.all([
+    const [ sw ] = await Promise.all([
       context.waitForEvent('serviceworker'),
       context.waitForEvent('response', r => r.url().endsWith('/request-from-within-worker')),
       context.waitForEvent('request', r => r.url().endsWith('sw.js') && !!r.serviceWorker()),
@@ -752,7 +752,7 @@ test.describe('PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS=1', () => {
       })
     );
 
-    const [sw] = await Promise.all([
+    const [ sw ] = await Promise.all([
       context.waitForEvent('serviceworker'),
       context.waitForEvent('response', r => r.url().endsWith('/import.js')),
       page.goto(server.PREFIX + '/serviceworkers/empty/sw.html'),
@@ -787,7 +787,7 @@ test.describe('PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS=1', () => {
       })
     );
 
-    const [sw] = await Promise.all([
+    const [ sw ] = await Promise.all([
       context.waitForEvent('serviceworker'),
       context.waitForEvent('response', r => r.url().endsWith('/request-from-within-worker')),
       page.goto(server.PREFIX + '/serviceworkers/empty/sw.html'),
@@ -822,13 +822,13 @@ test.describe('PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS=1', () => {
       }
     });
 
-    const [sw] = await Promise.all([
+    const [ sw ] = await Promise.all([
       context.waitForEvent('serviceworker'),
       page.goto(server.PREFIX + '/serviceworkers/fetch/sw.html'),
     ]);
     await page.evaluate(() => window['activationPromise']);
     const response = await page.evaluate(() => fetch('/data.json').then(r => r.text()));
-    const [url] = await sw.evaluate(() => self['intercepted']);
+    const [ url ] = await sw.evaluate(() => self['intercepted']);
     expect(url).toMatch(/\/data\.json$/);
     expect(response).toBe('from sw');
   });
@@ -873,7 +873,7 @@ test.describe('PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS=1', () => {
     page.on('request', r => requests.push(['page', r]));
     context.on('request', r => requests.push(['context', r]));
 
-    const [sw] = await Promise.all([
+    const [ sw ] = await Promise.all([
       context.waitForEvent('serviceworker'),
       page.goto(server.PREFIX + '/index.html'),
     ]);
@@ -966,7 +966,7 @@ test.describe('PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS=1', () => {
     page.on('request', r => requests.push(['page', r]));
     context.on('request', r => requests.push(['context', r]));
 
-    const [sw] = await Promise.all([
+    const [ sw ] = await Promise.all([
       context.waitForEvent('serviceworker'),
       page.goto(server.PREFIX + '/index.html'),
     ]);
@@ -996,7 +996,7 @@ test.describe('PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS=1', () => {
           '| [`event: Page.request`]           | [Frame]          | tracker.js                     |        | Yes                                    |',
           '| [`event: BrowserContext.request`] | Service [Worker] | fallthrough.txt                | Yes    |                                        |',
           '| [`event: BrowserContext.request`] | [Frame]          | fallthrough.txt                |        | Yes                                    |',
-          '| [`event: Page.request`]           | [Frame]          | fallthrough.txt                |        | Yes                                    |']);
+          '| [`event: Page.request`]           | [Frame]          | fallthrough.txt                |        | Yes                                    |'  ]);
   });
 
   test('should intercept service worker update requests', async ({ context, page, server }) => {
@@ -1035,7 +1035,7 @@ test.describe('PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS=1', () => {
       res.end();
     });
 
-    const [sw] = await Promise.all([
+    const [ sw ] = await Promise.all([
       context.waitForEvent('serviceworker'),
       page.goto(server.PREFIX + '/home'),
     ]);
@@ -1051,7 +1051,7 @@ test.describe('PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS=1', () => {
       });
     });
 
-    const [updatedSW] = await Promise.all([
+    const [ updatedSW ] = await Promise.all([
       context.waitForEvent('serviceworker'),
       // currently times out here
       context.waitForEvent('request', r => r.url().endsWith('worker.js')),
@@ -1069,7 +1069,7 @@ test.describe('PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS=1', () => {
 
     await page.evaluate(() => window['activationPromise']);
     await context.setOffline(true);
-    const [, error] = await Promise.all([
+    const [,error] = await Promise.all([
       context.waitForEvent('request', r => r.url().endsWith('/inner.txt') && !!r.serviceWorker()),
       worker.evaluate(() => fetch('/inner.txt').catch(e => `REJECTED: ${e}`)),
     ]);
diff --git a/tests/library/chromium/session.spec.ts b/tests/library/chromium/session.spec.ts
index eb611b8cda362288161c74c53712835ea6e2d887..4d3a3dec3f9e91c70ccab26bfc8164b52b707eb6 100644
--- a/tests/library/chromium/session.spec.ts
+++ b/tests/library/chromium/session.spec.ts
@@ -141,9 +141,7 @@ browserTest('should work with newBrowserCDPSession', async function({ browser })
   let gotEvent = false;
   session.on('Target.targetCreated', () => gotEvent = true);
   await session.send('Target.setDiscoverTargets', { discover: true });
-  const page = await browser.newPage();
   expect(gotEvent).toBe(true);
-  await page.close();
 
   await session.detach();
 });
diff --git a/tests/library/defaultbrowsercontext-1.spec.ts b/tests/library/defaultbrowsercontext-1.spec.ts
index 9d922fa931726d31237afee313cac124a41cfed7..ba3db711173dabb16ae19ca4d12a86b3d2112d44 100644
--- a/tests/library/defaultbrowsercontext-1.spec.ts
+++ b/tests/library/defaultbrowsercontext-1.spec.ts
@@ -180,7 +180,7 @@ it('should support acceptDownloads option', async ({ server, launchPersistent, m
     res.end(`Hello world`);
   });
   await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-  const [download] = await Promise.all([
+  const [ download ] = await Promise.all([
     page.waitForEvent('download'),
     page.click('a')
   ]);
diff --git a/tests/library/defaultbrowsercontext-2.spec.ts b/tests/library/defaultbrowsercontext-2.spec.ts
index 06fed51e38034f055f7169b8083b6cb917e77631..b48b1834c03163178aef29cf338030d5ea28a6f1 100644
--- a/tests/library/defaultbrowsercontext-2.spec.ts
+++ b/tests/library/defaultbrowsercontext-2.spec.ts
@@ -46,6 +46,7 @@ it('should support reducedMotion option', async ({ launchPersistent }) => {
 });
 
 it('should support forcedColors option', async ({ launchPersistent, browserName }) => {
+  it.skip(browserName === 'webkit', 'https://bugs.webkit.org/show_bug.cgi?id=225281');
   const { page } = await launchPersistent({ forcedColors: 'active' });
   expect(await page.evaluate(() => matchMedia('(forced-colors: active)').matches)).toBe(true);
   expect(await page.evaluate(() => matchMedia('(forced-colors: none)').matches)).toBe(false);
@@ -159,7 +160,7 @@ it('should have passed URL when launching with ignoreDefaultArgs: true', async (
   await browserContext.close();
 });
 
-it('should handle timeout', async ({ browserType, createUserDataDir, mode }) => {
+it('should handle timeout', async ({ browserType,createUserDataDir, mode }) => {
   it.skip(mode !== 'default');
 
   const options: any = { timeout: 5000, __testHookBeforeCreateBrowser: () => new Promise(f => setTimeout(f, 6000)) };
@@ -167,7 +168,7 @@ it('should handle timeout', async ({ browserType, createUserDataDir, mode }) =>
   expect(error.message).toContain(`browserType.launchPersistentContext: Timeout 5000ms exceeded.`);
 });
 
-it('should handle exception', async ({ browserType, createUserDataDir, mode }) => {
+it('should handle exception', async ({ browserType,createUserDataDir, mode }) => {
   it.skip(mode !== 'default');
 
   const e = new Error('Dummy');
@@ -214,7 +215,7 @@ it('should respect selectors', async ({ playwright, launchPersistent }) => {
   expect(await page.innerHTML('defaultContextCSS=div')).toBe('hello');
 });
 
-it('should connect to a browser with the default page', async ({ browserType, createUserDataDir, mode }) => {
+it('should connect to a browser with the default page', async ({ browserType,createUserDataDir, mode }) => {
   it.skip(mode !== 'default');
 
   const options: any = { __testHookOnConnectToBrowser: () => new Promise(f => setTimeout(f, 3000)) };
diff --git a/tests/library/download.spec.ts b/tests/library/download.spec.ts
index 4df67752dc98f6b70024d4ebe611b69e68ca3cf0..0b9ceb2579cbda98e84682311e2da86f48a1d78e 100644
--- a/tests/library/download.spec.ts
+++ b/tests/library/download.spec.ts
@@ -52,7 +52,7 @@ it.describe('download event', () => {
 
   it('should report download when navigation turns into download @smoke', async ({ browser, server, browserName }) => {
     const page = await browser.newPage();
-    const [download, responseOrError] = await Promise.all([
+    const [ download, responseOrError ] = await Promise.all([
       page.waitForEvent('download'),
       page.goto(server.PREFIX + '/download').catch(e => e)
     ]);
@@ -70,15 +70,15 @@ it.describe('download event', () => {
       expect(responseOrError.message).toContain('Download is starting');
       expect(page.url()).toBe('about:blank');
     } else {
-      expect(responseOrError instanceof Error).toBeTruthy();
-      expect(responseOrError.message).toContain('Download is starting');
+      expect(responseOrError.status()).toBe(200);
+      expect(page.url()).toBe(server.PREFIX + '/download');
     }
     await page.close();
   });
 
   it('should work with Cross-Origin-Opener-Policy', async ({ browser, server, browserName }) => {
     const page = await browser.newPage();
-    const [download, responseOrError] = await Promise.all([
+    const [ download, responseOrError ] = await Promise.all([
       page.waitForEvent('download'),
       page.goto(server.PREFIX + '/downloadWithCOOP').catch(e => e)
     ]);
@@ -96,8 +96,8 @@ it.describe('download event', () => {
       expect(responseOrError.message).toContain('Download is starting');
       expect(page.url()).toBe('about:blank');
     } else {
-      expect(responseOrError instanceof Error).toBeTruthy();
-      expect(responseOrError.message).toContain('Download is starting');
+      expect(responseOrError.status()).toBe(200);
+      expect(page.url()).toBe(server.PREFIX + '/downloadWithCOOP');
     }
     await page.close();
   });
@@ -105,7 +105,7 @@ it.describe('download event', () => {
   it('should report downloads with acceptDownloads: false', async ({ browser, server }) => {
     const page = await browser.newPage({ acceptDownloads: false });
     await page.setContent(`<a href="${server.PREFIX}/downloadWithFilename">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -122,7 +122,7 @@ it.describe('download event', () => {
   it('should report downloads with acceptDownloads: true', async ({ browser, server }) => {
     const page = await browser.newPage();
     await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -136,7 +136,7 @@ it.describe('download event', () => {
     const page = await browser.newPage();
     await page.goto(server.PREFIX + '/empty.html');
     await page.setContent(`<a href="${server.PREFIX}/chromium-linux.zip" download="foo.zip">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -148,7 +148,7 @@ it.describe('download event', () => {
     const page = await browser.newPage();
     await page.goto(server.PREFIX + '/empty.html');
     await page.setContent(`<a href="${server.PREFIX}/chromium-linux.zip" download="foo.zip">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -161,7 +161,7 @@ it.describe('download event', () => {
   it('should save to user-specified path without updating original path', async ({ browser, server }, testInfo) => {
     const page = await browser.newPage();
     await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -179,7 +179,7 @@ it.describe('download event', () => {
   it('should save to two different paths with multiple saveAs calls', async ({ browser, server }, testInfo) => {
     const page = await browser.newPage();
     await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -198,7 +198,7 @@ it.describe('download event', () => {
   it('should save to overwritten filepath', async ({ browser, server }, testInfo) => {
     const page = await browser.newPage();
     await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -216,7 +216,7 @@ it.describe('download event', () => {
   it('should create subdirectories when saving to non-existent user-specified path', async ({ browser, server }, testInfo) => {
     const page = await browser.newPage();
     await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -230,7 +230,7 @@ it.describe('download event', () => {
   it('should error when saving with downloads disabled', async ({ browser, server }, testInfo) => {
     const page = await browser.newPage({ acceptDownloads: false });
     await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -243,7 +243,7 @@ it.describe('download event', () => {
   it('should error when saving after deletion', async ({ browser, server }, testInfo) => {
     const page = await browser.newPage();
     await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -264,7 +264,7 @@ it.describe('download event', () => {
     const page = await browser.newPage();
     await page.goto(server.EMPTY_PAGE);
     await page.setContent(`<a download="file.txt" href="${server.PREFIX}/download">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -316,7 +316,7 @@ it.describe('download event', () => {
     const page = await browser.newPage();
     await page.goto(server.EMPTY_PAGE);
     await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a', { modifiers: ['Alt'] })
     ]);
@@ -329,7 +329,7 @@ it.describe('download event', () => {
   it('should report new window downloads', async ({ browser, server }) => {
     const page = await browser.newPage();
     await page.setContent(`<a target=_blank href="${server.PREFIX}/download">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -341,7 +341,7 @@ it.describe('download event', () => {
   it('should delete file', async ({ browser, server }) => {
     const page = await browser.newPage();
     await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -355,7 +355,7 @@ it.describe('download event', () => {
   it('should expose stream', async ({ browser, server }) => {
     const page = await browser.newPage();
     await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -370,11 +370,11 @@ it.describe('download event', () => {
   it('should delete downloads on context destruction', async ({ browser, server }) => {
     const page = await browser.newPage();
     await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-    const [download1] = await Promise.all([
+    const [ download1 ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
-    const [download2] = await Promise.all([
+    const [ download2 ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -391,11 +391,11 @@ it.describe('download event', () => {
     const browser = await browserType.launch();
     const page = await browser.newPage();
     await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-    const [download1] = await Promise.all([
+    const [ download1 ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
-    const [download2] = await Promise.all([
+    const [ download2 ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -501,7 +501,7 @@ it.describe('download event', () => {
     const page = await browser.newPage();
     await page.goto(server.PREFIX + '/empty.html');
     await page.setContent(`<a href="${server.PREFIX}/binary.zip" download="binary.zip">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -527,7 +527,7 @@ it.describe('download event', () => {
     it.fixme(browserName === 'chromium' && Number(browserVersion.split('.')[0]) < 91, 'The upstream Browser.cancelDownload command is not available before Chrome 91');
     const page = await browser.newPage();
     await page.setContent(`<a href="${server.PREFIX}/downloadWithDelay">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -542,7 +542,7 @@ it.describe('download event', () => {
     it.fixme(browserName === 'chromium' && Number(browserVersion.split('.')[0]) < 91, 'The upstream Browser.cancelDownload command is not available before Chrome 91');
     const page = await browser.newPage();
     await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -559,7 +559,7 @@ it.describe('download event', () => {
     const page = await browser.newPage();
     await page.route(/.*/, r => r.continue());
     await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -613,7 +613,7 @@ it('should be able to download a PDF file', async ({ browser, server, asset }) =
   await page.close();
 });
 
-it('should be able to download a inline PDF file via response interception', async ({ browser, server, asset, browserName }) => {
+it('should be able to download a inline PDF file', async ({ browser, server, asset, browserName }) => {
   it.fixme(browserName === 'webkit');
   const page = await browser.newPage();
   await page.goto(server.EMPTY_PAGE);
@@ -638,21 +638,6 @@ it('should be able to download a inline PDF file via response interception', asy
   await page.close();
 });
 
-it('should be able to download a inline PDF file via navigation', async ({ browser, server, asset, browserName }) => {
-  it.fixme(browserName === 'chromium' || browserName === 'webkit');
-  const page = await browser.newPage();
-  await page.goto(server.EMPTY_PAGE);
-  await page.setContent(`
-    <a href="/empty.pdf">open</a>
-  `);
-  const [download] = await Promise.all([
-    page.waitForEvent('download'),
-    page.click('a'),
-  ]);
-  await assertDownloadToPDF(download, asset('empty.pdf'));
-  await page.close();
-});
-
 it('should save to user-specified path', async ({ browser, server, mode }, testInfo) => {
   server.setRoute('/download', (req, res) => {
     res.setHeader('Content-Type', 'application/octet-stream');
@@ -662,7 +647,7 @@ it('should save to user-specified path', async ({ browser, server, mode }, testI
 
   const page = await browser.newPage();
   await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-  const [download] = await Promise.all([
+  const [ download ] = await Promise.all([
     page.waitForEvent('download'),
     page.click('a')
   ]);
diff --git a/tests/library/downloads-path.spec.ts b/tests/library/downloads-path.spec.ts
index c8484f903cdbf364bcd1ede00dc4b857d234bbc6..fca8b248054a227296fb649e049b0a78f09f817f 100644
--- a/tests/library/downloads-path.spec.ts
+++ b/tests/library/downloads-path.spec.ts
@@ -33,7 +33,7 @@ it.describe('downloads path', () => {
     const downloadsBrowser = await browserType.launch({ downloadsPath: testInfo.outputPath('') });
     const page = await downloadsBrowser.newPage();
     await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -49,7 +49,7 @@ it.describe('downloads path', () => {
     const downloadsBrowser = await browserType.launch({ downloadsPath: testInfo.outputPath('') });
     const page = await downloadsBrowser.newPage();
     await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -64,7 +64,7 @@ it.describe('downloads path', () => {
     const downloadsBrowser = await browserType.launch({ downloadsPath: testInfo.outputPath('') });
     const page = await downloadsBrowser.newPage();
     await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -78,7 +78,7 @@ it.describe('downloads path', () => {
     const downloadsBrowser = await browserType.launch({ downloadsPath: path.relative(process.cwd(), testInfo.outputPath('')) });
     const page = await downloadsBrowser.newPage();
     await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a')
     ]);
@@ -91,7 +91,7 @@ it.describe('downloads path', () => {
   it('should accept downloads in persistent context', async ({ launchPersistent, server }, testInfo)  => {
     const { context, page } = await launchPersistent({ downloadsPath: testInfo.outputPath('') });
     await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a'),
     ]);
@@ -105,7 +105,7 @@ it.describe('downloads path', () => {
   it('should delete downloads when persistent context closes', async ({ launchPersistent, server }, testInfo) => {
     const { context, page } = await launchPersistent({ downloadsPath: testInfo.outputPath('') });
     await page.setContent(`<a href="${server.PREFIX}/download">download</a>`);
-    const [download] = await Promise.all([
+    const [ download ] = await Promise.all([
       page.waitForEvent('download'),
       page.click('a'),
     ]);
diff --git a/tests/library/emulation-focus.spec.ts b/tests/library/emulation-focus.spec.ts
index d81506b5b97e938174478e413d8e629534f7304f..f6a9d6547bf88455f92dbfcd36c04205cb628136 100644
--- a/tests/library/emulation-focus.spec.ts
+++ b/tests/library/emulation-focus.spec.ts
@@ -81,7 +81,7 @@ it('should not affect mouse event target page', async ({ page, server }) => {
     page.evaluate('window.clickCount'),
     page2.evaluate('window.clickCount'),
   ]);
-  expect(counters).toEqual([1, 1]);
+  expect(counters).toEqual([1,1]);
 });
 
 it('should change document.activeElement', async ({ page, server }) => {
diff --git a/tests/library/global-fetch.spec.ts b/tests/library/global-fetch.spec.ts
index 6e20f171ae8c9d373db9d9de01c038b495476525..f62880dd67a56382baf9ea785849389441f743a7 100644
--- a/tests/library/global-fetch.spec.ts
+++ b/tests/library/global-fetch.spec.ts
@@ -383,40 +383,3 @@ it('should return body for failing requests', async ({ playwright, server }) =>
   }
   await request.dispose();
 });
-
-it('should throw an error when maxRedirects is exceeded', async ({ playwright, server }) => {
-  server.setRedirect('/a/redirect1', '/b/c/redirect2');
-  server.setRedirect('/b/c/redirect2', '/b/c/redirect3');
-  server.setRedirect('/b/c/redirect3', '/b/c/redirect4');
-  server.setRedirect('/b/c/redirect4', '/simple.json');
-
-  const request = await playwright.request.newContext();
-  for (const method of ['GET', 'PUT', 'POST', 'OPTIONS', 'HEAD', 'PATCH']) {
-    for (const maxRedirects of [1, 2, 3])
-      await expect(async () => request.fetch(`${server.PREFIX}/a/redirect1`, { method: method, maxRedirects: maxRedirects })).rejects.toThrow('Max redirect count exceeded');
-  }
-  await request.dispose();
-});
-
-it('should not follow redirects when maxRedirects is set to 0', async ({ playwright, server }) => {
-  server.setRedirect('/a/redirect1', '/b/c/redirect2');
-  server.setRedirect('/b/c/redirect2', '/simple.json');
-
-  const request = await playwright.request.newContext();
-  for (const method of ['GET', 'PUT', 'POST', 'OPTIONS', 'HEAD', 'PATCH']){
-    const response = await request.fetch(`${server.PREFIX}/a/redirect1`, { method, maxRedirects: 0 });
-    expect(response.headers()['location']).toBe('/b/c/redirect2');
-    expect(response.status()).toBe(302);
-  }
-  await request.dispose();
-});
-
-it('should throw an error when maxRedirects is less than 0', async ({ playwright, server }) => {
-  server.setRedirect('/a/redirect1', '/b/c/redirect2');
-  server.setRedirect('/b/c/redirect2', '/simple.json');
-
-  const request = await playwright.request.newContext();
-  for (const method of ['GET', 'PUT', 'POST', 'OPTIONS', 'HEAD', 'PATCH'])
-    await expect(async () => request.fetch(`${server.PREFIX}/a/redirect1`, { method, maxRedirects: -1 })).rejects.toThrow(`'maxRedirects' should be greater than or equal to '0'`);
-  await request.dispose();
-});
\ No newline at end of file
diff --git a/tests/library/har.spec.ts b/tests/library/har.spec.ts
index 74a2ce537b59dc8132737dd894c383b28e24e954..da05fc0d955bfb83a73b595c3945a2b2c315526d 100644
--- a/tests/library/har.spec.ts
+++ b/tests/library/har.spec.ts
@@ -256,32 +256,6 @@ it('should include secure set-cookies', async ({ contextFactory, httpsServer },
   expect(cookies[0]).toEqual({ name: 'name1', value: 'value1', secure: true });
 });
 
-it('should record request overrides', async ({ contextFactory, server }, testInfo) => {
-  const { page, getLog } = await pageWithHar(contextFactory, testInfo);
-  page.route('**/foo', route => {
-    route.fallback({
-      url: server.EMPTY_PAGE,
-      method: 'POST',
-      headers: {
-        ...route.request().headers(),
-        'content-type': 'text/plain',
-        'cookie': 'foo=bar',
-        'custom': 'value'
-      },
-      postData: 'Hi!'
-    });
-  });
-
-  await page.goto(server.PREFIX + '/foo');
-  const log = await getLog();
-  const request = log.entries[0].request;
-  expect(request.url).toBe(server.EMPTY_PAGE);
-  expect(request.method).toBe('POST');
-  expect(request.headers).toContainEqual({ name: 'custom', value: 'value' });
-  expect(request.cookies).toContainEqual({ name: 'foo', value: 'bar' });
-  expect(request.postData).toEqual({ 'mimeType': 'text/plain', 'params': [], 'text': 'Hi!' });
-});
-
 it('should include content @smoke', async ({ contextFactory, server }, testInfo) => {
   const { page, getLog } = await pageWithHar(contextFactory, testInfo);
   await page.goto(server.PREFIX + '/har.html');
@@ -435,7 +409,7 @@ it('should have -1 _transferSize when its a failed request', async ({ contextFac
   const { page, getLog } = await pageWithHar(contextFactory, testInfo);
   server.setRoute('/one-style.css', (req, res) => {
     res.setHeader('Content-Type', 'text/css');
-    res.socket.destroy();
+    res.connection.destroy();
   });
   const failedRequests = [];
   page.on('requestfailed', request => failedRequests.push(request));
@@ -445,49 +419,6 @@ it('should have -1 _transferSize when its a failed request', async ({ contextFac
   expect(log.entries[1].response._transferSize).toBe(-1);
 });
 
-it('should record failed request headers', async ({ contextFactory, server }, testInfo) => {
-  const { page, getLog } = await pageWithHar(contextFactory, testInfo);
-  server.setRoute('/har.html', (req, res) => {
-    res.socket.destroy();
-  });
-  await page.goto(server.PREFIX + '/har.html').catch(() => {});
-  const log = await getLog();
-  expect(log.entries[0].response._failureText).toBeTruthy();
-  const request = log.entries[0].request;
-  expect(request.url.endsWith('/har.html')).toBe(true);
-  expect(request.method).toBe('GET');
-  expect(request.headers).toContainEqual(expect.objectContaining({ name: 'User-Agent' }));
-});
-
-it('should record failed request overrides', async ({ contextFactory, server }, testInfo) => {
-  const { page, getLog } = await pageWithHar(contextFactory, testInfo);
-  server.setRoute('/empty.html', (req, res) => {
-    res.socket.destroy();
-  });
-  await page.route('**/foo', route => {
-    route.fallback({
-      url: server.EMPTY_PAGE,
-      method: 'POST',
-      headers: {
-        ...route.request().headers(),
-        'content-type': 'text/plain',
-        'cookie': 'foo=bar',
-        'custom': 'value'
-      },
-      postData: 'Hi!'
-    });
-  });
-  await page.goto(server.PREFIX + '/foo').catch(() => {});
-  const log = await getLog();
-  expect(log.entries[0].response._failureText).toBeTruthy();
-  const request = log.entries[0].request;
-  expect(request.url).toBe(server.EMPTY_PAGE);
-  expect(request.method).toBe('POST');
-  expect(request.headers).toContainEqual({ name: 'custom', value: 'value' });
-  expect(request.cookies).toContainEqual({ name: 'foo', value: 'bar' });
-  expect(request.postData).toEqual({ 'mimeType': 'text/plain', 'params': [], 'text': 'Hi!' });
-});
-
 it('should report the correct request body size', async ({ contextFactory, server }, testInfo) => {
   server.setRoute('/api', (req, res) => res.end());
   const { page, getLog } = await pageWithHar(contextFactory, testInfo);
@@ -625,7 +556,7 @@ it('should have connection details for redirects', async ({ contextFactory, serv
 it('should have connection details for failed requests', async ({ contextFactory, server, browserName, platform, mode }, testInfo) => {
   server.setRoute('/one-style.css', (_, res) => {
     res.setHeader('Content-Type', 'text/css');
-    res.socket.destroy();
+    res.connection.destroy();
   });
   const { page, getLog } = await pageWithHar(contextFactory, testInfo);
   await page.goto(server.PREFIX + '/one-style.html');
diff --git a/tests/library/hit-target.spec.ts b/tests/library/hit-target.spec.ts
index 45859eb59af5682bea43ea3d0cfe1ed563dc9c41..2825296e6f1f3e5b78a573b3a6d5336c50b261d7 100644
--- a/tests/library/hit-target.spec.ts
+++ b/tests/library/hit-target.spec.ts
@@ -15,7 +15,6 @@
  */
 
 import { contextTest as it, expect } from '../config/browserTest';
-import type { ElementHandle } from 'playwright-core';
 
 declare const renderComponent;
 declare const e;
@@ -274,91 +273,3 @@ it('should not click an element overlaying iframe with the target', async ({ pag
   await target.click();
   expect(await page.evaluate('window._clicked')).toBe(3);
 });
-
-it('should click into frame inside closed shadow root', async ({ page, server }) => {
-  await page.goto(server.EMPTY_PAGE);
-  await page.setContent(`
-    <div id=framecontainer>
-    </div>
-    <script>
-      const iframe = document.createElement('iframe');
-      iframe.setAttribute('name', 'myframe');
-      iframe.setAttribute('srcdoc', '<div onclick="window.top.__clicked = true">click me</div>');
-      const div = document.getElementById('framecontainer');
-      const host = div.attachShadow({ mode: 'closed' });
-      host.appendChild(iframe);
-    </script>
-  `);
-
-  const frame = page.frame({ name: 'myframe' });
-  await frame.locator('text=click me').click();
-  expect(await page.evaluate('window.__clicked')).toBe(true);
-});
-
-it('should click an element inside closed shadow root', async ({ page, server }) => {
-  await page.goto(server.EMPTY_PAGE);
-  await page.setContent(`
-    <div id=container>
-    </div>
-    <script>
-      const span = document.createElement('span');
-      span.textContent = 'click me';
-      span.addEventListener('click', () => window.__clicked = true);
-      const div = document.getElementById('container');
-      const host = div.attachShadow({ mode: 'closed' });
-      host.appendChild(span);
-      window.__target = span;
-    </script>
-  `);
-
-  const handle = await page.evaluateHandle('window.__target');
-  await (handle as any as ElementHandle).click();
-  expect(await page.evaluate('window.__clicked')).toBe(true);
-});
-
-it('should detect overlay from another shadow root', async ({ page, server }) => {
-  await page.goto(server.EMPTY_PAGE);
-  await page.setContent(`
-    <style>
-      div > div {
-        position: absolute;
-        top: 0;
-        left: 0;
-        width: 10px;
-        height: 10px;
-      }
-      span {
-        display: block;
-        position: absolute;
-        left: 0;
-        top: 0;
-        width: 300px;
-        height: 300px;
-      }
-    </style>
-    <div style="position:relative; width:300px; height:300px">
-      <div id=container1></div>
-      <div id=container2></div>
-    </div>
-    <script>
-      for (const id of ['container1', 'container2']) {
-        const span = document.createElement('span');
-        span.id = id + '-span';
-        span.textContent = 'click me';
-        span.style.display = 'block';
-        span.style.position = 'absolute';
-        span.style.left = '20px';
-        span.style.top = '20px';
-        span.style.width = '300px';
-        span.style.height = '300px';
-        span.addEventListener('click', () => window.__clicked = id);
-        const div = document.getElementById(id);
-        const host = div.attachShadow({ mode: 'open' });
-        host.appendChild(span);
-      }
-    </script>
-  `);
-
-  const error = await page.locator('#container1 >> text=click me').click({ timeout: 2000 }).catch(e => e);
-  expect(error.message).toContain(`<div id="container2"></div> intercepts pointer events`);
-});
diff --git a/tests/library/ignorehttpserrors.spec.ts b/tests/library/ignorehttpserrors.spec.ts
index 5f52b1c9401c675fc1760374a99035f9e75b7cbb..02ccf3af772c5dcdc4bf843a7946b477724b859a 100644
--- a/tests/library/ignorehttpserrors.spec.ts
+++ b/tests/library/ignorehttpserrors.spec.ts
@@ -53,7 +53,7 @@ it('should work with mixed content', async ({ browser, server, httpsServer }) =>
   });
   const context = await browser.newContext({ ignoreHTTPSErrors: true });
   const page = await context.newPage();
-  await page.goto(httpsServer.PREFIX + '/mixedcontent.html', { waitUntil: 'load' });
+  await page.goto(httpsServer.PREFIX + '/mixedcontent.html', { waitUntil: 'domcontentloaded' });
   expect(page.frames().length).toBe(2);
   // Make sure blocked iframe has functional execution context
   // @see https://github.com/GoogleChrome/puppeteer/issues/2709
diff --git a/tests/library/inspector/cli-codegen-1.spec.ts b/tests/library/inspector/cli-codegen-1.spec.ts
index 28662b91fb6c4ac23ff0d84758e7f513a931f7d0..fbb8c611035775c1509fef2544213ca146ca23fe 100644
--- a/tests/library/inspector/cli-codegen-1.spec.ts
+++ b/tests/library/inspector/cli-codegen-1.spec.ts
@@ -268,13 +268,18 @@ test.describe('cli codegen', () => {
     const selector = await recorder.focusElement('input');
     expect(selector).toBe('input[name="name"]');
 
+    async function inputText(text: string) {
+      await recorder.page.dispatchEvent(selector, 'keydown', { key: 'Process' });
+      await recorder.page.keyboard.insertText(text);
+      await recorder.page.dispatchEvent(selector, 'keyup', { key: 'Process' });
+    }
     const [message, sources] = await Promise.all([
       page.waitForEvent('console', msg => msg.type() !== 'error'),
       recorder.waitForOutput('JavaScript', 'fill'),
       (async () => {
-        await recorder.page.dispatchEvent(selector, 'keydown', { key: 'Process' });
-        await recorder.page.keyboard.insertText('ã¦ãã¨');
-        await recorder.page.dispatchEvent(selector, 'keyup', { key: 'Process' });
+        await inputText('ã¦');
+        await inputText('ã');
+        await inputText('ã¨');
       })()
     ]);
     expect(sources.get('JavaScript').text).toContain(`
diff --git a/tests/library/inspector/cli-codegen-2.spec.ts b/tests/library/inspector/cli-codegen-2.spec.ts
index 0720ba563e11ac16d8d62dd07af15deecbc7f288..18398dedeeddea5e875dcdd2f3fb2403987ac9d4 100644
--- a/tests/library/inspector/cli-codegen-2.spec.ts
+++ b/tests/library/inspector/cli-codegen-2.spec.ts
@@ -370,7 +370,7 @@ test.describe('cli codegen', () => {
     const selector = await recorder.hoverOverElement('a');
     expect(selector).toBe('text=link');
 
-    await page.click('a', { modifiers: [platform === 'darwin' ? 'Meta' : 'Control'] });
+    await page.click('a', { modifiers: [ platform === 'darwin' ? 'Meta' : 'Control'] });
     const sources = await recorder.waitForOutput('JavaScript', 'page1');
 
     if (browserName !== 'firefox') {
@@ -465,7 +465,7 @@ test.describe('cli codegen', () => {
     const recorder = await openRecorder();
 
     await recorder.setContentAndWait(`<input id="checkbox" type="checkbox" name="accept" onchange="checkbox.name='updated'"></input>`);
-    const [models] = await Promise.all([
+    const [ models ] = await Promise.all([
       recorder.waitForActionPerformed(),
       page.click('input')
     ]);
@@ -477,7 +477,7 @@ test.describe('cli codegen', () => {
 
     const recorder = await openRecorder();
     await recorder.setContentAndWait(`<input id="checkbox" type="checkbox" name="accept" onchange="checkbox.name='updated'"></input>`);
-    const [models] = await Promise.all([
+    const [ models ] = await Promise.all([
       recorder.waitForActionPerformed(),
       page.click('input')
     ]);
diff --git a/tests/library/inspector/cli-codegen-csharp.spec.ts b/tests/library/inspector/cli-codegen-csharp.spec.ts
index 78e47e0ad617151f2a539655bb3084d85fcce666..3c22373a1acddcdd99610b37a5bd29638c3cb3c1 100644
--- a/tests/library/inspector/cli-codegen-csharp.spec.ts
+++ b/tests/library/inspector/cli-codegen-csharp.spec.ts
@@ -193,81 +193,3 @@ test('should work with --save-har', async ({ runCLI }, testInfo) => {
   const json = JSON.parse(fs.readFileSync(harFileName, 'utf-8'));
   expect(json.log.creator.name).toBe('Playwright');
 });
-
-for (const testFramework of ['nunit', 'mstest'] as const) {
-  test(`should not print context options method override in ${testFramework} if no options were passed`, async ({ runCLI }) => {
-    const cli = runCLI([`--target=csharp-${testFramework}`, emptyHTML]);
-    await cli.waitFor(`Page.GotoAsync("${emptyHTML}")`);
-    expect(cli.text()).not.toContain('public override BrowserNewContextOptions ContextOptions()');
-  });
-
-  test(`should print context options method override in ${testFramework} if options were passed`, async ({ runCLI }) => {
-    const cli = runCLI([`--target=csharp-${testFramework}`, '--color-scheme=dark', emptyHTML]);
-    await cli.waitFor(`Page.GotoAsync("${emptyHTML}")`);
-    expect(cli.text()).toContain(`    public override BrowserNewContextOptions ContextOptions()
-    {
-        return new BrowserNewContextOptions
-        {
-            ColorScheme = ColorScheme.Dark,
-        };
-    }
-`);
-  });
-}
-
-test(`should print a valid basic program in mstest`, async ({ runCLI }) => {
-  const cli = runCLI([`--target=csharp-mstest`, '--color-scheme=dark', emptyHTML]);
-  await cli.waitFor(`Page.GotoAsync("${emptyHTML}")`);
-  const expected = `using Microsoft.Playwright.MSTest;
-using Microsoft.Playwright;
-
-[TestClass]
-public class Tests : PageTest
-{
-    public override BrowserNewContextOptions ContextOptions()
-    {
-        return new BrowserNewContextOptions
-        {
-            ColorScheme = ColorScheme.Dark,
-        };
-    }
-
-    [PlaywrightTestMethod]
-    public async Task MyTest()
-    {
-        // Go to ${emptyHTML}
-        await Page.GotoAsync("${emptyHTML}");
-
-    }
-}`;
-  expect(cli.text()).toContain(expected);
-});
-
-test(`should print a valid basic program in nunit`, async ({ runCLI }) => {
-  const cli = runCLI([`--target=csharp-nunit`, '--color-scheme=dark', emptyHTML]);
-  await cli.waitFor(`Page.GotoAsync("${emptyHTML}")`);
-  const expected = `using Microsoft.Playwright.NUnit;
-using Microsoft.Playwright;
-
-[Parallelizable(ParallelScope.Self)]
-[TestFixture]
-public class Tests : PageTest
-{
-    public override BrowserNewContextOptions ContextOptions()
-    {
-        return new BrowserNewContextOptions
-        {
-            ColorScheme = ColorScheme.Dark,
-        };
-    }
-
-    [PlaywrightTest]
-    public async Task MyTest()
-    {
-        // Go to ${emptyHTML}
-        await Page.GotoAsync("${emptyHTML}");
-
-    }
-}`;
-  expect(cli.text()).toContain(expected);
-});
diff --git a/tests/library/inspector/inspectorTest.ts b/tests/library/inspector/inspectorTest.ts
index 6e683372308b1c9e4bfc1d1cc05f5d859e19bc8d..fe88e18d6dd5f6df1597b1a3ac21ad003c144914 100644
--- a/tests/library/inspector/inspectorTest.ts
+++ b/tests/library/inspector/inspectorTest.ts
@@ -28,19 +28,6 @@ type CLITestArgs = {
   runCLI: (args: string[], options?: { noAutoExit?: boolean }) => CLIMock;
 };
 
-const codegenLang2Id: Map<string, string> = new Map([
-  ['JavaScript', 'javascript'],
-  ['Java', 'java'],
-  ['Python', 'python'],
-  ['Python Async', 'python-async'],
-  ['Pytest', 'pytest'],
-  ['C#', 'csharp'],
-  ['C# NUnit', 'csharp-nunit'],
-  ['C# MSTest', 'csharp-mstest'],
-  ['Playwright Test', 'test'],
-]);
-const codegenLangId2lang = new Map([...codegenLang2Id.entries()].map(([lang, langId]) => [langId, lang]));
-
 const playwrightToAutomateInspector = require('../../../packages/playwright-core/lib/inProcessFactory').createInProcessPlaywright();
 
 export const test = contextTest.extend<CLITestArgs>({
@@ -128,19 +115,14 @@ class Recorder {
   }
 
   async waitForOutput(file: string, text: string): Promise<Map<string, Source>> {
-    if (!codegenLang2Id.has(file))
-      throw new Error(`Unknown language: ${file}`);
-    const handle = await this.recorderPage.waitForFunction((params: { text: string, languageId: string }) => {
+    const handle = await this.recorderPage.waitForFunction((params: { text: string, file: string }) => {
       const w = window as any;
-      const source = (w.playwrightSourcesEchoForTest || []).find((s: Source) => s.id === params.languageId);
+      const source = (w.playwrightSourcesEchoForTest || []).find((s: Source) => s.file === params.file);
       return source && source.text.includes(params.text) ? w.playwrightSourcesEchoForTest : null;
-    }, { text, languageId: codegenLang2Id.get(file) }, { timeout: 8000, polling: 300 });
+    }, { text, file }, { timeout: 8000, polling: 300 });
     const sources: Source[] = await handle.jsonValue();
-    for (const source of sources) {
-      if (!codegenLangId2lang.has(source.id))
-        throw new Error(`Unknown language: ${source.id}`);
-      this._sources.set(codegenLangId2lang.get(source.id), source);
-    }
+    for (const source of sources)
+      this._sources.set(source.file, source);
     return this._sources;
   }
 
diff --git a/tests/library/screenshot.spec.ts b/tests/library/screenshot.spec.ts
index 87e6f7da177507865dfbe9299d42152d48754f21..fb70b50ae3e61cc2753910fd8dcd6f29557220e0 100644
--- a/tests/library/screenshot.spec.ts
+++ b/tests/library/screenshot.spec.ts
@@ -108,27 +108,6 @@ browserTest.describe('page screenshot', () => {
     await context.close();
   });
 
-  browserTest('should throw if screenshot size is too large with device scale factor', async ({ browser, browserName, isMac }) => {
-    browserTest.info().annotations.push({ type: 'issue', description: 'https://github.com/microsoft/playwright/issues/16727' });
-    const context = await browser.newContext({ viewport: { width: 500, height: 500 }, deviceScaleFactor: 2 });
-    const page = await context.newPage();
-    {
-      await page.setContent(`<style>body {margin: 0; padding: 0;}</style><div style='min-height: 16383px; background: red;'></div>`);
-      const result = await page.screenshot({ fullPage: true });
-      expect(result).toBeTruthy();
-    }
-    {
-      await page.setContent(`<style>body {margin: 0; padding: 0;}</style><div style='min-height: 16384px; background: red;'></div>`);
-      const exception = await page.screenshot({ fullPage: true }).catch(e => e);
-      if (browserName === 'firefox' || (browserName === 'webkit' && !isMac))
-        expect(exception.message).toContain('Cannot take screenshot larger than 32767');
-
-      const image = await page.screenshot({ fullPage: true, scale: 'css' });
-      expect(image).toBeTruthy();
-    }
-    await context.close();
-  });
-
   browserTest('should work with large size', async ({ browserName, headless, platform, contextFactory }) => {
     browserTest.fixme(browserName === 'chromium' && !headless && platform === 'linux', 'Chromium has gpu problems on linux with large screnshots');
     browserTest.slow(true, 'Large screenshot is slow');
diff --git a/tests/library/trace-viewer.spec.ts b/tests/library/trace-viewer.spec.ts
index 635ecbe69478247222ec6d9337382f0dbe1cbcf4..2e17aeea5bd51fb45e373c06b4427eb35f63546c 100644
--- a/tests/library/trace-viewer.spec.ts
+++ b/tests/library/trace-viewer.spec.ts
@@ -57,7 +57,6 @@ test.beforeAll(async function recordTrace({ browser, browserName, browserType, s
 
   await Promise.all([
     page.waitForNavigation(),
-    page.waitForResponse(server.PREFIX + '/frames/frame.html'),
     page.waitForTimeout(200).then(() => page.goto(server.PREFIX + '/frames/frame.html'))
   ]);
   await page.setViewportSize({ width: 500, height: 600 });
@@ -89,7 +88,6 @@ test('should open simple trace viewer', async ({ showTraceViewer }) => {
     /page.evaluate/,
     /page.click"Click"/,
     /page.waitForNavigation/,
-    /page.waitForResponse/,
     /page.waitForTimeout/,
     /page.gotohttp:\/\/localhost:\d+\/frames\/frame.html/,
     /page.setViewportSize/,
@@ -635,77 +633,3 @@ test('should open two trace files', async ({ context, page, request, server, sho
   await expect(callLine.locator('text=events')).toHaveText(/events: [\d]+/);
 });
 
-test('should include requestUrl in route.fulfill', async ({ page, runAndTrace, browserName }) => {
-  await page.route('**/*', route => {
-    route.fulfill({
-      status: 200,
-      headers: {
-        'content-type': 'text/html'
-      },
-      body: 'Hello there!'
-    });
-  });
-  const traceViewer = await runAndTrace(async () => {
-    await page.goto('http://test.com');
-  });
-
-  // Render snapshot, check expectations.
-  await traceViewer.selectAction('route.fulfill');
-  await traceViewer.page.locator('.tab-label', { hasText: 'Call' }).click();
-  const callLine = traceViewer.page.locator('.call-line');
-  await expect(callLine.locator('text=status')).toContainText('200');
-  await expect(callLine.locator('text=requestUrl')).toContainText('http://test.com');
-});
-
-test('should include requestUrl in route.continue', async ({ page, runAndTrace, server }) => {
-  await page.route('**/*', route => {
-    route.continue({ url: server.EMPTY_PAGE });
-  });
-  const traceViewer = await runAndTrace(async () => {
-    await page.goto('http://test.com');
-  });
-
-  // Render snapshot, check expectations.
-  await traceViewer.selectAction('route.continue');
-  await traceViewer.page.locator('.tab-label', { hasText: 'Call' }).click();
-  const callLine = traceViewer.page.locator('.call-line');
-  await expect(callLine.locator('text=requestUrl')).toContainText('http://test.com');
-  await expect(callLine.locator('text=/^url: .*/')).toContainText(server.EMPTY_PAGE);
-});
-
-test('should include requestUrl in route.abort', async ({ page, runAndTrace, server }) => {
-  await page.route('**/*', route => {
-    route.abort();
-  });
-  const traceViewer = await runAndTrace(async () => {
-    await page.goto('http://test.com').catch(() => {});
-  });
-
-  // Render snapshot, check expectations.
-  await traceViewer.selectAction('route.abort');
-  await traceViewer.page.locator('.tab-label', { hasText: 'Call' }).click();
-  const callLine = traceViewer.page.locator('.call-line');
-  await expect(callLine.locator('text=requestUrl')).toContainText('http://test.com');
-});
-
-test('should serve overridden request', async ({ page, runAndTrace, server }) => {
-  server.setRoute('/custom.css', (req, res) => {
-    res.writeHead(200, {
-      'Content-Type': 'text/css',
-    });
-    res.end(`body { background: red }`);
-  });
-  await page.route('**/one-style.css', route => {
-    route.continue({
-      url: server.PREFIX + '/custom.css'
-    });
-  });
-  const traceViewer = await runAndTrace(async () => {
-    await page.goto(server.PREFIX + '/one-style.html');
-  });
-  // Render snapshot, check expectations.
-  const snapshotFrame = await traceViewer.snapshotFrame('page.goto');
-  const color = await snapshotFrame.locator('body').evaluate(body => getComputedStyle(body).backgroundColor);
-  expect(color).toBe('rgb(255, 0, 0)');
-});
-
diff --git a/tests/page/elementhandle-convenience.spec.ts b/tests/page/elementhandle-convenience.spec.ts
index e57d2552ec7e06e7afad34fcf3ff77c4e1a8d93e..315bb5040e7e5e3eef3283fdcf27ac1537653137 100644
--- a/tests/page/elementhandle-convenience.spec.ts
+++ b/tests/page/elementhandle-convenience.spec.ts
@@ -58,6 +58,13 @@ it('inputValue should work', async ({ page, server }) => {
   expect(await handle2.inputValue().catch(e => e.message)).toContain('Node is not an <input>, <textarea> or <select> element');
 });
 
+it('inputValue should work on label', async ({ page, server }) => {
+  await page.setContent(`<label><input type=text></input></label>`);
+  await page.fill('input', 'foo');
+  const handle = await page.$('label');
+  expect(await handle.inputValue()).toBe('foo');
+});
+
 it('innerHTML should work', async ({ page, server }) => {
   await page.goto(`${server.PREFIX}/dom.html`);
   const handle = await page.$('#outer');
@@ -107,6 +114,22 @@ it('isVisible and isHidden should work', async ({ page }) => {
   expect(await page.isHidden('no-such-element')).toBe(true);
 });
 
+it('element state checks should work for label with zero-sized input', async ({ page, server }) => {
+  await page.setContent(`
+    <label>
+      Click me
+      <input disabled style="width:0;height:0;padding:0;margin:0;border:0;">
+    </label>
+  `);
+  // Visible checks the label.
+  expect(await page.isVisible('text=Click me')).toBe(true);
+  expect(await page.isHidden('text=Click me')).toBe(false);
+
+  // Enabled checks the input.
+  expect(await page.isEnabled('text=Click me')).toBe(false);
+  expect(await page.isDisabled('text=Click me')).toBe(true);
+});
+
 it('isVisible should not throw when the DOM element is not connected', async ({ page }) => {
   await page.setContent(`<div id="root"></div>`);
   await page.evaluate(() => {
diff --git a/tests/page/elementhandle-wait-for-element-state.spec.ts b/tests/page/elementhandle-wait-for-element-state.spec.ts
index 1dc17b409b05b7c00769a734faf086b8ff18c3b3..fbc5300671f50652642391c3d129294ee316eca4 100644
--- a/tests/page/elementhandle-wait-for-element-state.spec.ts
+++ b/tests/page/elementhandle-wait-for-element-state.spec.ts
@@ -83,6 +83,17 @@ it('should wait for hidden when detached', async ({ page }) => {
   await promise;
 });
 
+it('should wait for enabled button', async ({ page, server }) => {
+  await page.setContent('<button disabled><span>Target</span></button>');
+  const span = await page.$('text=Target');
+  let done = false;
+  const promise = span.waitForElementState('enabled').then(() => done = true);
+  await giveItAChanceToResolve(page);
+  expect(done).toBe(false);
+  await span.evaluate(span => (span.parentElement as HTMLButtonElement).disabled = false);
+  await promise;
+});
+
 it('should throw waiting for enabled when detached', async ({ page }) => {
   await page.setContent(`<button disabled>Target</button>`);
   const button = await page.$('button');
@@ -92,6 +103,17 @@ it('should throw waiting for enabled when detached', async ({ page }) => {
   expect(error.message).toContain('Element is not attached to the DOM');
 });
 
+it('should wait for button with a disabled fieldset', async ({ page }) => {
+  await page.setContent('<fieldset disabled=true><button><span>Target</span></button></div>');
+  const span = await page.$('text=Target');
+  let done = false;
+  const promise = span.waitForElementState('enabled').then(() => done = true);
+  await giveItAChanceToResolve(page);
+  expect(done).toBe(false);
+  await span.evaluate(span => (span.parentElement.parentElement as HTMLFieldSetElement).disabled = false);
+  await promise;
+});
+
 it('should wait for aria enabled button', async ({ page }) => {
   await page.setContent('<button aria-disabled=true><span>Target</span></button>');
   const span = await page.$('text=Target');
@@ -114,6 +136,17 @@ it('should wait for button with an aria-disabled parent', async ({ page }) => {
   await promise;
 });
 
+it('should wait for disabled button', async ({ page }) => {
+  await page.setContent('<button><span>Target</span></button>');
+  const span = await page.$('text=Target');
+  let done = false;
+  const promise = span.waitForElementState('disabled').then(() => done = true);
+  await giveItAChanceToResolve(page);
+  expect(done).toBe(false);
+  await span.evaluate(span => (span.parentElement as HTMLButtonElement).disabled = true);
+  await promise;
+});
+
 it('should wait for stable position', async ({ page, server, browserName, platform }) => {
   it.fixme(browserName === 'firefox' && platform === 'linux');
 
diff --git a/tests/page/expect-boolean.spec.ts b/tests/page/expect-boolean.spec.ts
deleted file mode 100644
index 205183aff37267442426f9c4c70db9a89e4c7a58..0000000000000000000000000000000000000000
--- a/tests/page/expect-boolean.spec.ts
+++ /dev/null
@@ -1,439 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import { test, expect } from './pageTest';
-
-test.describe('toBeChecked', () => {
-  test('default', async ({ page }) => {
-    await page.setContent('<input type=checkbox checked></input>');
-    const locator = page.locator('input');
-    await expect(locator).toBeChecked();
-  });
-
-  test('with checked:true', async ({ page }) => {
-    await page.setContent('<input type=checkbox checked></input>');
-    const locator = page.locator('input');
-    await expect(locator).toBeChecked({ checked: true });
-  });
-
-  test('with checked:false', async ({ page }) => {
-    await page.setContent('<input type=checkbox checked></input>');
-    const locator = page.locator('input');
-    await expect(locator).not.toBeChecked({ checked: false });
-  });
-
-  test('fail', async ({ page }) => {
-    await page.setContent('<input type=checkbox></input>');
-    const locator = page.locator('input');
-    const error = await expect(locator).toBeChecked({ timeout: 1000 }).catch(e => e);
-    expect(error.message).toContain(`expect.toBeChecked with timeout 1000ms`);
-  });
-
-  test('with not', async ({ page }) => {
-    await page.setContent('<input type=checkbox></input>');
-    const locator = page.locator('input');
-    await expect(locator).not.toBeChecked();
-  });
-
-  test('with not and checked:false', async ({ page }) => {
-    await page.setContent('<input type=checkbox></input>');
-    const locator = page.locator('input');
-    await expect(locator).toBeChecked({ checked: false });
-  });
-
-  test('fail with not', async ({ page }) => {
-    await page.setContent('<input type=checkbox checked></input>');
-    const locator = page.locator('input');
-    const error = await expect(locator).not.toBeChecked({ timeout: 1000 }).catch(e => e);
-    expect(error.message).toContain(`expect.toBeChecked with timeout 1000ms`);
-    expect(error.message).toContain(`selector resolved to <input checked type="checkbox"/>`);
-  });
-
-  test('fail with checked:false', async ({ page }) => {
-    await page.setContent('<input type=checkbox checked></input>');
-    const locator = page.locator('input');
-    const error = await expect(locator).toBeChecked({ checked: false, timeout: 1000 }).catch(e => e);
-    expect(error.message).toContain(`expect.toBeChecked with timeout 1000ms`);
-  });
-
-  test('fail missing', async ({ page }) => {
-    await page.setContent('<div>no inputs here</div>');
-    const locator2 = page.locator('input2');
-    const error = await expect(locator2).not.toBeChecked({ timeout: 1000 }).catch(e => e);
-    expect(error.message).toContain(`expect.toBeChecked with timeout 1000ms`);
-    expect(error.message).toContain('waiting for selector "input2"');
-  });
-});
-
-test.describe('toBeEditable', () => {
-  test('default', async ({ page }) => {
-    await page.setContent('<input></input>');
-    const locator = page.locator('input');
-    await expect(locator).toBeEditable();
-  });
-
-  test('with not', async ({ page }) => {
-    await page.setContent('<input readonly></input>');
-    const locator = page.locator('input');
-    await expect(locator).not.toBeEditable();
-  });
-
-  test('with editable:true', async ({ page }) => {
-    await page.setContent('<input></input>');
-    const locator = page.locator('input');
-    await expect(locator).toBeEditable({ editable: true });
-  });
-
-  test('with editable:false', async ({ page }) => {
-    await page.setContent('<input readonly></input>');
-    const locator = page.locator('input');
-    await expect(locator).toBeEditable({ editable: false });
-  });
-
-  test('with not and editable:false', async ({ page }) => {
-    await page.setContent('<input></input>');
-    const locator = page.locator('input');
-    await expect(locator).not.toBeEditable({ editable: false });
-  });
-});
-
-test.describe('toBeEnabled', () => {
-  test('default', async ({ page }) => {
-    await page.setContent('<button>Text</button>');
-    const locator = page.locator('button');
-    await expect(locator).toBeEnabled();
-  });
-
-  test('with enabled:true', async ({ page }) => {
-    await page.setContent('<button>Text</button>');
-    const locator = page.locator('button');
-    await expect(locator).toBeEnabled({ enabled: true });
-  });
-
-  test('with enabled:false', async ({ page }) => {
-    await page.setContent('<button disabled>Text</button>');
-    const locator = page.locator('button');
-    await expect(locator).toBeEnabled({ enabled: false });
-  });
-
-  test('failed', async ({ page }) => {
-    await page.setContent('<button disabled>Text</button>');
-    const locator = page.locator('button');
-    const error = await expect(locator).toBeEnabled({ timeout: 1000 }).catch(e => e);
-    expect(error.message).toContain(`selector resolved to <button disabled>Text</button>`);
-  });
-
-  test('eventually', async ({ page }) => {
-    await page.setContent('<button disabled>Text</button>');
-    const locator = page.locator('button');
-    setTimeout(() => {
-      locator.evaluate(e => e.removeAttribute('disabled')).catch(() => {});
-    }, 500);
-    await expect(locator).toBeEnabled();
-  });
-
-  test('eventually with not', async ({ page }) => {
-    await page.setContent('<button>Text</button>');
-    const locator = page.locator('button');
-    setTimeout(() => {
-      locator.evaluate(e => e.setAttribute('disabled', '')).catch(() => {});
-    }, 500);
-    await expect(locator).not.toBeEnabled();
-  });
-
-  test('with not and enabled:false', async ({ page }) => {
-    await page.setContent('<button>Text</button>');
-    const locator = page.locator('button');
-    await expect(locator).not.toBeEnabled({ enabled: false });
-  });
-
-  test('toBeDisabled', async ({ page }) => {
-    await page.setContent('<button disabled>Text</button>');
-    const locator = page.locator('button');
-    await expect(locator).toBeDisabled();
-  });
-});
-
-test('toBeEmpty input', async ({ page }) => {
-  await page.setContent('<input></input>');
-  const locator = page.locator('input');
-  await expect(locator).toBeEmpty();
-});
-
-test('not.toBeEmpty', async ({ page }) => {
-  await page.setContent('<input value=text></input>');
-  const locator = page.locator('input');
-  await expect(locator).not.toBeEmpty();
-});
-
-test('toBeEmpty div', async ({ page }) => {
-  await page.setContent('<div style="width: 50; height: 50px"></div>');
-  const locator = page.locator('div');
-  await expect(locator).toBeEmpty();
-});
-
-test('toBeDisabled with value', async ({ page }) => {
-  await page.setContent('<button disabled="yes">Text</button>');
-  const locator = page.locator('button');
-  await expect(locator).toBeDisabled();
-});
-
-test('toBeChecked with value', async ({ page }) => {
-  await page.setContent('<input type=checkbox checked="yes"></input>');
-  const locator = page.locator('input');
-  await expect(locator).toBeChecked();
-});
-
-test('toBeHidden with value', async ({ page }) => {
-  await page.setContent('<input type=checkbox hidden="of course"></input>');
-  const locator = page.locator('input');
-  await expect(locator).toBeHidden();
-});
-
-test('not.toBeDisabled div', async ({ page }) => {
-  await page.setContent('<div disabled="yes"></div>');
-  const locator = page.locator('div');
-  await expect(locator).not.toBeDisabled();
-});
-
-test.describe('toBeVisible', () => {
-  test('default', async ({ page }) => {
-    await page.setContent('<input></input>');
-    const locator = page.locator('input');
-    await expect(locator).toBeVisible();
-  });
-
-  test('with not', async ({ page }) => {
-    await page.setContent('<button style="display: none">hello</button>');
-    const locator = page.locator('button');
-    await expect(locator).not.toBeVisible();
-  });
-
-  test('with visible:true', async ({ page }) => {
-    await page.setContent('<button>hello</button>');
-    const locator = page.locator('button');
-    await expect(locator).toBeVisible({ visible: true });
-  });
-
-  test('with visible:false', async ({ page }) => {
-    await page.setContent('<button hidden>hello</button>');
-    const locator = page.locator('button');
-    await expect(locator).toBeVisible({ visible: false });
-  });
-
-  test('with not and visible:false', async ({ page }) => {
-    await page.setContent('<button>hello</button>');
-    const locator = page.locator('button');
-    await expect(locator).not.toBeVisible({ visible: false });
-  });
-
-  test('eventually', async ({ page }) => {
-    await page.setContent('<div></div>');
-    const locator = page.locator('span');
-    setTimeout(() => {
-      page.$eval('div', div => div.innerHTML = '<span>Hello</span>').catch(() => {});
-    }, 0);
-    await expect(locator).toBeVisible();
-  });
-
-  test('eventually with not', async ({ page }) => {
-    await page.setContent('<div><span>Hello</span></div>');
-    const locator = page.locator('span');
-    setTimeout(() => {
-      page.$eval('span', span => span.textContent = '').catch(() => {});
-    }, 0);
-    await expect(locator).not.toBeVisible();
-  });
-
-  test('fail', async ({ page }) => {
-    await page.setContent('<button style="display: none"></button>');
-    const locator = page.locator('button');
-    const error = await expect(locator).toBeVisible({ timeout: 1000 }).catch(e => e);
-    expect(error.message).toContain(`selector resolved to <button></button>`);
-  });
-
-  test('fail with not', async ({ page }) => {
-    await page.setContent('<input></input>');
-    const locator = page.locator('input');
-    const error = await expect(locator).not.toBeVisible({ timeout: 1000 }).catch(e => e);
-    expect(error.message).toContain(`selector resolved to <input/>`);
-  });
-});
-
-test.describe('toBeHidden', () => {
-  test('default', async ({ page }) => {
-    await page.setContent('<button style="display: none"></button>');
-    const locator = page.locator('button');
-    await expect(locator).toBeHidden();
-  });
-
-  test('when nothing matches', async ({ page }) => {
-    await page.setContent('<div></div>');
-    const locator = page.locator('button');
-    await expect(locator).toBeHidden();
-  });
-
-  test('with not', async ({ page }) => {
-    await page.setContent('<input></input>');
-    const locator = page.locator('input');
-    await expect(locator).not.toBeHidden();
-  });
-
-  test('eventually with not', async ({ page }) => {
-    await page.setContent('<div></div>');
-    const locator = page.locator('span');
-    setTimeout(() => {
-      page.$eval('div', div => div.innerHTML = '<span>Hello</span>').catch(() => {});
-    }, 0);
-    await expect(locator).not.toBeHidden();
-  });
-
-  test('eventually', async ({ page }) => {
-    await page.setContent('<div><span>Hello</span></div>');
-    const locator = page.locator('span');
-    setTimeout(() => {
-      page.$eval('span', span => span.textContent = '').catch(() => {});
-    }, 0);
-    await expect(locator).toBeHidden();
-  });
-
-  test('fail', async ({ page }) => {
-    await page.setContent('<input></input>');
-    const locator = page.locator('input');
-    const error = await expect(locator).toBeHidden({ timeout: 1000 }).catch(e => e);
-    expect(error.message).toContain(`selector resolved to <input/>`);
-  });
-
-  test('fail with not', async ({ page }) => {
-    await page.setContent('<button style="display: none"></button>');
-    const locator = page.locator('button');
-    const error = await expect(locator).not.toBeHidden({ timeout: 1000 }).catch(e => e);
-    expect(error.message).toContain(`selector resolved to <button></button>`);
-  });
-
-  test('fail with not when nothing matching', async ({ page }) => {
-    await page.setContent('<div></div>');
-    const locator = page.locator('button');
-    const error = await expect(locator).not.toBeHidden({ timeout: 1000 }).catch(e => e);
-    expect(error.message).toContain(`expect.toBeHidden with timeout 1000ms`);
-  });
-});
-
-test('toBeFocused', async ({ page }) => {
-  await page.setContent('<input></input>');
-  const locator = page.locator('input');
-  await locator.focus();
-  await expect(locator).toBeFocused();
-});
-
-test('toBeFocused with shadow elements', async ({ page }) => {
-  await page.setContent(`
-    <div id="app">
-    </div>
-    <script>
-      const root = document.querySelector('div');
-      const shadowRoot = root.attachShadow({ mode: 'open' });
-      const input = document.createElement('input');
-      input.id = "my-input"
-      shadowRoot.appendChild(input);
-    </script>
-  `);
-
-  await page.locator('input').focus();
-  expect(await page.evaluate(() => document.activeElement.shadowRoot.activeElement.id)).toBe('my-input');
-  await expect(page.locator('#app')).toBeFocused();
-  await expect(page.locator('input')).toBeFocused();
-});
-
-test('should print unknown engine error', async ({ page }) => {
-  const error = await expect(page.locator('row="row"')).toBeVisible().catch(e => e);
-  expect(error.message).toContain(`Unknown engine "row" while parsing selector row="row"`);
-});
-
-test('should print selector syntax error', async ({ page }) => {
-  const error = await expect(page.locator('row]')).toBeVisible().catch(e => e);
-  expect(error.message).toContain(`Unexpected token "]" while parsing selector "row]"`);
-});
-
-test.describe(() => {
-  test.skip(({ isAndroid }) => isAndroid, 'server.EMPTY_PAGE is the emulator address 10.0.2.2');
-  test.skip(({ isElectron }) => isElectron, 'Protocol error (Storage.getCookies): Browser context management is not supported.');
-
-  test('toBeOK', async ({ page, server }) => {
-    const res = await page.request.get(server.EMPTY_PAGE);
-    await expect(res).toBeOK();
-  });
-
-  test('not.toBeOK', async ({ page, server }) => {
-    const res = await page.request.get(`${server.PREFIX}/unknown`);
-    await expect(res).not.toBeOK();
-  });
-
-
-  test('toBeOK fail with invalid argument', async ({ page }) => {
-    const error = await (expect(page) as any).toBeOK().catch(e => e);
-    expect(error.message).toContain('toBeOK can be only used with APIResponse object');
-  });
-
-  test('toBeOK fail with promise', async ({ page, server }) => {
-    const res = page.request.get(server.EMPTY_PAGE).catch(e => {});
-    const error = await (expect(res) as any).toBeOK().catch(e => e);
-    expect(error.message).toContain('toBeOK can be only used with APIResponse object');
-  });
-
-  test.describe('toBeOK should print response with text content type when fails', () => {
-    test.beforeEach(async ({ server }) => {
-      server.setRoute('/text-content-type', (req, res) => {
-        res.statusCode = 404;
-        res.setHeader('Content-type', 'text/plain');
-        res.end('Text error');
-      });
-      server.setRoute('/no-content-type', (req, res) => {
-        res.statusCode = 404;
-        res.end('No content type error');
-      });
-      server.setRoute('/binary-content-type', (req, res) => {
-        res.statusCode = 404;
-        res.setHeader('Content-type', 'image/bmp');
-        res.end('Image content type error');
-      });
-    });
-
-    test('text content type', async ({ page, server }) => {
-      const res = await page.request.get(`${server.PREFIX}/text-content-type`);
-      const error = await expect(res).toBeOK().catch(e => e);
-      expect(error.message).toContain(`â GET ${server.PREFIX}/text-content-type`);
-      expect(error.message).toContain(`â 404 Not Found`);
-      expect(error.message).toContain(`Text error`);
-    });
-
-    test('no content type', async ({ page, server }) => {
-      const res = await page.request.get(`${server.PREFIX}/no-content-type`);
-      const error = await expect(res).toBeOK().catch(e => e);
-      expect(error.message).toContain(`â GET ${server.PREFIX}/no-content-type`);
-      expect(error.message).toContain(`â 404 Not Found`);
-      expect(error.message).not.toContain(`No content type error`);
-    });
-
-    test('image content type', async ({ page, server }) => {
-      const res = await page.request.get(`${server.PREFIX}/image-content-type`);
-      const error = await expect(res).toBeOK().catch(e => e);
-      expect(error.message).toContain(`â GET ${server.PREFIX}/image-content-type`);
-      expect(error.message).toContain(`â 404 Not Found`);
-      expect(error.message).not.toContain(`Image content type error`);
-    });
-  });
-});
diff --git a/tests/page/expect-misc.spec.ts b/tests/page/expect-misc.spec.ts
deleted file mode 100644
index 67848bd41998f81dc20d731cc47d910b97e96df1..0000000000000000000000000000000000000000
--- a/tests/page/expect-misc.spec.ts
+++ /dev/null
@@ -1,269 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import { test, expect } from './pageTest';
-
-test.describe('toHaveCount', () => {
-  test('toHaveCount pass', async ({ page }) => {
-    await page.setContent('<select><option>One</option></select>');
-    const locator = page.locator('option');
-    let done = false;
-    const promise = expect(locator).toHaveCount(2).then(() => { done = true; });
-    await page.waitForTimeout(1000);
-    expect(done).toBe(false);
-    await page.setContent('<select><option>One</option><option>Two</option></select>');
-    await promise;
-    expect(done).toBe(true);
-  });
-
-  test('pass zero', async ({ page }) => {
-    await page.setContent('<div></div>');
-    const locator = page.locator('span');
-    await expect(locator).toHaveCount(0);
-    await expect(locator).not.toHaveCount(1);
-  });
-
-  test('eventually pass zero', async ({ page }) => {
-    await page.setContent('<div><span>hello</span></div>');
-    const locator = page.locator('span');
-    setTimeout(() => page.evaluate(() => document.querySelector('div').textContent = '').catch(() => {}), 200);
-    await expect(locator).toHaveCount(0);
-    await expect(locator).not.toHaveCount(1);
-  });
-
-  test('eventually pass non-zero', async ({ page }) => {
-    await page.setContent('<ul></ul>');
-    setTimeout(async () => {
-      await page.setContent('<ul><li>one</li><li>two</li></ul>');
-    }, 500);
-    const locator = page.locator('li');
-    await expect(locator).toHaveCount(2);
-  });
-
-  test('eventually pass not non-zero', async ({ page }) => {
-    await page.setContent('<ul><li>one</li><li>two</li></ul>');
-    setTimeout(async () => {
-      await page.setContent('<ul></ul>');
-    }, 500);
-    const locator = page.locator('li');
-    await expect(locator).not.toHaveCount(2);
-  });
-
-  test('fail zero', async ({ page }) => {
-    await page.setContent('<div><span></span></div>');
-    const locator = page.locator('span');
-    const error = await expect(locator).toHaveCount(0, { timeout: 1000 }).catch(e => e);
-    expect(error.message).toContain('expect.toHaveCount with timeout 1000ms');
-  });
-
-  test('fail zero 2', async ({ page }) => {
-    await page.setContent('<div><span></span></div>');
-    const locator = page.locator('span');
-    const error = await expect(locator).not.toHaveCount(1, { timeout: 1000 }).catch(e => e);
-    expect(error.message).toContain('expect.toHaveCount with timeout 1000ms');
-  });
-});
-
-test.describe('toHaveJSProperty', () => {
-  test('pass', async ({ page }) => {
-    await page.setContent('<div></div>');
-    await page.$eval('div', e => (e as any).foo = { a: 1, b: 'string', c: new Date(1627503992000) });
-    const locator = page.locator('div');
-    await expect(locator).toHaveJSProperty('foo', { a: 1, b: 'string', c: new Date(1627503992000) });
-  });
-
-  test('fail', async ({ page }) => {
-    await page.setContent('<div></div>');
-    await page.$eval('div', e => (e as any).foo = { a: 1, b: 'string', c: new Date(1627503992000) });
-    const locator = page.locator('div');
-    const error = await expect(locator).toHaveJSProperty('foo', { a: 1, b: 'string', c: new Date(1627503992001) }, { timeout: 1000 }).catch(e => e);
-    expect(error.message).toContain(`-   "c"`);
-  });
-
-  test('pass string', async ({ page }) => {
-    await page.setContent('<div></div>');
-    await page.$eval('div', e => (e as any).foo = 'string');
-    const locator = page.locator('div');
-    await expect(locator).toHaveJSProperty('foo', 'string');
-  });
-
-  test('fail string', async ({ page }) => {
-    await page.setContent('<div></div>');
-    await page.$eval('div', e => (e as any).foo = 'string');
-    const locator = page.locator('div');
-    const error = await expect(locator).toHaveJSProperty('foo', 'error', { timeout: 200 }).catch(e => e);
-    expect(error.message).toContain(`expect.toHaveJSProperty with timeout 200ms`);
-  });
-
-  test('pass number', async ({ page }) => {
-    await page.setContent('<div></div>');
-    await page.$eval('div', e => (e as any).foo = 2021);
-    const locator = page.locator('div');
-    await expect(locator).toHaveJSProperty('foo', 2021);
-  });
-
-  test('fail number', async ({ page }) => {
-    await page.setContent('<div></div>');
-    await page.$eval('div', e => (e as any).foo = 2021);
-    const locator = page.locator('div');
-    const error = await expect(locator).toHaveJSProperty('foo', 1, { timeout: 200 }).catch(e => e);
-    expect(error.message).toContain(`expect.toHaveJSProperty with timeout 200ms`);
-  });
-
-  test('pass boolean', async ({ page }) => {
-    await page.setContent('<div></div>');
-    await page.$eval('div', e => (e as any).foo = true);
-    const locator = page.locator('div');
-    await expect(locator).toHaveJSProperty('foo', true);
-  });
-
-  test('fail boolean', async ({ page }) => {
-    await page.setContent('<div></div>');
-    await page.$eval('div', e => (e as any).foo = false);
-    const locator = page.locator('div');
-    const error = await expect(locator).toHaveJSProperty('foo', true, { timeout: 200 }).catch(e => e);
-    expect(error.message).toContain(`expect.toHaveJSProperty with timeout 200ms`);
-  });
-
-  test('pass boolean 2', async ({ page }) => {
-    await page.setContent('<div></div>');
-    await page.$eval('div', e => (e as any).foo = false);
-    const locator = page.locator('div');
-    await expect(locator).toHaveJSProperty('foo', false);
-  });
-
-  test('fail boolean 2', async ({ page }) => {
-    await page.setContent('<div></div>');
-    await page.$eval('div', e => (e as any).foo = false);
-    const locator = page.locator('div');
-    const error = await expect(locator).toHaveJSProperty('foo', true, { timeout: 200 }).catch(e => e);
-    expect(error.message).toContain(`expect.toHaveJSProperty with timeout 200ms`);
-  });
-
-  test('pass undefined', async ({ page }) => {
-    await page.setContent('<div></div>');
-    const locator = page.locator('div');
-    await expect(locator).toHaveJSProperty('foo', undefined);
-  });
-
-  test('pass null', async ({ page }) => {
-    await page.setContent('<div></div>');
-    await page.$eval('div', e => (e as any).foo = null);
-    const locator = page.locator('div');
-    await expect(locator).toHaveJSProperty('foo', null);
-  });
-});
-
-test.describe('toHaveClass', () => {
-  test('pass', async ({ page }) => {
-    await page.setContent('<div class="foo bar baz"></div>');
-    const locator = page.locator('div');
-    await expect(locator).toHaveClass('foo bar baz');
-  });
-
-  test('pass with SVGs', async ({ page }) => {
-    await page.setContent(`<svg class="c1 c2" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"></svg>`);
-    await expect(page.locator('svg')).toHaveClass(/c1/);
-  });
-
-  test('fail', async ({ page }) => {
-    await page.setContent('<div class="bar baz"></div>');
-    const locator = page.locator('div');
-    const error = await expect(locator).toHaveClass('foo bar baz', { timeout: 1000 }).catch(e => e);
-    expect(error.message).toContain('expect.toHaveClass with timeout 1000ms');
-  });
-
-  test('pass with array', async ({ page }) => {
-    await page.setContent('<div class="foo"></div><div class="bar"></div><div class="baz"></div>');
-    const locator = page.locator('div');
-    await expect(locator).toHaveClass(['foo', 'bar', /[a-z]az/]);
-  });
-
-  test('fail with array', async ({ page }) => {
-    await page.setContent('<div class="foo"></div><div class="bar"></div><div class="bar"></div>');
-    const locator = page.locator('div');
-    const error = await expect(locator).toHaveClass(['foo', 'bar', /[a-z]az/], { timeout: 1000 }).catch(e => e);
-    expect(error.message).toContain('expect.toHaveClass with timeout 1000ms');
-  });
-});
-
-test.describe('toHaveTitle', () => {
-  test('pass', async ({ page }) => {
-    await page.setContent('<title>  Hello     world</title>');
-    await expect(page).toHaveTitle('Hello  world');
-  });
-
-  test('fail', async ({ page }) => {
-    await page.setContent('<title>Bye</title>');
-    const error = await expect(page).toHaveTitle('Hello', { timeout: 1000 }).catch(e => e);
-    expect(error.message).toContain('expect.toHaveTitle with timeout 1000ms');
-  });
-});
-
-test.describe('toHaveURL', () => {
-  test('pass', async ({ page }) => {
-    await page.goto('data:text/html,<div>A</div>');
-    await expect(page).toHaveURL('data:text/html,<div>A</div>');
-  });
-
-  test('fail', async ({ page }) => {
-    await page.goto('data:text/html,<div>B</div>');
-    const error = await expect(page).toHaveURL('wrong', { timeout: 1000 }).catch(e => e);
-    expect(error.message).toContain('expect.toHaveURL with timeout 1000ms');
-  });
-});
-
-test.describe('toHaveAttribute', () => {
-  test('pass', async ({ page }) => {
-    await page.setContent('<div checked id=node>Text content</div>');
-    const locator = page.locator('#node');
-    await expect(locator).toHaveAttribute('id');
-    await expect(locator).toHaveAttribute('checked');
-    await expect(locator).not.toHaveAttribute('open');
-    await expect(locator).toHaveAttribute('id', 'node');
-  });
-
-  test('should support boolean attribute with options', async ({ page }) => {
-    await page.setContent('<div checked id=node>Text content</div>');
-    const locator = page.locator('#node');
-    await expect(locator).toHaveAttribute('id', { timeout: 5000 });
-    await expect(locator).toHaveAttribute('checked', { timeout: 5000 });
-    await expect(locator).not.toHaveAttribute('open', { timeout: 5000 });
-    await expect(locator).toHaveAttribute('id', 'node', { timeout: 5000 });
-  });
-});
-
-test.describe('toHaveCSS', () => {
-  test('pass', async ({ page }) => {
-    await page.setContent('<div id=node style="color: rgb(255, 0, 0)">Text content</div>');
-    const locator = page.locator('#node');
-    await expect(locator).toHaveCSS('color', 'rgb(255, 0, 0)');
-  });
-
-  test('custom css properties', async ({ page }) => {
-    await page.setContent('<div id=node style="--custom-color-property:#FF00FF;">Text content</div>');
-    const locator = page.locator('#node');
-    await expect(locator).toHaveCSS('--custom-color-property', '#FF00FF');
-  });
-});
-
-test.describe('toHaveId', () => {
-  test('pass', async ({ page }) => {
-    await page.setContent('<div id=node>Text content</div>');
-    const locator = page.locator('#node');
-    await expect(locator).toHaveId('node');
-  });
-});
diff --git a/tests/page/expect-to-have-text.spec.ts b/tests/page/expect-to-have-text.spec.ts
deleted file mode 100644
index c55e4150bc64c344bd0a6c672aa8ef41891fb200..0000000000000000000000000000000000000000
--- a/tests/page/expect-to-have-text.spec.ts
+++ /dev/null
@@ -1,247 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import { stripAnsi } from '../config/utils';
-import { test, expect } from './pageTest';
-
-test.describe('toHaveText with regex', () => {
-  test('pass', async ({ page }) => {
-    await page.setContent('<div id=node>Text   content</div>');
-    const locator = page.locator('#node');
-    await expect(locator).toHaveText(/Text/);
-
-    // Should not normalize whitespace.
-    await expect(locator).toHaveText(/Text   content/);
-    // Should respect ignoreCase.
-    await expect(locator).toHaveText(/text   content/, { ignoreCase: true });
-    // Should override regex flag with ignoreCase.
-    await expect(locator).not.toHaveText(/text   content/i, { ignoreCase: false });
-  });
-
-  test('fail', async ({ page }) => {
-    await page.setContent('<div id=node>Text content</div>');
-    const locator = page.locator('#node');
-    const error = await expect(locator).toHaveText(/Text 2/, { timeout: 1000 }).catch(e => e);
-    expect(stripAnsi(error.message)).toContain('Expected pattern: /Text 2/');
-    expect(stripAnsi(error.message)).toContain('Received string:  "Text content"');
-  });
-});
-
-test.describe('toContainText with regex', () => {
-  test('pass', async ({ page }) => {
-    await page.setContent('<div id=node>Text   content</div>');
-    const locator = page.locator('#node');
-    await expect(locator).toContainText(/ex/);
-
-    // Should not normalize whitespace.
-    await expect(locator).toContainText(/ext   cont/);
-  });
-
-  test('fail', async ({ page }) => {
-    await page.setContent('<div id=node>Text content</div>');
-    const locator = page.locator('#node');
-    const error = await expect(locator).toContainText(/ex2/, { timeout: 1000 }).catch(e => e);
-    expect(stripAnsi(error.message)).toContain('Expected pattern: /ex2/');
-    expect(stripAnsi(error.message)).toContain('Received string:  "Text content"');
-  });
-});
-
-test.describe('toHaveText with text', () => {
-  test('pass', async ({ page }) => {
-    await page.setContent('<div id=node><span></span>Text \ncontent&nbsp;    </div>');
-    const locator = page.locator('#node');
-    // Should normalize whitespace.
-    await expect(locator).toHaveText('Text                        content');
-    // Should normalize zero width whitespace.
-    await expect(locator).toHaveText('T\u200be\u200bx\u200bt content');
-    // Should support ignoreCase.
-    await expect(locator).toHaveText('text CONTENT', { ignoreCase: true });
-    // Should support falsy ignoreCase.
-    await expect(locator).not.toHaveText('TEXT', { ignoreCase: false });
-  });
-
-  test('pass contain', async ({ page }) => {
-    await page.setContent('<div id=node>Text content</div>');
-    const locator = page.locator('#node');
-    await expect(locator).toContainText('Text');
-    // Should normalize whitespace.
-    await expect(locator).toContainText('   ext        cont\n  ');
-    // Should support ignoreCase.
-    await expect(locator).toContainText('EXT', { ignoreCase: true });
-    // Should support falsy ignoreCase.
-    await expect(locator).not.toContainText('TEXT', { ignoreCase: false });
-  });
-
-  test('fail', async ({ page }) => {
-    await page.setContent('<div id=node>Text content</div>');
-    const locator = page.locator('#node');
-    const error = await expect(locator).toHaveText('Text', { timeout: 1000 }).catch(e => e);
-    expect(stripAnsi(error.message)).toContain('Expected string: "Text"');
-    expect(stripAnsi(error.message)).toContain('Received string: "Text content"');
-  });
-
-  test('pass eventually', async ({ page }) => {
-    await page.setContent('<div id=node>Text content</div>');
-    const locator = page.locator('#node');
-    await Promise.all([
-      expect(locator).toHaveText(/Text 2/),
-      page.waitForTimeout(1000).then(() => locator.evaluate(element => element.textContent = 'Text 2 content')),
-    ]);
-  });
-
-  test('with userInnerText', async ({ page }) => {
-    await page.setContent('<div id=node>Text <span hidden>garbage</span> content</div>');
-    const locator = page.locator('#node');
-    await expect(locator).toHaveText('Text content', { useInnerText: true });
-  });
-
-  test('in shadow dom', async ({ page }) => {
-    await page.setContent(`
-      <div></div>
-      <script>
-        const div = document.querySelector('div');
-        const span = document.createElement('span');
-        span.textContent = 'some text';
-        div.attachShadow({ mode: 'open' }).appendChild(span);
-      </script>
-    `);
-    await expect(page.locator('span')).toHaveText('some text');
-    await expect(page.locator('span')).toContainText('text');
-    await expect(page.locator('div')).toHaveText('some text');
-    await expect(page.locator('div')).toContainText('text');
-    await expect(page.locator('span')).toHaveText('some text', { useInnerText: true });
-    await expect(page.locator('span')).toContainText('text', { useInnerText: true });
-    // Playwright intentionally does not perform innerText piercing on shadow dom.
-    await expect(page.locator('div')).not.toHaveText('some text', { useInnerText: true });
-    await expect(page.locator('div')).not.toContainText('text', { useInnerText: true });
-  });
-});
-
-test.describe('not.toHaveText', () => {
-  test('pass', async ({ page }) => {
-    await page.setContent('<div id=node>Text content</div>');
-    const locator = page.locator('#node');
-    await expect(locator).not.toHaveText('Text2');
-    // Should be case-sensitive by default.
-    await expect(locator).not.toHaveText('TEXT');
-  });
-
-  test('fail', async ({ page }) => {
-    await page.setContent('<div id=node>Text content</div>');
-    const locator = page.locator('#node');
-    const error = await expect(locator).not.toHaveText('Text content', { timeout: 1000 }).catch(e => e);
-    expect(stripAnsi(error.message)).toContain('Expected string: not "Text content"');
-    expect(stripAnsi(error.message)).toContain('Received string: "Text content');
-  });
-
-  test('should work when selector does not match', async ({ page }) => {
-    await page.setContent('<div>hello</div>');
-    const error = await expect(page.locator('span')).not.toHaveText('hello', { timeout: 1000 }).catch(e => e);
-    expect(stripAnsi(error.message)).toContain('Expected string: not "hello"');
-    expect(stripAnsi(error.message)).toContain('Received string: ""');
-    expect(stripAnsi(error.message)).toContain('waiting for selector "span"');
-  });
-});
-
-test.describe('toHaveText with array', () => {
-  test('pass', async ({ page }) => {
-    await page.setContent('<div>Text    \n1</div><div>Text   2a</div>');
-    const locator = page.locator('div');
-    // Should only normalize whitespace in the first item.
-    await expect(locator).toHaveText(['Text  1', /Text   \d+a/]);
-    // Should support ignoreCase.
-    await expect(locator).toHaveText(['tEXT 1', 'TExt 2A'], { ignoreCase: true });
-  });
-
-  test('pass lazy', async ({ page }) => {
-    await page.setContent('<div id=div></div>');
-    const locator = page.locator('p');
-    setTimeout(() => {
-      page.evaluate(() => {
-        document.querySelector('div').innerHTML = '<p>Text 1</p><p>Text 2</p>';
-      }).catch(() => {});
-    }, 500);
-    await expect(locator).toHaveText(['Text 1', 'Text 2']);
-  });
-
-  test('pass empty', async ({ page }) => {
-    await page.setContent('<div></div>');
-    const locator = page.locator('p');
-    await expect(locator).toHaveText([]);
-  });
-
-  test('pass not empty', async ({ page }) => {
-    await page.setContent('<div><p>Test</p></div>');
-    const locator = page.locator('p');
-    await expect(locator).not.toHaveText([]);
-  });
-
-  test('pass on empty', async ({ page }) => {
-    await page.setContent('<div></div>');
-    const locator = page.locator('p');
-    await expect(locator).not.toHaveText(['Test']);
-  });
-
-  test('fail on not+empty', async ({ page }) => {
-    await page.setContent('<div></div>');
-    const locator = page.locator('p');
-    const error = await expect(locator).not.toHaveText([], { timeout: 1000 }).catch(e => e);
-    expect(error.message).toContain('expect.toHaveText with timeout 1000ms');
-  });
-
-  test('pass eventually empty', async ({ page }) => {
-    await page.setContent('<div id=div><p>Text</p></div>');
-    const locator = page.locator('p');
-    setTimeout(() => {
-      page.evaluate(() => document.querySelector('div').innerHTML = '').catch(() => {});
-    }, 500);
-    await expect(locator).not.toHaveText([]);
-  });
-
-  test('fail', async ({ page }) => {
-    await page.setContent('<div>Text 1</div><div>Text 3</div>');
-    const locator = page.locator('div');
-    const error = await expect(locator).toHaveText(['Text 1', /Text \d/, 'Extra'], { timeout: 1000 }).catch(e => e);
-    expect(stripAnsi(error.message)).toContain('-   "Extra"');
-    expect(error.message).toContain('expect.toHaveText with timeout 1000ms');
-    expect(error.message).toContain('waiting for selector "div"');
-    expect(error.message).toContain('selector resolved to 2 elements');
-  });
-
-  test('fail on repeating array matchers', async ({ page }) => {
-    await page.setContent('<div>KekFoo</div>');
-    const locator = page.locator('div');
-    const error = await expect(locator).toContainText(['KekFoo', 'KekFoo', 'KekFoo'], { timeout: 1000 }).catch(e => e);
-    expect(error.message).toContain('selector resolved to 1 element');
-  });
-});
-
-test.describe('toContainText with array', () => {
-  test('pass', async ({ page }) => {
-    await page.setContent('<div>Text \n1</div><div>Text2</div><div>Text3</div>');
-    const locator = page.locator('div');
-    await expect(locator).toContainText(['ext     1', /ext3/]);
-    // Should support ignoreCase.
-    await expect(locator).toContainText(['EXT 1', 'eXt3'], { ignoreCase: true });
-  });
-
-  test('fail', async ({ page }) => {
-    await page.setContent('<div>Text 1</div><div>Text 3</div>');
-    const locator = page.locator('div');
-    const error = await expect(locator).toContainText(['Text 2'], { timeout: 1000 }).catch(e => e);
-    expect(stripAnsi(error.message)).toContain('-   "Text 2"');
-  });
-});
diff --git a/tests/page/expect-to-have-value.spec.ts b/tests/page/expect-to-have-value.spec.ts
deleted file mode 100644
index 0518eac725fffa87de3abe3c168636e5d3bd0921..0000000000000000000000000000000000000000
--- a/tests/page/expect-to-have-value.spec.ts
+++ /dev/null
@@ -1,139 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import { stripAnsi } from '../config/utils';
-import { test, expect } from './pageTest';
-
-test('should work', async ({ page }) => {
-  await page.setContent('<input id=node></input>');
-  const locator = page.locator('#node');
-  await locator.fill('Text content');
-  await expect(locator).toHaveValue('Text content');
-});
-
-test('should work with label', async ({ page }) => {
-  await page.setContent('<label><input></input></label>');
-  await page.locator('label input').fill('Text content');
-  await expect(page.locator('label')).toHaveValue('Text content');
-});
-
-test('should work with regex', async ({ page }) => {
-  await page.setContent('<input id=node></input>');
-  const locator = page.locator('#node');
-  await locator.fill('Text content');
-  await expect(locator).toHaveValue(/Text/);
-});
-
-test('should support failure', async ({ page }) => {
-  await page.setContent('<input id=node></input>');
-  const locator = page.locator('#node');
-  await locator.fill('Text content');
-  const error = await expect(locator).toHaveValue(/Text2/, { timeout: 1000 }).catch(e => e);
-  expect(stripAnsi(error.message)).toContain('"Text content"');
-});
-
-test.describe('toHaveValues with multi-select', () => {
-  test('works with text', async ({ page }) => {
-    await page.setContent(`
-      <select multiple>
-        <option value="R">Red</option>
-        <option value="G">Green</option>
-        <option value="B">Blue</option>
-      </select>
-    `);
-    const locator = page.locator('select');
-    await locator.selectOption(['R', 'G']);
-    await expect(locator).toHaveValues(['R', 'G']);
-  });
-
-  test('follows labels', async ({ page }) => {
-    await page.setContent(`
-      <label for="colors">Pick a Color</label>
-      <select id="colors" multiple>
-        <option value="R">Red</option>
-        <option value="G">Green</option>
-        <option value="B">Blue</option>
-      </select>
-    `);
-    const locator = page.locator('text=Pick a Color');
-    await locator.selectOption(['R', 'G']);
-    await expect(locator).toHaveValues(['R', 'G']);
-  });
-
-  test('exact match with text failure', async ({ page }) => {
-    await page.setContent(`
-      <select multiple>
-        <option value="RR">Red</option>
-        <option value="GG">Green</option>
-      </select>
-    `);
-    const locator = page.locator('select');
-    await locator.selectOption(['RR', 'GG']);
-    const error = await expect(locator).toHaveValues(['R', 'G'], { timeout: 1000 }).catch(e => e);
-    expect(stripAnsi(error.message)).toContain('-   "R"');
-    expect(stripAnsi(error.message)).toContain('+   "RR"');
-  });
-
-  test('works with regex', async ({ page }) => {
-    await page.setContent(`
-      <select multiple>
-        <option value="R">Red</option>
-        <option value="G">Green</option>
-        <option value="B">Blue</option>
-      </select>
-    `);
-    const locator = page.locator('select');
-    await locator.selectOption(['R', 'G']);
-    await expect(locator).toHaveValues([/R/, /G/]);
-  });
-
-  test('fails when items not selected', async ({ page }) => {
-    await page.setContent(`
-      <select multiple>
-        <option value="R">Red</option>
-        <option value="G">Green</option>
-        <option value="B">Blue</option>
-      </select>
-    `);
-    const locator = page.locator('select');
-    await locator.selectOption(['B']);
-    const error = await expect(locator).toHaveValues([/R/, /G/], { timeout: 1000 }).catch(e => e);
-    expect(stripAnsi(error.message)).toContain('+   "B"');
-  });
-
-  test('fails when multiple not specified', async ({ page }) => {
-    await page.setContent(`
-      <select>
-        <option value="R">Red</option>
-        <option value="G">Green</option>
-        <option value="B">Blue</option>
-      </select>
-    `);
-    const locator = page.locator('select');
-    await locator.selectOption(['B']);
-    const error = await expect(locator).toHaveValues([/R/, /G/], { timeout: 1000 }).catch(e => e);
-    expect(error.message).toContain('Not a select element with a multiple attribute');
-  });
-
-  test('fails when not a select element', async ({ page }) => {
-    await page.setContent(`
-      <input value="foo" />
-    `);
-    const locator = page.locator('input');
-    const error = await expect(locator).toHaveValues([/R/, /G/], { timeout: 1000 }).catch(e => e);
-    expect(error.message).toContain('Not a select element with a multiple attribute');
-  });
-});
diff --git a/tests/page/frame-frame-element.spec.ts b/tests/page/frame-frame-element.spec.ts
index e3b25a8fe1a0a15e2768e1a452e045a9f1522c48..ba59188c0c18130db7738162d9b5bea16c4e305a 100644
--- a/tests/page/frame-frame-element.spec.ts
+++ b/tests/page/frame-frame-element.spec.ts
@@ -55,23 +55,3 @@ it('should throw when detached', async ({ page, server }) => {
   const error = await frame1.frameElement().catch(e => e);
   expect(error.message).toContain('Frame has been detached.');
 });
-
-it('should work inside closed shadow root', async ({ page, server, browserName }) => {
-  await page.goto(server.EMPTY_PAGE);
-  await page.setContent(`
-    <div id=framecontainer>
-    </div>
-    <script>
-      const iframe = document.createElement('iframe');
-      iframe.setAttribute('name', 'myframe');
-      iframe.setAttribute('srcdoc', 'find me');
-      const div = document.getElementById('framecontainer');
-      const host = div.attachShadow({ mode: 'closed' });
-      host.appendChild(iframe);
-    </script>
-  `);
-
-  const frame = page.frame({ name: 'myframe' });
-  const element = await frame.frameElement();
-  expect(await element.getAttribute('name')).toBe('myframe');
-});
diff --git a/tests/page/locator-convenience.spec.ts b/tests/page/locator-convenience.spec.ts
index 1208b6324a678c97b723521844c85f80abbc9534..160702bfbee931e9946a0a8460c3ae8008a2cbea 100644
--- a/tests/page/locator-convenience.spec.ts
+++ b/tests/page/locator-convenience.spec.ts
@@ -58,6 +58,35 @@ it('inputValue should work', async ({ page, server }) => {
   expect(await locator2.inputValue().catch(e => e.message)).toContain('Node is not an <input>, <textarea> or <select> element');
 });
 
+it('inputValue should work on label', async ({ page, server }) => {
+  await page.setContent(`<label><input type=text></input></label>`);
+  await page.fill('input', 'foo');
+  expect(await page.locator('label').inputValue()).toBe('foo');
+});
+
+it('should get value of input with label', async ({ page }) => {
+  await page.setContent(`<label for=target>Fill me</label><input id=target value="some value">`);
+  expect(await page.inputValue('text=Fill me')).toBe('some value');
+  await expect(page.locator('text=Fill me')).toHaveValue('some value');
+});
+
+it('should get value of input with span inside the label', async ({ page }) => {
+  await page.setContent(`<label for=target><span>Fill me</span></label><input id=target value="some value">`);
+  expect(await page.inputValue('text=Fill me')).toBe('some value');
+  await expect(page.locator('text=Fill me')).toHaveValue('some value');
+});
+
+it('should get value of textarea with label', async ({ page }) => {
+  await page.setContent(`<label for=target>Fill me</label><textarea id=target>hey</textarea>`);
+  expect(await page.inputValue('text=Fill me')).toBe('hey');
+  await expect(page.locator('text=Fill me')).toHaveValue('hey');
+
+  await page.fill('textarea', 'Look at this');
+  expect(await page.inputValue('text=Fill me')).toBe('Look at this');
+  await expect(page.locator('text=Fill me')).toHaveValue('Look at this');
+});
+
+
 it('innerHTML should work', async ({ page, server }) => {
   await page.goto(`${server.PREFIX}/dom.html`);
   const locator = page.locator('#outer');
@@ -95,6 +124,25 @@ it('textContent should work', async ({ page, server }) => {
   expect(await page.textContent('#inner')).toBe('Text,\nmore text');
 });
 
+it('isVisible and isHidden should work', async ({ page }) => {
+  await page.setContent(`<div>Hi</div><span></span>`);
+
+  const div = page.locator('div');
+  expect(await div.isVisible()).toBe(true);
+  expect(await div.isHidden()).toBe(false);
+  expect(await page.isVisible('div')).toBe(true);
+  expect(await page.isHidden('div')).toBe(false);
+
+  const span = page.locator('span');
+  expect(await span.isVisible()).toBe(false);
+  expect(await span.isHidden()).toBe(true);
+  expect(await page.isVisible('span')).toBe(false);
+  expect(await page.isHidden('span')).toBe(true);
+
+  expect(await page.isVisible('no-such-element')).toBe(false);
+  expect(await page.isHidden('no-such-element')).toBe(true);
+});
+
 it('isEnabled and isDisabled should work', async ({ page }) => {
   await page.setContent(`
     <button disabled>button1</button>
@@ -154,6 +202,20 @@ it('allInnerTexts should work', async ({ page }) => {
   expect(await page.locator('div').allInnerTexts()).toEqual(['A', 'B', 'C']);
 });
 
+it('isVisible and isHidden should work with details', async ({ page }) => {
+  it.info().annotations.push({ type: 'issue', description: 'https://github.com/microsoft/playwright/issues/10674' });
+  await page.setContent(`<details>
+    <summary>click to open</summary>
+      <ul>
+        <li>hidden item 1</li>
+        <li>hidden item 2</li>
+        <li>hidden item 3</li>
+      </ul
+  </details>`);
+
+  await expect(page.locator('ul')).toBeHidden();
+});
+
 it('should return page', async ({ page, server }) => {
   await page.goto(server.PREFIX + '/frames/two-frames.html');
   const outer = page.locator('#outer');
@@ -165,3 +227,29 @@ it('should return page', async ({ page, server }) => {
   const inFrame = page.frames()[1].locator('div');
   expect(inFrame.page()).toBe(page);
 });
+
+it('isVisible inside a button', async ({ page }) => {
+  await page.setContent(`<button><span></span>a button</button>`);
+  const span = page.locator('span');
+  expect(await span.isVisible()).toBe(false);
+  expect(await span.isHidden()).toBe(true);
+  expect(await page.isVisible('span')).toBe(false);
+  expect(await page.isHidden('span')).toBe(true);
+  await expect(span).not.toBeVisible();
+  await expect(span).toBeHidden();
+  await span.waitFor({ state: 'hidden' });
+  await page.locator('button').waitFor({ state: 'visible' });
+});
+
+it('isVisible inside a role=button', async ({ page }) => {
+  await page.setContent(`<div role=button><span></span>a button</div>`);
+  const span = page.locator('span');
+  expect(await span.isVisible()).toBe(false);
+  expect(await span.isHidden()).toBe(true);
+  expect(await page.isVisible('span')).toBe(false);
+  expect(await page.isHidden('span')).toBe(true);
+  await expect(span).not.toBeVisible();
+  await expect(span).toBeHidden();
+  await span.waitFor({ state: 'hidden' });
+  await page.locator('[role=button]').waitFor({ state: 'visible' });
+});
diff --git a/tests/page/locator-is-visible.spec.ts b/tests/page/locator-is-visible.spec.ts
deleted file mode 100644
index 2c607ac9210e7478c0605f5cc5443d8055c4f3f7..0000000000000000000000000000000000000000
--- a/tests/page/locator-is-visible.spec.ts
+++ /dev/null
@@ -1,87 +0,0 @@
-/**
- * Copyright 2018 Google Inc. All rights reserved.
- * Modifications copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import { test as it, expect } from './pageTest';
-
-it('isVisible and isHidden should work', async ({ page }) => {
-  await page.setContent(`<div>Hi</div><span></span>`);
-
-  const div = page.locator('div');
-  expect(await div.isVisible()).toBe(true);
-  expect(await div.isHidden()).toBe(false);
-  expect(await page.isVisible('div')).toBe(true);
-  expect(await page.isHidden('div')).toBe(false);
-
-  const span = page.locator('span');
-  expect(await span.isVisible()).toBe(false);
-  expect(await span.isHidden()).toBe(true);
-  expect(await page.isVisible('span')).toBe(false);
-  expect(await page.isHidden('span')).toBe(true);
-
-  expect(await page.isVisible('no-such-element')).toBe(false);
-  expect(await page.isHidden('no-such-element')).toBe(true);
-});
-
-it('isVisible should be true for opacity:0', async ({ page }) => {
-  await page.setContent(`<div style="opacity:0">Hi</div>`);
-  await expect(page.locator('div')).toBeVisible();
-});
-
-it('isVisible should be true for element outside view', async ({ page }) => {
-  await page.setContent(`<div style="position: absolute; left: -1000px">Hi</div>`);
-  await expect(page.locator('div')).toBeVisible();
-});
-
-it('isVisible and isHidden should work with details', async ({ page }) => {
-  it.info().annotations.push({ type: 'issue', description: 'https://github.com/microsoft/playwright/issues/10674' });
-  await page.setContent(`<details>
-    <summary>click to open</summary>
-      <ul>
-        <li>hidden item 1</li>
-        <li>hidden item 2</li>
-        <li>hidden item 3</li>
-      </ul
-  </details>`);
-
-  await expect(page.locator('ul')).toBeHidden();
-});
-
-it('isVisible inside a button', async ({ page }) => {
-  await page.setContent(`<button><span></span>a button</button>`);
-  const span = page.locator('span');
-  expect(await span.isVisible()).toBe(false);
-  expect(await span.isHidden()).toBe(true);
-  expect(await page.isVisible('span')).toBe(false);
-  expect(await page.isHidden('span')).toBe(true);
-  await expect(span).not.toBeVisible();
-  await expect(span).toBeHidden();
-  await span.waitFor({ state: 'hidden' });
-  await page.locator('button').waitFor({ state: 'visible' });
-});
-
-it('isVisible inside a role=button', async ({ page }) => {
-  await page.setContent(`<div role=button><span></span>a button</div>`);
-  const span = page.locator('span');
-  expect(await span.isVisible()).toBe(false);
-  expect(await span.isHidden()).toBe(true);
-  expect(await page.isVisible('span')).toBe(false);
-  expect(await page.isHidden('span')).toBe(true);
-  await expect(span).not.toBeVisible();
-  await expect(span).toBeHidden();
-  await span.waitFor({ state: 'hidden' });
-  await page.locator('[role=button]').waitFor({ state: 'visible' });
-});
diff --git a/tests/page/locator-misc-2.spec.ts b/tests/page/locator-misc-2.spec.ts
index c15c809dd60720435f7243ece5ad48753c426829..4d13c23c6057a9c53c1e349ea2ee129381734237 100644
--- a/tests/page/locator-misc-2.spec.ts
+++ b/tests/page/locator-misc-2.spec.ts
@@ -43,8 +43,8 @@ it('should scroll into view', async ({ page, server, isAndroid }) => {
   }
 });
 
-it('should scroll zero-sized element into view', async ({ page, isAndroid, isElectron, isWebView2, browserName, isMac }) => {
-  it.fixme(isAndroid || isElectron || isWebView2);
+it('should scroll zero-sized element into view', async ({ page, isAndroid, isElectron, browserName, isMac }) => {
+  it.fixme(isAndroid || isElectron);
   it.skip(browserName === 'webkit' && isMac && parseInt(os.release(), 10) < 20, 'WebKit for macOS 10.15 is frozen.');
 
   await page.setContent(`
diff --git a/tests/page/page-accessibility.spec.ts b/tests/page/page-accessibility.spec.ts
index 2be06495db83df77db8b9897a236ace3bcd6d30f..203aadb3b0f6d5ffafe1f0fae86bd31b7d4d991f 100644
--- a/tests/page/page-accessibility.spec.ts
+++ b/tests/page/page-accessibility.spec.ts
@@ -74,7 +74,7 @@ it('should work @smoke', async ({ page, browserName }) => {
       { role: 'textbox', name: 'Input with whitespace', value: '  ' },
       { role: 'textbox', name: '', value: 'value only' },
       { role: 'textbox', name: 'placeholder', value: 'and a value' },
-      { role: 'textbox', name: 'This is a description!', value: 'and a value' }, // webkit uses the description over placeholder for the name
+      { role: 'textbox', name: 'This is a description!',value: 'and a value' }, // webkit uses the description over placeholder for the name
     ]
   };
   expect(await page.accessibility.snapshot()).toEqual(golden);
@@ -301,9 +301,9 @@ it('should work on a menu', async ({ page, browserName, browserVersion }) => {
     role: 'menu',
     name: 'My Menu',
     children:
-    [{ role: 'menuitem', name: 'First Item' },
+    [ { role: 'menuitem', name: 'First Item' },
       { role: 'menuitem', name: 'Second Item' },
-      { role: 'menuitem', name: 'Third Item' }],
+      { role: 'menuitem', name: 'Third Item' } ],
     orientation: (browserName === 'webkit' || (browserName === 'chromium' && !chromiumVersionLessThan(browserVersion, '98.0.1089'))) ? 'vertical' : undefined
   });
 });
diff --git a/tests/page/page-basic.spec.ts b/tests/page/page-basic.spec.ts
index 49f84965b263040cf28773d2cd1e677c8da8bb04..8b3d03a22a1d193056d8bc48c8472c6e4363f82e 100644
--- a/tests/page/page-basic.spec.ts
+++ b/tests/page/page-basic.spec.ts
@@ -17,9 +17,7 @@
 
 import { test as it, expect } from './pageTest';
 
-it('should reject all promises when page is closed', async ({ page, isWebView2 }) => {
-  it.skip(isWebView2, 'Page.close() is not supported in WebView2');
-
+it('should reject all promises when page is closed', async ({ page }) => {
   let error = null;
   await Promise.all([
     page.evaluate(() => new Promise(r => {})).catch(e => error = e),
@@ -28,17 +26,14 @@ it('should reject all promises when page is closed', async ({ page, isWebView2 }
   expect(error.message).toContain('Target closed');
 });
 
-it('should set the page close state', async ({ page, isWebView2 }) => {
-  it.skip(isWebView2, 'Page.close() is not supported in WebView2');
-
+it('should set the page close state', async ({ page }) => {
   expect(page.isClosed()).toBe(false);
   await page.close();
   expect(page.isClosed()).toBe(true);
 });
 
-it('should pass page to close event', async ({ page, isAndroid, isWebView2 }) => {
+it('should pass page to close event', async ({ page, isAndroid }) => {
   it.fixme(isAndroid);
-  it.skip(isWebView2, 'Page.close() is not supported in WebView2');
 
   const [closedPage] = await Promise.all([
     page.waitForEvent('close'),
@@ -47,10 +42,8 @@ it('should pass page to close event', async ({ page, isAndroid, isWebView2 }) =>
   expect(closedPage).toBe(page);
 });
 
-it('should terminate network waiters', async ({ page, server, isAndroid, isWebView2 }) => {
+it('should terminate network waiters', async ({ page, server, isAndroid }) => {
   it.fixme(isAndroid);
-  it.skip(isWebView2, 'Page.close() is not supported in WebView2');
-
   const results = await Promise.all([
     page.waitForRequest(server.EMPTY_PAGE).catch(e => e),
     page.waitForResponse(server.EMPTY_PAGE).catch(e => e),
@@ -63,9 +56,7 @@ it('should terminate network waiters', async ({ page, server, isAndroid, isWebVi
   }
 });
 
-it('should be callable twice', async ({ page, isWebView2 }) => {
-  it.skip(isWebView2, 'Page.close() is not supported in WebView2');
-
+it('should be callable twice', async ({ page }) => {
   await Promise.all([
     page.close(),
     page.close(),
@@ -99,9 +90,7 @@ it('should provide access to the opener page', async ({ page }) => {
   expect(opener).toBe(page);
 });
 
-it('should return null if parent page has been closed', async ({ page, isWebView2 }) => {
-  it.skip(isWebView2, 'Page.close() is not supported in WebView2');
-
+it('should return null if parent page has been closed', async ({ page }) => {
   const [popup] = await Promise.all([
     page.waitForEvent('popup'),
     page.evaluate(() => window.open('about:blank')),
@@ -133,8 +122,7 @@ it('should pass self as argument to load event', async ({ page }) => {
   expect(eventArg).toBe(page);
 });
 
-it('should fail with error upon disconnect', async ({ page, isAndroid, isWebView2 }) => {
-  it.skip(isWebView2, 'Page.close() is not supported in WebView2');
+it('should fail with error upon disconnect', async ({ page, isAndroid }) => {
   it.fixme(isAndroid);
 
   let error;
@@ -173,9 +161,7 @@ it('page.close should work with window.close', async function({ page }) {
   await closedPromise;
 });
 
-it('page.close should work with page.close', async function({ page, isWebView2 }) {
-  it.skip(isWebView2, 'Page.close() is not supported in WebView2');
-
+it('page.close should work with page.close', async function({ page }) {
   const closedPromise = new Promise(x => page.on('close', x));
   await page.close();
   await closedPromise;
diff --git a/tests/page/page-check.spec.ts b/tests/page/page-check.spec.ts
index 8e9ec4c6819d0ab599d2d61d6988df7944eb1758..4af9c05ca3966f51c904f4e4132666a9ac4d2720 100644
--- a/tests/page/page-check.spec.ts
+++ b/tests/page/page-check.spec.ts
@@ -41,6 +41,41 @@ it('should not uncheck the unchecked box', async ({ page }) => {
   expect(await page.evaluate(() => window['checkbox'].checked)).toBe(false);
 });
 
+it('should check the box by label', async ({ page }) => {
+  await page.setContent(`<label for='checkbox'><input id='checkbox' type='checkbox'></input></label>`);
+  await page.check('label');
+  expect(await page.evaluate(() => window['checkbox'].checked)).toBe(true);
+});
+
+it('should check the box outside label', async ({ page }) => {
+  await page.setContent(`<label for='checkbox'>Text</label><div><input id='checkbox' type='checkbox'></input></div>`);
+  await page.check('label');
+  expect(await page.evaluate(() => window['checkbox'].checked)).toBe(true);
+});
+
+it('should check the box inside label w/o id', async ({ page }) => {
+  await page.setContent(`<label>Text<span><input id='checkbox' type='checkbox'></input></span></label>`);
+  await page.check('label');
+  expect(await page.evaluate(() => window['checkbox'].checked)).toBe(true);
+});
+
+it('should check the box outside shadow dom label', async ({ page }) => {
+  await page.setContent('<div></div>');
+  await page.$eval('div', div => {
+    const root = div.attachShadow({ mode: 'open' });
+    const label = document.createElement('label');
+    label.setAttribute('for', 'target');
+    label.textContent = 'Click me';
+    root.appendChild(label);
+    const input = document.createElement('input');
+    input.setAttribute('type', 'checkbox');
+    input.setAttribute('id', 'target');
+    root.appendChild(input);
+  });
+  await page.check('label');
+  expect(await page.$eval('input', input => input.checked)).toBe(true);
+});
+
 it('should check radio', async ({ page }) => {
   await page.setContent(`
     <input type='radio'>one</input>
diff --git a/tests/page/page-click.spec.ts b/tests/page/page-click.spec.ts
index c11139e225d6c42da1ced7a04824a88042ca055a..1af305d49c7ca698b114f7cd3756c9f3137e3dcd 100644
--- a/tests/page/page-click.spec.ts
+++ b/tests/page/page-click.spec.ts
@@ -70,9 +70,7 @@ it('should click on a span with an inline element inside', async ({ page }) => {
   expect(await page.evaluate('CLICKED')).toBe(42);
 });
 
-it('should not throw UnhandledPromiseRejection when page closes', async ({ page, isWebView2 }) => {
-  it.skip(isWebView2, 'Page.close() is not supported in WebView2');
-
+it('should not throw UnhandledPromiseRejection when page closes', async ({ page }) => {
   await Promise.all([
     page.close(),
     page.mouse.click(1, 2),
@@ -607,6 +605,32 @@ it('should click disabled div', async ({ page }) => {
   expect(await page.evaluate('__CLICKED')).toBe(true);
 });
 
+it('should climb dom for inner label with pointer-events:none', async ({ page }) => {
+  await page.setContent('<button onclick="javascript:window.__CLICKED=true;"><label style="pointer-events:none">Click target</label></button>');
+  await page.click('text=Click target');
+  expect(await page.evaluate('__CLICKED')).toBe(true);
+});
+
+it('should climb up to [role=button]', async ({ page }) => {
+  await page.setContent('<div role=button onclick="javascript:window.__CLICKED=true;"><div style="pointer-events:none"><span><div>Click target</div></span></div>');
+  await page.click('text=Click target');
+  expect(await page.evaluate('__CLICKED')).toBe(true);
+});
+
+it('should climb up to a anchor', async ({ page }) => {
+  // For Firefox its not allowed to return anything: https://bugzilla.mozilla.org/show_bug.cgi?id=1392046
+  // Note the intermediate div - it is necessary, otherwise <a><non-clickable/></a> is not recognized as a clickable link.
+  await page.setContent(`<a href="javascript:(function(){window.__CLICKED=true})()" id="outer"><div id="intermediate"><div id="inner" style="pointer-events: none">Inner</div></div></a>`);
+  await page.click('#inner');
+  expect(await page.evaluate('__CLICKED')).toBe(true);
+});
+
+it('should climb up to a [role=link]', async ({ page }) => {
+  await page.setContent(`<div role=link onclick="javascript:window.__CLICKED=true;" id="outer"><div id="inner" style="pointer-events: none">Inner</div></div>`);
+  await page.click('#inner');
+  expect(await page.evaluate('__CLICKED')).toBe(true);
+});
+
 it('should wait for BUTTON to be clickable when it has pointer-events:none', async ({ page }) => {
   await page.setContent('<button onclick="javascript:window.__CLICKED=true;" style="pointer-events:none"><span>Click target</span></button>');
   let done = false;
@@ -860,29 +884,3 @@ it('should not hang when frame is detached', async ({ page, server, mode }) => {
   expect(error).toBeTruthy();
   expect(error.message).toMatch(/frame got detached|Frame was detached/);
 });
-
-it('should climb dom for inner label with pointer-events:none', async ({ page }) => {
-  await page.setContent('<button onclick="javascript:window.__CLICKED=true;"><label style="pointer-events:none">Click target</label></button>');
-  await page.click('text=Click target');
-  expect(await page.evaluate('__CLICKED')).toBe(true);
-});
-
-it('should climb up to [role=button]', async ({ page }) => {
-  await page.setContent('<div role=button onclick="javascript:window.__CLICKED=true;"><div style="pointer-events:none"><span><div>Click target</div></span></div>');
-  await page.click('text=Click target');
-  expect(await page.evaluate('__CLICKED')).toBe(true);
-});
-
-it('should climb up to a anchor', async ({ page }) => {
-  // For Firefox its not allowed to return anything: https://bugzilla.mozilla.org/show_bug.cgi?id=1392046
-  // Note the intermediate div - it is necessary, otherwise <a><non-clickable/></a> is not recognized as a clickable link.
-  await page.setContent(`<a href="javascript:(function(){window.__CLICKED=true})()" id="outer"><div id="intermediate"><div id="inner" style="pointer-events: none">Inner</div></div></a>`);
-  await page.click('#inner');
-  expect(await page.evaluate('__CLICKED')).toBe(true);
-});
-
-it('should climb up to a [role=link]', async ({ page }) => {
-  await page.setContent(`<div role=link onclick="javascript:window.__CLICKED=true;" id="outer"><div id="inner" style="pointer-events: none">Inner</div></div>`);
-  await page.click('#inner');
-  expect(await page.evaluate('__CLICKED')).toBe(true);
-});
diff --git a/tests/page/page-close.spec.ts b/tests/page/page-close.spec.ts
index d7f40caa36bbc28b2781e495a22a0bc32754cf61..ff60112269a6ba221c985a1ad8eed7c821f73010 100644
--- a/tests/page/page-close.spec.ts
+++ b/tests/page/page-close.spec.ts
@@ -17,8 +17,6 @@
 
 import { test as it, expect } from './pageTest';
 
-it.skip(({ isWebView2 }) => isWebView2, 'Page.close() is not supported in WebView2');
-
 it('should close page with active dialog', async ({ page }) => {
   await page.setContent(`<button onclick="setTimeout(() => alert(1))">alert</button>`);
   page.click('button');
diff --git a/tests/page/page-drag.spec.ts b/tests/page/page-drag.spec.ts
index b87e60851a313968196bcba81f1b93699597bb10..2558820e732dec9682df14c458bfdb90b49efc06 100644
--- a/tests/page/page-drag.spec.ts
+++ b/tests/page/page-drag.spec.ts
@@ -75,7 +75,7 @@ it.describe('Drag and drop', () => {
 
     it('should drag into an iframe', async ({ server, page, browserName }) => {
       await page.goto(server.PREFIX + '/drag-n-drop.html');
-      const frame = await attachFrame(page, 'oopif', server.PREFIX + '/drag-n-drop.html');
+      const frame = await attachFrame(page, 'oopif',server.PREFIX + '/drag-n-drop.html');
       const pageEvents = await trackEvents(await page.$('body'));
       const frameEvents = await trackEvents(await frame.$('body'));
       await page.pause();
@@ -99,7 +99,7 @@ it.describe('Drag and drop', () => {
 
     it('should drag out of an iframe', async ({ server, page }) => {
       await page.goto(server.PREFIX + '/drag-n-drop.html');
-      const frame = await attachFrame(page, 'oopif', server.PREFIX + '/drag-n-drop.html');
+      const frame = await attachFrame(page, 'oopif',server.PREFIX + '/drag-n-drop.html');
       const pageEvents = await trackEvents(await page.$('body'));
       const frameEvents = await trackEvents(await frame.$('body'));
       await frame.hover('#source');
diff --git a/tests/page/page-emulate-media.spec.ts b/tests/page/page-emulate-media.spec.ts
index 1f8bcca841910f3152101f24ab1e250329d73014..3b31dfe9a8cfb10c0995f6e961b86d05732f1a7d 100644
--- a/tests/page/page-emulate-media.spec.ts
+++ b/tests/page/page-emulate-media.spec.ts
@@ -125,6 +125,7 @@ it('should emulate reduced motion', async ({ page }) => {
 });
 
 it('should emulate forcedColors ', async ({ page, browserName }) => {
+  it.skip(browserName === 'webkit', 'https://bugs.webkit.org/show_bug.cgi?id=225281');
   expect(await page.evaluate(() => matchMedia('(forced-colors: none)').matches)).toBe(true);
   await page.emulateMedia({ forcedColors: 'none' });
   expect(await page.evaluate(() => matchMedia('(forced-colors: none)').matches)).toBe(true);
diff --git a/tests/page/page-evaluate.spec.ts b/tests/page/page-evaluate.spec.ts
index 783f44ccbe3826c8b2fc3727c47b9f5a1d83e7c5..9e7ea8695a6c911604cce4476c31cf3f6f026ecd 100644
--- a/tests/page/page-evaluate.spec.ts
+++ b/tests/page/page-evaluate.spec.ts
@@ -141,6 +141,7 @@ it('should work with large strings', async ({ page }) => {
 });
 
 it('should work with large unicode strings', async ({ page, browserName, platform }) => {
+  it.fail(browserName === 'firefox' && platform !== 'linux');
   it.info().annotations.push({ type: 'issue', description: 'https://github.com/microsoft/playwright/issues/16367' });
 
   const expected = 'ð­'.repeat(10000);
@@ -360,7 +361,7 @@ it('shuld properly serialize window.performance object', async ({ page }) => {
   expect(await page.evaluate(() => performance)).toEqual({
     'navigation': {
       'redirectCount': 0,
-      'type': expect.any(Number),
+      'type': 0
     },
     'timeOrigin': expect.any(Number),
     'timing': {
@@ -635,7 +636,7 @@ it('should not use Array.prototype.toJSON when evaluating', async ({ page }) =>
     (Array.prototype as any).toJSON = () => 'busted';
     return [1, 2, 3];
   });
-  expect(result).toEqual([1, 2, 3]);
+  expect(result).toEqual([1,2,3]);
 });
 
 it('should not add a toJSON property to newly created Arrays after evaluation', async ({ page, browserName }) => {
@@ -662,43 +663,3 @@ it('should throw when frame is detached', async ({ page, server }) => {
   expect(error).toBeTruthy();
   expect(error.message).toMatch(/frame.evaluate: (Frame was detached|Execution context was destroyed)/);
 });
-
-it('should work with overridden Object.defineProperty', async ({ page, server }) => {
-  server.setRoute('/test', (req, res) => {
-    res.writeHead(200, {
-      'content-type': 'text/html',
-    });
-    res.end(`<script>
-    Object.create = null;
-    Object.defineProperty = null;
-    Object.getOwnPropertyDescriptor = null;
-    Object.getOwnPropertyNames = null;
-    Object.getPrototypeOf = null;
-    Object.prototype.hasOwnProperty = null;
-    </script>`);
-  });
-  await page.goto(server.PREFIX + '/test');
-  expect(await page.evaluate('1+2')).toBe(3);
-});
-
-it('should work with overridden globalThis.Window/Document/Node', async ({ page, server }) => {
-  const testCases = [
-    // @ts-ignore
-    () => globalThis.Window = {},
-    // @ts-ignore
-    () => globalThis.Document = {},
-    // @ts-ignore
-    () => globalThis.Node = {},
-    () => globalThis.Window = null,
-    () => globalThis.Document = null,
-    () => globalThis.Node = null,
-  ];
-  for (const testCase of testCases) {
-    await it.step(testCase.toString(), async () => {
-      await page.goto(server.EMPTY_PAGE);
-      await page.evaluate(testCase);
-      expect(await page.evaluate('1+2')).toBe(3);
-      expect(await page.evaluate(() => ['foo'])).toEqual(['foo']);
-    });
-  }
-});
diff --git a/tests/page/page-event-console.spec.ts b/tests/page/page-event-console.spec.ts
index ae4299484ffe4c5f414a1d21da8cf5003c3adb26..34adfc88a03a8ff48543e8488066d5502b636185 100644
--- a/tests/page/page-event-console.spec.ts
+++ b/tests/page/page-event-console.spec.ts
@@ -138,7 +138,7 @@ it('should trigger correct Log', async ({ page, server, browserName, isWindows }
 it('should have location for console API calls', async ({ page, server }) => {
   await page.goto(server.EMPTY_PAGE);
   const [message] = await Promise.all([
-    page.waitForEvent('console', m => m.text().startsWith('here:')),
+    page.waitForEvent('console', m => m.text() === 'yellow'),
     page.goto(server.PREFIX + '/consolelog.html'),
   ]);
   expect(message.type()).toBe('log');
diff --git a/tests/page/page-event-crash.spec.ts b/tests/page/page-event-crash.spec.ts
index c4f8e38022407627efe2fed51213617809040213..c9e87a3a68c36b71ea8dea8f465e7de6eecce36c 100644
--- a/tests/page/page-event-crash.spec.ts
+++ b/tests/page/page-event-crash.spec.ts
@@ -68,10 +68,9 @@ it.describe('', () => {
     expect(error.message).toContain('Navigation failed because page crashed');
   });
 
-  it('should be able to close context when page crashes', async ({ isAndroid, isElectron, isWebView2, page, toImpl, browserName, platform, mode }) => {
+  it('should be able to close context when page crashes', async ({ isAndroid, isElectron, page, toImpl, browserName, platform, mode }) => {
     it.skip(isAndroid);
     it.skip(isElectron);
-    it.skip(isWebView2, 'Page.close() is not supported in WebView2');
 
     await page.setContent(`<div>This page should crash</div>`);
     crash({ page, toImpl, browserName, platform, mode });
diff --git a/tests/page/page-event-popup.spec.ts b/tests/page/page-event-popup.spec.ts
index 6a4573c9cadcfdce6c499bcdce46f3bd0ca1d134..d732f490716e1569498cd85ce59c1dea935621e5 100644
--- a/tests/page/page-event-popup.spec.ts
+++ b/tests/page/page-event-popup.spec.ts
@@ -144,9 +144,7 @@ it('should work with clicking target=_blank and rel=noopener', async ({ page, se
   expect(await popup.evaluate(() => !!window.opener)).toBe(false);
 });
 
-it('should not treat navigations as new popups', async ({ page, server, isWebView2 }) => {
-  it.skip(isWebView2, 'Page.close() is not supported in WebView2');
-
+it('should not treat navigations as new popups', async ({ page, server }) => {
   await page.goto(server.EMPTY_PAGE);
   await page.setContent('<a target=_blank rel=noopener href="/one-style.html">yo</a>');
   const [popup] = await Promise.all([
diff --git a/tests/page/page-expose-function.spec.ts b/tests/page/page-expose-function.spec.ts
index 088d1e2f61caa74ef40d9216f57219d564f7c999..b84800ab4365acf5666e88701d2c3d148c86964d 100644
--- a/tests/page/page-expose-function.spec.ts
+++ b/tests/page/page-expose-function.spec.ts
@@ -221,9 +221,8 @@ it('exposeBindingHandle should throw for multiple arguments', async ({ page }) =
   expect(error.message).toContain('exposeBindingHandle supports a single argument, 2 received');
 });
 
-it('should not result in unhandled rejection', async ({ page, isAndroid, isWebView2 }) => {
+it('should not result in unhandled rejection', async ({ page, isAndroid }) => {
   it.fixme(isAndroid);
-  it.skip(isWebView2, 'Page.close() is not supported in WebView2');
 
   const closedPromise = page.waitForEvent('close');
   await page.exposeFunction('foo', async () => {
diff --git a/tests/page/page-fill.spec.ts b/tests/page/page-fill.spec.ts
index aec4a0b8587fff11f8de4ee86dfa3f88a42a2689..f0c060f2d1ced1f482e501f65318bdf45915b90a 100644
--- a/tests/page/page-fill.spec.ts
+++ b/tests/page/page-fill.spec.ts
@@ -34,6 +34,36 @@ it('should fill input', async ({ page, server }) => {
   expect(await page.evaluate(() => window['result'])).toBe('some value');
 });
 
+it('should fill input with label', async ({ page }) => {
+  await page.setContent(`<label for=target>Fill me</label><input id=target>`);
+  await page.fill('text=Fill me', 'some value');
+  expect(await page.$eval('input', input => input.value)).toBe('some value');
+});
+
+it('should fill input with label 2', async ({ page }) => {
+  await page.setContent(`<label>Fill me<input id=target></label>`);
+  await page.fill('text=Fill me', 'some value');
+  expect(await page.$eval('input', input => input.value)).toBe('some value');
+});
+
+it('should fill input with span inside the label', async ({ page }) => {
+  await page.setContent(`<label for=target><span>Fill me</span></label><input id=target>`);
+  await page.fill('text=Fill me', 'some value');
+  expect(await page.$eval('input', input => input.value)).toBe('some value');
+});
+
+it('should fill input inside the label', async ({ page }) => {
+  await page.setContent(`<label><input id=target></label>`);
+  await page.fill('input', 'some value');
+  expect(await page.$eval('input', input => input.value)).toBe('some value');
+});
+
+it('should fill textarea with label', async ({ page }) => {
+  await page.setContent(`<label for=target>Fill me</label><textarea id=target>hey</textarea>`);
+  await page.fill('text=Fill me', 'some value');
+  expect(await page.$eval('textarea', textarea => textarea.value)).toBe('some value');
+});
+
 it('should throw on unsupported inputs', async ({ page, server }) => {
   await page.goto(server.PREFIX + '/input/textarea.html');
   for (const type of ['button', 'checkbox', 'file', 'image', 'radio', 'reset', 'submit']) {
diff --git a/tests/page/page-goto.spec.ts b/tests/page/page-goto.spec.ts
index 3f6587ae85c67e6862497bc9aceb506702e91bed..3dd5e08bd672da5176262a77ae2e74c8103bb927 100644
--- a/tests/page/page-goto.spec.ts
+++ b/tests/page/page-goto.spec.ts
@@ -629,22 +629,9 @@ it('should properly wait for load', async ({ page, server, browserName }) => {
   ]);
 });
 
-it('should not resolve goto upon window.stop()', async ({ browserName, page, server }) => {
-  it.fixme(browserName === 'firefox', 'load/domcontentloaded events are flaky');
-
-  let response;
-  server.setRoute('/module.js', (req, res) => {
-    res.writeHead(200, { 'Content-Type': 'text/javascript' });
-    response = res;
-  });
-  let done = false;
-  page.goto(server.PREFIX + '/window-stop.html').then(() => done = true).catch(() => {});
-  await server.waitForRequest('/module.js');
-  expect(done).toBe(false);
-  await page.waitForTimeout(1000);  // give it some time to erroneously resolve
-  response.end('');
-  await page.waitForTimeout(1000);  // give it more time to erroneously resolve
-  expect(done).toBe(false);
+it('should properly report window.stop()', async ({ page, server }) => {
+  server.setRoute('/module.js', async (req, res) => void 0);
+  await page.goto(server.PREFIX + '/window-stop.html');
 });
 
 it('should return from goto if new navigation is started', async ({ page, server, browserName, isAndroid }) => {
diff --git a/tests/page/page-history.spec.ts b/tests/page/page-history.spec.ts
index f825458afeea186543a83beb4240d27c054f724c..b9dad63bf399f6d5a0bdfcee9b05fab9ab97fa26 100644
--- a/tests/page/page-history.spec.ts
+++ b/tests/page/page-history.spec.ts
@@ -53,29 +53,20 @@ it('page.goBack should work with HistoryAPI', async ({ page, server }) => {
 });
 
 it('page.goBack should work for file urls', async ({ page, server, asset, browserName, platform, isAndroid }) => {
-  it.fixme(browserName === 'firefox', 'Firefox pretends, but does not complete goBack to the file url');
-  it.fail(browserName === 'webkit' && platform === 'darwin', 'WebKit embedder fails to go back/forward to the file url.');
+  it.fail(browserName === 'webkit' && platform === 'darwin');
   it.skip(isAndroid, 'No files on Android');
 
-  const url1 = url.pathToFileURL(asset('consolelog.html')).href;
-  const url2 = server.PREFIX + '/consolelog.html';
-  await Promise.all([
-    page.waitForEvent('console', message => message.text() === 'here:' + url1),
-    page.goto(url1),
-  ]);
+  // WebKit embedder fails to go back/forward to the file url.
+  const url1 = url.pathToFileURL(asset('empty.html')).href;
+  const url2 = server.EMPTY_PAGE;
+  await page.goto(url1);
   await page.setContent(`<a href='${url2}'>url2</a>`);
   expect(page.url().toLowerCase()).toBe(url1.toLowerCase());
 
-  await Promise.all([
-    page.waitForEvent('console', message => message.text() === 'here:' + url2),
-    page.click('a'),
-  ]);
+  await page.click('a');
   expect(page.url()).toBe(url2);
 
-  await Promise.all([
-    page.waitForEvent('console', message => message.text() === 'here:' + url1),
-    page.goBack(),
-  ]);
+  await page.goBack();
   expect(page.url().toLowerCase()).toBe(url1.toLowerCase());
   // Should be able to evaluate in the new context, and
   // not reach for the old cross-process one.
@@ -83,10 +74,7 @@ it('page.goBack should work for file urls', async ({ page, server, asset, browse
   // Should be able to screenshot.
   await page.screenshot();
 
-  await Promise.all([
-    page.waitForEvent('console', message => message.text() === 'here:' + url2),
-    page.goForward(),
-  ]);
+  await page.goForward();
   expect(page.url()).toBe(url2);
   expect(await page.evaluate(() => window.scrollX)).toBe(0);
   await page.screenshot();
@@ -126,54 +114,6 @@ it('page.reload during renderer-initiated navigation', async ({ page, server })
   await page.waitForSelector('text=hello');
 });
 
-it('page.reload should not resolve with same-document navigation', async ({ page, server }) => {
-  await page.goto(server.EMPTY_PAGE);
-  // 1. Make sure execution contexts are ready for fast evaluate.
-  await page.evaluate('1');
-
-  // 2. Stall the reload request.
-  let response;
-  server.setRoute('/empty.html', (req, res) => { response = res; });
-  const requestPromise = server.waitForRequest('/empty.html');
-
-  // 3. Trigger push state that could resolve the reload.
-  page.evaluate(() => {
-    window.history.pushState({}, '');
-  }).catch(() => {});
-
-  // 4. Trigger the reload, it should not resolve.
-  const reloadPromise = page.reload();
-
-  // 5. Trigger push state again, for the good measure :)
-  page.evaluate(() => {
-    window.history.pushState({}, '');
-  }).catch(() => {});
-
-  // 5. Serve the request, it should resolve the reload.
-  await requestPromise;
-  response.end('hello');
-
-  // 6. Check the reload response.
-  const gotResponse = await reloadPromise;
-  expect(await gotResponse.text()).toBe('hello');
-});
-
-it('page.reload should work with same origin redirect', async ({ page, server }) => {
-  it.info().annotations.push({ type: 'issue', description: 'https://github.com/microsoft/playwright/issues/16147' });
-  await page.goto(server.EMPTY_PAGE);
-  server.setRedirect('/empty.html', server.PREFIX + '/title.html');
-  await page.reload();
-  await expect(page).toHaveURL(server.PREFIX + '/title.html');
-});
-
-it('page.reload should work with cross-origin redirect', async ({ page, server, browserName }) => {
-  it.info().annotations.push({ type: 'issue', description: 'https://github.com/microsoft/playwright/issues/16147' });
-  await page.goto(server.EMPTY_PAGE);
-  server.setRedirect('/empty.html', server.CROSS_PROCESS_PREFIX + '/title.html');
-  await page.reload();
-  await expect(page).toHaveURL(server.CROSS_PROCESS_PREFIX + '/title.html');
-});
-
 it('page.goBack during renderer-initiated navigation', async ({ page, server }) => {
   await page.goto(server.PREFIX + '/one-style.html');
   await page.goto(server.EMPTY_PAGE);
diff --git a/tests/page/page-keyboard.spec.ts b/tests/page/page-keyboard.spec.ts
index 879dc937185e267f1602a96aef789da0810b2853..e5ca0bd0900d065bab5ef1c4b186f68d2374437f 100644
--- a/tests/page/page-keyboard.spec.ts
+++ b/tests/page/page-keyboard.spec.ts
@@ -129,12 +129,12 @@ it('should send proper codes while typing', async ({ page, server }) => {
   await page.goto(server.PREFIX + '/input/keyboard.html');
   await page.keyboard.type('!');
   expect(await page.evaluate('getResult()')).toBe(
-      ['Keydown: ! Digit1 49 []',
+      [ 'Keydown: ! Digit1 49 []',
         'Keypress: ! Digit1 33 33 []',
         'Keyup: ! Digit1 49 []'].join('\n'));
   await page.keyboard.type('^');
   expect(await page.evaluate('getResult()')).toBe(
-      ['Keydown: ^ Digit6 54 []',
+      [ 'Keydown: ^ Digit6 54 []',
         'Keypress: ^ Digit6 94 94 []',
         'Keyup: ^ Digit6 54 []'].join('\n'));
 });
@@ -145,7 +145,7 @@ it('should send proper codes while typing with shift', async ({ page, server })
   await keyboard.down('Shift');
   await page.keyboard.type('~');
   expect(await page.evaluate('getResult()')).toBe(
-      ['Keydown: Shift ShiftLeft 16 [Shift]',
+      [ 'Keydown: Shift ShiftLeft 16 [Shift]',
         'Keydown: ~ Backquote 192 [Shift]', // 192 is ` keyCode
         'Keypress: ~ Backquote 126 126 [Shift]', // 126 is ~ charCode
         'Keyup: ~ Backquote 192 [Shift]'].join('\n'));
@@ -173,7 +173,7 @@ it('should press plus', async ({ page, server }) => {
   await page.goto(server.PREFIX + '/input/keyboard.html');
   await page.keyboard.press('+');
   expect(await page.evaluate('getResult()')).toBe(
-      ['Keydown: + Equal 187 []', // 192 is ` keyCode
+      [ 'Keydown: + Equal 187 []', // 192 is ` keyCode
         'Keypress: + Equal 43 43 []', // 126 is ~ charCode
         'Keyup: + Equal 187 []'].join('\n'));
 });
@@ -182,7 +182,7 @@ it('should press shift plus', async ({ page, server }) => {
   await page.goto(server.PREFIX + '/input/keyboard.html');
   await page.keyboard.press('Shift++');
   expect(await page.evaluate('getResult()')).toBe(
-      ['Keydown: Shift ShiftLeft 16 [Shift]',
+      [ 'Keydown: Shift ShiftLeft 16 [Shift]',
         'Keydown: + Equal 187 [Shift]', // 192 is ` keyCode
         'Keypress: + Equal 43 43 [Shift]', // 126 is ~ charCode
         'Keyup: + Equal 187 [Shift]',
@@ -193,7 +193,7 @@ it('should support plus-separated modifiers', async ({ page, server }) => {
   await page.goto(server.PREFIX + '/input/keyboard.html');
   await page.keyboard.press('Shift+~');
   expect(await page.evaluate('getResult()')).toBe(
-      ['Keydown: Shift ShiftLeft 16 [Shift]',
+      [ 'Keydown: Shift ShiftLeft 16 [Shift]',
         'Keydown: ~ Backquote 192 [Shift]', // 192 is ` keyCode
         'Keypress: ~ Backquote 126 126 [Shift]', // 126 is ~ charCode
         'Keyup: ~ Backquote 192 [Shift]',
@@ -204,7 +204,7 @@ it('should support multiple plus-separated modifiers', async ({ page, server })
   await page.goto(server.PREFIX + '/input/keyboard.html');
   await page.keyboard.press('Control+Shift+~');
   expect(await page.evaluate('getResult()')).toBe(
-      ['Keydown: Control ControlLeft 17 [Control]',
+      [ 'Keydown: Control ControlLeft 17 [Control]',
         'Keydown: Shift ShiftLeft 16 [Control Shift]',
         'Keydown: ~ Backquote 192 [Control Shift]', // 192 is ` keyCode
         'Keyup: ~ Backquote 192 [Control Shift]',
@@ -216,7 +216,7 @@ it('should shift raw codes', async ({ page, server }) => {
   await page.goto(server.PREFIX + '/input/keyboard.html');
   await page.keyboard.press('Shift+Digit3');
   expect(await page.evaluate('getResult()')).toBe(
-      ['Keydown: Shift ShiftLeft 16 [Shift]',
+      [ 'Keydown: Shift ShiftLeft 16 [Shift]',
         'Keydown: # Digit3 51 [Shift]', // 51 is # keyCode
         'Keypress: # Digit3 35 35 [Shift]', // 35 is # charCode
         'Keyup: # Digit3 51 [Shift]',
diff --git a/tests/page/page-mouse.spec.ts b/tests/page/page-mouse.spec.ts
index 5db94071ec68e888fb972881d02d8ba9d09b2c8f..2a47970fe48bb273d3268dc5f1412cfe54b19814 100644
--- a/tests/page/page-mouse.spec.ts
+++ b/tests/page/page-mouse.spec.ts
@@ -153,9 +153,9 @@ it('should select the text with mouse', async ({ page, server }) => {
   await page.evaluate(() => new Promise(requestAnimationFrame));
   await page.evaluate(() => document.querySelector('textarea').scrollTop = 0);
   const { x, y } = await page.evaluate(dimensions);
-  await page.mouse.move(x + 2, y + 2);
+  await page.mouse.move(x + 2,y + 2);
   await page.mouse.down();
-  await page.mouse.move(200, 200);
+  await page.mouse.move(200,200);
   await page.mouse.up();
   expect(await page.evaluate(() => {
     const textarea = document.querySelector('textarea');
@@ -240,12 +240,3 @@ it('should always round down', async ({ page }) => {
   await page.mouse.click(50.1, 50.9);
   expect(await page.evaluate('result')).toEqual([50, 50]);
 });
-
-it('should not crash on mouse drag with any button', async ({ page }) => {
-  it.info().annotations.push({ type: 'issue', description: 'https://github.com/microsoft/playwright/issues/16609' });
-  for (const button of ['left', 'middle', 'right'] as const) {
-    await page.mouse.move(50, 50);
-    await page.mouse.down({ button });
-    await page.mouse.move(100, 100);
-  }
-});
diff --git a/tests/page/page-network-request.spec.ts b/tests/page/page-network-request.spec.ts
index 91b69bf26ea55b1541d0d7ca4791daf7898f5b1c..29f3eb6476dd6b62427e7cb94866a6fa0112ef71 100644
--- a/tests/page/page-network-request.spec.ts
+++ b/tests/page/page-network-request.spec.ts
@@ -286,7 +286,7 @@ it('should parse the data if content-type is application/x-www-form-urlencoded',
   await page.setContent(`<form method='POST' action='/post'><input type='text' name='foo' value='bar'><input type='number' name='baz' value='123'><input type='submit'></form>`);
   await page.click('input[type=submit]');
   expect(request).toBeTruthy();
-  expect(request.postDataJSON()).toEqual({ 'foo': 'bar', 'baz': '123' });
+  expect(request.postDataJSON()).toEqual({ 'foo': 'bar','baz': '123' });
 });
 
 it('should get |undefined| with postDataJSON() when there is no post data', async ({ page, server }) => {
diff --git a/tests/page/page-request-continue.spec.ts b/tests/page/page-request-continue.spec.ts
index 457f3f972da7602d4b40313c8062ff04fa118837..d4cc4a6e9af714909c9a3a442e02c6d9ca821864 100644
--- a/tests/page/page-request-continue.spec.ts
+++ b/tests/page/page-request-continue.spec.ts
@@ -87,15 +87,17 @@ it('should amend method', async ({ page, server }) => {
 });
 
 it('should override request url', async ({ page, server }) => {
-  const serverRequest = server.waitForRequest('/global-var.html');
+  const request = server.waitForRequest('/global-var.html');
   await page.route('**/foo', route => {
     route.continue({ url: server.PREFIX + '/global-var.html' });
   });
-  const response = await page.goto(server.PREFIX + '/foo');
-  expect(response.request().url()).toBe(server.PREFIX + '/global-var.html');
-  expect(response.url()).toBe(server.PREFIX + '/global-var.html');
+  const [response] = await Promise.all([
+    page.waitForEvent('response'),
+    page.goto(server.PREFIX + '/foo'),
+  ]);
+  expect(response.url()).toBe(server.PREFIX + '/foo');
   expect(await page.evaluate(() => window['globalVar'])).toBe(123);
-  expect((await serverRequest).method).toBe('GET');
+  expect((await request).method).toBe('GET');
 });
 
 it('should not allow changing protocol when overriding url', async ({ page, server }) => {
@@ -115,9 +117,7 @@ it('should not allow changing protocol when overriding url', async ({ page, serv
   expect(error.message).toContain('New URL must have same protocol as overridden URL');
 });
 
-it('should not throw when continuing while page is closing', async ({ page, server, isWebView2 }) => {
-  it.skip(isWebView2, 'Page.close() is not supported in WebView2');
-
+it('should not throw when continuing while page is closing', async ({ page, server }) => {
   let done;
   await page.route('**/*', async route => {
     done = Promise.all([
@@ -130,9 +130,7 @@ it('should not throw when continuing while page is closing', async ({ page, serv
   expect(error).toBeInstanceOf(Error);
 });
 
-it('should not throw when continuing after page is closed', async ({ page, server, isWebView2 }) => {
-  it.skip(isWebView2, 'Page.close() is not supported in WebView2');
-
+it('should not throw when continuing after page is closed', async ({ page, server }) => {
   let done;
   await page.route('**/*', async route => {
     await page.close();
@@ -248,25 +246,6 @@ it.describe('post data', () => {
     for (let i = 0; i < arr.length; ++i)
       expect(arr[i]).toBe(buffer[i]);
   });
-
-  it('should use content-type from original request', async ({ page, server, browserName }) => {
-    it.info().annotations.push({ type: 'issue', description: 'https://github.com/microsoft/playwright/issues/16736' });
-    it.fixme(browserName === 'firefox');
-    await page.goto(server.EMPTY_PAGE);
-    await page.route(`${server.PREFIX}/title.html`, route => route.continue({ postData: '{"b":2}' }));
-    const [request] = await Promise.all([
-      server.waitForRequest('/title.html'),
-      page.evaluate(async url => {
-        await fetch(url, {
-          method: 'POST',
-          body: '{"a":1}',
-          headers: { 'content-type': 'application/json' },
-        });
-      }, `${server.PREFIX}/title.html`)
-    ]);
-    expect(request.headers['content-type']).toBe('application/json');
-    expect((await request.postBody).toString('utf-8')).toBe('{"b":2}');
-  });
 });
 
 it('should work with Cross-Origin-Opener-Policy', async ({ page, server, browserName }) => {
@@ -351,26 +330,3 @@ it('should delete the origin header', async ({ page, server, isAndroid, browserN
   expect(interceptedRequest.headers()['origin']).toEqual(undefined);
   expect(serverRequest.headers.origin).toBeFalsy();
 });
-
-it('should continue preload link requests', async ({ page, server, browserName }) => {
-  it.info().annotations.push({ type: 'issue', description: 'https://github.com/microsoft/playwright/issues/16745' });
-  let intercepted = false;
-  await page.route('**/one-style.css', route => {
-    intercepted = true;
-    route.continue({
-      headers: {
-        ...route.request().headers(),
-        'custom': 'value'
-      }
-    });
-  });
-  const [serverRequest] = await Promise.all([
-    server.waitForRequest('/one-style.css'),
-    page.goto(server.PREFIX + '/preload.html')
-  ]);
-  expect(serverRequest.headers['custom']).toBe('value');
-  await page.waitForFunction(() => (window as any).preloadedStyles);
-  expect(intercepted).toBe(true);
-  const color = await page.evaluate(() => window.getComputedStyle(document.body).backgroundColor);
-  expect(color).toBe('rgb(255, 192, 203)');
-});
diff --git a/tests/page/page-request-fallback.spec.ts b/tests/page/page-request-fallback.spec.ts
index d46ac9723d7103edd0628bdc3eb3c088e247b8d7..f3736174665e184c43024f5316a9cfc510d3fd1b 100644
--- a/tests/page/page-request-fallback.spec.ts
+++ b/tests/page/page-request-fallback.spec.ts
@@ -199,7 +199,7 @@ it('should amend method', async ({ page, server }) => {
 });
 
 it('should override request url', async ({ page, server }) => {
-  const serverRequest = server.waitForRequest('/global-var.html');
+  const request = server.waitForRequest('/global-var.html');
 
   let url: string;
   await page.route('**/global-var.html', route => {
@@ -209,12 +209,14 @@ it('should override request url', async ({ page, server }) => {
 
   await page.route('**/foo', route => route.fallback({ url: server.PREFIX + '/global-var.html' }));
 
-  const response = await page.goto(server.PREFIX + '/foo');
+  const [response] = await Promise.all([
+    page.waitForEvent('response'),
+    page.goto(server.PREFIX + '/foo'),
+  ]);
   expect(url).toBe(server.PREFIX + '/global-var.html');
-  expect(response.request().url()).toBe(server.PREFIX + '/global-var.html');
-  expect(response.url()).toBe(server.PREFIX + '/global-var.html');
+  expect(response.url()).toBe(server.PREFIX + '/foo');
   expect(await page.evaluate(() => window['globalVar'])).toBe(123);
-  expect((await serverRequest).method).toBe('GET');
+  expect((await request).method).toBe('GET');
 });
 
 it.describe('post data', () => {
diff --git a/tests/page/page-request-fulfill.spec.ts b/tests/page/page-request-fulfill.spec.ts
index 227de84c61e2c7be8424ba3b3af850d3e08dec29..abcdb3ffe9591cea2cfa41c67f7ce5b3c034b753 100644
--- a/tests/page/page-request-fulfill.spec.ts
+++ b/tests/page/page-request-fulfill.spec.ts
@@ -353,30 +353,3 @@ function findResponse(har: har.HARFile, url: string): har.Response {
   expect(entry, originalUrl).toBeTruthy();
   return entry?.response;
 }
-
-it('should fulfill preload link requests', async ({ page, server, browserName }) => {
-  it.info().annotations.push({ type: 'issue', description: 'https://github.com/microsoft/playwright/issues/16745' });
-  let intercepted = false;
-  await page.route('**/one-style.css', route => {
-    intercepted = true;
-    route.fulfill({
-      status: 200,
-      headers: {
-        'content-type': 'text/css; charset=utf-8',
-        'cache-control': 'no-cache, no-store',
-        'custom': 'value'
-      },
-      body: 'body { background-color: green; }'
-    });
-  });
-  const [response] = await Promise.all([
-    page.waitForResponse('**/one-style.css'),
-    page.goto(server.PREFIX + '/preload.html')
-  ]);
-  expect(await response.headerValue('custom')).toBe('value');
-  await page.waitForFunction(() => (window as any).preloadedStyles);
-  expect(intercepted).toBe(true);
-  const color = await page.evaluate(() => window.getComputedStyle(document.body).backgroundColor);
-  expect(color).toBe('rgb(0, 128, 0)');
-});
-
diff --git a/tests/page/page-route.spec.ts b/tests/page/page-route.spec.ts
index 764d24f06dbbe1ce298464b16b95394c19bd5568..95ada83008a569da3c80b28dbb567e4051226fb2 100644
--- a/tests/page/page-route.spec.ts
+++ b/tests/page/page-route.spec.ts
@@ -140,28 +140,6 @@ it('should properly return navigation response when URL has cookies', async ({ p
   expect(response.status()).toBe(200);
 });
 
-it('should override cookie header', async ({ page, server, browserName }) => {
-  it.info().annotations.push({ type: 'issue', description: 'https://github.com/microsoft/playwright/issues/16773' });
-  it.fail(browserName !== 'firefox');
-
-  await page.goto(server.EMPTY_PAGE);
-  await page.evaluate(() => document.cookie = 'original=value');
-  let cookieValueInRoute;
-  await page.route('**', async route => {
-    const headers = await route.request().allHeaders();
-    cookieValueInRoute = headers['cookie'];
-    headers['cookie'] = 'overridden=value';
-    route.continue({ headers });
-  });
-  const [serverReq] = await Promise.all([
-    server.waitForRequest('/empty.html'),
-    page.goto(server.EMPTY_PAGE),
-  ]);
-
-  expect(cookieValueInRoute).toBe('original=value');
-  expect(serverReq.headers['cookie']).toBe('overridden=value');
-});
-
 it('should show custom HTTP headers', async ({ page, server }) => {
   await page.setExtraHTTPHeaders({
     foo: 'bar'
diff --git a/tests/page/page-screenshot.spec.ts b/tests/page/page-screenshot.spec.ts
index 47cde60ff53f5335e54b6e1dc29e2133c00b94ac..cd346509578676f48935835fadce9b7291e4e4f3 100644
--- a/tests/page/page-screenshot.spec.ts
+++ b/tests/page/page-screenshot.spec.ts
@@ -89,50 +89,6 @@ it.describe('page screenshot', () => {
     expect(hasDifferentScreenshots).toBe(true);
   });
 
-  it('should capture blinking caret in shadow dom', async ({ page, browserName }) => {
-    it.info().annotations.push({ type: 'issue', description: 'https://github.com/microsoft/playwright/issues/16732' });
-    await page.addScriptTag({
-      content: `
-      class CustomElementContainer extends HTMLElement {
-        #shadowRoot;
-        constructor() {
-          super();
-          this.#shadowRoot = this.attachShadow({ mode: 'open' });
-          this.#shadowRoot.innerHTML = '<custom-element-input-wrapper><input type="text"/></custom-element-input-wrapper>';
-        }
-      }
-      class CustomElementInputWrapper extends HTMLElement {
-        #shadowRoot;
-        constructor() {
-          super();
-          this.#shadowRoot = this.attachShadow({ mode: 'open' });
-          this.#shadowRoot.innerHTML = '<style>:host { all: initial; }</style><slot/>';
-        }
-      }
-      customElements.define('custom-element-input-wrapper', CustomElementInputWrapper);
-      customElements.define('custom-element-container', CustomElementContainer);
-
-      const container = document.createElement('custom-element-container');
-      document.body.appendChild(container);`,
-    });
-
-    const input = await page.locator('input');
-    // TODO: click fails in webkit
-    await input.focus();
-
-    const screenshot = await input.screenshot();
-    let hasDifferentScreenshots = false;
-    for (let i = 0; !hasDifferentScreenshots && i < 10; ++i) {
-      // Caret blinking time is set to 500ms.
-      // Try to capture variety of screenshots to make
-      // sure we capture blinking caret.
-      await new Promise(x => setTimeout(x, 150));
-      const newScreenshot = await input.screenshot({ caret: 'hide' });
-      hasDifferentScreenshots = !newScreenshot.equals(screenshot);
-    }
-    expect(hasDifferentScreenshots).toBe(false);
-  });
-
   it('should clip rect', async ({ page, server }) => {
     await page.setViewportSize({ width: 500, height: 500 });
     await page.goto(server.PREFIX + '/grid.html');
@@ -273,10 +229,9 @@ it.describe('page screenshot', () => {
     expect(screenshot).toMatchSnapshot('screenshot-canvas.png', { threshold: 0.4 });
   });
 
-  it('should capture canvas changes', async ({ page, isElectron, browserName, isMac, isWebView2 }) => {
+  it('should capture canvas changes', async ({ page, isElectron, browserName, isMac }) => {
     it.fixme(browserName === 'webkit' && isMac, 'https://github.com/microsoft/playwright/issues/8796,https://github.com/microsoft/playwright/issues/16180');
     it.skip(isElectron);
-    it.skip(isWebView2);
     await page.goto('data:text/html,<canvas></canvas>');
     await page.evaluate(() => {
       const canvas = document.querySelector('canvas');
@@ -431,7 +386,7 @@ it.describe('page screenshot', () => {
       await page.setViewportSize({ width: 500, height: 500 });
       await page.goto(server.PREFIX + '/grid.html');
       expect(await page.screenshot({
-        mask: [page.locator('div').nth(5)],
+        mask: [ page.locator('div').nth(5) ],
       })).toMatchSnapshot('mask-should-work.png');
     });
 
@@ -440,7 +395,7 @@ it.describe('page screenshot', () => {
       await page.goto(server.PREFIX + '/grid.html');
       const bodyLocator = page.locator('body');
       expect(await bodyLocator.screenshot({
-        mask: [page.locator('div').nth(5)],
+        mask: [ page.locator('div').nth(5) ],
       })).toMatchSnapshot('mask-should-work-with-locator.png');
     });
 
@@ -449,7 +404,7 @@ it.describe('page screenshot', () => {
       await page.goto(server.PREFIX + '/grid.html');
       const bodyHandle = await page.$('body');
       expect(await bodyHandle.screenshot({
-        mask: [page.locator('div').nth(5)],
+        mask: [ page.locator('div').nth(5) ],
       })).toMatchSnapshot('mask-should-work-with-elementhandle.png');
     });
 
@@ -484,10 +439,10 @@ it.describe('page screenshot', () => {
       await page.addStyleTag({ content: 'iframe { border: none; }' });
       const screenshots = await Promise.all([
         page.screenshot({
-          mask: [page.frameLocator('#frame1').locator('div').nth(1)],
+          mask: [ page.frameLocator('#frame1').locator('div').nth(1) ],
         }),
         page.screenshot({
-          mask: [page.frameLocator('#frame2').locator('div').nth(3)],
+          mask: [ page.frameLocator('#frame2').locator('div').nth(3) ],
         }),
       ]);
       expect(screenshots[0]).toMatchSnapshot('should-mask-in-parallel-1.png');
@@ -499,7 +454,7 @@ it.describe('page screenshot', () => {
       await page.goto(server.PREFIX + '/grid.html');
       const screenshot1 = await page.screenshot();
       await page.screenshot({
-        mask: [page.locator('div').nth(1)],
+        mask: [ page.locator('div').nth(1) ],
       });
       const screenshot2 = await page.screenshot();
       expect(screenshot1.equals(screenshot2)).toBe(true);
@@ -514,7 +469,7 @@ it.describe('page screenshot', () => {
       const done = page.setContent(`<iframe src='/subframe.html'></iframe>`);
       const route = await routeReady;
 
-      await page.screenshot({ mask: [page.locator('non-existent')] });
+      await page.screenshot({ mask: [ page.locator('non-existent') ] });
       await route.fulfill({ body: '' });
       await done;
     });
@@ -529,7 +484,7 @@ it.describe('page screenshot', () => {
         iframe.contentDocument.write('Hello');
         iframe.contentDocument.close();
       });
-      await page.screenshot({ mask: [page.locator('non-existent')] });
+      await page.screenshot({ mask: [ page.locator('non-existent') ] });
     });
   });
 });
@@ -814,17 +769,3 @@ it.describe('page screenshot animations', () => {
   });
 });
 
-it('should throw if screenshot size is too large', async ({ page, browserName, isMac }) => {
-  it.info().annotations.push({ type: 'issue', description: 'https://github.com/microsoft/playwright/issues/16727' });
-  {
-    await page.setContent(`<style>body {margin: 0; padding: 0;}</style><div style='min-height: 32767px; background: red;'></div>`);
-    const result = await page.screenshot({ fullPage: true });
-    expect(result).toBeTruthy();
-  }
-  {
-    await page.setContent(`<style>body {margin: 0; padding: 0;}</style><div style='min-height: 32768px; background: red;'></div>`);
-    const exception = await page.screenshot({ fullPage: true }).catch(e => e);
-    if (browserName === 'firefox' || (browserName === 'webkit' && !isMac))
-      expect(exception.message).toContain('Cannot take screenshot larger than 32767');
-  }
-});
diff --git a/tests/page/page-select-option.spec.ts b/tests/page/page-select-option.spec.ts
index 2046f2cb291fa7b1305bc2f8bc0dfb659c567aa8..e9808b43496e84c760b3f0b6cb111f19a1486a38 100644
--- a/tests/page/page-select-option.spec.ts
+++ b/tests/page/page-select-option.spec.ts
@@ -108,6 +108,26 @@ it('should select multiple options with attributes', async ({ page, server }) =>
   expect(await page.evaluate(() => window['result'].onChange)).toEqual(['blue', 'gray', 'green']);
 });
 
+it('should select options with sibling label', async ({ page, server }) => {
+  await page.setContent(`<label for=pet-select>Choose a pet</label>
+    <select id='pet-select'>
+      <option value='dog'>Dog</option>
+      <option value='cat'>Cat</option>
+    </select>`);
+  await page.selectOption('text=Choose a pet', 'cat');
+  expect(await page.$eval('select', select => select.options[select.selectedIndex].text)).toEqual('Cat');
+});
+
+it('should select options with outer label', async ({ page, server }) => {
+  await page.setContent(`<label for=pet-select>Choose a pet
+    <select id='pet-select'>
+      <option value='dog'>Dog</option>
+      <option value='cat'>Cat</option>
+    </select></label>`);
+  await page.selectOption('text=Choose a pet', 'cat');
+  expect(await page.$eval('select', select => select.options[select.selectedIndex].text)).toEqual('Cat');
+});
+
 it('should respect event bubbling', async ({ page, server }) => {
   await page.goto(server.PREFIX + '/input/select.html');
   await page.selectOption('select', 'blue');
@@ -131,50 +151,50 @@ it('should return [] on no matched values', async ({ page, server }) => {
 it('should return an array of matched values', async ({ page, server }) => {
   await page.goto(server.PREFIX + '/input/select.html');
   await page.evaluate(() => window['makeMultiple']());
-  const result = await page.selectOption('select', ['blue', 'black', 'magenta']);
-  expect(result.reduce((accumulator, current) => ['blue', 'black', 'magenta'].includes(current) && accumulator, true)).toEqual(true);
+  const result = await page.selectOption('select', ['blue','black','magenta']);
+  expect(result.reduce((accumulator,current) => ['blue', 'black', 'magenta'].includes(current) && accumulator, true)).toEqual(true);
 });
 
 it('should return an array of one element when multiple is not set', async ({ page, server }) => {
   await page.goto(server.PREFIX + '/input/select.html');
-  const result = await page.selectOption('select', ['42', 'blue', 'black', 'magenta']);
+  const result = await page.selectOption('select',['42','blue','black','magenta']);
   expect(result.length).toEqual(1);
 });
 
-it('should return [] on no values', async ({ page, server }) => {
+it('should return [] on no values',async ({ page, server }) => {
   await page.goto(server.PREFIX + '/input/select.html');
   const result = await page.selectOption('select', []);
   expect(result).toEqual([]);
 });
 
-it('should not allow null items', async ({ page, server }) => {
+it('should not allow null items',async ({ page, server }) => {
   await page.goto(server.PREFIX + '/input/select.html');
   await page.evaluate(() => window['makeMultiple']());
   let error = null;
-  await page.selectOption('select', ['blue', null, 'black', 'magenta']).catch(e => error = e);
+  await page.selectOption('select', ['blue', null, 'black','magenta']).catch(e => error = e);
   expect(error.message).toContain('options[1]: expected object, got null');
 });
 
-it('should unselect with null', async ({ page, server }) => {
+it('should unselect with null',async ({ page, server }) => {
   await page.goto(server.PREFIX + '/input/select.html');
   await page.evaluate(() => window['makeMultiple']());
-  const result = await page.selectOption('select', ['blue', 'black', 'magenta']);
-  expect(result.reduce((accumulator, current) => ['blue', 'black', 'magenta'].includes(current) && accumulator, true)).toEqual(true);
+  const result = await page.selectOption('select', ['blue', 'black','magenta']);
+  expect(result.reduce((accumulator,current) => ['blue', 'black', 'magenta'].includes(current) && accumulator, true)).toEqual(true);
   await page.selectOption('select', null);
   expect(await page.$eval('select', select => Array.from(select.options).every(option => !option.selected))).toEqual(true);
 });
 
-it('should deselect all options when passed no values for a multiple select', async ({ page, server }) => {
+it('should deselect all options when passed no values for a multiple select',async ({ page, server }) => {
   await page.goto(server.PREFIX + '/input/select.html');
   await page.evaluate(() => window['makeMultiple']());
-  await page.selectOption('select', ['blue', 'black', 'magenta']);
+  await page.selectOption('select', ['blue','black','magenta']);
   await page.selectOption('select', []);
   expect(await page.$eval('select', select => Array.from(select.options).every(option => !option.selected))).toEqual(true);
 });
 
-it('should deselect all options when passed no values for a select without multiple', async ({ page, server }) => {
+it('should deselect all options when passed no values for a select without multiple',async ({ page, server }) => {
   await page.goto(server.PREFIX + '/input/select.html');
-  await page.selectOption('select', ['blue', 'black', 'magenta']);
+  await page.selectOption('select', ['blue','black','magenta']);
   await page.selectOption('select', []);
   expect(await page.$eval('select', select => Array.from(select.options).every(option => !option.selected))).toEqual(true);
 });
@@ -228,7 +248,7 @@ it('should work when re-defining top-level Event class', async ({ page, server }
   expect(await page.evaluate(() => window['result'].onChange)).toEqual(['blue']);
 });
 
-it('should wait for option to be present', async ({ page, server }) => {
+it('should wait for option to be present',async ({ page, server }) => {
   await page.goto(server.PREFIX + '/input/select.html');
   const selectPromise  = page.selectOption('select', 'scarlet');
   let didSelect = false;
@@ -245,7 +265,7 @@ it('should wait for option to be present', async ({ page, server }) => {
   expect(items).toStrictEqual(['scarlet']);
 });
 
-it('should wait for option index to be present', async ({ page, server }) => {
+it('should wait for option index to be present',async ({ page, server }) => {
   await page.goto(server.PREFIX + '/input/select.html');
   const len = await page.$eval('select', select => select.options.length);
   const selectPromise  = page.selectOption('select', { index: len });
@@ -263,7 +283,7 @@ it('should wait for option index to be present', async ({ page, server }) => {
   expect(items).toStrictEqual(['scarlet']);
 });
 
-it('should wait for multiple options to be present', async ({ page, server }) => {
+it('should wait for multiple options to be present',async ({ page, server }) => {
   await page.goto(server.PREFIX + '/input/select.html');
   await page.evaluate(() => window['makeMultiple']());
   const selectPromise  = page.selectOption('select', ['green', 'scarlet']);
diff --git a/tests/page/page-set-content.spec.ts b/tests/page/page-set-content.spec.ts
index 4f0c903bfcee83dfbd5790c01a534ccf5c8b93a7..2d8d87a511bc5c75cff8b2b38d99f938766e2379 100644
--- a/tests/page/page-set-content.spec.ts
+++ b/tests/page/page-set-content.spec.ts
@@ -123,8 +123,8 @@ it('content() should throw nice error during navigation', async ({ page, server
   }
 });
 
-it('should return empty content there is no iframe src', async ({ page }) => {
-  it.fixme(true, 'Hangs in all browsers because there is no utility context');
+it('should return empty content there is no iframe src', async ({ page, browserName }) => {
+  it.fixme(browserName === 'firefox' || browserName === 'chromium', 'Hangs in FF && CR because there is no utility context');
   await page.setContent(`<iframe src="javascript:console.log(1)"></iframe>`);
   expect(page.frames().length).toBe(2);
   expect(await page.frames()[1].content()).toBe('<html><head></head><body></body></html>');
diff --git a/tests/page/page-set-input-files.spec.ts b/tests/page/page-set-input-files.spec.ts
index d987bae577b8fa41a6fc03208e1851fa5696389b..c16247893819fb6f8b8fd700520fc215ae78c902 100644
--- a/tests/page/page-set-input-files.spec.ts
+++ b/tests/page/page-set-input-files.spec.ts
@@ -142,6 +142,13 @@ it('should work @smoke', async ({ page, asset }) => {
   expect(await page.$eval('input', input => input.files[0].name)).toBe('file-to-upload.txt');
 });
 
+it('should work with label', async ({ page, asset }) => {
+  await page.setContent(`<label for=target>Choose a file</label><input id=target type=file>`);
+  await page.setInputFiles('text=Choose a file', asset('file-to-upload.txt'));
+  expect(await page.$eval('input', input => input.files.length)).toBe(1);
+  expect(await page.$eval('input', input => input.files[0].name)).toBe('file-to-upload.txt');
+});
+
 it('should set from memory', async ({ page }) => {
   await page.setContent(`<input type=file>`);
   await page.setInputFiles('input', {
@@ -222,7 +229,7 @@ it('should work when file input is attached to DOM', async ({ page, server }) =>
 });
 
 it('should work when file input is not attached to DOM', async ({ page, asset }) => {
-  const [, content] = await Promise.all([
+  const [,content] = await Promise.all([
     page.waitForEvent('filechooser').then(chooser => chooser.setFiles(asset('file-to-upload.txt'))),
     page.evaluate(async () => {
       const el = document.createElement('input');
diff --git a/tests/page/page-wait-for-load-state.spec.ts b/tests/page/page-wait-for-load-state.spec.ts
index 9c2b5a3ea53121814b4b7e5752c6626e9b14ae48..a4cfef21e59afa3fd8c1564a8ed235764973ff91 100644
--- a/tests/page/page-wait-for-load-state.spec.ts
+++ b/tests/page/page-wait-for-load-state.spec.ts
@@ -169,7 +169,7 @@ it('should work for frame', async ({ page, server }) => {
   await page.goto(server.PREFIX + '/frames/one-frame.html');
   const frame = page.frames()[1];
 
-  const requestPromise = new Promise<Route>(resolve => page.route(server.PREFIX + '/one-style.css', resolve));
+  const requestPromise = new Promise<Route>(resolve => page.route(server.PREFIX + '/one-style.css',resolve));
   await frame.goto(server.PREFIX + '/one-style.html', { waitUntil: 'domcontentloaded' });
   const request = await requestPromise;
   let resolved = false;
diff --git a/tests/page/page-wait-for-navigation.spec.ts b/tests/page/page-wait-for-navigation.spec.ts
index 92cb01f32670c056e47a7613c741ab7b81e5b6a3..8dad7dabea3aefe5e6c5f3c06524b02b3d822024 100644
--- a/tests/page/page-wait-for-navigation.spec.ts
+++ b/tests/page/page-wait-for-navigation.spec.ts
@@ -155,18 +155,18 @@ it('should work with DOM history.back()/history.forward()', async ({ page, serve
   expect(page.url()).toBe(server.PREFIX + '/second.html');
 });
 
-it('should work when subframe issues window.stop()', async ({ browserName, page, server }) => {
+it('should work when subframe issues window.stop()', async ({ page, server }) => {
   server.setRoute('/frames/style.css', (req, res) => {});
-  let done = false;
-  page.goto(server.PREFIX + '/frames/one-frame.html').then(() => done = true).catch(() => {});
+  const navigationPromise = page.goto(server.PREFIX + '/frames/one-frame.html');
   const frame = await new Promise<Frame>(f => page.once('frameattached', f));
   await new Promise<void>(fulfill => page.on('framenavigated', f => {
     if (f === frame)
       fulfill();
   }));
-  await frame.evaluate(() => window.stop());
-  await page.waitForTimeout(2000);  // give it some time to erroneously resolve
-  expect(done).toBe(browserName !== 'webkit');  // Chromium and Firefox issue load event in this case.
+  await Promise.all([
+    frame.evaluate(() => window.stop()),
+    navigationPromise
+  ]);
 });
 
 it('should work with url match', async ({ page, server }) => {
diff --git a/tests/page/pageTest.ts b/tests/page/pageTest.ts
index 54f3ec92333732bef33d5859d3ff4d349cf01562..f5439c9d28883f1980ab90c5cac0409dfb952655 100644
--- a/tests/page/pageTest.ts
+++ b/tests/page/pageTest.ts
@@ -20,7 +20,6 @@ import type { TestModeTestFixtures, TestModeWorkerFixtures, TestModeWorkerOption
 import { androidTest } from '../android/androidTest';
 import { browserTest } from '../config/browserTest';
 import { electronTest } from '../electron/electronTest';
-import { webView2Test } from '../webview2/webView2Test';
 import type { PageTestFixtures, PageWorkerFixtures } from './pageTestApi';
 import type { ServerFixtures, ServerWorkerOptions } from '../config/serverFixtures';
 export { expect } from '@playwright/test';
@@ -31,7 +30,5 @@ if (process.env.PWPAGE_IMPL === 'android')
   impl = androidTest;
 if (process.env.PWPAGE_IMPL === 'electron')
   impl = electronTest;
-if (process.env.PWPAGE_IMPL === 'webview2')
-  impl = webView2Test;
 
 export const test = impl;
diff --git a/tests/page/pageTestApi.ts b/tests/page/pageTestApi.ts
index cccde4490185568b88c69acec543c1bc9f5f13d1..d4050c1f3b1bfcaa5806bfc8627792952a1eec53 100644
--- a/tests/page/pageTestApi.ts
+++ b/tests/page/pageTestApi.ts
@@ -33,5 +33,4 @@ export type PageWorkerFixtures = {
   browserMajorVersion: number;
   isAndroid: boolean;
   isElectron: boolean;
-  isWebView2: boolean;
 };
diff --git a/tests/page/retarget.spec.ts b/tests/page/retarget.spec.ts
deleted file mode 100644
index d955271852ebaa3940d12f201b5dd2d0228c8cbd..0000000000000000000000000000000000000000
--- a/tests/page/retarget.spec.ts
+++ /dev/null
@@ -1,381 +0,0 @@
-/**
- * Copyright 2017 Google Inc. All rights reserved.
- * Modifications copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import { test as it, expect } from './pageTest';
-
-async function giveItAChanceToResolve(page) {
-  for (let i = 0; i < 5; i++)
-    await page.evaluate(() => new Promise(f => requestAnimationFrame(() => requestAnimationFrame(f))));
-}
-
-it('element state checks should work as expected for label with zero-sized input', async ({ page, server }) => {
-  await page.setContent(`
-    <label>
-      Click me
-      <input disabled style="width:0;height:0;padding:0;margin:0;border:0;">
-    </label>
-  `);
-  // Visible checks the label.
-  expect(await page.isVisible('text=Click me')).toBe(true);
-  expect(await page.isHidden('text=Click me')).toBe(false);
-
-  // Enabled checks the input.
-  expect(await page.isEnabled('text=Click me')).toBe(false);
-  expect(await page.isDisabled('text=Click me')).toBe(true);
-});
-
-it('should wait for enclosing disabled button', async ({ page }) => {
-  await page.setContent('<button><span>Target</span></button>');
-  const span = await page.$('text=Target');
-  let done = false;
-  const promise = span.waitForElementState('disabled').then(() => done = true);
-  await giveItAChanceToResolve(page);
-  expect(done).toBe(false);
-  await span.evaluate(span => (span.parentElement as HTMLButtonElement).disabled = true);
-  await promise;
-});
-
-it('should wait for enclosing button with a disabled fieldset', async ({ page }) => {
-  await page.setContent('<fieldset disabled=true><button><span>Target</span></button></div>');
-  const span = await page.$('text=Target');
-  let done = false;
-  const promise = span.waitForElementState('enabled').then(() => done = true);
-  await giveItAChanceToResolve(page);
-  expect(done).toBe(false);
-  await span.evaluate(span => (span.parentElement.parentElement as HTMLFieldSetElement).disabled = false);
-  await promise;
-});
-
-it('should wait for enclosing enabled button', async ({ page, server }) => {
-  await page.setContent('<button disabled><span>Target</span></button>');
-  const span = await page.$('text=Target');
-  let done = false;
-  const promise = span.waitForElementState('enabled').then(() => done = true);
-  await giveItAChanceToResolve(page);
-  expect(done).toBe(false);
-  await span.evaluate(span => (span.parentElement as HTMLButtonElement).disabled = false);
-  await promise;
-});
-
-it('should check the box outside shadow dom label', async ({ page }) => {
-  await page.setContent('<div></div>');
-  await page.$eval('div', div => {
-    const root = div.attachShadow({ mode: 'open' });
-    const label = document.createElement('label');
-    label.setAttribute('for', 'target');
-    label.textContent = 'Click me';
-    root.appendChild(label);
-    const input = document.createElement('input');
-    input.setAttribute('type', 'checkbox');
-    input.setAttribute('id', 'target');
-    root.appendChild(input);
-  });
-  await page.check('label');
-  expect(await page.$eval('input', input => input.checked)).toBe(true);
-});
-
-it('setInputFiles should work with label', async ({ page, asset }) => {
-  await page.setContent(`<label for=target>Choose a file</label><input id=target type=file>`);
-  await page.setInputFiles('text=Choose a file', asset('file-to-upload.txt'));
-  expect(await page.$eval('input', input => input.files.length)).toBe(1);
-  expect(await page.$eval('input', input => input.files[0].name)).toBe('file-to-upload.txt');
-});
-
-type Options = { disabled?: boolean, hidden?: boolean, readonly?: boolean };
-const optionsToAttributes = (options: Options | undefined) => ` ${options?.disabled ? 'disabled' : ''} ${options?.hidden ? 'hidden' : ''} ${options?.readonly ? 'readonly' : ''} `;
-const domInLabel = (dom: string, options?: Options) => `<label ${optionsToAttributes(options)}>Text ${dom}</label>`;
-const domLabelFor = (dom: string, options?: Options) => `<label ${optionsToAttributes(options)} for="target"><h1>Text</h1></label>${dom}`;
-const domStandalone = (dom: string) => dom;
-const domInButton = (dom: string, options?: Options) => `<button ${optionsToAttributes(options)}>Button ${dom}</button>`;
-const domInLink = (dom: string, options?: Options) => `<button ${optionsToAttributes(options)}>Button ${dom}</button>`;
-
-it('enabled/disabled retargeting', async ({ page, asset }) => {
-  const cases = [
-    { dom: domInLabel(`<input id=target>`), enabled: true, locator: 'label' },
-    { dom: domLabelFor(`<input id=target>`), enabled: true, locator: 'label' },
-    { dom: domStandalone(`<input id=target>`), enabled: true, locator: 'input' },
-    { dom: domInButton(`<input id=target>`), enabled: true, locator: 'input' },
-    { dom: domInLink(`<input id=target>`), enabled: true, locator: 'input' },
-    { dom: domInButton(`<input id=target>`, { disabled: true }), enabled: true, locator: 'input' },
-
-    { dom: domInLabel(`<input id=target disabled>`), enabled: false, locator: 'label' },
-    { dom: domLabelFor(`<input id=target disabled>`), enabled: false, locator: 'label' },
-    { dom: domStandalone(`<input id=target disabled>`), enabled: false, locator: 'input' },
-    { dom: domInButton(`<input id=target disabled>`), enabled: false, locator: 'input' },
-    { dom: domInLink(`<input id=target disabled>`), enabled: false, locator: 'input' },
-    { dom: domInButton(`<input id=target disabled>`, { disabled: true }), enabled: false, locator: 'input' },
-  ];
-  for (const { dom, enabled, locator } of cases) {
-    await it.step(`"${locator}" in "${dom}" should be enabled=${enabled}`, async () => {
-      await page.setContent(dom);
-      const target = page.locator(locator);
-      const handle = await page.$(locator);
-      expect(await target.isEnabled()).toBe(enabled);
-      expect(await target.isDisabled()).toBe(!enabled);
-      if (enabled) {
-        await expect(target).toBeEnabled();
-        await expect(target).not.toBeDisabled();
-        await handle.waitForElementState('enabled');
-      } else {
-        await expect(target).not.toBeEnabled();
-        await expect(target).toBeDisabled();
-        await handle.waitForElementState('disabled');
-      }
-    });
-  }
-});
-
-it('visible/hidden retargeting', async ({ page, asset }) => {
-  const cases = [
-    { dom: domInLabel(`<span id=target>content</span>`), visible: true, locator: 'label' },
-    { dom: domInLabel(`<span id=target hidden>content</span>`), visible: true, locator: 'label' },
-    { dom: domLabelFor(`<span id=target>content</span>`), visible: true, locator: 'label' },
-    { dom: domLabelFor(`<span id=target hidden>content</span>`), visible: true, locator: 'label' },
-    { dom: domStandalone(`<span id=target>content</span>`), visible: true, locator: 'span' },
-    { dom: domInButton(`<span id=target>content</span>`), visible: true, locator: 'span' },
-    { dom: domInLink(`<span id=target>content</span>`), visible: true, locator: 'span' },
-
-    { dom: domInLabel(`<span id=target>content</span>`, { hidden: true }), visible: false, locator: 'label' },
-    { dom: domLabelFor(`<span id=target>content</span>`, { hidden: true }), visible: false, locator: 'label' },
-    { dom: domStandalone(`<span id=target hidden>content</span>`), visible: false, locator: 'span' },
-    { dom: domInButton(`<span id=target hidden>content</span>`), visible: false, locator: 'span' },
-    { dom: domInButton(`<span id=target>content</span>`, { hidden: true }), visible: false, locator: 'span' },
-    { dom: domInLink(`<span id=target hidden>content</span>`), visible: false, locator: 'span' },
-    { dom: domInLink(`<span id=target>content</span>`, { hidden: true }), visible: false, locator: 'span' },
-  ];
-  for (const { dom, visible, locator } of cases) {
-    await it.step(`"${locator}" in "${dom}" should be visible=${visible}`, async () => {
-      await page.setContent(dom);
-      const target = page.locator(locator);
-      const handle = await page.$(locator);
-      expect(await target.isVisible()).toBe(visible);
-      expect(await target.isHidden()).toBe(!visible);
-      if (visible) {
-        await expect(target).toBeVisible();
-        await expect(target).not.toBeHidden();
-        await handle.waitForElementState('visible');
-      } else {
-        await expect(target).not.toBeVisible();
-        await expect(target).toBeHidden();
-        await handle.waitForElementState('hidden');
-      }
-    });
-  }
-});
-
-it('editable retargeting', async ({ page, asset }) => {
-  const cases = [
-    { dom: domInLabel(`<input id=target>`), editable: true, locator: 'label' },
-    { dom: domLabelFor(`<input id=target>`), editable: true, locator: 'label' },
-    { dom: domStandalone(`<input id=target>`), editable: true, locator: 'input' },
-    { dom: domInButton(`<input id=target>`), editable: true, locator: 'input' },
-    { dom: domInLink(`<input id=target>`), editable: true, locator: 'input' },
-    { dom: domInButton(`<input id=target>`, { readonly: true }), editable: true, locator: 'input' },
-
-    { dom: domInLabel(`<input id=target readonly>`), editable: false, locator: 'label' },
-    { dom: domLabelFor(`<input id=target readonly>`), editable: false, locator: 'label' },
-    { dom: domStandalone(`<input id=target readonly>`), editable: false, locator: 'input' },
-    { dom: domInButton(`<input id=target readonly>`), editable: false, locator: 'input' },
-    { dom: domInLink(`<input id=target readonly>`), editable: false, locator: 'input' },
-    { dom: domInButton(`<input id=target readonly>`, { readonly: true }), editable: false, locator: 'input' },
-  ];
-  for (const { dom, editable, locator } of cases) {
-    await it.step(`"${locator}" in "${dom}" should be editable=${editable}`, async () => {
-      await page.setContent(dom);
-      const target = page.locator(locator);
-      const handle = await page.$(locator);
-      expect(await target.isEditable()).toBe(editable);
-      if (editable) {
-        await expect(target).toBeEditable();
-        await handle.waitForElementState('editable');
-      } else {
-        await expect(target).not.toBeEditable();
-      }
-    });
-  }
-});
-
-it('input value retargeting', async ({ page, browserName }) => {
-  const cases = [
-    { dom: domInLabel(`<input id=target>`), locator: 'label' },
-    { dom: domLabelFor(`<input id=target>`), locator: 'label' },
-    { dom: domStandalone(`<input id=target>`), locator: 'input' },
-    { dom: domInButton(`<input id=target>`), locator: 'input' },
-    { dom: domInLink(`<input id=target>`), locator: 'input' },
-    { dom: domInButton(`<input id=target>`), locator: 'input' },
-  ];
-  for (const { dom, locator } of cases) {
-    await it.step(`"${locator}" in "${dom}" input value`, async () => {
-      await page.setContent(dom);
-      const target = page.locator(locator);
-      const handle = await page.$(locator);
-
-      expect(await target.inputValue()).toBe('');
-      expect(await handle.inputValue()).toBe('');
-      await expect(target).toHaveValue('');
-
-      await target.fill('foo');
-      expect(await target.inputValue()).toBe('foo');
-      expect(await handle.inputValue()).toBe('foo');
-      await expect(target).toHaveValue('foo');
-
-      await page.$eval('#target', (input: HTMLInputElement) => input.value = 'bar');
-      expect(await target.inputValue()).toBe('bar');
-      expect(await handle.inputValue()).toBe('bar');
-      await expect(target).toHaveValue('bar');
-
-      await target.selectText();
-      if (browserName === 'firefox') {
-        expect(await page.locator('#target').evaluate((el: HTMLInputElement) => el.selectionStart)).toBe(0);
-        expect(await page.locator('#target').evaluate((el: HTMLInputElement) => el.selectionEnd)).toBe(3);
-      } else {
-        expect(await page.evaluate(() => window.getSelection().toString())).toBe('bar');
-      }
-    });
-  }
-});
-
-it.fixme('selection retargeting', async ({ page, browserName }) => {
-  const cases = [
-    { dom: domStandalone(`<div contenteditable id=target>content</div>`), locator: 'div' },
-    { dom: domInButton(`<div contenteditable id=target>content</div>`), locator: 'div' },
-    { dom: domInLink(`<div contenteditable id=target>content</div>`), locator: 'div' },
-    { dom: domInButton(`<div contenteditable id=target>content</div>`), locator: 'div' },
-  ];
-  for (const { dom, locator } of cases) {
-    await it.step(`"${locator}" in "${dom}" text selection`, async () => {
-      await page.setContent(dom);
-      const target = page.locator(locator);
-      const handle = await page.$(locator);
-
-      expect(await target.isEditable()).toBe(true);
-      expect(await handle.isEditable()).toBe(true);
-      await expect(page.locator('#target')).toHaveText('content');
-
-      await target.fill('foo');
-      await expect(page.locator('#target')).toHaveText('foo');
-
-      await target.selectText();
-      if (browserName === 'firefox') {
-        expect(await page.$eval('#target', target => {
-          const selection = window.getSelection();
-          return selection.anchorNode === target && selection.focusNode === target;
-        })).toBe(true);
-      } else {
-        expect(await page.evaluate(() => window.getSelection().toString())).toBe('foo');
-      }
-    });
-  }
-});
-
-it('select options retargeting', async ({ page }) => {
-  const cases = [
-    { dom: domInLabel(`<select id=target multiple><option value=dog selected>Dog</option><option value=cat>Cat</option></select>`), locator: 'label' },
-    { dom: domLabelFor(`<select id=target multiple><option value=dog selected>Dog</option><option value=cat>Cat</option></select>`), locator: 'label' },
-    { dom: domStandalone(`<select id=target multiple><option value=dog selected>Dog</option><option value=cat>Cat</option></select>`), locator: 'select' },
-    { dom: domInButton(`<select id=target multiple><option value=dog selected>Dog</option><option value=cat>Cat</option></select>`), locator: 'select' },
-    { dom: domInLink(`<select id=target multiple><option value=dog selected>Dog</option><option value=cat>Cat</option></select>`), locator: 'select' },
-    { dom: domInButton(`<select id=target multiple><option value=dog selected>Dog</option><option value=cat>Cat</option></select>`), locator: 'select' },
-  ];
-  for (const { dom, locator } of cases) {
-    await it.step(`"${locator}" in "${dom}" select option`, async () => {
-      await page.setContent(dom);
-      const target = page.locator(locator);
-      const handle = await page.$(locator);
-
-      expect(await target.inputValue()).toBe('dog');
-      expect(await handle.inputValue()).toBe('dog');
-      await expect(target).toHaveValue('dog');
-      await expect(target).toHaveValues(['dog']);
-
-      await target.selectOption('cat');
-      expect(await target.inputValue()).toBe('cat');
-      expect(await handle.inputValue()).toBe('cat');
-      await expect(target).toHaveValue('cat');
-      await expect(target).toHaveValues(['cat']);
-    });
-  }
-});
-
-it('direct actions retargeting', async ({ page }) => {
-  const cases = [
-    { dom: domInLabel(`<div>content</div><input id=target value=oh>`), locator: 'div' },
-    { dom: domLabelFor(`<div>content</div><input id=target value=oh>`), locator: 'div' },
-    { dom: domStandalone(`<div>content</div>`), locator: 'div' },
-    { dom: domInButton(`<div>content</div>`), locator: 'div' },
-    { dom: domInLink(`<div>content</div>`), locator: 'div' },
-    { dom: domInButton(`<div>content</div>`), locator: 'div' },
-  ];
-  for (const { dom, locator } of cases) {
-    await it.step(`"${locator}" in "${dom}" direct actions`, async () => {
-      await page.setContent(dom);
-      const target = page.locator(locator);
-
-      expect(await target.innerText()).toBe('content');
-      expect(await target.textContent()).toBe('content');
-      await expect(target).toHaveText('content');
-      await expect(target).toContainText('content');
-      await expect(target).not.toBeFocused();
-      await expect(target).toHaveCount(1);
-
-      await page.$eval('div', div => (div as any).foo = 'bar');
-      await expect(target).toHaveJSProperty('foo', 'bar');
-
-      await page.$eval('div', div => div.classList.add('cls'));
-      await expect(target).toHaveClass('cls');
-
-      await page.$eval('div', div => div.id = 'myid');
-      await expect(target).toHaveId('myid');
-      await expect(target).toHaveAttribute('id', 'myid');
-      expect(await target.getAttribute('id')).toBe('myid');
-    });
-  }
-});
-
-it('check retargeting', async ({ page, asset }) => {
-  const cases = [
-    { dom: domInLabel(`<input type=checkbox id=target>`), locator: 'label' },
-    { dom: domLabelFor(`<input type=checkbox id=target>`), locator: 'label' },
-    { dom: domStandalone(`<input type=checkbox id=target>`), locator: 'input' },
-    { dom: domInButton(`<input type=checkbox id=target>`), locator: 'input' },
-    { dom: domInLink(`<input type=checkbox id=target>`), locator: 'input' },
-    { dom: domInButton(`<input type=checkbox id=target>`), locator: 'input' },
-  ];
-  for (const { dom, locator } of cases) {
-    await it.step(`"${locator}" in "${dom}" check`, async () => {
-      await page.setContent(dom);
-      const target = page.locator(locator);
-      expect(await target.isChecked()).toBe(false);
-      await expect(target).not.toBeChecked();
-      await expect(target).toBeChecked({ checked: false });
-
-      await page.$eval('input', (input: HTMLInputElement) => input.checked = true);
-      expect(await target.isChecked()).toBe(true);
-      await expect(target).toBeChecked();
-      await expect(target).toBeChecked({ checked: true });
-
-      await target.uncheck();
-      expect(await page.$eval('input', (input: HTMLInputElement) => input.checked)).toBe(false);
-
-      await target.check();
-      expect(await page.$eval('input', (input: HTMLInputElement) => input.checked)).toBe(true);
-
-      await target.setChecked(false);
-      expect(await page.$eval('input', (input: HTMLInputElement) => input.checked)).toBe(false);
-    });
-  }
-});
diff --git a/tests/page/selectors-text.spec.ts b/tests/page/selectors-text.spec.ts
index 002e24e2ca3e95d77b8c522f741b7d3dd7edfbeb..5975e5cdc27fc32e156c053a4f2ee0ccae94acaa 100644
--- a/tests/page/selectors-text.spec.ts
+++ b/tests/page/selectors-text.spec.ts
@@ -439,16 +439,3 @@ it('should work with unpaired quotes when not at the start', async ({ page }) =>
   expect(await page.$(`text=" >> span`)).toBe(null);
   expect(await page.$(`text=\` >> span`)).toBe(null);
 });
-
-it('should work with paired quotes in the middle of selector', async ({ page }) => {
-  it.info().annotations.push({ type: 'issue', description: 'https://github.com/microsoft/playwright/issues/16858' });
-  await page.setContent(`<div>pattern "^-?\\d+$"</div>`);
-  expect(await page.locator(`div >> text=pattern "^-?\\d+$`).isVisible());
-  expect(await page.locator(`div >> text=pattern "^-?\\d+$"`).isVisible());
-  // Should double escape inside quoted text.
-  expect(await page.locator(`div >> text='pattern "^-?\\\\d+$"'`).isVisible());
-  await expect(page.locator(`div >> text=pattern "^-?\\d+$`)).toBeVisible();
-  await expect(page.locator(`div >> text=pattern "^-?\\d+$"`)).toBeVisible();
-  // Should double escape inside quoted text.
-  await expect(page.locator(`div >> text='pattern "^-?\\\\d+$"'`)).toBeVisible();
-});
diff --git a/tests/playwright-test/access-data.spec.ts b/tests/playwright-test/access-data.spec.ts
index 1070dcbd9ddf2952ec9741b09c3a181be6b38644..b494572364d078af2c210b5e8598c5484ecf1f0c 100644
--- a/tests/playwright-test/access-data.spec.ts
+++ b/tests/playwright-test/access-data.spec.ts
@@ -58,7 +58,7 @@ test('should access annotations in fixture', async ({ runInlineTest }) => {
   });
   expect(exitCode).toBe(0);
   const test = report.suites[0].specs[0].tests[0];
-  expect(test.annotations).toEqual([{ type: 'slow', description: 'just slow' }, { type: 'myname', description: 'hello' }]);
+  expect(test.annotations).toEqual([ { type: 'slow', description: 'just slow' }, { type: 'myname', description: 'hello' } ]);
   expect(test.results[0].stdout).toEqual([{ text: 'console.log\n' }]);
   expect(test.results[0].stderr).toEqual([{ text: 'console.error\n' }]);
 });
diff --git a/tests/playwright-test/config.spec.ts b/tests/playwright-test/config.spec.ts
index a699168ee5f423fe03c6a835596738cae97facbc..fe7ce22dec1bfef5caf43caa319e2d8a4d9cc342 100644
--- a/tests/playwright-test/config.spec.ts
+++ b/tests/playwright-test/config.spec.ts
@@ -373,26 +373,6 @@ test('should inerhit use options in projects', async ({ runInlineTest }) => {
   expect(result.passed).toBe(1);
 });
 
-test('should support ignoreSnapshots config option', async ({ runInlineTest }) => {
-  const result = await runInlineTest({
-    'playwright.config.ts': `
-      module.exports = {
-        ignoreSnapshots: true,
-      };
-    `,
-    'a.test.ts': `
-      const { test } = pwt;
-      test('pass', async ({}, testInfo) => {
-        expect('foo').toMatchSnapshot();
-        expect('foo').not.toMatchSnapshot();
-      });
-    `
-  });
-
-  expect(result.exitCode).toBe(0);
-  expect(result.passed).toBe(1);
-});
-
 test('should work with undefined values and base', async ({ runInlineTest }) => {
   const result = await runInlineTest({
     'playwright.config.ts': `
diff --git a/tests/playwright-test/exit-code.spec.ts b/tests/playwright-test/exit-code.spec.ts
index 9126ba9af6735d01d83270227d27aac1e559c29e..eac2c8a96340774b6617289ce86e5bf6ebc6e764 100644
--- a/tests/playwright-test/exit-code.spec.ts
+++ b/tests/playwright-test/exit-code.spec.ts
@@ -156,16 +156,6 @@ test('should exit with code 1 if passed a file name', async ({ runInlineTest })
   expect(result.output).toContain(`no tests found.`);
 });
 
-test('should exit with code 0 with --pass-with-no-tests', async ({ runInlineTest }) => {
-  const result = await runInlineTest({
-    'playwright.config.ts': `
-      module.exports = { testDir: 'unknown' };
-    `,
-  }, undefined, undefined, { additionalArgs: ['--pass-with-no-tests'] });
-  expect(result.exitCode).toBe(0);
-  expect(result.output).toContain(`Running 0 tests using 0 workers`);
-});
-
 test('should exit with code 1 when config is not found', async ({ runInlineTest }) => {
   const result = await runInlineTest({ 'my.config.js': '' }, { 'config': 'foo.config.js' });
   expect(result.exitCode).toBe(1);
diff --git a/tests/playwright-test/expect.spec.ts b/tests/playwright-test/expect.spec.ts
index 112b431351112f1d48f616b426ab3cb3ddd5f437..dd21af5a492318e35405ba2351042411bb403180 100644
--- a/tests/playwright-test/expect.spec.ts
+++ b/tests/playwright-test/expect.spec.ts
@@ -14,7 +14,6 @@
  * limitations under the License.
  */
 
-import path from 'path';
 import { test, expect, stripAnsi } from './playwright-test-fixtures';
 
 test('should be able to call expect.extend in config', async ({ runInlineTest }) => {
@@ -222,13 +221,6 @@ test('should propose only the relevant matchers when custom expect matcher class
       await test.expect(page).not.toBeEnabled();
 
       await test.expect(page.locator('foo')).toBeEnabled();
-      await test.expect(page.locator('foo')).toBeEnabled({ enabled: false });
-      await test.expect(page.locator('foo')).not.toBeEnabled({ enabled: true });
-      // @ts-expect-error
-      await test.expect(page.locator('foo')).toBeEnabled({ unknown: false });
-      // @ts-expect-error
-      await test.expect(page.locator('foo')).toBeEnabled({ enabled: 'foo' });
-
       await test.expect(page.locator('foo')).toBe(true);
       // @ts-expect-error
       await test.expect(page.locator('foo')).toHaveURL('https://example.com');
@@ -242,15 +234,6 @@ test('should propose only the relevant matchers when custom expect matcher class
       await test.expect(res as any).toHaveURL('https://example.com');
       // @ts-expect-error
       await test.expect(123).toHaveURL('https://example.com');
-
-      await test.expect(page.locator('foo')).toBeChecked();
-      await test.expect(page.locator('foo')).not.toBeChecked({ checked: true });
-
-      await test.expect(page.locator('foo')).not.toBeEditable();
-      await test.expect(page.locator('foo')).toBeEditable({ editable: false });
-
-      await test.expect(page.locator('foo')).toBeVisible();
-      await test.expect(page.locator('foo')).not.toBeVisible({ visible: false });
     });
     `
   });
@@ -299,26 +282,6 @@ test('should return void/Promise when appropriate', async ({ runTSC }) => {
   expect(result.exitCode).toBe(0);
 });
 
-test('should suppport toHaveAttribute withou optional value', async ({ runTSC }) => {
-  const result = await runTSC({
-    'a.spec.ts': `
-    const { test } = pwt;
-    test('custom matchers', async ({ page }) => {
-      const locator = page.locator('#node');
-      await test.expect(locator).toHaveAttribute('name', 'value');
-      await test.expect(locator).toHaveAttribute('name', 'value', { timeout: 10 });
-      await test.expect(locator).toHaveAttribute('disabled');
-      await test.expect(locator).toHaveAttribute('disabled', { timeout: 10 });
-      // @ts-expect-error
-      await test.expect(locator).toHaveAttribute('disabled', { foo: 1 });
-      // @ts-expect-error
-      await test.expect(locator).toHaveAttribute('name', 'value', 'opt');
-    });
-    `
-  });
-  expect(result.exitCode).toBe(0);
-});
-
 test.describe('helpful expect errors', () => {
   test('top-level', async ({ runInlineTest }) => {
     const result = await runInlineTest({
@@ -412,143 +375,3 @@ test('should reasonably work in global setup', async ({ runInlineTest }) => {
   expect(result.exitCode).toBe(1);
   expect(stripAnsi(result.output)).toContain('> 11 |         expect(1).toBe(2);');
 });
-
-test('should support toHaveURL with baseURL from webServer', async ({ runInlineTest }, testInfo) => {
-  const port = testInfo.workerIndex + 10500;
-  const result = await runInlineTest({
-    'a.test.ts': `
-      const { test } = pwt;
-
-      test('pass', async ({ page }) => {
-        await page.goto('/foobar');
-        await expect(page).toHaveURL('/foobar');
-        await expect(page).toHaveURL('http://localhost:${port}/foobar');
-      });
-
-      test('fail', async ({ page }) => {
-        await page.goto('/foobar');
-        await expect(page).toHaveURL('/kek', { timeout: 1000 });
-      });
-      `,
-    'playwright.config.ts': `
-      module.exports = {
-        webServer: {
-          command: 'node ${JSON.stringify(path.join(__dirname, 'assets', 'simple-server.js'))} ${port}',
-          port: ${port},
-        },
-      };
-  `,
-  }, { workers: 1 });
-  const output = stripAnsi(result.output);
-  expect(output).toContain('expect(page).toHaveURL');
-  expect(output).toContain(`Expected string: \"http://localhost:${port}/kek\"`);
-  expect(result.passed).toBe(1);
-  expect(result.failed).toBe(1);
-  expect(result.exitCode).toBe(1);
-});
-
-test('should respect expect.timeout', async ({ runInlineTest }) => {
-  const result = await runInlineTest({
-    'playwright.config.js': `module.exports = { expect: { timeout: 1000 } }`,
-    'a.test.ts': `
-      const { test } = pwt;
-
-      test('timeout', async ({ page }) => {
-        await page.goto('data:text/html,<div>A</div>');
-        await Promise.all([
-          expect(page).toHaveURL('data:text/html,<div>B</div>'),
-          new Promise(f => setTimeout(f, 2000)).then(() => expect(true).toBe(false))
-        ]);
-      });
-      `,
-  }, { workers: 1 });
-  const output = stripAnsi(result.output);
-  expect(output).toContain('expect(received).toHaveURL(expected)');
-  expect(output).toContain('expect.toHaveURL with timeout 1000ms');
-  expect(result.failed).toBe(1);
-  expect(result.exitCode).toBe(1);
-});
-
-test('should log scale the time', async ({ runInlineTest }) => {
-  const result = await runInlineTest({
-    'a.test.ts': `
-      const { test } = pwt;
-
-      test('pass', async ({ page }) => {
-        await page.setContent('<div id=div>Wrong</div>');
-        await expect(page.locator('div')).toHaveText('Text', { timeout: 2000 });
-      });
-      `,
-  }, { workers: 1 });
-  const output = stripAnsi(result.output);
-  const tokens = output.split('unexpected value');
-  // Log scale: 0, 100, 250, 500, 1000, 1000, should be less than 8.
-  expect(tokens.length).toBeGreaterThan(1);
-  expect(tokens.length).toBeLessThan(8);
-  expect(result.passed).toBe(0);
-  expect(result.exitCode).toBe(1);
-});
-
-
-test('should print expected/received before timeout', async ({ runInlineTest }) => {
-  const result = await runInlineTest({
-    'a.test.ts': `
-      const { test } = pwt;
-
-      test('times out waiting for text', async ({ page }) => {
-        await page.setContent('<div id=node>Text content</div>');
-        await expect(page.locator('#node')).toHaveText('Text 2');
-      });
-      `,
-  }, { workers: 1, timeout: 2000 });
-  expect(result.exitCode).toBe(1);
-  expect(result.passed).toBe(0);
-  expect(result.failed).toBe(1);
-  expect(result.output).toContain('Test timeout of 2000ms exceeded.');
-  expect(stripAnsi(result.output)).toContain('Expected string: "Text 2"');
-  expect(stripAnsi(result.output)).toContain('Received string: "Text content"');
-});
-
-test('should print pending operations for toHaveText', async ({ runInlineTest }) => {
-  const result = await runInlineTest({
-    'a.test.ts': `
-      const { test } = pwt;
-
-      test('fail', async ({ page }) => {
-        await page.setContent('<div id=node>Text content</div>');
-        await expect(page.locator('no-such-thing')).toHaveText('Text');
-      });
-      `,
-  }, { workers: 1, timeout: 2000 });
-  expect(result.failed).toBe(1);
-  expect(result.exitCode).toBe(1);
-  const output = stripAnsi(result.output);
-  expect(output).toContain('Pending operations:');
-  expect(output).toContain('Error: expect(received).toHaveText(expected)');
-  expect(output).toContain('Expected string: "Text"');
-  expect(output).toContain('Received string: ""');
-  expect(output).toContain('waiting for selector "no-such-thing"');
-});
-
-test('should print expected/received on Ctrl+C', async ({ runInlineTest }) => {
-  test.skip(process.platform === 'win32', 'No sending SIGINT on Windows');
-
-  const result = await runInlineTest({
-    'a.test.ts': `
-      const { test } = pwt;
-
-      test('times out waiting for text', async ({ page }) => {
-        await page.setContent('<div id=node>Text content</div>');
-        const promise = expect(page.locator('#node')).toHaveText('Text 2');
-        await new Promise(f => setTimeout(f, 500));
-        console.log('\\n%%SEND-SIGINT%%');
-        await promise;
-      });
-      `,
-  }, { workers: 1 }, {}, { sendSIGINTAfter: 1 });
-  expect(result.exitCode).toBe(130);
-  expect(result.passed).toBe(0);
-  expect(result.interrupted).toBe(1);
-  expect(stripAnsi(result.output)).toContain('Expected string: "Text 2"');
-  expect(stripAnsi(result.output)).toContain('Received string: "Text content"');
-});
diff --git a/tests/playwright-test/golden.spec.ts b/tests/playwright-test/golden.spec.ts
index afd61657acbc141f4d1b66f4545926cdf5cf13dd..e816ef9402ffeb027e3d7ee16ddb921d0e7f9c20 100644
--- a/tests/playwright-test/golden.spec.ts
+++ b/tests/playwright-test/golden.spec.ts
@@ -268,27 +268,6 @@ test('should update snapshot with the update-snapshots flag', async ({ runInline
   expect(data.toString()).toBe(ACTUAL_SNAPSHOT);
 });
 
-test('should ignore text snapshot with the ignore-snapshots flag', async ({ runInlineTest }, testInfo) => {
-  const EXPECTED_SNAPSHOT = 'Hello world';
-  const ACTUAL_SNAPSHOT = 'Hello world updated';
-  const result = await runInlineTest({
-    ...files,
-    'a.spec.js-snapshots/snapshot.txt': EXPECTED_SNAPSHOT,
-    'a.spec.js': `
-      const { test } = require('./helper');
-      test('is a test', ({}) => {
-        expect('${ACTUAL_SNAPSHOT}').toMatchSnapshot('snapshot.txt');
-      });
-    `
-  }, { 'ignore-snapshots': true });
-
-  expect(result.exitCode).toBe(0);
-  const snapshotOutputPath = testInfo.outputPath('a.spec.js-snapshots/snapshot.txt');
-  expect(result.output).toContain(``);
-  const data = fs.readFileSync(snapshotOutputPath);
-  expect(data.toString()).toBe(EXPECTED_SNAPSHOT);
-});
-
 test('shouldn\'t update snapshot with the update-snapshots flag for negated matcher', async ({ runInlineTest }, testInfo) => {
   const EXPECTED_SNAPSHOT = 'Hello world';
   const ACTUAL_SNAPSHOT = 'Hello world updated';
diff --git a/tests/playwright-test/hooks.spec.ts b/tests/playwright-test/hooks.spec.ts
index 24d1fda0c8637356ab5893591253e17795912ceb..2272acb0d3fd3bd194785a97ccfe3a5e1ae76e4f 100644
--- a/tests/playwright-test/hooks.spec.ts
+++ b/tests/playwright-test/hooks.spec.ts
@@ -249,7 +249,7 @@ test('beforeAll/afterAll hooks are skipped when no tests in the suite are run 2'
   expect(result.output).not.toContain('%%afterAll');
 });
 
-test('run hooks after failure', async ({ runInlineTest }) => {
+test('should run hooks after failure', async ({ runInlineTest }) => {
   const result = await runInlineTest({
     'a.test.js': `
       const { test } = pwt;
diff --git a/tests/playwright-test/loader.spec.ts b/tests/playwright-test/loader.spec.ts
index 35a61ec2281714139be3d094489817c60463a370..a74ed8afeb6a450d9662a01721c14b5fd88536af 100644
--- a/tests/playwright-test/loader.spec.ts
+++ b/tests/playwright-test/loader.spec.ts
@@ -216,9 +216,7 @@ test('should load esm config files', async ({ runInlineTest }) => {
   expect(result.passed).toBe(1);
 });
 
-test('should load ts from esm when package.json has type module', async ({ runInlineTest, nodeVersion }) => {
-  // We only support experimental esm mode on Node 16+
-  test.skip(nodeVersion.major < 16);
+test('should fail to load ts from esm when package.json has type module', async ({ runInlineTest }) => {
   const result = await runInlineTest({
     'playwright.config.js': `
       //@no-header
@@ -227,24 +225,19 @@ test('should load ts from esm when package.json has type module', async ({ runIn
     `,
     'package.json': JSON.stringify({ type: 'module' }),
     'a.test.js': `
-      //@no-header
-      import { test, expect } from '@playwright/test';
-      import { bar } from './bar.js';
+      import { foo } from './b.ts';
+      const { test } = pwt;
       test('check project name', ({}, testInfo) => {
         expect(testInfo.project.name).toBe('foo');
       });
     `,
-    'bar.ts': `
-      import { foo } from './foo.js';
-      export const bar = foo;
-    `,
-    'foo.ts': `
+    'b.ts': `
       export const foo: string = 'foo';
     `
   });
 
-  expect(result.exitCode).toBe(0);
-  expect(result.passed).toBe(1);
+  expect(result.exitCode).toBe(1);
+  expect(result.output).toContain('Unknown file extension ".ts"');
 });
 
 test('should filter stack trace for simple expect', async ({ runInlineTest }) => {
@@ -429,7 +422,7 @@ test('should load web server w/o esm loader in ems module', async ({ runInlineTe
         webServer: {
           command: 'node ws.js',
           port: 9876,
-          timeout: 5000,
+          timeout: 100,
         },
         projects: [{name: 'foo'}]
       }`,
diff --git a/tests/playwright-test/playwright.connect.spec.ts b/tests/playwright-test/playwright.connect.spec.ts
index 48a12e4b5e52945f0ee6f4114281c45a797923b5..143a2db7907f7ae9fd258857ae54d2aaf73237dd 100644
--- a/tests/playwright-test/playwright.connect.spec.ts
+++ b/tests/playwright-test/playwright.connect.spec.ts
@@ -70,8 +70,7 @@ test('should throw with bad connectOptions', async ({ runInlineTest }) => {
   });
   expect(result.exitCode).toBe(1);
   expect(result.passed).toBe(0);
-  expect(result.output).toContain('browserType.launch:');
-  expect(result.output).toContain('does-not-exist-bad-domain');
+  expect(result.output).toContain('browserType.connect:');
 });
 
 test('should respect connectOptions.timeout', async ({ runInlineTest }) => {
@@ -94,5 +93,5 @@ test('should respect connectOptions.timeout', async ({ runInlineTest }) => {
   });
   expect(result.exitCode).toBe(1);
   expect(result.passed).toBe(0);
-  expect(result.output).toContain('browserType.launch: Timeout 1ms exceeded.');
+  expect(result.output).toContain('browserType.connect: Timeout 1ms exceeded.');
 });
diff --git a/tests/playwright-test/playwright.ct-reuse.spec.ts b/tests/playwright-test/playwright.ct-reuse.spec.ts
new file mode 100644
index 0000000000000000000000000000000000000000..6dbdbc9a4aadf20e6ad11bc31e87f16d16072839
--- /dev/null
+++ b/tests/playwright-test/playwright.ct-reuse.spec.ts
@@ -0,0 +1,255 @@
+/**
+ * Copyright (c) Microsoft Corporation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import { test, expect } from './playwright-test-fixtures';
+
+test('should reuse context', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'playwright/index.html': `<script type="module" src="/playwright/index.ts"></script>`,
+    'playwright/index.ts': `
+      //@no-header
+    `,
+
+    'src/reuse.test.tsx': `
+      //@no-header
+      import { test, expect } from '@playwright/experimental-ct-react';
+      let lastContextGuid;
+
+      test('one', async ({ context }) => {
+        lastContextGuid = context._guid;
+      });
+
+      test('two', async ({ context }) => {
+        expect(context._guid).toBe(lastContextGuid);
+      });
+
+      test.describe(() => {
+        test.use({ colorScheme: 'dark' });
+        test('dark', async ({ context }) => {
+          expect(context._guid).toBe(lastContextGuid);
+        });
+      });
+
+      test.describe(() => {
+        test.use({ userAgent: 'UA' });
+        test('UA', async ({ context }) => {
+          expect(context._guid).toBe(lastContextGuid);
+        });
+      });
+
+      test.describe(() => {
+        test.use({ timezoneId: 'Europe/Berlin' });
+        test('tz', async ({ context }) => {
+          expect(context._guid).not.toBe(lastContextGuid);
+        });
+      });
+    `,
+  }, { workers: 1 });
+
+  expect(result.exitCode).toBe(0);
+  expect(result.passed).toBe(5);
+});
+
+test('should not reuse context with video', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'playwright.config.ts': `
+      export default {
+        use: { video: 'on' },
+      };
+    `,
+    'playwright/index.html': `<script type="module" src="/playwright/index.ts"></script>`,
+    'playwright/index.ts': `
+      //@no-header
+    `,
+
+    'src/reuse.test.tsx': `
+      //@no-header
+      import { test, expect } from '@playwright/experimental-ct-react';
+      let lastContext;
+
+      test('one', async ({ context }) => {
+        lastContext = context;
+      });
+
+      test('two', async ({ context }) => {
+        expect(context).not.toBe(lastContext);
+      });
+    `,
+  }, { workers: 1 });
+
+  expect(result.exitCode).toBe(0);
+  expect(result.passed).toBe(2);
+});
+
+test('should not reuse context with trace', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'playwright.config.ts': `
+      export default {
+        use: { trace: 'on' },
+      };
+    `,
+    'playwright/index.html': `<script type="module" src="/playwright/index.ts"></script>`,
+    'playwright/index.ts': `
+      //@no-header
+    `,
+
+    'src/reuse.test.tsx': `
+      //@no-header
+      import { test, expect } from '@playwright/experimental-ct-react';
+      let lastContext;
+
+      test('one', async ({ context }) => {
+        lastContext = context;
+      });
+
+      test('two', async ({ context }) => {
+        expect(context).not.toBe(lastContext);
+      });
+    `,
+  }, { workers: 1 });
+
+  expect(result.exitCode).toBe(0);
+  expect(result.passed).toBe(2);
+});
+
+test('should work with manually closed pages', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'playwright/index.html': `<script type="module" src="/playwright/index.ts"></script>`,
+    'playwright/index.ts': `
+      //@no-header
+    `,
+
+    'src/button.test.tsx': `
+      //@no-header
+      import { test, expect } from '@playwright/experimental-ct-react';
+
+      test('closes page', async ({ mount, page }) => {
+        let hadEvent = false;
+        const component = await mount(<button onClick={e => hadEvent = true}>Submit</button>);
+        await expect(component).toHaveText('Submit');
+        await component.click();
+        expect(hadEvent).toBe(true);
+        await page.close();
+      });
+
+      test('creates a new page', async ({ mount, page, context }) => {
+        let hadEvent = false;
+        const component = await mount(<button onClick={e => hadEvent = true}>Submit</button>);
+        await expect(component).toHaveText('Submit');
+        await component.click();
+        expect(hadEvent).toBe(true);
+        await page.close();
+        await context.newPage();
+      });
+
+      test('still works', async ({ mount }) => {
+        let hadEvent = false;
+        const component = await mount(<button onClick={e => hadEvent = true}>Submit</button>);
+        await expect(component).toHaveText('Submit');
+        await component.click();
+        expect(hadEvent).toBe(true);
+      });
+    `,
+  }, { workers: 1 });
+
+  expect(result.exitCode).toBe(0);
+  expect(result.passed).toBe(3);
+});
+
+test('should clean storage', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'playwright/index.html': `<script type="module" src="/playwright/index.ts"></script>`,
+    'playwright/index.ts': `
+      //@no-header
+    `,
+
+    'src/reuse.test.tsx': `
+      //@no-header
+      import { test, expect } from '@playwright/experimental-ct-react';
+      let lastContextGuid;
+
+      test('one', async ({ context, page }) => {
+        lastContextGuid = context._guid;
+
+        // Spam local storage.
+        page.evaluate(async () => {
+          while (true) {
+            localStorage.foo = 'bar';
+            sessionStorage.foo = 'bar';
+            await new Promise(f => setTimeout(f, 0));
+          }
+        }).catch(() => {});
+
+        const local = await page.evaluate('localStorage.foo');
+        const session = await page.evaluate('sessionStorage.foo');
+        expect(local).toBe('bar');
+        expect(session).toBe('bar');
+      });
+
+      test('two', async ({ context, page }) => {
+        expect(context._guid).toBe(lastContextGuid);
+        const local = await page.evaluate('localStorage.foo');
+        const session = await page.evaluate('sessionStorage.foo');
+
+        expect(local).toBeFalsy();
+        expect(session).toBeFalsy();
+      });
+    `,
+  }, { workers: 1 });
+  expect(result.exitCode).toBe(0);
+  expect(result.passed).toBe(2);
+});
+
+test('should clean db', async ({ runInlineTest }) => {
+  test.slow();
+  const result = await runInlineTest({
+    'playwright/index.html': `<script type="module" src="/playwright/index.ts"></script>`,
+    'playwright/index.ts': `
+      //@no-header
+    `,
+
+    'src/reuse.test.tsx': `
+      //@no-header
+      import { test, expect } from '@playwright/experimental-ct-react';
+      let lastContextGuid;
+
+      test('one', async ({ context, page }) => {
+        lastContextGuid = context._guid;
+        await page.evaluate(async () => {
+          const dbRequest = indexedDB.open('db', 1);
+          await new Promise(f => dbRequest.onsuccess = f);
+        });
+        const dbnames = await page.evaluate(async () => {
+          const dbs = await indexedDB.databases();
+          return dbs.map(db => db.name);
+        });
+        expect(dbnames).toEqual(['db']);
+      });
+
+      test('two', async ({ context, page }) => {
+        expect(context._guid).toBe(lastContextGuid);
+        const dbnames = await page.evaluate(async () => {
+          const dbs = await indexedDB.databases();
+          return dbs.map(db => db.name);
+        });
+
+        expect(dbnames).toEqual([]);
+      });
+    `,
+  }, { workers: 1 });
+  expect(result.exitCode).toBe(0);
+  expect(result.passed).toBe(2);
+});
diff --git a/tests/playwright-test/playwright.expect.misc.spec.ts b/tests/playwright-test/playwright.expect.misc.spec.ts
new file mode 100644
index 0000000000000000000000000000000000000000..b19ecda9c552071260bcb9e52f7017cde9fe7e89
--- /dev/null
+++ b/tests/playwright-test/playwright.expect.misc.spec.ts
@@ -0,0 +1,387 @@
+/**
+ * Copyright (c) Microsoft Corporation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import path from 'path';
+import { test, expect, stripAnsi } from './playwright-test-fixtures';
+
+test('should support toHaveCount', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass', async ({ page }) => {
+        await page.setContent('<select><option>One</option></select>');
+        const locator = page.locator('option');
+        let done = false;
+        const promise = expect(locator).toHaveCount(2).then(() => { done = true; });
+        await page.waitForTimeout(1000);
+        expect(done).toBe(false);
+        await page.setContent('<select><option>One</option><option>Two</option></select>');
+        await promise;
+        expect(done).toBe(true);
+      });
+
+      test('pass zero', async ({ page }) => {
+        await page.setContent('<div></div>');
+        const locator = page.locator('span');
+        await expect(locator).toHaveCount(0);
+        await expect(locator).not.toHaveCount(1);
+      });
+
+      test('eventually pass zero', async ({ page }) => {
+        await page.setContent('<div></div>');
+        const locator = page.locator('span');
+        setTimeout(() => page.evaluate(() => div.textContent = '').catch(() => {}), 200);
+        await expect(locator).toHaveCount(0);
+        await expect(locator).not.toHaveCount(1);
+      });
+
+      test('eventually pass non-zero', async ({ page }) => {
+        await page.setContent('<ul></ul>');
+        setTimeout(async () => {
+          await page.setContent("<ul><li>one</li><li>two</li></ul>");
+        }, 500);
+        const locator = page.locator('li');
+        await expect(locator).toHaveCount(2);
+      });
+
+      test('eventually pass not non-zero', async ({ page }) => {
+        await page.setContent('<ul><li>one</li><li>two</li></ul>');
+        setTimeout(async () => {
+          await page.setContent("<ul></ul>");
+        }, 500);
+        const locator = page.locator('li');
+        await expect(locator).not.toHaveCount(2);
+      });
+
+      test('fail zero', async ({ page }) => {
+        await page.setContent('<div><span></span></div>');
+        const locator = page.locator('span');
+        await expect(locator).toHaveCount(0, { timeout: 1000 });
+      });
+
+      test('fail zero 2', async ({ page }) => {
+        await page.setContent('<div><span></span></div>');
+        const locator = page.locator('span');
+        await expect(locator).not.toHaveCount(1, { timeout: 1000 });
+      });
+      `,
+  }, { workers: 1 });
+  const output = stripAnsi(result.output);
+  expect(result.passed).toBe(5);
+  expect(result.failed).toBe(2);
+  expect(result.exitCode).toBe(1);
+  expect(output).toContain('Expected: 0');
+  expect(output).toContain('Received: 1');
+  expect(output).toContain('expect.toHaveCount with timeout 1000ms');
+});
+
+test('should support toHaveJSProperty', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass', async ({ page }) => {
+        await page.setContent('<div></div>');
+        await page.$eval('div', e => e.foo = { a: 1, b: 'string', c: new Date(1627503992000) });
+        const locator = page.locator('div');
+        await expect(locator).toHaveJSProperty('foo', { a: 1, b: 'string', c: new Date(1627503992000) });
+      });
+
+      test('fail', async ({ page }) => {
+        await page.setContent('<div></div>');
+        await page.$eval('div', e => e.foo = { a: 1, b: 'string', c: new Date(1627503992000) });
+        const locator = page.locator('div');
+        await expect(locator).toHaveJSProperty('foo', { a: 1, b: 'string', c: new Date(1627503992001) }, { timeout: 1000 });
+      });
+      `,
+  }, { workers: 1 });
+  const output = stripAnsi(result.output);
+  expect(output).toContain('-   "c"');
+  expect(result.passed).toBe(1);
+  expect(result.failed).toBe(1);
+  expect(result.exitCode).toBe(1);
+});
+
+
+test('should support toHaveJSProperty with builtin types', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass string', async ({ page }) => {
+        await page.setContent('<div></div>');
+        await page.$eval('div', e => e.foo = 'string');
+        const locator = page.locator('div');
+        await expect(locator).toHaveJSProperty('foo', 'string');
+      });
+
+      test('fail string', async ({ page }) => {
+        await page.setContent('<div></div>');
+        await page.$eval('div', e => e.foo = 'string');
+        const locator = page.locator('div');
+        await expect(locator).toHaveJSProperty('foo', 'error', {timeout: 200});
+      });
+
+      test('pass number', async ({ page }) => {
+        await page.setContent('<div></div>');
+        await page.$eval('div', e => e.foo = 2021);
+        const locator = page.locator('div');
+        await expect(locator).toHaveJSProperty('foo', 2021);
+      });
+
+      test('fail number', async ({ page }) => {
+        await page.setContent('<div></div>');
+        await page.$eval('div', e => e.foo = 2021);
+        const locator = page.locator('div');
+        await expect(locator).toHaveJSProperty('foo', 1, {timeout: 200});
+      });
+
+      test('pass boolean', async ({ page }) => {
+        await page.setContent('<div></div>');
+        await page.$eval('div', e => e.foo = true);
+        const locator = page.locator('div');
+        await expect(locator).toHaveJSProperty('foo', true);
+      });
+
+      test('fail boolean', async ({ page }) => {
+        await page.setContent('<div></div>');
+        await page.$eval('div', e => e.foo = false);
+        const locator = page.locator('div');
+        await expect(locator).toHaveJSProperty('foo', true, {timeout: 200});
+      });
+
+      test('pass boolean 2', async ({ page }) => {
+        await page.setContent('<div></div>');
+        await page.$eval('div', e => e.foo = false);
+        const locator = page.locator('div');
+        await expect(locator).toHaveJSProperty('foo', false);
+      });
+
+      test('fail boolean 2', async ({ page }) => {
+        await page.setContent('<div></div>');
+        await page.$eval('div', e => e.foo = false);
+        const locator = page.locator('div');
+        await expect(locator).toHaveJSProperty('foo', true, {timeout: 200});
+      });
+
+      test('pass undefined', async ({ page }) => {
+        await page.setContent('<div></div>');
+        const locator = page.locator('div');
+        await expect(locator).toHaveJSProperty('foo', undefined);
+      });
+
+      test('pass null', async ({ page }) => {
+        await page.setContent('<div></div>');
+        await page.$eval('div', e => e.foo = null);
+        const locator = page.locator('div');
+        await expect(locator).toHaveJSProperty('foo', null);
+      });
+      `,
+  }, { workers: 1 });
+  const output = stripAnsi(result.output);
+  expect(result.passed).toBe(6);
+  expect(result.failed).toBe(4);
+  expect(result.exitCode).toBe(1);
+  expect(output).toContain('Expected: "error"');
+  expect(output).toContain('Received: "string"');
+  expect(output).toContain('Expected: 1');
+  expect(output).toContain('Received: 2021');
+  expect(output).toContain('Expected: true');
+  expect(output).toContain('Received: false');
+});
+
+
+test('should support toHaveClass', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass', async ({ page }) => {
+        await page.setContent('<div class="foo bar baz"></div>');
+        const locator = page.locator('div');
+        await expect(locator).toHaveClass('foo bar baz');
+      });
+
+      test('pass with SVGs', async ({ page }) => {
+        await page.setContent(\`<svg class="c1 c2" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"></svg>\`);
+        await expect(page.locator('svg')).toHaveClass(/c1/);
+      });
+
+      test('fail', async ({ page }) => {
+        await page.setContent('<div class="bar baz"></div>');
+        const locator = page.locator('div');
+        await expect(locator).toHaveClass('foo bar baz', { timeout: 1000 });
+      });
+      `,
+  }, { workers: 1 });
+  const output = stripAnsi(result.output);
+  expect(output).toContain('expect(locator).toHaveClass');
+  expect(output).toContain('Expected string: \"foo bar baz\"');
+  expect(result.passed).toBe(2);
+  expect(result.failed).toBe(1);
+  expect(result.exitCode).toBe(1);
+});
+
+test('should support toHaveClass w/ array', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass', async ({ page }) => {
+        await page.setContent('<div class="foo"></div><div class="bar"></div><div class="baz"></div>');
+        const locator = page.locator('div');
+        await expect(locator).toHaveClass(['foo', 'bar', /[a-z]az/]);
+      });
+
+      test('fail', async ({ page }) => {
+        await page.setContent('<div class="foo"></div><div class="bar"></div><div class="bar"></div>');
+        const locator = page.locator('div');
+        await expect(locator).toHaveClass(['foo', 'bar', /[a-z]az/], { timeout: 1000 });
+      });
+      `,
+  }, { workers: 1 });
+  const output = stripAnsi(result.output);
+  expect(output).toContain('expect(received).toHaveClass(expected)');
+  expect(output).toContain('-   /[a-z]az/,');
+  expect(result.passed).toBe(1);
+  expect(result.failed).toBe(1);
+  expect(result.exitCode).toBe(1);
+});
+
+test('should support toHaveTitle', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass', async ({ page }) => {
+        await page.setContent('<title>  Hello     world</title>');
+        await expect(page).toHaveTitle('Hello  world');
+      });
+
+      test('fail', async ({ page }) => {
+        await page.setContent('<title>Bye</title>');
+        await expect(page).toHaveTitle('Hello', { timeout: 1000 });
+      });
+      `,
+  }, { workers: 1 });
+  const output = stripAnsi(result.output);
+  expect(output).toContain('expect(page).toHaveTitle');
+  expect(output).toContain('Expected string: \"Hello\"');
+  expect(result.passed).toBe(1);
+  expect(result.failed).toBe(1);
+  expect(result.exitCode).toBe(1);
+});
+
+test('should support toHaveURL', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass', async ({ page }) => {
+        await page.goto('data:text/html,<div>A</div>');
+        await expect(page).toHaveURL('data:text/html,<div>A</div>');
+      });
+
+      test('fail', async ({ page }) => {
+        await page.goto('data:text/html,<div>B</div>');
+        await expect(page).toHaveURL('wrong', { timeout: 1000 });
+      });
+      `,
+  }, { workers: 1 });
+  const output = stripAnsi(result.output);
+  expect(output).toContain('expect(page).toHaveURL');
+  expect(output).toContain('Expected string: \"wrong\"');
+  expect(result.passed).toBe(1);
+  expect(result.failed).toBe(1);
+  expect(result.exitCode).toBe(1);
+});
+
+test('should support toHaveURL with baseURL from webServer', async ({ runInlineTest }, testInfo) => {
+  const port = testInfo.workerIndex + 10500;
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass', async ({ page }) => {
+        await page.goto('/foobar');
+        await expect(page).toHaveURL('/foobar');
+        await expect(page).toHaveURL('http://localhost:${port}/foobar');
+      });
+
+      test('fail', async ({ page }) => {
+        await page.goto('/foobar');
+        await expect(page).toHaveURL('/kek', { timeout: 1000 });
+      });
+      `,
+    'playwright.config.ts': `
+      module.exports = {
+        webServer: {
+          command: 'node ${JSON.stringify(path.join(__dirname, 'assets', 'simple-server.js'))} ${port}',
+          port: ${port},
+        },
+      };
+  `,
+  }, { workers: 1 });
+  const output = stripAnsi(result.output);
+  expect(output).toContain('expect(page).toHaveURL');
+  expect(output).toContain(`Expected string: \"http://localhost:${port}/kek\"`);
+  expect(result.passed).toBe(1);
+  expect(result.failed).toBe(1);
+  expect(result.exitCode).toBe(1);
+});
+
+test('should respect expect.timeout', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'playwright.config.js': `module.exports = { expect: { timeout: 1000 } }`,
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('timeout', async ({ page }) => {
+        await page.goto('data:text/html,<div>A</div>');
+        await Promise.all([
+          expect(page).toHaveURL('data:text/html,<div>B</div>'),
+          new Promise(f => setTimeout(f, 2000)).then(() => expect(true).toBe(false))
+        ]);
+      });
+      `,
+  }, { workers: 1 });
+  const output = stripAnsi(result.output);
+  expect(output).toContain('expect(received).toHaveURL(expected)');
+  expect(output).toContain('expect.toHaveURL with timeout 1000ms');
+  expect(result.failed).toBe(1);
+  expect(result.exitCode).toBe(1);
+});
+
+test('should log scale the time', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass', async ({ page }) => {
+        await page.setContent('<div id=div>Wrong</div>');
+        await expect(page.locator('div')).toHaveText('Text', { timeout: 2000 });
+      });
+      `,
+  }, { workers: 1 });
+  const output = stripAnsi(result.output);
+  const tokens = output.split('unexpected value');
+  // Log scale: 0, 100, 250, 500, 1000, 1000, should be less than 8.
+  expect(tokens.length).toBeGreaterThan(1);
+  expect(tokens.length).toBeLessThan(8);
+  expect(result.passed).toBe(0);
+  expect(result.exitCode).toBe(1);
+});
diff --git a/tests/playwright-test/playwright.expect.text.spec.ts b/tests/playwright-test/playwright.expect.text.spec.ts
new file mode 100644
index 0000000000000000000000000000000000000000..fa0a9c2da74fa94e1e3e2e61f9596e08cafeaf78
--- /dev/null
+++ b/tests/playwright-test/playwright.expect.text.spec.ts
@@ -0,0 +1,683 @@
+/**
+ * Copyright (c) Microsoft Corporation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import { test, expect, stripAnsi } from './playwright-test-fixtures';
+
+test('should support toHaveText w/ regex', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass', async ({ page }) => {
+        await page.setContent('<div id=node>Text   content</div>');
+        const locator = page.locator('#node');
+        await expect(locator).toHaveText(/Text/);
+
+        // Should not normalize whitespace.
+        await expect(locator).toHaveText(/Text   content/);
+        // Should respect ignoreCase.
+        await expect(locator).toHaveText(/text   content/, { ignoreCase: true });
+        // Should override regex flag with ignoreCase.
+        await expect(locator).not.toHaveText(/text   content/i, { ignoreCase: false });
+      });
+
+      test('fail', async ({ page }) => {
+        await page.setContent('<div id=node>Text content</div>');
+        const locator = page.locator('#node');
+        await expect(locator).toHaveText(/Text 2/, { timeout: 1000 });
+      });
+      `,
+  }, { workers: 1 });
+  const output = stripAnsi(result.output);
+  expect(output).toContain('Error: expect(received).toHaveText(expected)');
+  expect(output).toContain('Expected pattern: /Text 2/');
+  expect(output).toContain('Received string:  "Text content"');
+  expect(output).toContain('expect(locator).toHaveText');
+  expect(result.passed).toBe(1);
+  expect(result.failed).toBe(1);
+  expect(result.exitCode).toBe(1);
+});
+
+test('should support toContainText w/ regex', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass', async ({ page }) => {
+        await page.setContent('<div id=node>Text   content</div>');
+        const locator = page.locator('#node');
+        await expect(locator).toContainText(/ex/);
+
+        // Should not normalize whitespace.
+        await expect(locator).toContainText(/ext   cont/);
+      });
+
+      test('fail', async ({ page }) => {
+        await page.setContent('<div id=node>Text content</div>');
+        const locator = page.locator('#node');
+        await expect(locator).toContainText(/ex2/, { timeout: 1000 });
+      });
+      `,
+  }, { workers: 1 });
+  const output = stripAnsi(result.output);
+  expect(output).toContain('Error: expect(received).toContainText(expected)');
+  expect(output).toContain('Expected pattern: /ex2/');
+  expect(output).toContain('Received string:  "Text content"');
+  expect(output).toContain('expect(locator).toContainText');
+  expect(result.passed).toBe(1);
+  expect(result.failed).toBe(1);
+  expect(result.exitCode).toBe(1);
+});
+
+test('should support toHaveText w/ text', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass', async ({ page }) => {
+        await page.setContent('<div id=node><span></span>Text \\ncontent&nbsp;    </div>');
+        const locator = page.locator('#node');
+        // Should normalize whitespace.
+        await expect(locator).toHaveText('Text                        content');
+        // Should normalize zero width whitespace.
+        await expect(locator).toHaveText('T\u200be\u200bx\u200bt content');
+        // Should support ignoreCase.
+        await expect(locator).toHaveText('text CONTENT', { ignoreCase: true });
+        // Should support falsy ignoreCase.
+        await expect(locator).not.toHaveText('TEXT', { ignoreCase: false });
+      });
+
+      test('pass contain', async ({ page }) => {
+        await page.setContent('<div id=node>Text content</div>');
+        const locator = page.locator('#node');
+        await expect(locator).toContainText('Text');
+        // Should normalize whitespace.
+        await expect(locator).toContainText('   ext        cont\\n  ');
+        // Should support ignoreCase.
+        await expect(locator).toContainText('EXT', { ignoreCase: true });
+        // Should support falsy ignoreCase.
+        await expect(locator).not.toContainText('TEXT', { ignoreCase: false });
+      });
+
+      test('fail', async ({ page }) => {
+        await page.setContent('<div id=node>Text content</div>');
+        const locator = page.locator('#node');
+        await expect(locator).toHaveText('Text', { timeout: 1000 });
+      });
+      `,
+  }, { workers: 1 });
+  const output = stripAnsi(result.output);
+  expect(output).toContain('Error: expect(received).toHaveText(expected)');
+  expect(output).toContain('Expected string: "Text"');
+  expect(output).toContain('Received string: "Text content"');
+  expect(output).toContain('expect(locator).toHaveText');
+  expect(result.passed).toBe(2);
+  expect(result.failed).toBe(1);
+  expect(result.exitCode).toBe(1);
+});
+
+test('should support toHaveText w/ not', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass', async ({ page }) => {
+        await page.setContent('<div id=node>Text content</div>');
+        const locator = page.locator('#node');
+        await expect(locator).not.toHaveText('Text2');
+        // Should be case-sensitive by default.
+        await expect(locator).not.toHaveText('TEXT');
+      });
+
+      test('fail', async ({ page }) => {
+        await page.setContent('<div id=node>Text content</div>');
+        const locator = page.locator('#node');
+        await expect(locator).not.toHaveText('Text content', { timeout: 1000 });
+      });
+      `,
+  }, { workers: 1 });
+  const output = stripAnsi(result.output);
+  expect(output).toContain('Error: expect(received).not.toHaveText(expected)');
+  expect(output).toContain('Expected string: not "Text content"');
+  expect(output).toContain('Received string: "Text content');
+  expect(output).toContain('expect(locator).not.toHaveText');
+  expect(result.passed).toBe(1);
+  expect(result.failed).toBe(1);
+  expect(result.exitCode).toBe(1);
+});
+
+test('should support toHaveText w/ array', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass', async ({ page }) => {
+        await page.setContent('<div>Text    \\n1</div><div>Text   2a</div>');
+        const locator = page.locator('div');
+        // Should only normalize whitespace in the first item.
+        await expect(locator).toHaveText(['Text  1', /Text   \\d+a/]);
+        // Should support ignoreCase.
+        await expect(locator).toHaveText(['tEXT 1', 'TExt 2A'], { ignoreCase: true });
+      });
+
+      test('pass lazy', async ({ page }) => {
+        await page.setContent('<div id=div></div>');
+        const locator = page.locator('p');
+        setTimeout(() => {
+          page.evaluate(() => {
+            div.innerHTML = "<p>Text 1</p><p>Text 2</p>";
+          }).catch(() => {});
+        }, 500);
+        await expect(locator).toHaveText(['Text 1', 'Text 2']);
+      });
+
+      test('pass empty', async ({ page }) => {
+        await page.setContent('<div></div>');
+        const locator = page.locator('p');
+        await expect(locator).toHaveText([]);
+      });
+
+      test('pass not empty', async ({ page }) => {
+        await page.setContent('<div><p>Test</p></div>');
+        const locator = page.locator('p');
+        await expect(locator).not.toHaveText([]);
+      });
+
+      test('pass on empty', async ({ page }) => {
+        await page.setContent('<div></div>');
+        const locator = page.locator('p');
+        await expect(locator).not.toHaveText(['Test']);
+      });
+
+      test('fail on not+empty', async ({ page }) => {
+        await page.setContent('<div></div>');
+        const locator = page.locator('p');
+        await expect(locator).not.toHaveText([], { timeout: 1000 });
+      });
+
+      test('pass eventually empty', async ({ page }) => {
+        await page.setContent('<div id=div><p>Text</p></div>');
+        const locator = page.locator('p');
+        setTimeout(() => {
+          page.evaluate(() => div.innerHTML = "").catch(() => {});
+        }, 500);
+        await expect(locator).not.toHaveText([]);
+      });
+
+      test('fail', async ({ page }) => {
+        await page.setContent('<div>Text 1</div><div>Text 3</div>');
+        const locator = page.locator('div');
+        await expect(locator).toHaveText(['Text 1', /Text \\d/, 'Extra'], { timeout: 1000 });
+      });
+
+      test('fail on repeating array matchers', async ({ page }) => {
+        await page.setContent('<div>KekFoo</div>');
+        const locator = page.locator('div');
+        await expect(locator).toContainText(['KekFoo', 'KekFoo', 'KekFoo'], { timeout: 1000 });
+      });
+      `,
+  }, { workers: 1 });
+  const output = stripAnsi(result.output);
+  expect(output).toContain('Error: expect(received).toHaveText(expected) // deep equality');
+  expect(output).toContain('await expect(locator).toHaveText');
+  expect(output).toContain('-   "Extra"');
+  expect(output).toContain('waiting for selector "div"');
+  expect(output).toContain('selector resolved to 2 elements');
+  expect(result.passed).toBe(6);
+  expect(result.failed).toBe(3);
+  expect(result.exitCode).toBe(1);
+});
+
+test('should support toContainText w/ array', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass', async ({ page }) => {
+        await page.setContent('<div>Text \\n1</div><div>Text2</div><div>Text3</div>');
+        const locator = page.locator('div');
+        await expect(locator).toContainText(['ext     1', /ext3/]);
+        // Should support ignoreCase.
+        await expect(locator).toContainText(['EXT 1', 'eXt3'], { ignoreCase: true });
+      });
+
+      test('fail', async ({ page }) => {
+        await page.setContent('<div>Text 1</div><div>Text 3</div>');
+        const locator = page.locator('div');
+        await expect(locator).toContainText(['Text 2'], { timeout: 1000 });
+      });
+      `,
+  }, { workers: 1 });
+  const output = stripAnsi(result.output);
+  expect(output).toContain('Error: expect(received).toContainText(expected)');
+  expect(output).toContain('await expect(locator).toContainText');
+  expect(output).toContain('-   "Text 2"');
+  expect(result.passed).toBe(1);
+  expect(result.failed).toBe(1);
+  expect(result.exitCode).toBe(1);
+});
+
+test('should support toHaveText eventually', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass eventually', async ({ page }) => {
+        await page.setContent('<div id=node>Text content</div>');
+        const locator = page.locator('#node');
+        await Promise.all([
+          expect(locator).toHaveText(/Text 2/),
+          page.waitForTimeout(1000).then(() => locator.evaluate(element => element.textContent = 'Text 2 content')),
+        ]);
+      });
+      `,
+  }, { workers: 1 });
+  expect(result.passed).toBe(1);
+  expect(result.failed).toBe(0);
+  expect(result.exitCode).toBe(0);
+});
+
+test('should support toHaveText with innerText', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass', async ({ page }) => {
+        await page.setContent('<div id=node>Text <span hidden>garbage</span> content</div>');
+        const locator = page.locator('#node');
+        await expect(locator).toHaveText('Text content', { useInnerText: true });
+      });
+      `,
+  }, { workers: 1 });
+  expect(result.passed).toBe(1);
+  expect(result.exitCode).toBe(0);
+});
+
+test('should support toHaveAttribute', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass', async ({ page }) => {
+        await page.setContent('<div id=node>Text content</div>');
+        const locator = page.locator('#node');
+        await expect(locator).toHaveAttribute('id', 'node');
+      });
+      `,
+  }, { workers: 1 });
+  expect(result.passed).toBe(1);
+  expect(result.exitCode).toBe(0);
+});
+
+test('should support toHaveCSS', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass', async ({ page }) => {
+        await page.setContent('<div id=node style="color: rgb(255, 0, 0)">Text content</div>');
+        const locator = page.locator('#node');
+        await expect(locator).toHaveCSS('color', 'rgb(255, 0, 0)');
+      });
+
+      test('pass with custom css properties', async ({ page }) => {
+        await page.setContent('<div id=node style="--custom-color-property:#FF00FF;">Text content</div>');
+        const locator = page.locator('#node');
+        await expect(locator).toHaveCSS('--custom-color-property', '#FF00FF');
+      });
+      `,
+  }, { workers: 1 });
+  expect(result.passed).toBe(2);
+  expect(result.exitCode).toBe(0);
+});
+
+test('should support toHaveId', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass', async ({ page }) => {
+        await page.setContent('<div id=node>Text content</div>');
+        const locator = page.locator('#node');
+        await expect(locator).toHaveId('node');
+      });
+      `,
+  }, { workers: 1 });
+  expect(result.passed).toBe(1);
+  expect(result.exitCode).toBe(0);
+});
+
+test('should support toHaveValue', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass', async ({ page }) => {
+        await page.setContent('<input id=node></input>');
+        const locator = page.locator('#node');
+        await locator.fill('Text content');
+        await expect(locator).toHaveValue('Text content');
+      });
+
+      test('pass on label', async ({ page }) => {
+        await page.setContent('<label><input></input></label>');
+        await page.locator('label input').fill('Text content');
+        await expect(page.locator('label')).toHaveValue('Text content');
+      });
+      `,
+  }, { workers: 1 });
+  expect(result.passed).toBe(2);
+  expect(result.exitCode).toBe(0);
+});
+
+test('should support toHaveValue regex', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass', async ({ page }) => {
+        await page.setContent('<input id=node></input>');
+        const locator = page.locator('#node');
+        await locator.fill('Text content');
+        await expect(locator).toHaveValue(/Text/);
+      });
+      `,
+  }, { workers: 1 });
+  expect(result.passed).toBe(1);
+  expect(result.exitCode).toBe(0);
+});
+
+test('should support toHaveValue failing', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass', async ({ page }) => {
+        await page.setContent('<input id=node></input>');
+        const locator = page.locator('#node');
+        await locator.fill('Text content');
+        await expect(locator).toHaveValue(/Text2/, { timeout: 1000 });
+      });
+      `,
+  }, { workers: 1 });
+  expect(result.passed).toBe(0);
+  expect(result.exitCode).toBe(1);
+  expect(result.output).toContain('"Text content"');
+});
+
+test.describe('should support toHaveValues with multi-select', () => {
+  test('works with text', async ({ runInlineTest }) => {
+    const result = await runInlineTest({
+      'a.test.ts': `
+        const { test } = pwt;
+
+        test('pass', async ({ page }) => {
+          await page.setContent(\`
+            <select multiple>
+              <option value="R">Red</option>
+              <option value="G">Green</option>
+              <option value="B">Blue</option>
+            </select>
+          \`);
+          const locator = page.locator('select');
+          await locator.selectOption(['R', 'G']);
+          await expect(locator).toHaveValues(['R', 'G']);
+        });
+        `,
+    }, { workers: 1 });
+    expect(result.passed).toBe(1);
+    expect(result.exitCode).toBe(0);
+  });
+
+  test('follows labels', async ({ runInlineTest }) => {
+    const result = await runInlineTest({
+      'a.test.ts': `
+        const { test } = pwt;
+
+        test('pass', async ({ page }) => {
+          await page.setContent(\`
+            <label for="colors">Pick a Color</label>
+            <select id="colors" multiple>
+              <option value="R">Red</option>
+              <option value="G">Green</option>
+              <option value="B">Blue</option>
+            </select>
+          \`);
+          const locator = page.locator('text=Pick a Color');
+          await locator.selectOption(['R', 'G']);
+          await expect(locator).toHaveValues(['R', 'G']);
+        });
+        `,
+    }, { workers: 1 });
+    expect(result.passed).toBe(1);
+    expect(result.exitCode).toBe(0);
+  });
+
+  test('exact match with text', async ({ runInlineTest }) => {
+    const result = await runInlineTest({
+      'a.test.ts': `
+        const { test } = pwt;
+
+        test('pass', async ({ page }) => {
+          await page.setContent(\`
+            <select multiple>
+              <option value="RR">Red</option>
+              <option value="GG">Green</option>
+            </select>
+          \`);
+          const locator = page.locator('select');
+          await locator.selectOption(['RR', 'GG']);
+          await expect(locator).toHaveValues(['R', 'G']);
+        });
+        `,
+    }, { workers: 1 });
+    expect(result.passed).toBe(0);
+    expect(result.exitCode).toBe(1);
+    expect(stripAnsi(result.output)).toContain(`
+    - Expected  - 2
+    + Received  + 2
+
+      Array [
+    -   "R",
+    -   "G",
+    +   "RR",
+    +   "GG",
+      ]
+`);
+  });
+
+  test('works with regex', async ({ runInlineTest }) => {
+    const result = await runInlineTest({
+      'a.test.ts': `
+        const { test } = pwt;
+
+        test('pass', async ({ page }) => {
+          await page.setContent(\`
+            <select multiple>
+              <option value="R">Red</option>
+              <option value="G">Green</option>
+              <option value="B">Blue</option>
+            </select>
+          \`);
+          const locator = page.locator('select');
+          await locator.selectOption(['R', 'G']);
+          await expect(locator).toHaveValues([/R/, /G/]);
+        });
+        `,
+    }, { workers: 1 });
+    expect(result.passed).toBe(1);
+    expect(result.exitCode).toBe(0);
+  });
+
+  test('fails when items not selected', async ({ runInlineTest }) => {
+    const result = await runInlineTest({
+      'a.test.ts': `
+        const { test } = pwt;
+
+        test('pass', async ({ page }) => {
+          await page.setContent(\`
+            <select multiple>
+              <option value="R">Red</option>
+              <option value="G">Green</option>
+              <option value="B">Blue</option>
+            </select>
+          \`);
+          const locator = page.locator('select');
+          await locator.selectOption(['B']);
+          await expect(locator).toHaveValues([/R/, /G/]);
+        });
+        `,
+    }, { workers: 1 });
+    expect(result.passed).toBe(0);
+    expect(result.exitCode).toBe(1);
+    expect(stripAnsi(result.output)).toContain(`
+    - Expected  - 2
+    + Received  + 1
+
+      Array [
+    -   /R/,
+    -   /G/,
+    +   "B",
+      ]
+`);
+  });
+
+  test('fails when multiple not specified', async ({ runInlineTest }) => {
+    const result = await runInlineTest({
+      'a.test.ts': `
+        const { test } = pwt;
+
+        test('pass', async ({ page }) => {
+          await page.setContent(\`
+            <select>
+              <option value="R">Red</option>
+              <option value="G">Green</option>
+              <option value="B">Blue</option>
+            </select>
+          \`);
+          const locator = page.locator('select');
+          await locator.selectOption(['B']);
+          await expect(locator).toHaveValues([/R/, /G/]);
+        });
+        `,
+    }, { workers: 1 });
+    expect(result.passed).toBe(0);
+    expect(result.exitCode).toBe(1);
+    expect(result.output).toContain('Not a select element with a multiple attribute');
+  });
+
+  test('fails when not a select element', async ({ runInlineTest }) => {
+    const result = await runInlineTest({
+      'a.test.ts': `
+        const { test } = pwt;
+
+        test('pass', async ({ page }) => {
+          await page.setContent(\`
+            <input value="foo" />
+          \`);
+          const locator = page.locator('input');
+          await expect(locator).toHaveValues([/R/, /G/]);
+        });
+        `,
+    }, { workers: 1 });
+    expect(result.passed).toBe(0);
+    expect(result.exitCode).toBe(1);
+    expect(result.output).toContain('Not a select element with a multiple attribute');
+  });
+});
+
+test('should print expected/received before timeout', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('times out waiting for text', async ({ page }) => {
+        await page.setContent('<div id=node>Text content</div>');
+        await expect(page.locator('#node')).toHaveText('Text 2');
+      });
+      `,
+  }, { workers: 1, timeout: 2000 });
+  expect(result.exitCode).toBe(1);
+  expect(result.passed).toBe(0);
+  expect(result.failed).toBe(1);
+  expect(result.output).toContain('Test timeout of 2000ms exceeded.');
+  expect(stripAnsi(result.output)).toContain('Expected string: "Text 2"');
+  expect(stripAnsi(result.output)).toContain('Received string: "Text content"');
+});
+
+test('should print nice error for toHaveText', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('fail', async ({ page }) => {
+        await page.setContent('<div id=node>Text content</div>');
+        await expect(page.locator('no-such-thing')).toHaveText('Text');
+      });
+      `,
+  }, { workers: 1, timeout: 2000 });
+  expect(result.failed).toBe(1);
+  expect(result.exitCode).toBe(1);
+  const output = stripAnsi(result.output);
+  expect(output).toContain('Pending operations:');
+  expect(output).toContain('Error: expect(received).toHaveText(expected)');
+  expect(output).toContain('Expected string: "Text"');
+  expect(output).toContain('Received string: ""');
+  expect(output).toContain('waiting for selector "no-such-thing"');
+});
+
+test('should print expected/received on Ctrl+C', async ({ runInlineTest }) => {
+  test.skip(process.platform === 'win32', 'No sending SIGINT on Windows');
+
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('times out waiting for text', async ({ page }) => {
+        await page.setContent('<div id=node>Text content</div>');
+        const promise = expect(page.locator('#node')).toHaveText('Text 2');
+        await new Promise(f => setTimeout(f, 500));
+        console.log('\\n%%SEND-SIGINT%%');
+        await promise;
+      });
+      `,
+  }, { workers: 1 }, {}, { sendSIGINTAfter: 1 });
+  expect(result.exitCode).toBe(130);
+  expect(result.passed).toBe(0);
+  expect(result.interrupted).toBe(1);
+  expect(stripAnsi(result.output)).toContain('Expected string: "Text 2"');
+  expect(stripAnsi(result.output)).toContain('Received string: "Text content"');
+});
+
+test('should support not.toHaveText when selector does not match', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('fails', async ({ page }) => {
+        await page.setContent('<div>hello</div>');
+        await expect(page.locator('span')).not.toHaveText('hello', { timeout: 1000 });
+      });
+      `,
+  }, { workers: 1 });
+  expect(result.exitCode).toBe(1);
+  expect(result.passed).toBe(0);
+  expect(result.failed).toBe(1);
+  const output = stripAnsi(result.output);
+  expect(output).toContain('Expected string: not "hello"');
+  expect(output).toContain('Received string: ""');
+  expect(output).toContain('waiting for selector "span"');
+});
diff --git a/tests/playwright-test/playwright.expect.true.spec.ts b/tests/playwright-test/playwright.expect.true.spec.ts
new file mode 100644
index 0000000000000000000000000000000000000000..a4ea3fbcc7b1413625052e01d356818acedd2bca
--- /dev/null
+++ b/tests/playwright-test/playwright.expect.true.spec.ts
@@ -0,0 +1,510 @@
+/**
+ * Copyright (c) Microsoft Corporation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import { test, expect, stripAnsi } from './playwright-test-fixtures';
+
+test('should support toBeChecked', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass', async ({ page }) => {
+        await page.setContent('<input type=checkbox checked></input>');
+        const locator = page.locator('input');
+        await expect(locator).toBeChecked();
+      });
+
+      test('pass 2', async ({ page }) => {
+        await page.setContent('<input type=checkbox checked></input>');
+        const locator = page.locator('input');
+        await expect(locator).toBeChecked({ checked: true });
+      });
+
+      test('pass 3', async ({ page }) => {
+        await page.setContent('<input type=checkbox checked></input>');
+        const locator = page.locator('input');
+        await expect(locator).not.toBeChecked({ checked: false });
+      });
+
+      test('fail', async ({ page }) => {
+        await page.setContent('<input type=checkbox></input>');
+        const locator = page.locator('input');
+        await expect(locator).toBeChecked({ timeout: 1000 });
+      });
+      `,
+  }, { workers: 1 });
+  const output = stripAnsi(result.output);
+  expect(output).toContain('Error: expect(received).toBeChecked()');
+  expect(output).toContain('expect(locator).toBeChecked');
+  expect(result.passed).toBe(3);
+  expect(result.failed).toBe(1);
+  expect(result.exitCode).toBe(1);
+});
+
+test('should support toBeChecked w/ not', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass not', async ({ page }) => {
+        await page.setContent('<input type=checkbox></input>');
+        const locator = page.locator('input');
+        await expect(locator).not.toBeChecked();
+      });
+
+      test('pass 2', async ({ page }) => {
+        await page.setContent('<input type=checkbox></input>');
+        const locator = page.locator('input');
+        await expect(locator).toBeChecked({ checked: false });
+      });
+
+      test('fail not', async ({ page }) => {
+        await page.setContent('<input type=checkbox checked></input>');
+        const locator = page.locator('input');
+        await expect(locator).not.toBeChecked({ timeout: 1000 });
+      });
+
+      test('fail 2', async ({ page }) => {
+        await page.setContent('<input type=checkbox checked></input>');
+        const locator = page.locator('input');
+        await expect(locator).toBeChecked({ checked: false, timeout: 1000 });
+      });
+
+      test('fail missing', async ({ page }) => {
+        await page.setContent('<div>no inputs here</div>');
+        const locator2 = page.locator('input2');
+        await expect(locator2).not.toBeChecked({ timeout: 1000 });
+      });
+      `,
+  }, { workers: 1 });
+  const output = stripAnsi(result.output);
+  expect(result.passed).toBe(2);
+  expect(result.failed).toBe(3);
+  expect(result.exitCode).toBe(1);
+  // fail not
+  expect(output).toContain('Error: expect(received).not.toBeChecked()');
+  expect(output).toContain('expect(locator).not.toBeChecked');
+  expect(output).toContain('selector resolved to <input checked type="checkbox"/>');
+  // fail missing
+  expect(output).toContain('expect(locator2).not.toBeChecked');
+  expect(output).toContain('waiting for selector "input2"');
+});
+
+test('should support toBeEditable, toBeEnabled, toBeDisabled, toBeEmpty', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('editable', async ({ page }) => {
+        await page.setContent('<input></input>');
+        const locator = page.locator('input');
+        await expect(locator).toBeEditable();
+      });
+
+      test('enabled', async ({ page }) => {
+        await page.setContent('<button>Text</button>');
+        const locator = page.locator('button');
+        await expect(locator).toBeEnabled();
+      });
+
+      test('failed', async ({ page }) => {
+        await page.setContent('<button disabled>Text</button>');
+        const locator = page.locator('button');
+        await expect(locator).toBeEnabled({ timeout: 1000 });
+      });
+
+      test('eventually enabled', async ({ page }) => {
+        await page.setContent('<button disabled>Text</button>');
+        const locator = page.locator('button');
+        setTimeout(() => {
+          locator.evaluate(e => e.removeAttribute('disabled')).catch(() => {});
+        }, 500);
+        await expect(locator).toBeEnabled();
+      });
+
+      test('eventually disabled', async ({ page }) => {
+        await page.setContent('<button>Text</button>');
+        const locator = page.locator('button');
+        setTimeout(() => {
+          locator.evaluate(e => e.setAttribute('disabled', '')).catch(() => {});
+        }, 500);
+        await expect(locator).not.toBeEnabled();
+      });
+
+      test('disabled', async ({ page }) => {
+        await page.setContent('<button disabled>Text</button>');
+        const locator = page.locator('button');
+        await expect(locator).toBeDisabled();
+      });
+
+      test('empty input', async ({ page }) => {
+        await page.setContent('<input></input>');
+        const locator = page.locator('input');
+        await expect(locator).toBeEmpty();
+      });
+
+      test('non-empty input', async ({ page }) => {
+        await page.setContent('<input value=text></input>');
+        const locator = page.locator('input');
+        await expect(locator).not.toBeEmpty();
+      });
+
+      test('empty DOM', async ({ page }) => {
+        await page.setContent('<div style="width: 50; height: 50px"></div>');
+        const locator = page.locator('div');
+        await expect(locator).toBeEmpty();
+      });
+      `,
+  }, { workers: 1 });
+  expect(result.passed).toBe(8);
+  expect(result.failed).toBe(1);
+  expect(result.exitCode).toBe(1);
+  const output = stripAnsi(result.output);
+  expect(output).toContain('expect(locator).toBeEnabled({ timeout: 1000 }');
+});
+
+test('should support toBeDisabled,toBeChecked,toBeHidden w/ value', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('disabled', async ({ page }) => {
+        await page.setContent('<button disabled="yes">Text</button>');
+        const locator = page.locator('button');
+        await expect(locator).toBeDisabled();
+      });
+      test('checked', async ({ page }) => {
+        await page.setContent('<input type=checkbox checked="yes"></input>');
+        const locator = page.locator('input');
+        await expect(locator).toBeChecked();
+      });
+      test('hidden', async ({ page }) => {
+        await page.setContent('<input type=checkbox hidden="of course"></input>');
+        const locator = page.locator('input');
+        await expect(locator).toBeHidden();
+      });
+      test('div disabled', async ({ page }) => {
+        await page.setContent('<div disabled="yes"></div>');
+        const locator = page.locator('div');
+        await expect(locator).not.toBeDisabled();
+      });
+      `,
+  }, { workers: 1 });
+  expect(result.passed).toBe(4);
+  expect(result.failed).toBe(0);
+  expect(result.exitCode).toBe(0);
+});
+
+
+test('should support toBeVisible, toBeHidden', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('visible', async ({ page }) => {
+        await page.setContent('<input></input>');
+        const locator = page.locator('input');
+        await expect(locator).toBeVisible();
+      });
+
+      test('not visible', async ({ page }) => {
+        await page.setContent('<button style="display: none"></button>');
+        const locator = page.locator('button');
+        await expect(locator).not.toBeVisible();
+      });
+
+      test('hidden', async ({ page }) => {
+        await page.setContent('<button style="display: none"></button>');
+        const locator = page.locator('button');
+        await expect(locator).toBeHidden();
+      });
+
+      test('was hidden', async ({ page }) => {
+        await page.setContent('<div</div>');
+        const locator = page.locator('button');
+        await expect(locator).toBeHidden();
+      });
+
+      test('not hidden', async ({ page }) => {
+        await page.setContent('<input></input>');
+        const locator = page.locator('input');
+        await expect(locator).not.toBeHidden();
+      });
+      `,
+  }, { workers: 1 });
+  expect(result.passed).toBe(5);
+  expect(result.exitCode).toBe(0);
+});
+
+test('should support toBeVisible, toBeHidden wait', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('visible', async ({ page }) => {
+        await page.setContent('<div></div>');
+        const locator = page.locator('span');
+        setTimeout(() => {
+          page.$eval('div', div => div.innerHTML = '<span>Hello</span>').catch(() => {});
+        }, 0);
+        await expect(locator).toBeVisible();
+      });
+
+      test('not hidden', async ({ page }) => {
+        await page.setContent('<div></div>');
+        const locator = page.locator('span');
+        setTimeout(() => {
+          page.$eval('div', div => div.innerHTML = '<span>Hello</span>').catch(() => {});
+        }, 0);
+        await expect(locator).not.toBeHidden();
+      });
+
+      test('not visible', async ({ page }) => {
+        await page.setContent('<div><span>Hello</span></div>');
+        const locator = page.locator('span');
+        setTimeout(() => {
+          page.$eval('span', span => span.textContent = '').catch(() => {});
+        }, 0);
+        await expect(locator).not.toBeVisible();
+      });
+
+      test('hidden', async ({ page }) => {
+        await page.setContent('<div><span>Hello</span></div>');
+        const locator = page.locator('span');
+        setTimeout(() => {
+          page.$eval('span', span => span.textContent = '').catch(() => {});
+        }, 0);
+        await expect(locator).toBeHidden();
+      });
+      `,
+  }, { workers: 1 });
+  expect(result.passed).toBe(4);
+  expect(result.exitCode).toBe(0);
+});
+
+test('should support toBeVisible, toBeHidden fail', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('visible', async ({ page }) => {
+        await page.setContent('<button style="display: none"></button>');
+        const locator = page.locator('button');
+        await expect(locator).toBeVisible({ timeout: 1000 });
+      });
+
+      test('not visible', async ({ page }) => {
+        await page.setContent('<input></input>');
+        const locator = page.locator('input');
+        await expect(locator).not.toBeVisible({ timeout: 1000 });
+      });
+
+      test('hidden', async ({ page }) => {
+        await page.setContent('<input></input>');
+        const locator = page.locator('input');
+        await expect(locator).toBeHidden({ timeout: 1000 });
+      });
+
+      test('not hidden', async ({ page }) => {
+        await page.setContent('<button style="display: none"></button>');
+        const locator = page.locator('button');
+        await expect(locator).not.toBeHidden({ timeout: 1000 });
+      });
+
+      test('not hidden 2', async ({ page }) => {
+        await page.setContent('<div></div>');
+        const locator = page.locator('button');
+        await expect(locator).not.toBeHidden({ timeout: 1000 });
+      });
+      `,
+  }, { workers: 1 });
+  expect(result.failed).toBe(5);
+  expect(result.exitCode).toBe(1);
+});
+
+test('should support toBeFocused', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('focused', async ({ page }) => {
+        await page.setContent('<input></input>');
+        const locator = page.locator('input');
+        await locator.focus();
+        await expect(locator).toBeFocused({ timeout: 1000 });
+      });
+      `,
+  }, { workers: 1 });
+  expect(result.passed).toBe(1);
+  expect(result.exitCode).toBe(0);
+});
+
+test('should support toBeFocused with shadow elements', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('focused', async ({ page }) => {
+        await page.setContent(\`
+          <div id="app">
+          </div>
+          <script>
+            const root = document.querySelector('div');
+            const shadowRoot = root.attachShadow({ mode: 'open' });
+            const input = document.createElement('input');
+            input.id = "my-input"
+            shadowRoot.appendChild(input);
+          </script>
+        \`);
+
+        await page.locator("input").focus();
+        expect(await page.evaluate(() => document.activeElement.shadowRoot.activeElement.id)).toBe("my-input");
+        await expect(page.locator("#app")).toBeFocused();
+        await expect(page.locator("input")).toBeFocused();
+      });
+      `,
+  }, { workers: 1 });
+  expect(result.passed).toBe(1);
+  expect(result.exitCode).toBe(0);
+});
+
+test('should print unknown engine error', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+      test('focused', async ({ page }) => {
+        await expect(page.locator('row="row"]')).toBeVisible();
+      });
+      `,
+  }, { workers: 1 });
+  expect(result.passed).toBe(0);
+  expect(result.exitCode).toBe(1);
+  expect(result.output).toContain(`Unknown engine "row" while parsing selector row="row"]`);
+});
+
+test('should print syntax error', async ({ runInlineTest }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+      test('focused', async ({ page }) => {
+        await expect(page.locator('row]')).toBeVisible();
+      });
+      `,
+  }, { workers: 1 });
+  expect(result.passed).toBe(0);
+  expect(result.exitCode).toBe(1);
+  expect(result.output).toContain(`Unexpected token "]" while parsing selector "row]"`);
+});
+
+test('should support toBeOK', async ({ runInlineTest, server }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('pass with response', async ({ page }) => {
+        const res = await page.request.get('${server.EMPTY_PAGE}');
+        await expect(res).toBeOK();
+      });
+
+      test('pass with not', async ({ page }) => {
+        const res = await page.request.get('${server.PREFIX}/unknown');
+        await expect(res).not.toBeOK();
+      });
+
+      test('fail with invalid argument', async ({ page }) => {
+        await expect(page).toBeOK();
+      });
+
+      test('fail with promise', async ({ page }) => {
+        const res = page.request.get('${server.EMPTY_PAGE}').catch(e => {});
+        await expect(res).toBeOK();
+      });
+
+      test('fail', async ({ page }) => {
+        const res = await page.request.get('${server.PREFIX}/unknown');
+        await expect(res).toBeOK();
+      });
+      `,
+  }, { workers: 1 });
+  expect(result.passed).toBe(2);
+  expect(result.failed).toBe(3);
+  expect(result.exitCode).toBe(1);
+  expect(result.output).toContain(`â GET ${server.PREFIX}/unknown`);
+  expect(result.output).toContain(`â 404 Not Found`);
+  expect(result.output).toContain(`Error: toBeOK can be only used with APIResponse object`);
+});
+
+test('should print response text if toBeOK fails', async ({ runInlineTest, server }) => {
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('fail', async ({ page }) => {
+        const res = await page.request.get('${server.PREFIX}/unknown');
+        await expect(res).toBeOK();
+      });
+      `,
+  }, { workers: 1 });
+  expect(result.failed).toBe(1);
+  expect(result.exitCode).toBe(1);
+  expect(result.output).toContain(`â GET ${server.PREFIX}/unknown`);
+  expect(result.output).toContain(`â 404 Not Found`);
+  expect(result.output).toContain(`Response text:`);
+  expect(result.output).toContain(`File not found`);
+});
+
+test('should only print response with text content type if toBeOK fails', async ({ runInlineTest, server }) => {
+  server.setRoute('/text-content-type', (req, res) => {
+    res.statusCode = 404;
+    res.setHeader('Content-type', 'text/plain');
+    res.end('Text error');
+  });
+  server.setRoute('/no-content-type', (req, res) => {
+    res.statusCode = 404;
+    res.end('No content type error');
+  });
+  server.setRoute('/binary-content-type', (req, res) => {
+    res.statusCode = 404;
+    res.setHeader('Content-type', 'image/bmp');
+    res.end('Image content type error');
+  });
+  const result = await runInlineTest({
+    'a.test.ts': `
+      const { test } = pwt;
+
+      test('text content type', async ({ page }) => {
+        const res = await page.request.get('${server.PREFIX}/text-content-type');
+        await expect(res).toBeOK();
+      });
+
+      test('no content type', async ({ page }) => {
+        const res = await page.request.get('${server.PREFIX}/no-content-type');
+        await expect(res).toBeOK();
+      });
+
+      test('image content type', async ({ page }) => {
+        const res = await page.request.get('${server.PREFIX}/image-content-type');
+        await expect(res).toBeOK();
+      });
+      `,
+  }, { workers: 1 });
+  expect(result.failed).toBe(3);
+  expect(result.exitCode).toBe(1);
+  expect(result.output).toContain(`â 404 Not Found`);
+  expect(result.output).toContain(`Text error`);
+  expect(result.output).not.toContain(`No content type error`);
+  expect(result.output).not.toContain(`Image content type error`);
+});
diff --git a/tests/playwright-test/playwright.fetch.spec.ts b/tests/playwright-test/playwright.fetch.spec.ts
index 883777ab1ccf4bec9dcfcd3d90df1f0829a29817..2b7ddee8807067e6d631ec80f17c29fed244b8ae 100644
--- a/tests/playwright-test/playwright.fetch.spec.ts
+++ b/tests/playwright-test/playwright.fetch.spec.ts
@@ -50,37 +50,3 @@ test('should use baseURL in request fixture', async ({ runInlineTest, server })
   expect(result.exitCode).toBe(0);
   expect(result.passed).toBe(1);
 });
-
-test('should stop tracing on requestContex.dispose()', async ({ runInlineTest, server }) => {
-  server.setRoute('/slow', (req, resp) => {
-    resp.writeHead(200, {
-      'Content-Type': 'text/plain; charset=utf-8',
-      'Content-Length': '3',
-    });
-    setTimeout(() => {
-      resp.end('Hi!');
-    }, 500);
-  });
-  const result = await runInlineTest({
-    'playwright.config.ts': `
-      module.exports = {
-        reporter: 'html',
-        use: {
-          browserName: 'firefox',
-          trace:'retain-on-failure'
-        }
-      };
-    `,
-    'a.test.ts': `
-      const { test } = pwt;
-      test('hanging request', async ({ page, request }) => {
-        const response = await page.goto('${server.EMPTY_PAGE}');
-        expect(response.status()).toBe(200);
-        await request.get('${server.PREFIX}/slow');
-      });
-    `,
-  }, { workers: 1, timeout: 1000 });
-  expect(result.output).not.toContain('ENOENT');
-  expect(result.exitCode).toBe(1);
-  expect(result.failed).toBe(1);
-});
diff --git a/tests/playwright-test/playwright.reuse.spec.ts b/tests/playwright-test/playwright.reuse.spec.ts
deleted file mode 100644
index 16827a6c5e902b7fbcb9c6698a026514c9a07089..0000000000000000000000000000000000000000
--- a/tests/playwright-test/playwright.reuse.spec.ts
+++ /dev/null
@@ -1,351 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import { test, expect } from './playwright-test-fixtures';
-
-test('should reuse context', async ({ runInlineTest }) => {
-  const result = await runInlineTest({
-    'src/reuse.test.ts': `
-      const { test } = pwt;
-      let lastContextGuid;
-      test('one', async ({ context }) => {
-        lastContextGuid = context._guid;
-      });
-
-      test('two', async ({ context }) => {
-        expect(context._guid).toBe(lastContextGuid);
-      });
-
-      test.describe(() => {
-        test.use({ colorScheme: 'dark' });
-        test('dark', async ({ context }) => {
-          expect(context._guid).toBe(lastContextGuid);
-        });
-      });
-
-      test.describe(() => {
-        test.use({ userAgent: 'UA' });
-        test('UA', async ({ context }) => {
-          expect(context._guid).toBe(lastContextGuid);
-        });
-      });
-
-      test.describe(() => {
-        test.use({ timezoneId: 'Europe/Berlin' });
-        test('tz', async ({ context }) => {
-          expect(context._guid).not.toBe(lastContextGuid);
-        });
-      });
-    `,
-  }, { workers: 1 }, { PW_TEST_REUSE_CONTEXT: '1' });
-
-  expect(result.exitCode).toBe(0);
-  expect(result.passed).toBe(5);
-});
-
-test('should not reuse context with video', async ({ runInlineTest }) => {
-  const result = await runInlineTest({
-    'playwright.config.ts': `
-      export default {
-        use: { video: 'on' },
-      };
-    `,
-    'src/reuse.test.ts': `
-      const { test } = pwt;
-      let lastContext;
-
-      test('one', async ({ context }) => {
-        lastContext = context;
-      });
-
-      test('two', async ({ context }) => {
-        expect(context).not.toBe(lastContext);
-      });
-    `,
-  }, { workers: 1 }, { PW_TEST_REUSE_CONTEXT: '1' });
-
-  expect(result.exitCode).toBe(0);
-  expect(result.passed).toBe(2);
-});
-
-test('should not reuse context with trace', async ({ runInlineTest }) => {
-  const result = await runInlineTest({
-    'playwright.config.ts': `
-      export default {
-        use: { trace: 'on' },
-      };
-    `,
-    'src/reuse.test.ts': `
-      const { test } = pwt;
-      let lastContext;
-
-      test('one', async ({ context }) => {
-        lastContext = context;
-      });
-
-      test('two', async ({ context }) => {
-        expect(context).not.toBe(lastContext);
-      });
-    `,
-  }, { workers: 1 }, { PW_TEST_REUSE_CONTEXT: '1' });
-
-  expect(result.exitCode).toBe(0);
-  expect(result.passed).toBe(2);
-});
-
-test('should work with manually closed pages', async ({ runInlineTest }) => {
-  const result = await runInlineTest({
-    'src/button.test.ts': `
-      const { test } = pwt;
-
-      test('closes page', async ({ page }) => {
-        await page.close();
-      });
-
-      test('creates a new page', async ({ page, context }) => {
-        await page.setContent('<button>Submit</button>');
-        await expect(page.locator('button')).toHaveText('Submit');
-        await page.locator('button').click();
-        await page.close();
-        await context.newPage();
-      });
-
-      test('still works', async ({ page }) => {
-        await page.setContent('<button>Submit</button>');
-        await expect(page.locator('button')).toHaveText('Submit');
-        await page.locator('button').click();
-      });
-    `,
-  }, { workers: 1 }, { PW_TEST_REUSE_CONTEXT: '1' });
-
-  expect(result.exitCode).toBe(0);
-  expect(result.passed).toBe(3);
-});
-
-test('should clean storage', async ({ runInlineTest }) => {
-  const result = await runInlineTest({
-    'src/reuse.test.ts': `
-      const { test } = pwt;
-      let lastContextGuid;
-
-      test.beforeEach(async ({ page }) => {
-        await page.route('**/*', route => route.fulfill('<html></html>'));
-        await page.goto('http://example.com');
-      });
-
-      test('one', async ({ context, page }) => {
-        lastContextGuid = context._guid;
-
-        // Spam local storage.
-        page.evaluate(async () => {
-          while (true) {
-            localStorage.foo = 'bar';
-            sessionStorage.foo = 'bar';
-            await new Promise(f => setTimeout(f, 0));
-          }
-        }).catch(() => {});
-
-        const local = await page.evaluate('localStorage.foo');
-        const session = await page.evaluate('sessionStorage.foo');
-        expect(local).toBe('bar');
-        expect(session).toBe('bar');
-      });
-
-      test('two', async ({ context, page }) => {
-        expect(context._guid).toBe(lastContextGuid);
-        const local = await page.evaluate('localStorage.foo');
-        const session = await page.evaluate('sessionStorage.foo');
-
-        expect(local).toBeFalsy();
-        expect(session).toBeFalsy();
-      });
-    `,
-  }, { workers: 1 }, { PW_TEST_REUSE_CONTEXT: '1' });
-  expect(result.exitCode).toBe(0);
-  expect(result.passed).toBe(2);
-});
-
-test('should restore localStorage', async ({ runInlineTest }) => {
-  const result = await runInlineTest({
-    'src/reuse.test.ts': `
-      const { test } = pwt;
-      let lastContextGuid;
-
-      test.use({
-        storageState: {
-          origins: [{
-            origin: 'http://example.com',
-            localStorage: [{
-              name: 'foo',
-              value: 'fooValue'
-            }]
-          }, {
-            origin: 'http://another.com',
-            localStorage: [{
-              name: 'foo',
-              value: 'anotherValue'
-            }]
-          }]
-        }
-      });
-
-      test.beforeEach(async ({ page }) => {
-        await page.route('**/*', route => route.fulfill('<html></html>'));
-        await page.goto('http://example.com');
-      });
-
-      test('one', async ({ context, page }) => {
-        lastContextGuid = context._guid;
-
-        {
-          const local = await page.evaluate('localStorage.foo');
-          const session = await page.evaluate('sessionStorage.foo');
-          expect(local).toBe('fooValue');
-          expect(session).toBeFalsy();
-        }
-
-        // Overwrite localStorage.
-        await page.evaluate(() => {
-          localStorage.foo = 'bar';
-          sessionStorage.foo = 'bar';
-        });
-
-        {
-          const local = await page.evaluate('localStorage.foo');
-          const session = await page.evaluate('sessionStorage.foo');
-          expect(local).toBe('bar');
-          expect(session).toBe('bar');
-        }
-      });
-
-      test('two', async ({ context, page }) => {
-        expect(context._guid).toBe(lastContextGuid);
-        const local = await page.evaluate('localStorage.foo');
-        const session = await page.evaluate('sessionStorage.foo');
-
-        expect(local).toBe('fooValue');
-        expect(session).toBeFalsy();
-      });
-
-      test('three', async ({ context, page }) => {
-        await page.goto('http://another.com');
-        expect(context._guid).toBe(lastContextGuid);
-        const local = await page.evaluate('localStorage.foo');
-        expect(local).toBe('anotherValue');
-      });
-    `,
-  }, { workers: 1 }, { PW_TEST_REUSE_CONTEXT: '1' });
-  expect(result.exitCode).toBe(0);
-  expect(result.passed).toBe(3);
-});
-
-test('should clean db', async ({ runInlineTest }) => {
-  test.slow();
-  const result = await runInlineTest({
-    'src/reuse.test.ts': `
-      const { test } = pwt;
-      let lastContextGuid;
-
-      test.beforeEach(async ({ page }) => {
-        await page.route('**/*', route => route.fulfill('<html></html>'));
-        await page.goto('http://example.com');
-      });
-
-      test('one', async ({ context, page }) => {
-        lastContextGuid = context._guid;
-        await page.evaluate(async () => {
-          const dbRequest = indexedDB.open('db', 1);
-          await new Promise(f => dbRequest.onsuccess = f);
-        });
-        const dbnames = await page.evaluate(async () => {
-          const dbs = await indexedDB.databases();
-          return dbs.map(db => db.name);
-        });
-        expect(dbnames).toEqual(['db']);
-      });
-
-      test('two', async ({ context, page }) => {
-        expect(context._guid).toBe(lastContextGuid);
-        const dbnames = await page.evaluate(async () => {
-          const dbs = await indexedDB.databases();
-          return dbs.map(db => db.name);
-        });
-
-        expect(dbnames).toEqual([]);
-      });
-    `,
-  }, { workers: 1 }, { PW_TEST_REUSE_CONTEXT: '1' });
-  expect(result.exitCode).toBe(0);
-  expect(result.passed).toBe(2);
-});
-
-test('should restore cookies', async ({ runInlineTest }) => {
-  const result = await runInlineTest({
-    'src/reuse.test.ts': `
-      const { test } = pwt;
-      let lastContextGuid;
-
-      test.use({
-        storageState: {
-          cookies: [{
-            name: 'name',
-            value: 'value',
-            domain: 'example.com',
-            path: '/',
-          }]
-        }
-      });
-
-      test.beforeEach(async ({ page }) => {
-        await page.route('**/*', route => route.fulfill('<html></html>'));
-        await page.goto('http://example.com');
-      });
-
-      test('one', async ({ context, page }) => {
-        lastContextGuid = context._guid;
-
-        {
-          const cookie = await page.evaluate('document.cookie');
-          expect(cookie).toBe('name=value');
-        }
-
-        // Overwrite cookie.
-        await page.evaluate(async () => {
-          document.cookie = 'name=value2';
-        });
-
-        {
-          const cookie = await page.evaluate('document.cookie');
-          expect(cookie).toBe('name=value2');
-        }
-      });
-
-      test('two', async ({ context, page }) => {
-        expect(context._guid).toBe(lastContextGuid);
-        const cookie = await page.evaluate('document.cookie');
-        expect(cookie).toBe('name=value');
-      });
-
-      test('three', async ({ context, page }) => {
-        await page.goto('http://another.com');
-        const cookie = await page.evaluate('document.cookie');
-        expect(cookie).toBe('');
-      });
-    `,
-  }, { workers: 1 }, { PW_TEST_REUSE_CONTEXT: '1' });
-  expect(result.exitCode).toBe(0);
-  expect(result.passed).toBe(3);
-});
diff --git a/tests/playwright-test/reporter-base.spec.ts b/tests/playwright-test/reporter-base.spec.ts
index d044c1a8a2e6a861cbf00a221b3d51113e36b711..7ca35ab95faf0f59700fbd5fd160a206cbeb48b5 100644
--- a/tests/playwright-test/reporter-base.spec.ts
+++ b/tests/playwright-test/reporter-base.spec.ts
@@ -85,7 +85,7 @@ test('should print an error in a codeframe', async ({ runInlineTest }) => {
   expect(result.output).toContain(`>  7 |         const error = new Error('my-message');`);
 });
 
-test('should print codeframe from a helper', async ({ runInlineTest }) => {
+test('should not print codeframe from a helper', async ({ runInlineTest }) => {
   const result = await runInlineTest({
     'helper.ts': `
       export function ohMy() {
@@ -105,9 +105,9 @@ test('should print codeframe from a helper', async ({ runInlineTest }) => {
   expect(result.exitCode).toBe(1);
   expect(result.failed).toBe(1);
   expect(result.output).toContain('Error: oh my');
-  expect(result.output).toContain(`   4 |       export function ohMy() {`);
-  expect(result.output).toContain(` > 5 |         throw new Error('oh my');`);
-  expect(result.output).toContain(`     |               ^`);
+  expect(result.output).toContain(`   7 |       test('foobar', async ({}) => {`);
+  expect(result.output).toContain(`>  8 |         ohMy();`);
+  expect(result.output).toContain(`     |         ^`);
 });
 
 test('should print slow tests', async ({ runInlineTest }) => {
diff --git a/tests/playwright-test/reporter-html.spec.ts b/tests/playwright-test/reporter-html.spec.ts
index 58a836e84eb944090b36503bc484892df22dd480..7b0db76c35aef64cea4857cef14fd1c65de04309 100644
--- a/tests/playwright-test/reporter-html.spec.ts
+++ b/tests/playwright-test/reporter-html.spec.ts
@@ -118,7 +118,7 @@ test('should not throw when attachment is missing', async ({ runInlineTest, page
   await showReport();
   await page.click('text=passes');
   await page.locator('text=Missing attachment "screenshot"').click();
-  const screenshotFile = testInfo.outputPath('test-results', 'a-passes', 'screenshot.png');
+  const screenshotFile = testInfo.outputPath('test-results' , 'a-passes', 'screenshot.png');
   await expect(page.locator('.attachment-body')).toHaveText(`Attachment file ${screenshotFile} is missing`);
 });
 
diff --git a/tests/playwright-test/reporter-json.spec.ts b/tests/playwright-test/reporter-json.spec.ts
index 799bdbafc5b64f3ea4315f35860e28636d4dfcb0..2702c008c0267b35fee108fc799907dd711fd6d5 100644
--- a/tests/playwright-test/reporter-json.spec.ts
+++ b/tests/playwright-test/reporter-json.spec.ts
@@ -235,16 +235,3 @@ test('should add line in addition to file json without CI', async ({ runInlineTe
   expect(stripAnsi(result.output)).toContain('[1/1] a.test.js:6:7 âº one');
   expect(fs.existsSync(testInfo.outputPath('a.json'))).toBeTruthy();
 });
-test('should have starting time in results', async ({ runInlineTest }, testInfo) => {
-  const result = await runInlineTest({
-    'a.test.js': `
-      const { test } = pwt;
-      test('math works!', async ({}) => {
-        expect(1 + 1).toBe(2);
-      });
-    `
-  },   { reporter: 'json' });
-  expect(result.exitCode).toBe(0);
-  const startTime = result.report.suites[0].specs[0].tests[0].results[0].startTime;
-  expect(new Date(startTime).getTime()).toBeGreaterThan(new Date('1/1/2000').getTime());
-});
diff --git a/tests/playwright-test/reporter-junit.spec.ts b/tests/playwright-test/reporter-junit.spec.ts
index 077f0b31ef412b57794ead72fd9f2f335acf1875..c8aa4e1cb34c9c21ab8c1cc8ccc942e5ca3a5935 100644
--- a/tests/playwright-test/reporter-junit.spec.ts
+++ b/tests/playwright-test/reporter-junit.spec.ts
@@ -212,31 +212,6 @@ test('should report skipped due to sharding', async ({ runInlineTest }) => {
   expect(result.exitCode).toBe(0);
 });
 
-test('should not render projects if they dont exist', async ({ runInlineTest }) => {
-  const result = await runInlineTest({
-    'playwright.config.ts': `
-      module.exports = { };
-    `,
-    'a.test.js': `
-      const { test } = pwt;
-      test('one', async ({}) => {
-        expect(1).toBe(1);
-      });
-    `,
-  }, { reporter: 'junit' });
-  const xml = parseXML(result.output);
-  expect(xml['testsuites']['$']['tests']).toBe('1');
-  expect(xml['testsuites']['$']['failures']).toBe('0');
-  expect(xml['testsuites']['testsuite'].length).toBe(1);
-
-  expect(xml['testsuites']['testsuite'][0]['$']['name']).toBe('a.test.js');
-  expect(xml['testsuites']['testsuite'][0]['$']['tests']).toBe('1');
-  expect(xml['testsuites']['testsuite'][0]['$']['failures']).toBe('0');
-  expect(xml['testsuites']['testsuite'][0]['$']['skipped']).toBe('0');
-  expect(xml['testsuites']['testsuite'][0]['testcase'][0]['$']['name']).toBe('one');
-  expect(xml['testsuites']['testsuite'][0]['testcase'][0]['$']['classname']).toContain('a.test.js âº one');
-  expect(result.exitCode).toBe(0);
-});
 
 test('should render projects', async ({ runInlineTest }) => {
   const result = await runInlineTest({
@@ -260,14 +235,14 @@ test('should render projects', async ({ runInlineTest }) => {
   expect(xml['testsuites']['testsuite'][0]['$']['failures']).toBe('0');
   expect(xml['testsuites']['testsuite'][0]['$']['skipped']).toBe('0');
   expect(xml['testsuites']['testsuite'][0]['testcase'][0]['$']['name']).toBe('one');
-  expect(xml['testsuites']['testsuite'][0]['testcase'][0]['$']['classname']).toContain('[project1] âº a.test.js âº one');
+  expect(xml['testsuites']['testsuite'][0]['testcase'][0]['$']['classname']).toContain('[project1] âº a.test.js:6:7 âº one');
 
   expect(xml['testsuites']['testsuite'][1]['$']['name']).toBe('a.test.js');
   expect(xml['testsuites']['testsuite'][1]['$']['tests']).toBe('1');
   expect(xml['testsuites']['testsuite'][1]['$']['failures']).toBe('0');
   expect(xml['testsuites']['testsuite'][1]['$']['skipped']).toBe('0');
   expect(xml['testsuites']['testsuite'][1]['testcase'][0]['$']['name']).toBe('one');
-  expect(xml['testsuites']['testsuite'][1]['testcase'][0]['$']['classname']).toContain('[project2] âº a.test.js âº one');
+  expect(xml['testsuites']['testsuite'][1]['testcase'][0]['$']['classname']).toContain('[project2] âº a.test.js:6:7 âº one');
   expect(result.exitCode).toBe(0);
 });
 
diff --git a/tests/playwright-test/reporter-raw.spec.ts b/tests/playwright-test/reporter-raw.spec.ts
index d8c21c634437bf0be8a13f9d4e5489b93e02107a..427e59f497a90089ae17ee1aec4273f7d8e27458 100644
--- a/tests/playwright-test/reporter-raw.spec.ts
+++ b/tests/playwright-test/reporter-raw.spec.ts
@@ -104,7 +104,7 @@ test('should save attachments', async ({ runInlineTest }, testInfo) => {
   const json = JSON.parse(fs.readFileSync(testInfo.outputPath('test-results', 'report', 'project.report'), 'utf-8'));
   const result = json.suites[0].tests[0].results[0];
   expect(result.attachments[0].name).toBe('binary');
-  expect(Buffer.from(result.attachments[0].body, 'base64')).toEqual(Buffer.from([1, 2, 3]));
+  expect(Buffer.from(result.attachments[0].body, 'base64')).toEqual(Buffer.from([1,2,3]));
   expect(result.attachments[1].name).toBe('text');
   const path2 = result.attachments[1].path;
   expect(path2).toBe('dummy-path');
diff --git a/tests/playwright-test/stable-test-runner/package-lock.json b/tests/playwright-test/stable-test-runner/package-lock.json
index 4bcc62429c9ce0be2e2dd8e06393a4d6350f4171..7bf48976e0f2ecdf93efdeb97962c10ebd1cd892 100644
--- a/tests/playwright-test/stable-test-runner/package-lock.json
+++ b/tests/playwright-test/stable-test-runner/package-lock.json
@@ -5,16 +5,16 @@
   "packages": {
     "": {
       "dependencies": {
-        "@playwright/test": "1.26.0-alpha-sep-7-2022"
+        "@playwright/test": "1.23.0-alpha-1655778679000"
       }
     },
     "node_modules/@playwright/test": {
-      "version": "1.26.0-alpha-sep-7-2022",
-      "resolved": "https://registry.npmjs.org/@playwright/test/-/test-1.26.0-alpha-sep-7-2022.tgz",
-      "integrity": "sha512-tTHg/fv5PDqyoHSJq04yc4B4d17FFXRlYeeOGJtI/Omu1ZIzdgUPH20b0PxxCIv7ZTx+U61dRLKIFeZ1/s6B3Q==",
+      "version": "1.23.0-alpha-1655778679000",
+      "resolved": "https://registry.npmjs.org/@playwright/test/-/test-1.23.0-alpha-1655778679000.tgz",
+      "integrity": "sha512-U35JRHm/XSUf5PGorEjuyioYqHc4K3oCM1yd5SPKUH3XopxkQ6nJzNY+RtMEhXAjsEKYHbEqCNInoCdetwFiYQ==",
       "dependencies": {
         "@types/node": "*",
-        "playwright-core": "1.26.0-alpha-sep-7-2022"
+        "playwright-core": "1.23.0-alpha-1655778679000"
       },
       "bin": {
         "playwright": "cli.js"
@@ -29,9 +29,9 @@
       "integrity": "sha512-cHlGmko4gWLVI27cGJntjs/Sj8th9aYwplmZFwmmgYQQvL5NUsgVJG7OddLvNfLqYS31KFN0s3qlaD9qCaxACA=="
     },
     "node_modules/playwright-core": {
-      "version": "1.26.0-alpha-sep-7-2022",
-      "resolved": "https://registry.npmjs.org/playwright-core/-/playwright-core-1.26.0-alpha-sep-7-2022.tgz",
-      "integrity": "sha512-cqnlP+2uHl2dwwb6O4iPY/uNLiYwTn+LBCCqRpodUCPW77xMHE5Gw9S8VenuAoSSQ12F0liJA02XzjYZSV8HZw==",
+      "version": "1.23.0-alpha-1655778679000",
+      "resolved": "https://registry.npmjs.org/playwright-core/-/playwright-core-1.23.0-alpha-1655778679000.tgz",
+      "integrity": "sha512-UEYy5U7y5FrhkzCS2TCIqCObVBiqlavm+/WwimzWPeU4fA5sLu0rcn4YFcKKt4NQUo+1B7gnfZHFcKO7wDj8jQ==",
       "bin": {
         "playwright": "cli.js"
       },
@@ -42,12 +42,12 @@
   },
   "dependencies": {
     "@playwright/test": {
-      "version": "1.26.0-alpha-sep-7-2022",
-      "resolved": "https://registry.npmjs.org/@playwright/test/-/test-1.26.0-alpha-sep-7-2022.tgz",
-      "integrity": "sha512-tTHg/fv5PDqyoHSJq04yc4B4d17FFXRlYeeOGJtI/Omu1ZIzdgUPH20b0PxxCIv7ZTx+U61dRLKIFeZ1/s6B3Q==",
+      "version": "1.23.0-alpha-1655778679000",
+      "resolved": "https://registry.npmjs.org/@playwright/test/-/test-1.23.0-alpha-1655778679000.tgz",
+      "integrity": "sha512-U35JRHm/XSUf5PGorEjuyioYqHc4K3oCM1yd5SPKUH3XopxkQ6nJzNY+RtMEhXAjsEKYHbEqCNInoCdetwFiYQ==",
       "requires": {
         "@types/node": "*",
-        "playwright-core": "1.26.0-alpha-sep-7-2022"
+        "playwright-core": "1.23.0-alpha-1655778679000"
       }
     },
     "@types/node": {
@@ -56,9 +56,9 @@
       "integrity": "sha512-cHlGmko4gWLVI27cGJntjs/Sj8th9aYwplmZFwmmgYQQvL5NUsgVJG7OddLvNfLqYS31KFN0s3qlaD9qCaxACA=="
     },
     "playwright-core": {
-      "version": "1.26.0-alpha-sep-7-2022",
-      "resolved": "https://registry.npmjs.org/playwright-core/-/playwright-core-1.26.0-alpha-sep-7-2022.tgz",
-      "integrity": "sha512-cqnlP+2uHl2dwwb6O4iPY/uNLiYwTn+LBCCqRpodUCPW77xMHE5Gw9S8VenuAoSSQ12F0liJA02XzjYZSV8HZw=="
+      "version": "1.23.0-alpha-1655778679000",
+      "resolved": "https://registry.npmjs.org/playwright-core/-/playwright-core-1.23.0-alpha-1655778679000.tgz",
+      "integrity": "sha512-UEYy5U7y5FrhkzCS2TCIqCObVBiqlavm+/WwimzWPeU4fA5sLu0rcn4YFcKKt4NQUo+1B7gnfZHFcKO7wDj8jQ=="
     }
   }
 }
diff --git a/tests/playwright-test/stable-test-runner/package.json b/tests/playwright-test/stable-test-runner/package.json
index 76702cba119cbb84ec1e7809e51e2635d2440bad..d6120bef53c6ec02dfa9da1f4f1a62c4d0f463dd 100644
--- a/tests/playwright-test/stable-test-runner/package.json
+++ b/tests/playwright-test/stable-test-runner/package.json
@@ -1,6 +1,6 @@
 {
   "private": true,
   "dependencies": {
-    "@playwright/test": "1.26.0-alpha-sep-7-2022"
+    "@playwright/test": "1.23.0-alpha-1655778679000"
   }
 }
diff --git a/tests/playwright-test/test-modifiers.spec.ts b/tests/playwright-test/test-modifiers.spec.ts
index fb16b7727db866ace829e39811862248289feedd..4caaed46d0840eddf7998cf48398fb4b3ce6804b 100644
--- a/tests/playwright-test/test-modifiers.spec.ts
+++ b/tests/playwright-test/test-modifiers.spec.ts
@@ -186,7 +186,7 @@ test.describe('test modifier annotations', () => {
     expectTest('no marker', 'skipped', 'skipped', ['fixme']);
     expectTest('skip wrap', 'skipped', 'skipped', ['skip', 'fixme']);
     expectTest('skip inner', 'skipped', 'skipped', ['fixme']);
-    expectTest('fixme wrap', 'skipped', 'skipped', ['fixme', 'fixme']);
+    expectTest('fixme wrap', 'skipped', 'skipped', ['fixme','fixme']);
     expectTest('fixme inner', 'skipped', 'skipped', ['fixme']);
     expectTest('example', 'skipped', 'skipped', ['fixme']);
   });
diff --git a/tests/playwright-test/to-have-screenshot.spec.ts b/tests/playwright-test/to-have-screenshot.spec.ts
index 82405676750936a6a4eb54112307734668e6c775..8465c21826b45658c559e71474b811e980330297 100644
--- a/tests/playwright-test/to-have-screenshot.spec.ts
+++ b/tests/playwright-test/to-have-screenshot.spec.ts
@@ -555,20 +555,6 @@ test('should fail on same snapshots with negate matcher', async ({ runInlineTest
   expect(result.output).toContain('Expected result should be different from the actual one.');
 });
 
-test('should not fail if --ignore-snapshots is passed', async ({ runInlineTest }) => {
-  const result = await runInlineTest({
-    ...playwrightConfig({ screenshotsDir: '__screenshots__' }),
-    '__screenshots__/a.spec.js/snapshot.png': redImage,
-    'a.spec.js': `
-      pwt.test('is a test', async ({ page }) => {
-        await expect(page).toHaveScreenshot('snapshot.png', { timeout: 2000 });
-      });
-    `
-  }, { 'ignore-snapshots': true });
-
-  expect(result.exitCode).toBe(0);
-});
-
 test('should write missing expectations locally twice and continue', async ({ runInlineTest }, testInfo) => {
   const result = await runInlineTest({
     ...playwrightConfig({ screenshotsDir: '__screenshots__' }),
diff --git a/tests/playwright-test/web-server.spec.ts b/tests/playwright-test/web-server.spec.ts
index e70b197b4dbff3a1fdb3caf54734ce04bb885c5b..8e6f008bb8fdf471cd4650b7526203cf392a9e8e 100644
--- a/tests/playwright-test/web-server.spec.ts
+++ b/tests/playwright-test/web-server.spec.ts
@@ -312,7 +312,7 @@ test('should be able to specify a custom baseURL with the server', async ({ runI
   await new Promise(resolve => server.close(resolve));
 });
 
-test('should be able to use an existing server when reuseExistingServer:true', async ({ runInlineTest }, { workerIndex }) => {
+test('should be able to use an existing server when reuseExistingServer:true ', async ({ runInlineTest }, { workerIndex }) => {
   const port = workerIndex + 10500;
   const server = http.createServer((req: http.IncomingMessage, res: http.ServerResponse) => {
     res.end('<html><body>hello</body></html>');
@@ -345,7 +345,7 @@ test('should be able to use an existing server when reuseExistingServer:true', a
   await new Promise(resolve => server.close(resolve));
 });
 
-test('should throw when a server is already running on the given port and strict is true', async ({ runInlineTest }, { workerIndex }) => {
+test('should throw when a server is already running on the given port and strict is true ', async ({ runInlineTest }, { workerIndex }) => {
   const port = workerIndex + 10500;
   const server = http.createServer((req: http.IncomingMessage, res: http.ServerResponse) => {
     res.end('<html><body>hello</body></html>');
@@ -410,7 +410,7 @@ for (const host of ['localhost', '127.0.0.1', '0.0.0.0']) {
   });
 }
 
-test(`should support self signed certificate`, async ({ runInlineTest, httpsServer }) => {
+test(`should suport self signed certificate`, async ({ runInlineTest, httpsServer }) => {
   const result = await runInlineTest({
     'test.spec.js': `
       const { test } = pwt;
@@ -429,34 +429,6 @@ test(`should support self signed certificate`, async ({ runInlineTest, httpsServ
   expect(result.exitCode).toBe(0);
 });
 
-test('should send Accept header', async ({ runInlineTest, server }) => {
-  let acceptHeader: string | undefined | null = null;
-  server.setRoute('/hello', (req, res) => {
-    if (acceptHeader === null) acceptHeader = req.headers.accept;
-    res.end('<html><body>hello</body></html>');
-  });
-  const result = await runInlineTest({
-    'test.spec.ts': `
-      const { test } = pwt;
-      test('connect to the server', async ({baseURL, page}) => {
-        await page.goto('http://localhost:${server.PORT}/hello');
-        expect(await page.textContent('body')).toBe('hello');
-      });
-    `,
-    'playwright.config.ts': `
-      module.exports = {
-        webServer: {
-          command: 'node ${JSON.stringify(SIMPLE_SERVER_PATH)} ${server.PORT}',
-          url: 'http://localhost:${server.PORT}/hello',
-          reuseExistingServer: true,
-        }
-      };
-    `,
-  });
-  expect(result.exitCode).toBe(0);
-  expect(acceptHeader).toBe('*/*');
-});
-
 test('should create multiple servers', async ({ runInlineTest }, { workerIndex }) => {
   const port = workerIndex + 10500;
   const result = await runInlineTest({
diff --git a/tests/webview2/globalSetup.ts b/tests/webview2/globalSetup.ts
deleted file mode 100644
index 6b815a58915fdede9962813401c394a383740b36..0000000000000000000000000000000000000000
--- a/tests/webview2/globalSetup.ts
+++ /dev/null
@@ -1,38 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import path from 'path';
-import childProcess from 'child_process';
-import playwright from 'playwright';
-
-export default async () => {
-  const cdpPort = 9876;
-  const spawnedProcess = childProcess.spawn(path.join(__dirname, 'webview2-app/bin/Debug/net6.0-windows/webview2.exe'), {
-    shell: true,
-    env: {
-      ...process.env,
-      WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS: `--remote-debugging-port=${cdpPort}`,
-    }
-  });
-  await new Promise<void>(resolve => spawnedProcess.stdout.on('data', (data: Buffer): void => {
-    if (data.toString().includes('WebView2 initialized'))
-      resolve();
-  }));
-  const browser = await playwright.chromium.connectOverCDP(`http://127.0.0.1:${cdpPort}`);
-  const chromeVersion = await browser.contexts()[0].pages()[0].evaluate(() => navigator.userAgent.match(/Chrome\/(.*?) /)[1]);
-  process.env.PWTEST_WEBVIEW2_CHROMIUM_VERSION = chromeVersion;
-  await browser.close();
-  childProcess.spawnSync(`taskkill /pid ${spawnedProcess.pid} /T /F`, { shell: true });
-};
diff --git a/tests/webview2/playwright.config.ts b/tests/webview2/playwright.config.ts
deleted file mode 100644
index b14494f13c44206104a7a0038e3783bca344f36e..0000000000000000000000000000000000000000
--- a/tests/webview2/playwright.config.ts
+++ /dev/null
@@ -1,64 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import { config as loadEnv } from 'dotenv';
-loadEnv({ path: path.join(__dirname, '..', '..', '.env') });
-
-import type { Config, PlaywrightTestOptions, PlaywrightWorkerOptions } from '@playwright/test';
-import * as path from 'path';
-import type { CoverageWorkerOptions } from '../config/coverageFixtures';
-
-process.env.PWPAGE_IMPL = 'webview2';
-
-const outputDir = path.join(__dirname, '..', '..', 'test-results');
-const testDir = path.join(__dirname, '..');
-const config: Config<CoverageWorkerOptions & PlaywrightWorkerOptions & PlaywrightTestOptions> = {
-  testDir,
-  outputDir,
-  timeout: 30000,
-  globalTimeout: 5400000,
-  workers: process.env.CI ? 1 : undefined,
-  forbidOnly: !!process.env.CI,
-  preserveOutput: process.env.CI ? 'failures-only' : 'always',
-  retries: process.env.CI ? 3 : 0,
-  reporter: process.env.CI ? [
-    ['dot'],
-    ['json', { outputFile: path.join(outputDir, 'report.json') }],
-  ] : 'line',
-  projects: [],
-  globalSetup: './globalSetup.ts',
-};
-
-const metadata = {
-  platform: process.platform,
-  headful: true,
-  browserName: 'webview2',
-  channel: undefined,
-  mode: 'default',
-  video: false,
-};
-
-config.projects.push({
-  name: 'chromium',  // We use 'chromium' here to share screenshots with chromium.
-  use: {
-    browserName: 'chromium',
-    coverageName: 'webview2',
-  },
-  testDir: path.join(testDir, 'page'),
-  metadata,
-});
-
-export default config;
diff --git a/tests/webview2/webView2Test.ts b/tests/webview2/webView2Test.ts
deleted file mode 100644
index 0e8a0c08e080eb89e22c5035982be5a9313ba00b..0000000000000000000000000000000000000000
--- a/tests/webview2/webView2Test.ts
+++ /dev/null
@@ -1,55 +0,0 @@
-/**
- * Copyright (c) Microsoft Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import { baseTest } from '../config/baseTest';
-import fs from 'fs';
-import os from 'os';
-import path from 'path';
-import type { PageTestFixtures, PageWorkerFixtures } from '../page/pageTestApi';
-import type { TraceViewerFixtures } from '../config/traceViewerFixtures';
-import { traceViewerFixtures } from '../config/traceViewerFixtures';
-export { expect } from '@playwright/test';
-import { TestChildProcess } from '../config/commonFixtures';
-import { DEFAULT_ARGS } from '../../packages/playwright-core/lib/server/chromium/chromium';
-
-export const webView2Test = baseTest.extend<TraceViewerFixtures>(traceViewerFixtures).extend<PageTestFixtures, PageWorkerFixtures>({
-  browserVersion: [process.env.PWTEST_WEBVIEW2_CHROMIUM_VERSION, { scope: 'worker' }],
-  browserMajorVersion: [({ browserVersion }, use) => use(Number(browserVersion.split('.')[0])), { scope: 'worker' }],
-  isAndroid: [false, { scope: 'worker' }],
-  isElectron: [false, { scope: 'worker' }],
-  isWebView2: [true, { scope: 'worker' }],
-
-  browser: [async ({ playwright }, use, testInfo) => {
-    const cdpPort = 10000 + testInfo.workerIndex;
-    const spawnedProcess = new TestChildProcess({
-      command: [path.join(__dirname, 'webview2-app/bin/Debug/net6.0-windows/webview2.exe')],
-      shell: true,
-      env: {
-        ...process.env,
-        WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS: `--remote-debugging-port=${cdpPort} ${DEFAULT_ARGS.join(' ')}`,
-        WEBVIEW2_USER_DATA_FOLDER: path.join(fs.realpathSync.native(os.tmpdir()), `playwright-webview2-tests/user-data-dir-${testInfo.workerIndex}`),
-      }
-    });
-    await new Promise<void>(resolve => spawnedProcess.process.stdout.on('data', data => {
-      if (data.toString().includes('WebView2 initialized'))
-        resolve();
-    }));
-    const browser = await playwright.chromium.connectOverCDP(`http://127.0.0.1:${cdpPort}`);
-    await use(browser);
-    await browser.close();
-    await spawnedProcess.close();
-  }, { scope: 'worker' }],
-});
diff --git a/tests/webview2/webview2-app/.gitignore b/tests/webview2/webview2-app/.gitignore
deleted file mode 100644
index 674593b9f862e3c7e47a570877eb7cb997b714fe..0000000000000000000000000000000000000000
--- a/tests/webview2/webview2-app/.gitignore
+++ /dev/null
@@ -1,3 +0,0 @@
-obj/
-bin/
-.vs/
diff --git a/tests/webview2/webview2-app/Form1.Designer.cs b/tests/webview2/webview2-app/Form1.Designer.cs
deleted file mode 100644
index a1157f3e050d8cd47cea94b30ec06a7079a14f8d..0000000000000000000000000000000000000000
--- a/tests/webview2/webview2-app/Form1.Designer.cs
+++ /dev/null
@@ -1,64 +0,0 @@
-namespace webview2;
-
-partial class Form1
-{
-    /// <summary>
-    ///  Required designer variable.
-    /// </summary>
-    private System.ComponentModel.IContainer components = null;
-
-    /// <summary>
-    ///  Clean up any resources being used.
-    /// </summary>
-    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
-    protected override void Dispose(bool disposing)
-    {
-        if (disposing && (components != null))
-        {
-            components.Dispose();
-        }
-        base.Dispose(disposing);
-    }
-
-    #region Windows Form Designer generated code
-
-    /// <summary>
-    ///  Required method for Designer support - do not modify
-    ///  the contents of this method with the code editor.
-    /// </summary>
-    private void InitializeComponent()
-    {
-            this.webView = new Microsoft.Web.WebView2.WinForms.WebView2();
-            ((System.ComponentModel.ISupportInitialize)(this.webView)).BeginInit();
-            this.SuspendLayout();
-            // 
-            // webView
-            // 
-            this.webView.AllowExternalDrop = true;
-            this.webView.CreationProperties = null;
-            this.webView.DefaultBackgroundColor = System.Drawing.Color.White;
-            this.webView.Dock = System.Windows.Forms.DockStyle.Fill;
-            this.webView.Location = new System.Drawing.Point(0, 0);
-            this.webView.Name = "webView";
-            this.webView.Size = new System.Drawing.Size(1280, 720);
-            this.webView.Source = new System.Uri("about:blank", System.UriKind.Absolute);
-            this.webView.TabIndex = 0;
-            this.webView.ZoomFactor = 1D;
-            // 
-            // Form1
-            // 
-            this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);
-            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
-            this.ClientSize = new System.Drawing.Size(1280, 720);
-            this.Controls.Add(this.webView);
-            this.Name = "Form1";
-            this.Text = "Playwright WebView2";
-            ((System.ComponentModel.ISupportInitialize)(this.webView)).EndInit();
-            this.ResumeLayout(false);
-
-    }
-
-  #endregion
-
-  private Microsoft.Web.WebView2.WinForms.WebView2 webView;
-}
diff --git a/tests/webview2/webview2-app/Form1.cs b/tests/webview2/webview2-app/Form1.cs
deleted file mode 100644
index a69643319f5dfff076e5ed82ed3eb9ad808b0506..0000000000000000000000000000000000000000
--- a/tests/webview2/webview2-app/Form1.cs
+++ /dev/null
@@ -1,14 +0,0 @@
-namespace webview2;
-
-public partial class Form1 : Form
-{
-    public Form1()
-    {
-        InitializeComponent();
-        this.webView.CoreWebView2InitializationCompleted += (_, e) =>
-        {
-            if (e.IsSuccess)
-              Console.WriteLine("WebView2 initialized");
-        };
-    }
-}
diff --git a/tests/webview2/webview2-app/Form1.resx b/tests/webview2/webview2-app/Form1.resx
deleted file mode 100644
index f298a7be80982ebd538a05758a03bc827419d418..0000000000000000000000000000000000000000
--- a/tests/webview2/webview2-app/Form1.resx
+++ /dev/null
@@ -1,60 +0,0 @@
-ï»¿<root>
-  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
-    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
-    <xsd:element name="root" msdata:IsDataSet="true">
-      <xsd:complexType>
-        <xsd:choice maxOccurs="unbounded">
-          <xsd:element name="metadata">
-            <xsd:complexType>
-              <xsd:sequence>
-                <xsd:element name="value" type="xsd:string" minOccurs="0" />
-              </xsd:sequence>
-              <xsd:attribute name="name" use="required" type="xsd:string" />
-              <xsd:attribute name="type" type="xsd:string" />
-              <xsd:attribute name="mimetype" type="xsd:string" />
-              <xsd:attribute ref="xml:space" />
-            </xsd:complexType>
-          </xsd:element>
-          <xsd:element name="assembly">
-            <xsd:complexType>
-              <xsd:attribute name="alias" type="xsd:string" />
-              <xsd:attribute name="name" type="xsd:string" />
-            </xsd:complexType>
-          </xsd:element>
-          <xsd:element name="data">
-            <xsd:complexType>
-              <xsd:sequence>
-                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
-                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
-              </xsd:sequence>
-              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
-              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
-              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
-              <xsd:attribute ref="xml:space" />
-            </xsd:complexType>
-          </xsd:element>
-          <xsd:element name="resheader">
-            <xsd:complexType>
-              <xsd:sequence>
-                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
-              </xsd:sequence>
-              <xsd:attribute name="name" type="xsd:string" use="required" />
-            </xsd:complexType>
-          </xsd:element>
-        </xsd:choice>
-      </xsd:complexType>
-    </xsd:element>
-  </xsd:schema>
-  <resheader name="resmimetype">
-    <value>text/microsoft-resx</value>
-  </resheader>
-  <resheader name="version">
-    <value>2.0</value>
-  </resheader>
-  <resheader name="reader">
-    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
-  </resheader>
-  <resheader name="writer">
-    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
-  </resheader>
-</root>
\ No newline at end of file
diff --git a/tests/webview2/webview2-app/Program.cs b/tests/webview2/webview2-app/Program.cs
deleted file mode 100644
index 1c90d15c773a13dec7e76a5fa5c27f604a70e8d7..0000000000000000000000000000000000000000
--- a/tests/webview2/webview2-app/Program.cs
+++ /dev/null
@@ -1,16 +0,0 @@
-namespace webview2;
-
-static class Program
-{
-    /// <summary>
-    ///  The main entry point for the application.
-    /// </summary>
-    [STAThread]
-    static void Main()
-    {
-        // To customize application configuration such as set high DPI settings or default font,
-        // see https://aka.ms/applicationconfiguration.
-        ApplicationConfiguration.Initialize();
-        Application.Run(new Form1());
-    }    
-}
\ No newline at end of file
diff --git a/tests/webview2/webview2-app/webview2.csproj b/tests/webview2/webview2-app/webview2.csproj
deleted file mode 100644
index ef2fc1b7822e16deeda275a861bec1a91b90cae4..0000000000000000000000000000000000000000
--- a/tests/webview2/webview2-app/webview2.csproj
+++ /dev/null
@@ -1,15 +0,0 @@
-ï»¿<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <OutputType>WinExe</OutputType>
-    <TargetFramework>net6.0-windows</TargetFramework>
-    <Nullable>enable</Nullable>
-    <UseWindowsForms>true</UseWindowsForms>
-    <ImplicitUsings>enable</ImplicitUsings>
-  </PropertyGroup>
-
-  <ItemGroup>
-    <PackageReference Include="Microsoft.Web.WebView2" Version="1.0.1293.44" />
-  </ItemGroup>
-
-</Project>
\ No newline at end of file
diff --git a/tests/webview2/webview2-app/webview2.csproj.user b/tests/webview2/webview2-app/webview2.csproj.user
deleted file mode 100644
index 7814ea24efb1226638b58bbf50f1769939812f37..0000000000000000000000000000000000000000
--- a/tests/webview2/webview2-app/webview2.csproj.user
+++ /dev/null
@@ -1,8 +0,0 @@
-ï»¿<?xml version="1.0" encoding="utf-8"?>
-<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-    <ItemGroup>
-        <Compile Update="Form1.cs">
-            <SubType>Form</SubType>
-        </Compile>
-    </ItemGroup>
-</Project>
diff --git a/tsconfig.json b/tsconfig.json
index 767795f06919a8e12dc0bbbb13337417318c764e..8543fe7b2cbb48f7d5784e6ac79c1d39dcccfea3 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -28,7 +28,6 @@
     "packages/*/lib",
     "packages/html-reporter",
     "packages/playwright-ct-react",
-    "packages/playwright-ct-solid",
     "packages/playwright-ct-svelte",
     "packages/playwright-ct-vue",
     "packages/recorder",
diff --git a/utils/build/build-playwright-driver.sh b/utils/build/build-playwright-driver.sh
index 234976f453536966c9157509612af18c0f7d560e..463e59b704b1c489241ccc9716b53cde5ac7e396 100755
--- a/utils/build/build-playwright-driver.sh
+++ b/utils/build/build-playwright-driver.sh
@@ -4,7 +4,7 @@ set -x
 
 trap "cd $(pwd -P)" EXIT
 SCRIPT_PATH="$(cd "$(dirname "$0")" ; pwd -P)"
-NODE_VERSION="16.17.0" # autogenerated via ./update-playwright-driver-version.mjs
+NODE_VERSION="16.16.0" # autogenerated via ./update-playwright-driver-version.mjs
 
 cd "$(dirname "$0")"
 PACKAGE_VERSION=$(node -p "require('../../package.json').version")
diff --git a/utils/build/build.js b/utils/build/build.js
index 0a07a7e69601b7ce50d6144e82101a66f90924eb..fa64cc871d1bb4cf4e892453845ac5088139e658 100644
--- a/utils/build/build.js
+++ b/utils/build/build.js
@@ -308,7 +308,7 @@ copyFiles.push({
 });
 
 copyFiles.push({
-  files: 'packages/playwright-test/src/**/*.(js|sh)',
+  files: 'packages/playwright-test/src/**/*.js',
   from: 'packages/playwright-test/src',
   to: 'packages/playwright-test/lib',
   ignored: ['**/.eslintrc.js']
diff --git a/utils/build/run-driver-posix.sh b/utils/build/run-driver-posix.sh
index d00a15ba4208074a6aeae0234911d04c466cef49..d5a95cbffbff25c3479ccd5a3e238b5859fa477b 100755
--- a/utils/build/run-driver-posix.sh
+++ b/utils/build/run-driver-posix.sh
@@ -1,6 +1,3 @@
 #!/bin/sh
 SCRIPT_PATH="$(cd "$(dirname "$0")" ; pwd -P)"
-if [ -z "$PLAYWRIGHT_NODEJS_PATH" ]; then
-  PLAYWRIGHT_NODEJS_PATH="$SCRIPT_PATH/node"
-fi
-"$PLAYWRIGHT_NODEJS_PATH" "$SCRIPT_PATH/package/lib/cli/cli.js" "$@"
+"$SCRIPT_PATH/node" "$SCRIPT_PATH/package/lib/cli/cli.js" "$@"
diff --git a/utils/build/run-driver-win.cmd b/utils/build/run-driver-win.cmd
index 007cac8a7077561799a2a67d5fa0186f4fc738b3..47d2fc21d230fb5b82e85ec212bf56b227504fd7 100755
--- a/utils/build/run-driver-win.cmd
+++ b/utils/build/run-driver-win.cmd
@@ -1,4 +1,3 @@
 @ECHO OFF
 SETLOCAL
-IF %PLAYWRIGHT_NODEJS_PATH%x == x SET PLAYWRIGHT_NODEJS_PATH="%~dp0\node.exe"
-"%PLAYWRIGHT_NODEJS_PATH%" "%~dp0\package\lib\cli\cli.js" %*
+"%~dp0\node.exe" "%~dp0\package\lib\cli\cli.js" %*
diff --git a/utils/docker/Dockerfile.focal b/utils/docker/Dockerfile.focal
index f6db13a34a2fb9f9ca1940b6a8d0bef9bb9aa9b0..81bac7369c90c7e15093fdb5500add9b1619e82a 100644
--- a/utils/docker/Dockerfile.focal
+++ b/utils/docker/Dockerfile.focal
@@ -27,9 +27,7 @@ ENV PLAYWRIGHT_BROWSERS_PATH=/ms-playwright
 #    The package should be built beforehand from tip-of-tree Playwright.
 COPY ./playwright-core.tar.gz /tmp/playwright-core.tar.gz
 
-# 2. Bake in Playwright Agent.
-#    Playwright Agent is used to bake in browsers and browser dependencies,
-#    and run docker server later on.
+# 2. Bake in browsers & deps.
 #    Browsers will be downloaded in `/ms-playwright`.
 #    Note: make sure to set 777 to the registry so that any user can access
 #    registry.
@@ -40,4 +38,5 @@ RUN mkdir /ms-playwright && \
     npx playwright mark-docker-image "${DOCKER_IMAGE_NAME_TEMPLATE}" && \
     npx playwright install --with-deps && rm -rf /var/lib/apt/lists/* && \
     rm /tmp/playwright-core.tar.gz && \
+    rm -rf /ms-playwright-agent && \
     chmod -R 777 /ms-playwright
diff --git a/utils/doclint/cli.js b/utils/doclint/cli.js
index 073b98a8a9707242623e4089a2b8aacdf13f122f..fc5e977953a7ee5e60ad6f072ad6aa6a0724b814 100755
--- a/utils/doclint/cli.js
+++ b/utils/doclint/cli.js
@@ -74,19 +74,6 @@ async function run() {
   if (playwrightVersion.endsWith('-next'))
     playwrightVersion = playwrightVersion.substring(0, playwrightVersion.indexOf('-next'));
 
-  // Ensure browser versions in browsers.json. This is most important for WebKit
-  // since its version is hardcoded in Playwright library rather then in browser builds.
-  // @see https://github.com/microsoft/playwright/issues/15702
-  {
-    const browsersJSONPath = path.join(__dirname, '..', '..', 'packages/playwright-core/browsers.json');
-    const browsersJSON = JSON.parse(await fs.promises.readFile(browsersJSONPath, 'utf8'));
-    for (const browser of browsersJSON.browsers) {
-      if (versions[browser.name])
-        browser.browserVersion = versions[browser.name];
-    }
-    writeAssumeNoop(browsersJSONPath, JSON.stringify(browsersJSON, null, 2) + '\n', dirtyFiles);
-  }
-
   // Patch docker version in docs
   {
     const regex = new RegExp("(mcr.microsoft.com/playwright[^: ]*):?([^ ]*)");
@@ -141,9 +128,6 @@ async function run() {
           break;
       }
     }
-    const invalidConfigurations = Object.entries(devicesDescriptors).filter(([_, deviceDescriptor]) => deviceDescriptor.isMobile && deviceDescriptor.defaultBrowserType === 'firefox').map(([deviceName, deviceDescriptor]) => deviceName);
-    if (invalidConfigurations.length > 0)
-      throw new Error(`Invalid Device Configurations. isMobile with Firefox not supported: ${invalidConfigurations.join(', ')}`);
     writeAssumeNoop(devicesDescriptorsSourceFile, JSON.stringify(devicesDescriptors, null, 2), dirtyFiles);
   }
 
diff --git a/utils/doclint/generateDotnetApi.js b/utils/doclint/generateDotnetApi.js
index 8dc7c3460e4b390c1782827ed2e4caaba3b8b6ff..b129598bf0bed8c9961450edc7eee7f7b4dafea6 100644
--- a/utils/doclint/generateDotnetApi.js
+++ b/utils/doclint/generateDotnetApi.js
@@ -226,6 +226,11 @@ for (const [name, type] of modelTypes)
 for (const [name, literals] of enumTypes)
   renderEnum(name, literals);
 
+if (process.argv[3] !== '--skip-format') {
+  // run the formatting tool for .NET, to ensure the files are prepped
+  execSync(`dotnet format "${outputDir}"`);
+}
+
 /**
  * @param {string} name
  */
diff --git a/utils/doclint/templates/interface.cs b/utils/doclint/templates/interface.cs
index a0fadccb2d6a54d0910e5b7b8055e9a1bbedde20..e2b3da3c1f1ebc74d919ecd40add7cda2c2ff54f 100644
--- a/utils/doclint/templates/interface.cs
+++ b/utils/doclint/templates/interface.cs
@@ -37,8 +37,9 @@ using System.Threading.Tasks;
 
 #nullable enable
 
-namespace Microsoft.Playwright;
-
-[CONTENT]
+namespace Microsoft.Playwright
+{
+	[CONTENT]
+}
 
 #nullable disable
diff --git a/utils/generate_dotnet_channels.js b/utils/generate_dotnet_channels.js
index 8a65e64697aa3743f57d044ae15acc946ea4ada4..71e35aa5a9ae38b6c3395e9b7e4e6af3db605782 100644
--- a/utils/generate_dotnet_channels.js
+++ b/utils/generate_dotnet_channels.js
@@ -183,14 +183,14 @@ fs.mkdirSync(dir, { recursive: true });
 
 for (const [name, item] of Object.entries(protocol)) {
   if (item.type === 'interface') {
-    const init = objectType(item.initializer || {}, '');
+    const init = objectType(item.initializer || {}, '    ');
     const initializerName = name + 'Initializer';
     const superName = inherits.has(name) ? inherits.get(name) + 'Initializer' : null;
     writeCSharpClass(initializerName, superName, init.ts);
   } else if (item.type === 'object') {
     if (Object.keys(item.properties).length === 0)
       continue;
-    const init = objectType(item.properties, '', false, name);
+    const init = objectType(item.properties, '    ', false, name);
     writeCSharpClass(name, null, init.ts);
   }
 }
@@ -209,10 +209,11 @@ function writeCSharpClass(className, inheritFrom, serializedProperties) {
   channels_ts.push('using System.Collections.Generic;');
   channels_ts.push('using System.Text.Json.Serialization;');
   channels_ts.push(``);
-  channels_ts.push(`namespace Microsoft.Playwright.Transport.Protocol;`);
-  channels_ts.push(``);
-  channels_ts.push(`internal class ${className}${inheritFrom ? ' : ' + inheritFrom : ''}`);
+  channels_ts.push(`namespace Microsoft.Playwright.Transport.Protocol`);
+  channels_ts.push(`{`);
+  channels_ts.push(`    internal class ${className}${inheritFrom ? ' : ' + inheritFrom : ''}`);
   channels_ts.push(serializedProperties);
+  channels_ts.push(`}`);
   channels_ts.push(``);
   writeFile(`${className}.cs`, channels_ts.join('\n'));
 }
diff --git a/utils/generate_injected.js b/utils/generate_injected.js
index 3656fb3c536a4b0bdfb3086a71d67c4d7104c9ba..455b2f615eac652a5444dc8642bd0318cc5a9b7c 100644
--- a/utils/generate_injected.js
+++ b/utils/generate_injected.js
@@ -29,40 +29,6 @@ const injectedScripts = [
   path.join(ROOT, 'packages', 'playwright-core', 'src', 'server', 'injected', 'recorder.ts'),
 ];
 
-const modulePrefix = `"use strict";
-let __export = (target, all) => {
-  for (var name in all)
-    target[name] = all[name];
-};
-let __commonJS = cb => function __require() {
-  let fn;
-  for (const name in cb) {
-    fn = cb[name];
-    break;
-  }
-  const exports = {};
-  fn(exports);
-  return exports;
-};
-let __toESM = mod => ({ ...mod, 'default': mod });
-let __toCommonJS = mod =>  ({ ...mod, __esModule: true });
-`;
-
-async function replaceEsbuildHeader(content, outFileJs) {
-  const sourcesStart = content.indexOf('// packages/playwright-core/src/server');
-  if (sourcesStart === -1)
-    throw new Error(`Did not find start of bundled code in ${outFileJs}`);
-
-  const preambule = content.substring(0, sourcesStart);
-  // Replace standard esbuild definition with our own which do not depend on builtins.
-  // See https://github.com/microsoft/playwright/issues/17029
-  if (preambule.indexOf('__toESM') !== -1 || preambule.indexOf('__toCommonJS') !== -1) {
-    content = modulePrefix + content.substring(sourcesStart);
-    await fs.promises.writeFile(outFileJs, content);
-  }
-  return content;
-}
-
 (async () => {
   const generatedFolder = path.join(ROOT, 'packages', 'playwright-core', 'src', 'generated');
   await fs.promises.mkdir(generatedFolder, { recursive: true });
@@ -77,9 +43,7 @@ async function replaceEsbuildHeader(content, outFileJs) {
       target: 'ES2019'
     });
     const baseName = path.basename(injected);
-    const outFileJs = path.join(outdir, baseName.replace('.ts', '.js'));
-    let content = await fs.promises.readFile(outFileJs, 'utf-8');
-    content = await replaceEsbuildHeader(content, outFileJs);
+    const content = await fs.promises.readFile(path.join(outdir, baseName.replace('.ts', '.js')), 'utf-8');
     const newContent = `export const source = ${JSON.stringify(content)};`;
     await fs.promises.writeFile(path.join(generatedFolder, baseName.replace('.ts', 'Source.ts')), newContent);
   }
diff --git a/utils/generate_types/overrides-testReporter.d.ts b/utils/generate_types/overrides-testReporter.d.ts
index 1837fca003766a655a52213793d039a538a2cfa6..019417fb95e0c898ab69ab4c7fbbfcbc58275ab2 100644
--- a/utils/generate_types/overrides-testReporter.d.ts
+++ b/utils/generate_types/overrides-testReporter.d.ts
@@ -80,7 +80,6 @@ export interface JSONReportSpec {
   title: string;
   ok: boolean;
   tests: JSONReportTest[];
-  id: string;
   file: string;
   line: number;
   column: number;
@@ -104,7 +103,6 @@ export interface JSONReportTestResult {
   stderr: JSONReportSTDIOEntry[];
   retry: number;
   steps?: JSONReportTestStep[];
-  startTime: Date;
   attachments: {
     name: string;
     path?: string;
diff --git a/utils/generate_types/overrides.d.ts b/utils/generate_types/overrides.d.ts
index 760954e0c8ed6cf9e2d0351fb28b1cf57938fd6f..4c9ab930dca0450005b0e525d32b5992162aa982 100644
--- a/utils/generate_types/overrides.d.ts
+++ b/utils/generate_types/overrides.d.ts
@@ -232,7 +232,7 @@ type AccessibilityNode = {
   children?: AccessibilityNode[];
 }
 
-export const devices: Devices;
+export const devices: Devices & DeviceDescriptor[];
 
 //@ts-ignore this will be any if electron is not installed
 type ElectronType = typeof import('electron');
diff --git a/utils/generate_types/test/test.ts b/utils/generate_types/test/test.ts
index 00be3d3e06a8a1c6c77a125601f48d1b28d46ed6..0f26e3c8fee796ba6c14f9eb534f732da8046a1d 100644
--- a/utils/generate_types/test/test.ts
+++ b/utils/generate_types/test/test.ts
@@ -775,7 +775,7 @@ playwright.chromium.launch().then(async browser => {
     const isMobileAssertion: AssertType<boolean, typeof iPhone.isMobile> = true;
   }
   {
-    const agents = Object.entries(playwright.devices).map(([name, descriptor]) => descriptor.userAgent);
+    const agents = playwright.devices.map(x => x.userAgent);
     const assertion: AssertType<string[], typeof agents> = true;
   }
 
diff --git a/utils/upload_flakiness_dashboard.sh b/utils/upload_flakiness_dashboard.sh
index 3af4e60692529351734a6f0ac7aea4b6a6350521..caf6d6fee73da1f1d89a21d233257a215a89772a 100755
--- a/utils/upload_flakiness_dashboard.sh
+++ b/utils/upload_flakiness_dashboard.sh
@@ -80,7 +80,6 @@ EMBED_METADATA_SCRIPT=$(cat <<EOF
     commitTitle: process.env.COMMIT_TITLE,
     commitAuthorName: process.env.COMMIT_AUTHOR_NAME,
     commitAuthorEmail: process.env.COMMIT_AUTHOR_EMAIL,
-    gitBranchName: process.env.GITHUB_REF_NAME,
   };
   console.log(JSON.stringify(json));
 EOF
@@ -92,13 +91,5 @@ node -e "${EMBED_METADATA_SCRIPT}" "$1" > "${REPORT_NAME}"
 gzip "${REPORT_NAME}"
 
 az storage blob upload --connection-string "${FLAKINESS_CONNECTION_STRING}" -c uploads -f "${REPORT_NAME}.gz" -n "${REPORT_NAME}.gz"
-
-UTC_DATE=$(cat <<EOF | node
-  const date = new Date();
-  console.log([date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()].join('-'));
-EOF
-)
-
-az storage blob upload --connection-string "${FLAKINESS_CONNECTION_STRING}" -c uploads-permanent -f "${REPORT_NAME}.gz" -n "${UTC_DATE}-${REPORT_NAME}.gz"
 rm -rf "${REPORT_NAME}.gz"
 
diff --git a/utils/workspace.js b/utils/workspace.js
index d7486f9aecb4db209ab2ea5d5433ffa75e913eff..c146fa612928104572522da26786574df58075fb 100755
--- a/utils/workspace.js
+++ b/utils/workspace.js
@@ -183,11 +183,6 @@ const workspace = new Workspace(ROOT_PATH, [
     path: path.join(ROOT_PATH, 'packages', 'playwright-ct-react'),
     files: ['LICENSE'],
   }),
-  new PWPackage({
-    name: '@playwright/experimental-ct-solid',
-    path: path.join(ROOT_PATH, 'packages', 'playwright-ct-solid'),
-    files: ['LICENSE'],
-  }),
   new PWPackage({
     name: '@playwright/experimental-ct-svelte',
     path: path.join(ROOT_PATH, 'packages', 'playwright-ct-svelte'),
